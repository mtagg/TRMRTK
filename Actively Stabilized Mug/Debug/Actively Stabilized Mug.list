
Actively Stabilized Mug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bf8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003d80  08003d80  00013d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003db8  08003db8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003db8  08003db8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003db8  08003db8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003db8  08003db8  00013db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dbc  08003dbc  00013dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  2000000c  08003dcc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  08003dcc  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f7eb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d77  00000000  00000000  0002f827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  000315a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be0  00000000  00000000  00032238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b66b  00000000  00000000  00032e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a50  00000000  00000000  0004e483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2413  00000000  00000000  0005eed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001012e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003490  00000000  00000000  00101338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003d68 	.word	0x08003d68

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003d68 	.word	0x08003d68

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fd1c 	bl	8000c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f813 	bl	80001fa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 fa54 	bl	8000680 <MX_GPIO_Init>
  MX_ADC1_Init();
 80001d8:	f000 f86c 	bl	80002b4 <MX_ADC1_Init>
  MX_I2C1_Init();
 80001dc:	f000 f8c6 	bl	800036c <MX_I2C1_Init>
  MX_I2C2_Init();
 80001e0:	f000 f902 	bl	80003e8 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80001e4:	f000 f9bc 	bl	8000560 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80001e8:	f000 f9ea 	bl	80005c0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80001ec:	f000 fa18 	bl	8000620 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 80001f0:	f000 f93a 	bl	8000468 <MX_SPI2_Init>
  MX_SPI3_Init();
 80001f4:	f000 f976 	bl	80004e4 <MX_SPI3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f8:	e7fe      	b.n	80001f8 <main+0x30>

080001fa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001fa:	b580      	push	{r7, lr}
 80001fc:	b09c      	sub	sp, #112	; 0x70
 80001fe:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000200:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000204:	2228      	movs	r2, #40	; 0x28
 8000206:	2100      	movs	r1, #0
 8000208:	4618      	mov	r0, r3
 800020a:	f003 fda5 	bl	8003d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800020e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]
 800021c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800021e:	463b      	mov	r3, r7
 8000220:	2234      	movs	r2, #52	; 0x34
 8000222:	2100      	movs	r1, #0
 8000224:	4618      	mov	r0, r3
 8000226:	f003 fd97 	bl	8003d58 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800022a:	2302      	movs	r3, #2
 800022c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022e:	2301      	movs	r3, #1
 8000230:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000232:	2310      	movs	r3, #16
 8000234:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000236:	2302      	movs	r3, #2
 8000238:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800023a:	2300      	movs	r3, #0
 800023c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800023e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000242:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000244:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000248:	4618      	mov	r0, r3
 800024a:	f001 fd7b 	bl	8001d44 <HAL_RCC_OscConfig>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000254:	f000 fa7a 	bl	800074c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000258:	230f      	movs	r3, #15
 800025a:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800025c:	2300      	movs	r3, #0
 800025e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000260:	2300      	movs	r3, #0
 8000262:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800026c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f002 fda4 	bl	8002dc0 <HAL_RCC_ClockConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800027e:	f000 fa65 	bl	800074c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8000282:	23e1      	movs	r3, #225	; 0xe1
 8000284:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_ADC1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000286:	2300      	movs	r3, #0
 8000288:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800028a:	2300      	movs	r3, #0
 800028c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 800028e:	2300      	movs	r3, #0
 8000290:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8000292:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000296:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000298:	463b      	mov	r3, r7
 800029a:	4618      	mov	r0, r3
 800029c:	f002 ffc6 	bl	800322c <HAL_RCCEx_PeriphCLKConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80002a6:	f000 fa51 	bl	800074c <Error_Handler>
  }
}
 80002aa:	bf00      	nop
 80002ac:	3770      	adds	r7, #112	; 0x70
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
	...

080002b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b086      	sub	sp, #24
 80002b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002ba:	463b      	mov	r3, r7
 80002bc:	2200      	movs	r2, #0
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	605a      	str	r2, [r3, #4]
 80002c2:	609a      	str	r2, [r3, #8]
 80002c4:	60da      	str	r2, [r3, #12]
 80002c6:	611a      	str	r2, [r3, #16]
 80002c8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002ca:	4b27      	ldr	r3, [pc, #156]	; (8000368 <MX_ADC1_Init+0xb4>)
 80002cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002d2:	4b25      	ldr	r3, [pc, #148]	; (8000368 <MX_ADC1_Init+0xb4>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002d8:	4b23      	ldr	r3, [pc, #140]	; (8000368 <MX_ADC1_Init+0xb4>)
 80002da:	2200      	movs	r2, #0
 80002dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002de:	4b22      	ldr	r3, [pc, #136]	; (8000368 <MX_ADC1_Init+0xb4>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002e4:	4b20      	ldr	r3, [pc, #128]	; (8000368 <MX_ADC1_Init+0xb4>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002ea:	4b1f      	ldr	r3, [pc, #124]	; (8000368 <MX_ADC1_Init+0xb4>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002f2:	4b1d      	ldr	r3, [pc, #116]	; (8000368 <MX_ADC1_Init+0xb4>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002f8:	4b1b      	ldr	r3, [pc, #108]	; (8000368 <MX_ADC1_Init+0xb4>)
 80002fa:	2201      	movs	r2, #1
 80002fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002fe:	4b1a      	ldr	r3, [pc, #104]	; (8000368 <MX_ADC1_Init+0xb4>)
 8000300:	2200      	movs	r2, #0
 8000302:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000304:	4b18      	ldr	r3, [pc, #96]	; (8000368 <MX_ADC1_Init+0xb4>)
 8000306:	2201      	movs	r2, #1
 8000308:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800030a:	4b17      	ldr	r3, [pc, #92]	; (8000368 <MX_ADC1_Init+0xb4>)
 800030c:	2200      	movs	r2, #0
 800030e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000312:	4b15      	ldr	r3, [pc, #84]	; (8000368 <MX_ADC1_Init+0xb4>)
 8000314:	2204      	movs	r2, #4
 8000316:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000318:	4b13      	ldr	r3, [pc, #76]	; (8000368 <MX_ADC1_Init+0xb4>)
 800031a:	2200      	movs	r2, #0
 800031c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800031e:	4b12      	ldr	r3, [pc, #72]	; (8000368 <MX_ADC1_Init+0xb4>)
 8000320:	2200      	movs	r2, #0
 8000322:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000324:	4810      	ldr	r0, [pc, #64]	; (8000368 <MX_ADC1_Init+0xb4>)
 8000326:	f000 fcd5 	bl	8000cd4 <HAL_ADC_Init>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8000330:	f000 fa0c 	bl	800074c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000334:	2301      	movs	r3, #1
 8000336:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000338:	2301      	movs	r3, #1
 800033a:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800033c:	2301      	movs	r3, #1
 800033e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000340:	2300      	movs	r3, #0
 8000342:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000344:	2300      	movs	r3, #0
 8000346:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000348:	2300      	movs	r3, #0
 800034a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800034c:	463b      	mov	r3, r7
 800034e:	4619      	mov	r1, r3
 8000350:	4805      	ldr	r0, [pc, #20]	; (8000368 <MX_ADC1_Init+0xb4>)
 8000352:	f000 fe45 	bl	8000fe0 <HAL_ADC_ConfigChannel>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800035c:	f000 f9f6 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000360:	bf00      	nop
 8000362:	3718      	adds	r7, #24
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	20000028 	.word	0x20000028

0800036c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000370:	4b1b      	ldr	r3, [pc, #108]	; (80003e0 <MX_I2C1_Init+0x74>)
 8000372:	4a1c      	ldr	r2, [pc, #112]	; (80003e4 <MX_I2C1_Init+0x78>)
 8000374:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000376:	4b1a      	ldr	r3, [pc, #104]	; (80003e0 <MX_I2C1_Init+0x74>)
 8000378:	f240 220b 	movw	r2, #523	; 0x20b
 800037c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800037e:	4b18      	ldr	r3, [pc, #96]	; (80003e0 <MX_I2C1_Init+0x74>)
 8000380:	2200      	movs	r2, #0
 8000382:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000384:	4b16      	ldr	r3, [pc, #88]	; (80003e0 <MX_I2C1_Init+0x74>)
 8000386:	2201      	movs	r2, #1
 8000388:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800038a:	4b15      	ldr	r3, [pc, #84]	; (80003e0 <MX_I2C1_Init+0x74>)
 800038c:	2200      	movs	r2, #0
 800038e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000390:	4b13      	ldr	r3, [pc, #76]	; (80003e0 <MX_I2C1_Init+0x74>)
 8000392:	2200      	movs	r2, #0
 8000394:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000396:	4b12      	ldr	r3, [pc, #72]	; (80003e0 <MX_I2C1_Init+0x74>)
 8000398:	2200      	movs	r2, #0
 800039a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800039c:	4b10      	ldr	r3, [pc, #64]	; (80003e0 <MX_I2C1_Init+0x74>)
 800039e:	2200      	movs	r2, #0
 80003a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003a2:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <MX_I2C1_Init+0x74>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003a8:	480d      	ldr	r0, [pc, #52]	; (80003e0 <MX_I2C1_Init+0x74>)
 80003aa:	f001 fba5 	bl	8001af8 <HAL_I2C_Init>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003b4:	f000 f9ca 	bl	800074c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003b8:	2100      	movs	r1, #0
 80003ba:	4809      	ldr	r0, [pc, #36]	; (80003e0 <MX_I2C1_Init+0x74>)
 80003bc:	f001 fc2b 	bl	8001c16 <HAL_I2CEx_ConfigAnalogFilter>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80003c6:	f000 f9c1 	bl	800074c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003ca:	2100      	movs	r1, #0
 80003cc:	4804      	ldr	r0, [pc, #16]	; (80003e0 <MX_I2C1_Init+0x74>)
 80003ce:	f001 fc6d 	bl	8001cac <HAL_I2CEx_ConfigDigitalFilter>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80003d8:	f000 f9b8 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003dc:	bf00      	nop
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	20000078 	.word	0x20000078
 80003e4:	40005400 	.word	0x40005400

080003e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80003ec:	4b1b      	ldr	r3, [pc, #108]	; (800045c <MX_I2C2_Init+0x74>)
 80003ee:	4a1c      	ldr	r2, [pc, #112]	; (8000460 <MX_I2C2_Init+0x78>)
 80003f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 80003f2:	4b1a      	ldr	r3, [pc, #104]	; (800045c <MX_I2C2_Init+0x74>)
 80003f4:	4a1b      	ldr	r2, [pc, #108]	; (8000464 <MX_I2C2_Init+0x7c>)
 80003f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80003f8:	4b18      	ldr	r3, [pc, #96]	; (800045c <MX_I2C2_Init+0x74>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003fe:	4b17      	ldr	r3, [pc, #92]	; (800045c <MX_I2C2_Init+0x74>)
 8000400:	2201      	movs	r2, #1
 8000402:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000404:	4b15      	ldr	r3, [pc, #84]	; (800045c <MX_I2C2_Init+0x74>)
 8000406:	2200      	movs	r2, #0
 8000408:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800040a:	4b14      	ldr	r3, [pc, #80]	; (800045c <MX_I2C2_Init+0x74>)
 800040c:	2200      	movs	r2, #0
 800040e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000410:	4b12      	ldr	r3, [pc, #72]	; (800045c <MX_I2C2_Init+0x74>)
 8000412:	2200      	movs	r2, #0
 8000414:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000416:	4b11      	ldr	r3, [pc, #68]	; (800045c <MX_I2C2_Init+0x74>)
 8000418:	2200      	movs	r2, #0
 800041a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800041c:	4b0f      	ldr	r3, [pc, #60]	; (800045c <MX_I2C2_Init+0x74>)
 800041e:	2200      	movs	r2, #0
 8000420:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000422:	480e      	ldr	r0, [pc, #56]	; (800045c <MX_I2C2_Init+0x74>)
 8000424:	f001 fb68 	bl	8001af8 <HAL_I2C_Init>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800042e:	f000 f98d 	bl	800074c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000432:	2100      	movs	r1, #0
 8000434:	4809      	ldr	r0, [pc, #36]	; (800045c <MX_I2C2_Init+0x74>)
 8000436:	f001 fbee 	bl	8001c16 <HAL_I2CEx_ConfigAnalogFilter>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000440:	f000 f984 	bl	800074c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000444:	2100      	movs	r1, #0
 8000446:	4805      	ldr	r0, [pc, #20]	; (800045c <MX_I2C2_Init+0x74>)
 8000448:	f001 fc30 	bl	8001cac <HAL_I2CEx_ConfigDigitalFilter>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000452:	f000 f97b 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000456:	bf00      	nop
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	200000c4 	.word	0x200000c4
 8000460:	40005800 	.word	0x40005800
 8000464:	2000090e 	.word	0x2000090e

08000468 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800046c:	4b1b      	ldr	r3, [pc, #108]	; (80004dc <MX_SPI2_Init+0x74>)
 800046e:	4a1c      	ldr	r2, [pc, #112]	; (80004e0 <MX_SPI2_Init+0x78>)
 8000470:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000472:	4b1a      	ldr	r3, [pc, #104]	; (80004dc <MX_SPI2_Init+0x74>)
 8000474:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000478:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800047a:	4b18      	ldr	r3, [pc, #96]	; (80004dc <MX_SPI2_Init+0x74>)
 800047c:	2200      	movs	r2, #0
 800047e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000480:	4b16      	ldr	r3, [pc, #88]	; (80004dc <MX_SPI2_Init+0x74>)
 8000482:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000486:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000488:	4b14      	ldr	r3, [pc, #80]	; (80004dc <MX_SPI2_Init+0x74>)
 800048a:	2200      	movs	r2, #0
 800048c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800048e:	4b13      	ldr	r3, [pc, #76]	; (80004dc <MX_SPI2_Init+0x74>)
 8000490:	2200      	movs	r2, #0
 8000492:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000494:	4b11      	ldr	r3, [pc, #68]	; (80004dc <MX_SPI2_Init+0x74>)
 8000496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800049a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800049c:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <MX_SPI2_Init+0x74>)
 800049e:	2200      	movs	r2, #0
 80004a0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <MX_SPI2_Init+0x74>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80004a8:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <MX_SPI2_Init+0x74>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <MX_SPI2_Init+0x74>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80004b4:	4b09      	ldr	r3, [pc, #36]	; (80004dc <MX_SPI2_Init+0x74>)
 80004b6:	2207      	movs	r2, #7
 80004b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004ba:	4b08      	ldr	r3, [pc, #32]	; (80004dc <MX_SPI2_Init+0x74>)
 80004bc:	2200      	movs	r2, #0
 80004be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <MX_SPI2_Init+0x74>)
 80004c2:	2208      	movs	r2, #8
 80004c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80004c6:	4805      	ldr	r0, [pc, #20]	; (80004dc <MX_SPI2_Init+0x74>)
 80004c8:	f003 f842 	bl	8003550 <HAL_SPI_Init>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80004d2:	f000 f93b 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	20000110 	.word	0x20000110
 80004e0:	40003800 	.word	0x40003800

080004e4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80004e8:	4b1b      	ldr	r3, [pc, #108]	; (8000558 <MX_SPI3_Init+0x74>)
 80004ea:	4a1c      	ldr	r2, [pc, #112]	; (800055c <MX_SPI3_Init+0x78>)
 80004ec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80004ee:	4b1a      	ldr	r3, [pc, #104]	; (8000558 <MX_SPI3_Init+0x74>)
 80004f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004f4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80004f6:	4b18      	ldr	r3, [pc, #96]	; (8000558 <MX_SPI3_Init+0x74>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80004fc:	4b16      	ldr	r3, [pc, #88]	; (8000558 <MX_SPI3_Init+0x74>)
 80004fe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000502:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000504:	4b14      	ldr	r3, [pc, #80]	; (8000558 <MX_SPI3_Init+0x74>)
 8000506:	2200      	movs	r2, #0
 8000508:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800050a:	4b13      	ldr	r3, [pc, #76]	; (8000558 <MX_SPI3_Init+0x74>)
 800050c:	2200      	movs	r2, #0
 800050e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000510:	4b11      	ldr	r3, [pc, #68]	; (8000558 <MX_SPI3_Init+0x74>)
 8000512:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000516:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000518:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <MX_SPI3_Init+0x74>)
 800051a:	2200      	movs	r2, #0
 800051c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800051e:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <MX_SPI3_Init+0x74>)
 8000520:	2200      	movs	r2, #0
 8000522:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000524:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <MX_SPI3_Init+0x74>)
 8000526:	2200      	movs	r2, #0
 8000528:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800052a:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <MX_SPI3_Init+0x74>)
 800052c:	2200      	movs	r2, #0
 800052e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000530:	4b09      	ldr	r3, [pc, #36]	; (8000558 <MX_SPI3_Init+0x74>)
 8000532:	2207      	movs	r2, #7
 8000534:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000536:	4b08      	ldr	r3, [pc, #32]	; (8000558 <MX_SPI3_Init+0x74>)
 8000538:	2200      	movs	r2, #0
 800053a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <MX_SPI3_Init+0x74>)
 800053e:	2208      	movs	r2, #8
 8000540:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000542:	4805      	ldr	r0, [pc, #20]	; (8000558 <MX_SPI3_Init+0x74>)
 8000544:	f003 f804 	bl	8003550 <HAL_SPI_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800054e:	f000 f8fd 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	20000174 	.word	0x20000174
 800055c:	40003c00 	.word	0x40003c00

08000560 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000564:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <MX_USART1_UART_Init+0x58>)
 8000566:	4a15      	ldr	r2, [pc, #84]	; (80005bc <MX_USART1_UART_Init+0x5c>)
 8000568:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800056a:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <MX_USART1_UART_Init+0x58>)
 800056c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000570:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000572:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <MX_USART1_UART_Init+0x58>)
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000578:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <MX_USART1_UART_Init+0x58>)
 800057a:	2200      	movs	r2, #0
 800057c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <MX_USART1_UART_Init+0x58>)
 8000580:	2200      	movs	r2, #0
 8000582:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000584:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <MX_USART1_UART_Init+0x58>)
 8000586:	220c      	movs	r2, #12
 8000588:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <MX_USART1_UART_Init+0x58>)
 800058c:	2200      	movs	r2, #0
 800058e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000590:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <MX_USART1_UART_Init+0x58>)
 8000592:	2200      	movs	r2, #0
 8000594:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000596:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <MX_USART1_UART_Init+0x58>)
 8000598:	2200      	movs	r2, #0
 800059a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <MX_USART1_UART_Init+0x58>)
 800059e:	2200      	movs	r2, #0
 80005a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005a2:	4805      	ldr	r0, [pc, #20]	; (80005b8 <MX_USART1_UART_Init+0x58>)
 80005a4:	f003 f87f 	bl	80036a6 <HAL_UART_Init>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80005ae:	f000 f8cd 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	200001d8 	.word	0x200001d8
 80005bc:	40013800 	.word	0x40013800

080005c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005c4:	4b14      	ldr	r3, [pc, #80]	; (8000618 <MX_USART2_UART_Init+0x58>)
 80005c6:	4a15      	ldr	r2, [pc, #84]	; (800061c <MX_USART2_UART_Init+0x5c>)
 80005c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005ca:	4b13      	ldr	r3, [pc, #76]	; (8000618 <MX_USART2_UART_Init+0x58>)
 80005cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <MX_USART2_UART_Init+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005d8:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <MX_USART2_UART_Init+0x58>)
 80005da:	2200      	movs	r2, #0
 80005dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <MX_USART2_UART_Init+0x58>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_USART2_UART_Init+0x58>)
 80005e6:	220c      	movs	r2, #12
 80005e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <MX_USART2_UART_Init+0x58>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f0:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_USART2_UART_Init+0x58>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005f6:	4b08      	ldr	r3, [pc, #32]	; (8000618 <MX_USART2_UART_Init+0x58>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_USART2_UART_Init+0x58>)
 80005fe:	2200      	movs	r2, #0
 8000600:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000602:	4805      	ldr	r0, [pc, #20]	; (8000618 <MX_USART2_UART_Init+0x58>)
 8000604:	f003 f84f 	bl	80036a6 <HAL_UART_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800060e:	f000 f89d 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	2000025c 	.word	0x2000025c
 800061c:	40004400 	.word	0x40004400

08000620 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000624:	4b14      	ldr	r3, [pc, #80]	; (8000678 <MX_USART3_UART_Init+0x58>)
 8000626:	4a15      	ldr	r2, [pc, #84]	; (800067c <MX_USART3_UART_Init+0x5c>)
 8000628:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800062a:	4b13      	ldr	r3, [pc, #76]	; (8000678 <MX_USART3_UART_Init+0x58>)
 800062c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000630:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_USART3_UART_Init+0x58>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <MX_USART3_UART_Init+0x58>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <MX_USART3_UART_Init+0x58>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <MX_USART3_UART_Init+0x58>)
 8000646:	220c      	movs	r2, #12
 8000648:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <MX_USART3_UART_Init+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_USART3_UART_Init+0x58>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000656:	4b08      	ldr	r3, [pc, #32]	; (8000678 <MX_USART3_UART_Init+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_USART3_UART_Init+0x58>)
 800065e:	2200      	movs	r2, #0
 8000660:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <MX_USART3_UART_Init+0x58>)
 8000664:	f003 f81f 	bl	80036a6 <HAL_UART_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800066e:	f000 f86d 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	200002e0 	.word	0x200002e0
 800067c:	40004800 	.word	0x40004800

08000680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000696:	4b2a      	ldr	r3, [pc, #168]	; (8000740 <MX_GPIO_Init+0xc0>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	4a29      	ldr	r2, [pc, #164]	; (8000740 <MX_GPIO_Init+0xc0>)
 800069c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006a0:	6153      	str	r3, [r2, #20]
 80006a2:	4b27      	ldr	r3, [pc, #156]	; (8000740 <MX_GPIO_Init+0xc0>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80006aa:	613b      	str	r3, [r7, #16]
 80006ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ae:	4b24      	ldr	r3, [pc, #144]	; (8000740 <MX_GPIO_Init+0xc0>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	4a23      	ldr	r2, [pc, #140]	; (8000740 <MX_GPIO_Init+0xc0>)
 80006b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006b8:	6153      	str	r3, [r2, #20]
 80006ba:	4b21      	ldr	r3, [pc, #132]	; (8000740 <MX_GPIO_Init+0xc0>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <MX_GPIO_Init+0xc0>)
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	4a1d      	ldr	r2, [pc, #116]	; (8000740 <MX_GPIO_Init+0xc0>)
 80006cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d0:	6153      	str	r3, [r2, #20]
 80006d2:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <MX_GPIO_Init+0xc0>)
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006de:	4b18      	ldr	r3, [pc, #96]	; (8000740 <MX_GPIO_Init+0xc0>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	4a17      	ldr	r2, [pc, #92]	; (8000740 <MX_GPIO_Init+0xc0>)
 80006e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006e8:	6153      	str	r3, [r2, #20]
 80006ea:	4b15      	ldr	r3, [pc, #84]	; (8000740 <MX_GPIO_Init+0xc0>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2106      	movs	r1, #6
 80006fa:	4812      	ldr	r0, [pc, #72]	; (8000744 <MX_GPIO_Init+0xc4>)
 80006fc:	f001 f9e4 	bl	8001ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000700:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000706:	2300      	movs	r3, #0
 8000708:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	4619      	mov	r1, r3
 8000714:	480c      	ldr	r0, [pc, #48]	; (8000748 <MX_GPIO_Init+0xc8>)
 8000716:	f001 f865 	bl	80017e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800071a:	2306      	movs	r3, #6
 800071c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071e:	2301      	movs	r3, #1
 8000720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000726:	2300      	movs	r3, #0
 8000728:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	4619      	mov	r1, r3
 8000730:	4804      	ldr	r0, [pc, #16]	; (8000744 <MX_GPIO_Init+0xc4>)
 8000732:	f001 f857 	bl	80017e4 <HAL_GPIO_Init>

}
 8000736:	bf00      	nop
 8000738:	3728      	adds	r7, #40	; 0x28
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40021000 	.word	0x40021000
 8000744:	48000400 	.word	0x48000400
 8000748:	48000800 	.word	0x48000800

0800074c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000750:	b672      	cpsid	i
}
 8000752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000754:	e7fe      	b.n	8000754 <Error_Handler+0x8>
	...

08000758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <HAL_MspInit+0x44>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	4a0e      	ldr	r2, [pc, #56]	; (800079c <HAL_MspInit+0x44>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6193      	str	r3, [r2, #24]
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <HAL_MspInit+0x44>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <HAL_MspInit+0x44>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	4a08      	ldr	r2, [pc, #32]	; (800079c <HAL_MspInit+0x44>)
 800077c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000780:	61d3      	str	r3, [r2, #28]
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <HAL_MspInit+0x44>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40021000 	.word	0x40021000

080007a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	; 0x28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007c0:	d124      	bne.n	800080c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007c2:	4b14      	ldr	r3, [pc, #80]	; (8000814 <HAL_ADC_MspInit+0x74>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	4a13      	ldr	r2, [pc, #76]	; (8000814 <HAL_ADC_MspInit+0x74>)
 80007c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007cc:	6153      	str	r3, [r2, #20]
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <HAL_ADC_MspInit+0x74>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <HAL_ADC_MspInit+0x74>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	4a0d      	ldr	r2, [pc, #52]	; (8000814 <HAL_ADC_MspInit+0x74>)
 80007e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e4:	6153      	str	r3, [r2, #20]
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <HAL_ADC_MspInit+0x74>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC1__Pin|ADC1_A1_Pin|ADC2__Pin|ADC2_A3_Pin;
 80007f2:	230f      	movs	r3, #15
 80007f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f6:	2303      	movs	r3, #3
 80007f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	4619      	mov	r1, r3
 8000804:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000808:	f000 ffec 	bl	80017e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800080c:	bf00      	nop
 800080e:	3728      	adds	r7, #40	; 0x28
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40021000 	.word	0x40021000

08000818 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08c      	sub	sp, #48	; 0x30
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a2e      	ldr	r2, [pc, #184]	; (80008f0 <HAL_I2C_MspInit+0xd8>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d128      	bne.n	800088c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	4b2e      	ldr	r3, [pc, #184]	; (80008f4 <HAL_I2C_MspInit+0xdc>)
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	4a2d      	ldr	r2, [pc, #180]	; (80008f4 <HAL_I2C_MspInit+0xdc>)
 8000840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000844:	6153      	str	r3, [r2, #20]
 8000846:	4b2b      	ldr	r3, [pc, #172]	; (80008f4 <HAL_I2C_MspInit+0xdc>)
 8000848:	695b      	ldr	r3, [r3, #20]
 800084a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800084e:	61bb      	str	r3, [r7, #24]
 8000850:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000852:	23c0      	movs	r3, #192	; 0xc0
 8000854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000856:	2312      	movs	r3, #18
 8000858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800085e:	2303      	movs	r3, #3
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000862:	2304      	movs	r3, #4
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	4822      	ldr	r0, [pc, #136]	; (80008f8 <HAL_I2C_MspInit+0xe0>)
 800086e:	f000 ffb9 	bl	80017e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000872:	4b20      	ldr	r3, [pc, #128]	; (80008f4 <HAL_I2C_MspInit+0xdc>)
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	4a1f      	ldr	r2, [pc, #124]	; (80008f4 <HAL_I2C_MspInit+0xdc>)
 8000878:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800087c:	61d3      	str	r3, [r2, #28]
 800087e:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <HAL_I2C_MspInit+0xdc>)
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000886:	617b      	str	r3, [r7, #20]
 8000888:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800088a:	e02c      	b.n	80008e6 <HAL_I2C_MspInit+0xce>
  else if(hi2c->Instance==I2C2)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a1a      	ldr	r2, [pc, #104]	; (80008fc <HAL_I2C_MspInit+0xe4>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d127      	bne.n	80008e6 <HAL_I2C_MspInit+0xce>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <HAL_I2C_MspInit+0xdc>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	4a16      	ldr	r2, [pc, #88]	; (80008f4 <HAL_I2C_MspInit+0xdc>)
 800089c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008a0:	6153      	str	r3, [r2, #20]
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <HAL_I2C_MspInit+0xdc>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008ae:	2303      	movs	r3, #3
 80008b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008b2:	2312      	movs	r3, #18
 80008b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ba:	2303      	movs	r3, #3
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80008be:	2304      	movs	r3, #4
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	480d      	ldr	r0, [pc, #52]	; (8000900 <HAL_I2C_MspInit+0xe8>)
 80008ca:	f000 ff8b 	bl	80017e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <HAL_I2C_MspInit+0xdc>)
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	4a08      	ldr	r2, [pc, #32]	; (80008f4 <HAL_I2C_MspInit+0xdc>)
 80008d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008d8:	61d3      	str	r3, [r2, #28]
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_I2C_MspInit+0xdc>)
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
}
 80008e6:	bf00      	nop
 80008e8:	3730      	adds	r7, #48	; 0x30
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40005400 	.word	0x40005400
 80008f4:	40021000 	.word	0x40021000
 80008f8:	48000400 	.word	0x48000400
 80008fc:	40005800 	.word	0x40005800
 8000900:	48001400 	.word	0x48001400

08000904 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08c      	sub	sp, #48	; 0x30
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a2e      	ldr	r2, [pc, #184]	; (80009dc <HAL_SPI_MspInit+0xd8>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d129      	bne.n	800097a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000926:	4b2e      	ldr	r3, [pc, #184]	; (80009e0 <HAL_SPI_MspInit+0xdc>)
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	4a2d      	ldr	r2, [pc, #180]	; (80009e0 <HAL_SPI_MspInit+0xdc>)
 800092c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000930:	61d3      	str	r3, [r2, #28]
 8000932:	4b2b      	ldr	r3, [pc, #172]	; (80009e0 <HAL_SPI_MspInit+0xdc>)
 8000934:	69db      	ldr	r3, [r3, #28]
 8000936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093a:	61bb      	str	r3, [r7, #24]
 800093c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <HAL_SPI_MspInit+0xdc>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	4a27      	ldr	r2, [pc, #156]	; (80009e0 <HAL_SPI_MspInit+0xdc>)
 8000944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000948:	6153      	str	r3, [r2, #20]
 800094a:	4b25      	ldr	r3, [pc, #148]	; (80009e0 <HAL_SPI_MspInit+0xdc>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000952:	617b      	str	r3, [r7, #20]
 8000954:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000956:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800095a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	2302      	movs	r3, #2
 800095e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000964:	2303      	movs	r3, #3
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000968:	2305      	movs	r3, #5
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	481c      	ldr	r0, [pc, #112]	; (80009e4 <HAL_SPI_MspInit+0xe0>)
 8000974:	f000 ff36 	bl	80017e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000978:	e02c      	b.n	80009d4 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a1a      	ldr	r2, [pc, #104]	; (80009e8 <HAL_SPI_MspInit+0xe4>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d127      	bne.n	80009d4 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <HAL_SPI_MspInit+0xdc>)
 8000986:	69db      	ldr	r3, [r3, #28]
 8000988:	4a15      	ldr	r2, [pc, #84]	; (80009e0 <HAL_SPI_MspInit+0xdc>)
 800098a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800098e:	61d3      	str	r3, [r2, #28]
 8000990:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <HAL_SPI_MspInit+0xdc>)
 8000992:	69db      	ldr	r3, [r3, #28]
 8000994:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800099c:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <HAL_SPI_MspInit+0xdc>)
 800099e:	695b      	ldr	r3, [r3, #20]
 80009a0:	4a0f      	ldr	r2, [pc, #60]	; (80009e0 <HAL_SPI_MspInit+0xdc>)
 80009a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009a6:	6153      	str	r3, [r2, #20]
 80009a8:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <HAL_SPI_MspInit+0xdc>)
 80009aa:	695b      	ldr	r3, [r3, #20]
 80009ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80009b4:	2338      	movs	r3, #56	; 0x38
 80009b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c0:	2303      	movs	r3, #3
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009c4:	2306      	movs	r3, #6
 80009c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <HAL_SPI_MspInit+0xe0>)
 80009d0:	f000 ff08 	bl	80017e4 <HAL_GPIO_Init>
}
 80009d4:	bf00      	nop
 80009d6:	3730      	adds	r7, #48	; 0x30
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40003800 	.word	0x40003800
 80009e0:	40021000 	.word	0x40021000
 80009e4:	48000400 	.word	0x48000400
 80009e8:	40003c00 	.word	0x40003c00

080009ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08e      	sub	sp, #56	; 0x38
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a47      	ldr	r2, [pc, #284]	; (8000b28 <HAL_UART_MspInit+0x13c>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d12a      	bne.n	8000a64 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a0e:	4b47      	ldr	r3, [pc, #284]	; (8000b2c <HAL_UART_MspInit+0x140>)
 8000a10:	699b      	ldr	r3, [r3, #24]
 8000a12:	4a46      	ldr	r2, [pc, #280]	; (8000b2c <HAL_UART_MspInit+0x140>)
 8000a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a18:	6193      	str	r3, [r2, #24]
 8000a1a:	4b44      	ldr	r3, [pc, #272]	; (8000b2c <HAL_UART_MspInit+0x140>)
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a22:	623b      	str	r3, [r7, #32]
 8000a24:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	4b41      	ldr	r3, [pc, #260]	; (8000b2c <HAL_UART_MspInit+0x140>)
 8000a28:	695b      	ldr	r3, [r3, #20]
 8000a2a:	4a40      	ldr	r2, [pc, #256]	; (8000b2c <HAL_UART_MspInit+0x140>)
 8000a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a30:	6153      	str	r3, [r2, #20]
 8000a32:	4b3e      	ldr	r3, [pc, #248]	; (8000b2c <HAL_UART_MspInit+0x140>)
 8000a34:	695b      	ldr	r3, [r3, #20]
 8000a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a3a:	61fb      	str	r3, [r7, #28]
 8000a3c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a3e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a50:	2307      	movs	r3, #7
 8000a52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5e:	f000 fec1 	bl	80017e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a62:	e05d      	b.n	8000b20 <HAL_UART_MspInit+0x134>
  else if(huart->Instance==USART2)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a31      	ldr	r2, [pc, #196]	; (8000b30 <HAL_UART_MspInit+0x144>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d12a      	bne.n	8000ac4 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a6e:	4b2f      	ldr	r3, [pc, #188]	; (8000b2c <HAL_UART_MspInit+0x140>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	4a2e      	ldr	r2, [pc, #184]	; (8000b2c <HAL_UART_MspInit+0x140>)
 8000a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a78:	61d3      	str	r3, [r2, #28]
 8000a7a:	4b2c      	ldr	r3, [pc, #176]	; (8000b2c <HAL_UART_MspInit+0x140>)
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a82:	61bb      	str	r3, [r7, #24]
 8000a84:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	4b29      	ldr	r3, [pc, #164]	; (8000b2c <HAL_UART_MspInit+0x140>)
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	4a28      	ldr	r2, [pc, #160]	; (8000b2c <HAL_UART_MspInit+0x140>)
 8000a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a90:	6153      	str	r3, [r2, #20]
 8000a92:	4b26      	ldr	r3, [pc, #152]	; (8000b2c <HAL_UART_MspInit+0x140>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a9a:	617b      	str	r3, [r7, #20]
 8000a9c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000a9e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab0:	2307      	movs	r3, #7
 8000ab2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab8:	4619      	mov	r1, r3
 8000aba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000abe:	f000 fe91 	bl	80017e4 <HAL_GPIO_Init>
}
 8000ac2:	e02d      	b.n	8000b20 <HAL_UART_MspInit+0x134>
  else if(huart->Instance==USART3)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a1a      	ldr	r2, [pc, #104]	; (8000b34 <HAL_UART_MspInit+0x148>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d128      	bne.n	8000b20 <HAL_UART_MspInit+0x134>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <HAL_UART_MspInit+0x140>)
 8000ad0:	69db      	ldr	r3, [r3, #28]
 8000ad2:	4a16      	ldr	r2, [pc, #88]	; (8000b2c <HAL_UART_MspInit+0x140>)
 8000ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ad8:	61d3      	str	r3, [r2, #28]
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <HAL_UART_MspInit+0x140>)
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <HAL_UART_MspInit+0x140>)
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	4a10      	ldr	r2, [pc, #64]	; (8000b2c <HAL_UART_MspInit+0x140>)
 8000aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000af0:	6153      	str	r3, [r2, #20]
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <HAL_UART_MspInit+0x140>)
 8000af4:	695b      	ldr	r3, [r3, #20]
 8000af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000afe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b10:	2307      	movs	r3, #7
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4807      	ldr	r0, [pc, #28]	; (8000b38 <HAL_UART_MspInit+0x14c>)
 8000b1c:	f000 fe62 	bl	80017e4 <HAL_GPIO_Init>
}
 8000b20:	bf00      	nop
 8000b22:	3738      	adds	r7, #56	; 0x38
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40013800 	.word	0x40013800
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	40004400 	.word	0x40004400
 8000b34:	40004800 	.word	0x40004800
 8000b38:	48000400 	.word	0x48000400

08000b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <NMI_Handler+0x4>

08000b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <HardFault_Handler+0x4>

08000b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <MemManage_Handler+0x4>

08000b4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <BusFault_Handler+0x4>

08000b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <UsageFault_Handler+0x4>

08000b5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b88:	f000 f884 	bl	8000c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <SystemInit+0x20>)
 8000b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b9a:	4a05      	ldr	r2, [pc, #20]	; (8000bb0 <SystemInit+0x20>)
 8000b9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb8:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bba:	490e      	ldr	r1, [pc, #56]	; (8000bf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bbc:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <LoopForever+0xe>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bce:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd0:	4c0b      	ldr	r4, [pc, #44]	; (8000c00 <LoopForever+0x16>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bde:	f7ff ffd7 	bl	8000b90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000be2:	f003 f895 	bl	8003d10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000be6:	f7ff faef 	bl	80001c8 <main>

08000bea <LoopForever>:

LoopForever:
    b LoopForever
 8000bea:	e7fe      	b.n	8000bea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bec:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bf8:	08003dc0 	.word	0x08003dc0
  ldr r2, =_sbss
 8000bfc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c00:	20000368 	.word	0x20000368

08000c04 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <ADC1_IRQHandler>
	...

08000c08 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <HAL_Init+0x28>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a07      	ldr	r2, [pc, #28]	; (8000c30 <HAL_Init+0x28>)
 8000c12:	f043 0310 	orr.w	r3, r3, #16
 8000c16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c18:	2003      	movs	r0, #3
 8000c1a:	f000 fdaf 	bl	800177c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1e:	200f      	movs	r0, #15
 8000c20:	f000 f808 	bl	8000c34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c24:	f7ff fd98 	bl	8000758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40022000 	.word	0x40022000

08000c34 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <HAL_InitTick+0x54>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <HAL_InitTick+0x58>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	4619      	mov	r1, r3
 8000c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 fdb9 	bl	80017ca <HAL_SYSTICK_Config>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e00e      	b.n	8000c80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b0f      	cmp	r3, #15
 8000c66:	d80a      	bhi.n	8000c7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c70:	f000 fd8f 	bl	8001792 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c74:	4a06      	ldr	r2, [pc, #24]	; (8000c90 <HAL_InitTick+0x5c>)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e000      	b.n	8000c80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000000 	.word	0x20000000
 8000c8c:	20000008 	.word	0x20000008
 8000c90:	20000004 	.word	0x20000004

08000c94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_IncTick+0x20>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x24>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <HAL_IncTick+0x24>)
 8000ca6:	6013      	str	r3, [r2, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	20000364 	.word	0x20000364

08000cbc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <HAL_GetTick+0x14>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	20000364 	.word	0x20000364

08000cd4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b09a      	sub	sp, #104	; 0x68
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d101      	bne.n	8000cf4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e169      	b.n	8000fc8 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	691b      	ldr	r3, [r3, #16]
 8000cf8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	f003 0310 	and.w	r3, r3, #16
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d176      	bne.n	8000df4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d152      	bne.n	8000db4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2200      	movs	r2, #0
 8000d12:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2200      	movs	r2, #0
 8000d18:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff fd39 	bl	80007a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d13b      	bne.n	8000db4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f000 fc05 	bl	800154c <ADC_Disable>
 8000d42:	4603      	mov	r3, r0
 8000d44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	f003 0310 	and.w	r3, r3, #16
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d12f      	bne.n	8000db4 <HAL_ADC_Init+0xe0>
 8000d54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d12b      	bne.n	8000db4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d64:	f023 0302 	bic.w	r3, r3, #2
 8000d68:	f043 0202 	orr.w	r2, r3, #2
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	689a      	ldr	r2, [r3, #8]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000d7e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	689a      	ldr	r2, [r3, #8]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d8e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d90:	4b8f      	ldr	r3, [pc, #572]	; (8000fd0 <HAL_ADC_Init+0x2fc>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a8f      	ldr	r2, [pc, #572]	; (8000fd4 <HAL_ADC_Init+0x300>)
 8000d96:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9a:	0c9a      	lsrs	r2, r3, #18
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	4413      	add	r3, r2
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000da6:	e002      	b.n	8000dae <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d1f9      	bne.n	8000da8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d007      	beq.n	8000dd2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000dcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000dd0:	d110      	bne.n	8000df4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	f023 0312 	bic.w	r3, r3, #18
 8000dda:	f043 0210 	orr.w	r2, r3, #16
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	f043 0201 	orr.w	r2, r3, #1
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df8:	f003 0310 	and.w	r3, r3, #16
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	f040 80d6 	bne.w	8000fae <HAL_ADC_Init+0x2da>
 8000e02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f040 80d1 	bne.w	8000fae <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f040 80c9 	bne.w	8000fae <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e20:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000e24:	f043 0202 	orr.w	r2, r3, #2
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e2c:	4b6a      	ldr	r3, [pc, #424]	; (8000fd8 <HAL_ADC_Init+0x304>)
 8000e2e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000e30:	2300      	movs	r3, #0
 8000e32:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	f003 0303 	and.w	r3, r3, #3
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d108      	bne.n	8000e54 <HAL_ADC_Init+0x180>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f003 0301 	and.w	r3, r3, #1
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d101      	bne.n	8000e54 <HAL_ADC_Init+0x180>
 8000e50:	2301      	movs	r3, #1
 8000e52:	e000      	b.n	8000e56 <HAL_ADC_Init+0x182>
 8000e54:	2300      	movs	r3, #0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d11c      	bne.n	8000e94 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e5a:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d010      	beq.n	8000e82 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d107      	bne.n	8000e7c <HAL_ADC_Init+0x1a8>
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d101      	bne.n	8000e7c <HAL_ADC_Init+0x1a8>
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e000      	b.n	8000e7e <HAL_ADC_Init+0x1aa>
 8000e7c:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d108      	bne.n	8000e94 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000e82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	431a      	orrs	r2, r3
 8000e90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e92:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	7e5b      	ldrb	r3, [r3, #25]
 8000e98:	035b      	lsls	r3, r3, #13
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000e9e:	2a01      	cmp	r2, #1
 8000ea0:	d002      	beq.n	8000ea8 <HAL_ADC_Init+0x1d4>
 8000ea2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ea6:	e000      	b.n	8000eaa <HAL_ADC_Init+0x1d6>
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	431a      	orrs	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d11b      	bne.n	8000f00 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	7e5b      	ldrb	r3, [r3, #25]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d109      	bne.n	8000ee4 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	045a      	lsls	r2, r3, #17
 8000ed8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000eda:	4313      	orrs	r3, r2
 8000edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ee0:	663b      	str	r3, [r7, #96]	; 0x60
 8000ee2:	e00d      	b.n	8000f00 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000eec:	f043 0220 	orr.w	r2, r3, #32
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef8:	f043 0201 	orr.w	r2, r3, #1
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d007      	beq.n	8000f18 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f10:	4313      	orrs	r3, r2
 8000f12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f14:	4313      	orrs	r3, r2
 8000f16:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	f003 030c 	and.w	r3, r3, #12
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d114      	bne.n	8000f50 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	6812      	ldr	r2, [r2, #0]
 8000f30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f34:	f023 0302 	bic.w	r3, r3, #2
 8000f38:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	7e1b      	ldrb	r3, [r3, #24]
 8000f3e:	039a      	lsls	r2, r3, #14
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	68da      	ldr	r2, [r3, #12]
 8000f56:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <HAL_ADC_Init+0x308>)
 8000f58:	4013      	ands	r3, r2
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	6812      	ldr	r2, [r2, #0]
 8000f5e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000f60:	430b      	orrs	r3, r1
 8000f62:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	691b      	ldr	r3, [r3, #16]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d10c      	bne.n	8000f86 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f023 010f 	bic.w	r1, r3, #15
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	1e5a      	subs	r2, r3, #1
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	430a      	orrs	r2, r1
 8000f82:	631a      	str	r2, [r3, #48]	; 0x30
 8000f84:	e007      	b.n	8000f96 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f022 020f 	bic.w	r2, r2, #15
 8000f94:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	f023 0303 	bic.w	r3, r3, #3
 8000fa4:	f043 0201 	orr.w	r2, r3, #1
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	641a      	str	r2, [r3, #64]	; 0x40
 8000fac:	e00a      	b.n	8000fc4 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f023 0312 	bic.w	r3, r3, #18
 8000fb6:	f043 0210 	orr.w	r2, r3, #16
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000fc4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3768      	adds	r7, #104	; 0x68
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	431bde83 	.word	0x431bde83
 8000fd8:	50000300 	.word	0x50000300
 8000fdc:	fff0c007 	.word	0xfff0c007

08000fe0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b09b      	sub	sp, #108	; 0x6c
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d101      	bne.n	8001002 <HAL_ADC_ConfigChannel+0x22>
 8000ffe:	2302      	movs	r3, #2
 8001000:	e299      	b.n	8001536 <HAL_ADC_ConfigChannel+0x556>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2201      	movs	r2, #1
 8001006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f003 0304 	and.w	r3, r3, #4
 8001014:	2b00      	cmp	r3, #0
 8001016:	f040 827d 	bne.w	8001514 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	2b04      	cmp	r3, #4
 8001020:	d81c      	bhi.n	800105c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	4613      	mov	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4413      	add	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	461a      	mov	r2, r3
 8001036:	231f      	movs	r3, #31
 8001038:	4093      	lsls	r3, r2
 800103a:	43db      	mvns	r3, r3
 800103c:	4019      	ands	r1, r3
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	6818      	ldr	r0, [r3, #0]
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	4613      	mov	r3, r2
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	4413      	add	r3, r2
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	fa00 f203 	lsl.w	r2, r0, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	430a      	orrs	r2, r1
 8001058:	631a      	str	r2, [r3, #48]	; 0x30
 800105a:	e063      	b.n	8001124 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b09      	cmp	r3, #9
 8001062:	d81e      	bhi.n	80010a2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	4613      	mov	r3, r2
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	4413      	add	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	3b1e      	subs	r3, #30
 8001078:	221f      	movs	r2, #31
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	4019      	ands	r1, r3
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	6818      	ldr	r0, [r3, #0]
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	4613      	mov	r3, r2
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	4413      	add	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	3b1e      	subs	r3, #30
 8001094:	fa00 f203 	lsl.w	r2, r0, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	430a      	orrs	r2, r1
 800109e:	635a      	str	r2, [r3, #52]	; 0x34
 80010a0:	e040      	b.n	8001124 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b0e      	cmp	r3, #14
 80010a8:	d81e      	bhi.n	80010e8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	4613      	mov	r3, r2
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	4413      	add	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	3b3c      	subs	r3, #60	; 0x3c
 80010be:	221f      	movs	r2, #31
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	4019      	ands	r1, r3
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	4613      	mov	r3, r2
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	4413      	add	r3, r2
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	3b3c      	subs	r3, #60	; 0x3c
 80010da:	fa00 f203 	lsl.w	r2, r0, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	430a      	orrs	r2, r1
 80010e4:	639a      	str	r2, [r3, #56]	; 0x38
 80010e6:	e01d      	b.n	8001124 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	4613      	mov	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	4413      	add	r3, r2
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	3b5a      	subs	r3, #90	; 0x5a
 80010fc:	221f      	movs	r2, #31
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	4019      	ands	r1, r3
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	6818      	ldr	r0, [r3, #0]
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	4613      	mov	r3, r2
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	4413      	add	r3, r2
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	3b5a      	subs	r3, #90	; 0x5a
 8001118:	fa00 f203 	lsl.w	r2, r0, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	430a      	orrs	r2, r1
 8001122:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f003 030c 	and.w	r3, r3, #12
 800112e:	2b00      	cmp	r3, #0
 8001130:	f040 80e5 	bne.w	80012fe <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b09      	cmp	r3, #9
 800113a:	d91c      	bls.n	8001176 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6999      	ldr	r1, [r3, #24]
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4613      	mov	r3, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	4413      	add	r3, r2
 800114c:	3b1e      	subs	r3, #30
 800114e:	2207      	movs	r2, #7
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	4019      	ands	r1, r3
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	6898      	ldr	r0, [r3, #8]
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4613      	mov	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	4413      	add	r3, r2
 8001166:	3b1e      	subs	r3, #30
 8001168:	fa00 f203 	lsl.w	r2, r0, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	430a      	orrs	r2, r1
 8001172:	619a      	str	r2, [r3, #24]
 8001174:	e019      	b.n	80011aa <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6959      	ldr	r1, [r3, #20]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4613      	mov	r3, r2
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	4413      	add	r3, r2
 8001186:	2207      	movs	r2, #7
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	4019      	ands	r1, r3
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	6898      	ldr	r0, [r3, #8]
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4613      	mov	r3, r2
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	4413      	add	r3, r2
 800119e:	fa00 f203 	lsl.w	r2, r0, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	430a      	orrs	r2, r1
 80011a8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	695a      	ldr	r2, [r3, #20]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	08db      	lsrs	r3, r3, #3
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	2b03      	cmp	r3, #3
 80011ca:	d84f      	bhi.n	800126c <HAL_ADC_ConfigChannel+0x28c>
 80011cc:	a201      	add	r2, pc, #4	; (adr r2, 80011d4 <HAL_ADC_ConfigChannel+0x1f4>)
 80011ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d2:	bf00      	nop
 80011d4:	080011e5 	.word	0x080011e5
 80011d8:	08001207 	.word	0x08001207
 80011dc:	08001229 	.word	0x08001229
 80011e0:	0800124b 	.word	0x0800124b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011ea:	4b99      	ldr	r3, [pc, #612]	; (8001450 <HAL_ADC_ConfigChannel+0x470>)
 80011ec:	4013      	ands	r3, r2
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	6812      	ldr	r2, [r2, #0]
 80011f2:	0691      	lsls	r1, r2, #26
 80011f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80011f6:	430a      	orrs	r2, r1
 80011f8:	431a      	orrs	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001202:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001204:	e07e      	b.n	8001304 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800120c:	4b90      	ldr	r3, [pc, #576]	; (8001450 <HAL_ADC_ConfigChannel+0x470>)
 800120e:	4013      	ands	r3, r2
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	6812      	ldr	r2, [r2, #0]
 8001214:	0691      	lsls	r1, r2, #26
 8001216:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001218:	430a      	orrs	r2, r1
 800121a:	431a      	orrs	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001224:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001226:	e06d      	b.n	8001304 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800122e:	4b88      	ldr	r3, [pc, #544]	; (8001450 <HAL_ADC_ConfigChannel+0x470>)
 8001230:	4013      	ands	r3, r2
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	6812      	ldr	r2, [r2, #0]
 8001236:	0691      	lsls	r1, r2, #26
 8001238:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800123a:	430a      	orrs	r2, r1
 800123c:	431a      	orrs	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001246:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001248:	e05c      	b.n	8001304 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001250:	4b7f      	ldr	r3, [pc, #508]	; (8001450 <HAL_ADC_ConfigChannel+0x470>)
 8001252:	4013      	ands	r3, r2
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	6812      	ldr	r2, [r2, #0]
 8001258:	0691      	lsls	r1, r2, #26
 800125a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800125c:	430a      	orrs	r2, r1
 800125e:	431a      	orrs	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001268:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800126a:	e04b      	b.n	8001304 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001272:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	069b      	lsls	r3, r3, #26
 800127c:	429a      	cmp	r2, r3
 800127e:	d107      	bne.n	8001290 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800128e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001296:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	069b      	lsls	r3, r3, #26
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d107      	bne.n	80012b4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80012b2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80012ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	069b      	lsls	r3, r3, #26
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d107      	bne.n	80012d8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80012d6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80012de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	069b      	lsls	r3, r3, #26
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d10a      	bne.n	8001302 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80012fa:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80012fc:	e001      	b.n	8001302 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80012fe:	bf00      	nop
 8001300:	e000      	b.n	8001304 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001302:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	2b01      	cmp	r3, #1
 8001310:	d108      	bne.n	8001324 <HAL_ADC_ConfigChannel+0x344>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	2b01      	cmp	r3, #1
 800131e:	d101      	bne.n	8001324 <HAL_ADC_ConfigChannel+0x344>
 8001320:	2301      	movs	r3, #1
 8001322:	e000      	b.n	8001326 <HAL_ADC_ConfigChannel+0x346>
 8001324:	2300      	movs	r3, #0
 8001326:	2b00      	cmp	r3, #0
 8001328:	f040 80ff 	bne.w	800152a <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d00f      	beq.n	8001354 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2201      	movs	r2, #1
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43da      	mvns	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	400a      	ands	r2, r1
 800134e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001352:	e049      	b.n	80013e8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2201      	movs	r2, #1
 8001362:	409a      	lsls	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	430a      	orrs	r2, r1
 800136a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b09      	cmp	r3, #9
 8001374:	d91c      	bls.n	80013b0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6999      	ldr	r1, [r3, #24]
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4613      	mov	r3, r2
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	4413      	add	r3, r2
 8001386:	3b1b      	subs	r3, #27
 8001388:	2207      	movs	r2, #7
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	4019      	ands	r1, r3
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	6898      	ldr	r0, [r3, #8]
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	4613      	mov	r3, r2
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	4413      	add	r3, r2
 80013a0:	3b1b      	subs	r3, #27
 80013a2:	fa00 f203 	lsl.w	r2, r0, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	430a      	orrs	r2, r1
 80013ac:	619a      	str	r2, [r3, #24]
 80013ae:	e01b      	b.n	80013e8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6959      	ldr	r1, [r3, #20]
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	4613      	mov	r3, r2
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	4413      	add	r3, r2
 80013c2:	2207      	movs	r2, #7
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	4019      	ands	r1, r3
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	6898      	ldr	r0, [r3, #8]
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	1c5a      	adds	r2, r3, #1
 80013d6:	4613      	mov	r3, r2
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4413      	add	r3, r2
 80013dc:	fa00 f203 	lsl.w	r2, r0, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013e8:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <HAL_ADC_ConfigChannel+0x474>)
 80013ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b10      	cmp	r3, #16
 80013f2:	d105      	bne.n	8001400 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80013f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d014      	beq.n	800142a <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001404:	2b11      	cmp	r3, #17
 8001406:	d105      	bne.n	8001414 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001408:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00a      	beq.n	800142a <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001418:	2b12      	cmp	r3, #18
 800141a:	f040 8086 	bne.w	800152a <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800141e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001426:	2b00      	cmp	r3, #0
 8001428:	d17f      	bne.n	800152a <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f003 0303 	and.w	r3, r3, #3
 8001438:	2b01      	cmp	r3, #1
 800143a:	d10d      	bne.n	8001458 <HAL_ADC_ConfigChannel+0x478>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b01      	cmp	r3, #1
 8001448:	d106      	bne.n	8001458 <HAL_ADC_ConfigChannel+0x478>
 800144a:	2301      	movs	r3, #1
 800144c:	e005      	b.n	800145a <HAL_ADC_ConfigChannel+0x47a>
 800144e:	bf00      	nop
 8001450:	83fff000 	.word	0x83fff000
 8001454:	50000300 	.word	0x50000300
 8001458:	2300      	movs	r3, #0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d150      	bne.n	8001500 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800145e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001460:	2b00      	cmp	r3, #0
 8001462:	d010      	beq.n	8001486 <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	2b01      	cmp	r3, #1
 800146e:	d107      	bne.n	8001480 <HAL_ADC_ConfigChannel+0x4a0>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b01      	cmp	r3, #1
 800147a:	d101      	bne.n	8001480 <HAL_ADC_ConfigChannel+0x4a0>
 800147c:	2301      	movs	r3, #1
 800147e:	e000      	b.n	8001482 <HAL_ADC_ConfigChannel+0x4a2>
 8001480:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001482:	2b00      	cmp	r3, #0
 8001484:	d13c      	bne.n	8001500 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b10      	cmp	r3, #16
 800148c:	d11d      	bne.n	80014ca <HAL_ADC_ConfigChannel+0x4ea>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001496:	d118      	bne.n	80014ca <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001498:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014a2:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014a4:	4b27      	ldr	r3, [pc, #156]	; (8001544 <HAL_ADC_ConfigChannel+0x564>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a27      	ldr	r2, [pc, #156]	; (8001548 <HAL_ADC_ConfigChannel+0x568>)
 80014aa:	fba2 2303 	umull	r2, r3, r2, r3
 80014ae:	0c9a      	lsrs	r2, r3, #18
 80014b0:	4613      	mov	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4413      	add	r3, r2
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014ba:	e002      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	3b01      	subs	r3, #1
 80014c0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1f9      	bne.n	80014bc <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80014c8:	e02e      	b.n	8001528 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b11      	cmp	r3, #17
 80014d0:	d10b      	bne.n	80014ea <HAL_ADC_ConfigChannel+0x50a>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014da:	d106      	bne.n	80014ea <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80014dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80014e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014e6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80014e8:	e01e      	b.n	8001528 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2b12      	cmp	r3, #18
 80014f0:	d11a      	bne.n	8001528 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80014f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80014fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014fc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80014fe:	e013      	b.n	8001528 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	f043 0220 	orr.w	r2, r3, #32
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001512:	e00a      	b.n	800152a <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	f043 0220 	orr.w	r2, r3, #32
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001526:	e000      	b.n	800152a <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001528:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001532:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001536:	4618      	mov	r0, r3
 8001538:	376c      	adds	r7, #108	; 0x6c
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20000000 	.word	0x20000000
 8001548:	431bde83 	.word	0x431bde83

0800154c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 0303 	and.w	r3, r3, #3
 8001562:	2b01      	cmp	r3, #1
 8001564:	d108      	bne.n	8001578 <ADC_Disable+0x2c>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	2b01      	cmp	r3, #1
 8001572:	d101      	bne.n	8001578 <ADC_Disable+0x2c>
 8001574:	2301      	movs	r3, #1
 8001576:	e000      	b.n	800157a <ADC_Disable+0x2e>
 8001578:	2300      	movs	r3, #0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d047      	beq.n	800160e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f003 030d 	and.w	r3, r3, #13
 8001588:	2b01      	cmp	r3, #1
 800158a:	d10f      	bne.n	80015ac <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f042 0202 	orr.w	r2, r2, #2
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2203      	movs	r2, #3
 80015a2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80015a4:	f7ff fb8a 	bl	8000cbc <HAL_GetTick>
 80015a8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80015aa:	e029      	b.n	8001600 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	f043 0210 	orr.w	r2, r3, #16
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015bc:	f043 0201 	orr.w	r2, r3, #1
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e023      	b.n	8001610 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80015c8:	f7ff fb78 	bl	8000cbc <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d914      	bls.n	8001600 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d10d      	bne.n	8001600 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	f043 0210 	orr.w	r2, r3, #16
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f4:	f043 0201 	orr.w	r2, r3, #1
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e007      	b.n	8001610 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b01      	cmp	r3, #1
 800160c:	d0dc      	beq.n	80015c8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <__NVIC_SetPriorityGrouping+0x44>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001634:	4013      	ands	r3, r2
 8001636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800164a:	4a04      	ldr	r2, [pc, #16]	; (800165c <__NVIC_SetPriorityGrouping+0x44>)
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	60d3      	str	r3, [r2, #12]
}
 8001650:	bf00      	nop
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001664:	4b04      	ldr	r3, [pc, #16]	; (8001678 <__NVIC_GetPriorityGrouping+0x18>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	0a1b      	lsrs	r3, r3, #8
 800166a:	f003 0307 	and.w	r3, r3, #7
}
 800166e:	4618      	mov	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	6039      	str	r1, [r7, #0]
 8001686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168c:	2b00      	cmp	r3, #0
 800168e:	db0a      	blt.n	80016a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	b2da      	uxtb	r2, r3
 8001694:	490c      	ldr	r1, [pc, #48]	; (80016c8 <__NVIC_SetPriority+0x4c>)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	0112      	lsls	r2, r2, #4
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	440b      	add	r3, r1
 80016a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a4:	e00a      	b.n	80016bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4908      	ldr	r1, [pc, #32]	; (80016cc <__NVIC_SetPriority+0x50>)
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	3b04      	subs	r3, #4
 80016b4:	0112      	lsls	r2, r2, #4
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	440b      	add	r3, r1
 80016ba:	761a      	strb	r2, [r3, #24]
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000e100 	.word	0xe000e100
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b089      	sub	sp, #36	; 0x24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f1c3 0307 	rsb	r3, r3, #7
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	bf28      	it	cs
 80016ee:	2304      	movcs	r3, #4
 80016f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3304      	adds	r3, #4
 80016f6:	2b06      	cmp	r3, #6
 80016f8:	d902      	bls.n	8001700 <NVIC_EncodePriority+0x30>
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3b03      	subs	r3, #3
 80016fe:	e000      	b.n	8001702 <NVIC_EncodePriority+0x32>
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	f04f 32ff 	mov.w	r2, #4294967295
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43da      	mvns	r2, r3
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	401a      	ands	r2, r3
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001718:	f04f 31ff 	mov.w	r1, #4294967295
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	fa01 f303 	lsl.w	r3, r1, r3
 8001722:	43d9      	mvns	r1, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001728:	4313      	orrs	r3, r2
         );
}
 800172a:	4618      	mov	r0, r3
 800172c:	3724      	adds	r7, #36	; 0x24
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3b01      	subs	r3, #1
 8001744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001748:	d301      	bcc.n	800174e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800174a:	2301      	movs	r3, #1
 800174c:	e00f      	b.n	800176e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800174e:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <SysTick_Config+0x40>)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3b01      	subs	r3, #1
 8001754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001756:	210f      	movs	r1, #15
 8001758:	f04f 30ff 	mov.w	r0, #4294967295
 800175c:	f7ff ff8e 	bl	800167c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <SysTick_Config+0x40>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001766:	4b04      	ldr	r3, [pc, #16]	; (8001778 <SysTick_Config+0x40>)
 8001768:	2207      	movs	r2, #7
 800176a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	e000e010 	.word	0xe000e010

0800177c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff ff47 	bl	8001618 <__NVIC_SetPriorityGrouping>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b086      	sub	sp, #24
 8001796:	af00      	add	r7, sp, #0
 8001798:	4603      	mov	r3, r0
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
 800179e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a4:	f7ff ff5c 	bl	8001660 <__NVIC_GetPriorityGrouping>
 80017a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	68b9      	ldr	r1, [r7, #8]
 80017ae:	6978      	ldr	r0, [r7, #20]
 80017b0:	f7ff ff8e 	bl	80016d0 <NVIC_EncodePriority>
 80017b4:	4602      	mov	r2, r0
 80017b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ba:	4611      	mov	r1, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff5d 	bl	800167c <__NVIC_SetPriority>
}
 80017c2:	bf00      	nop
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff ffb0 	bl	8001738 <SysTick_Config>
 80017d8:	4603      	mov	r3, r0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b087      	sub	sp, #28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f2:	e14e      	b.n	8001a92 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	2101      	movs	r1, #1
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001800:	4013      	ands	r3, r2
 8001802:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 8140 	beq.w	8001a8c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	2b01      	cmp	r3, #1
 8001816:	d005      	beq.n	8001824 <HAL_GPIO_Init+0x40>
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d130      	bne.n	8001886 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	2203      	movs	r2, #3
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4013      	ands	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	68da      	ldr	r2, [r3, #12]
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4313      	orrs	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800185a:	2201      	movs	r2, #1
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4013      	ands	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	091b      	lsrs	r3, r3, #4
 8001870:	f003 0201 	and.w	r2, r3, #1
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4313      	orrs	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	2b03      	cmp	r3, #3
 8001890:	d017      	beq.n	80018c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	2203      	movs	r2, #3
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43db      	mvns	r3, r3
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	4013      	ands	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d123      	bne.n	8001916 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	08da      	lsrs	r2, r3, #3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3208      	adds	r2, #8
 80018d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	220f      	movs	r2, #15
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4013      	ands	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	691a      	ldr	r2, [r3, #16]
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4313      	orrs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	08da      	lsrs	r2, r3, #3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3208      	adds	r2, #8
 8001910:	6939      	ldr	r1, [r7, #16]
 8001912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	2203      	movs	r2, #3
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 0203 	and.w	r2, r3, #3
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 809a 	beq.w	8001a8c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001958:	4b55      	ldr	r3, [pc, #340]	; (8001ab0 <HAL_GPIO_Init+0x2cc>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	4a54      	ldr	r2, [pc, #336]	; (8001ab0 <HAL_GPIO_Init+0x2cc>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	6193      	str	r3, [r2, #24]
 8001964:	4b52      	ldr	r3, [pc, #328]	; (8001ab0 <HAL_GPIO_Init+0x2cc>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001970:	4a50      	ldr	r2, [pc, #320]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	089b      	lsrs	r3, r3, #2
 8001976:	3302      	adds	r3, #2
 8001978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	220f      	movs	r2, #15
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800199a:	d013      	beq.n	80019c4 <HAL_GPIO_Init+0x1e0>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a46      	ldr	r2, [pc, #280]	; (8001ab8 <HAL_GPIO_Init+0x2d4>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d00d      	beq.n	80019c0 <HAL_GPIO_Init+0x1dc>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a45      	ldr	r2, [pc, #276]	; (8001abc <HAL_GPIO_Init+0x2d8>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d007      	beq.n	80019bc <HAL_GPIO_Init+0x1d8>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a44      	ldr	r2, [pc, #272]	; (8001ac0 <HAL_GPIO_Init+0x2dc>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d101      	bne.n	80019b8 <HAL_GPIO_Init+0x1d4>
 80019b4:	2303      	movs	r3, #3
 80019b6:	e006      	b.n	80019c6 <HAL_GPIO_Init+0x1e2>
 80019b8:	2305      	movs	r3, #5
 80019ba:	e004      	b.n	80019c6 <HAL_GPIO_Init+0x1e2>
 80019bc:	2302      	movs	r3, #2
 80019be:	e002      	b.n	80019c6 <HAL_GPIO_Init+0x1e2>
 80019c0:	2301      	movs	r3, #1
 80019c2:	e000      	b.n	80019c6 <HAL_GPIO_Init+0x1e2>
 80019c4:	2300      	movs	r3, #0
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	f002 0203 	and.w	r2, r2, #3
 80019cc:	0092      	lsls	r2, r2, #2
 80019ce:	4093      	lsls	r3, r2
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019d6:	4937      	ldr	r1, [pc, #220]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	089b      	lsrs	r3, r3, #2
 80019dc:	3302      	adds	r3, #2
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019e4:	4b37      	ldr	r3, [pc, #220]	; (8001ac4 <HAL_GPIO_Init+0x2e0>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4013      	ands	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a08:	4a2e      	ldr	r2, [pc, #184]	; (8001ac4 <HAL_GPIO_Init+0x2e0>)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a0e:	4b2d      	ldr	r3, [pc, #180]	; (8001ac4 <HAL_GPIO_Init+0x2e0>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	43db      	mvns	r3, r3
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a32:	4a24      	ldr	r2, [pc, #144]	; (8001ac4 <HAL_GPIO_Init+0x2e0>)
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a38:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <HAL_GPIO_Init+0x2e0>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a5c:	4a19      	ldr	r2, [pc, #100]	; (8001ac4 <HAL_GPIO_Init+0x2e0>)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a62:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <HAL_GPIO_Init+0x2e0>)
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a86:	4a0f      	ldr	r2, [pc, #60]	; (8001ac4 <HAL_GPIO_Init+0x2e0>)
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f47f aea9 	bne.w	80017f4 <HAL_GPIO_Init+0x10>
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	bf00      	nop
 8001aa6:	371c      	adds	r7, #28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40010000 	.word	0x40010000
 8001ab8:	48000400 	.word	0x48000400
 8001abc:	48000800 	.word	0x48000800
 8001ac0:	48000c00 	.word	0x48000c00
 8001ac4:	40010400 	.word	0x40010400

08001ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	807b      	strh	r3, [r7, #2]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ad8:	787b      	ldrb	r3, [r7, #1]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ade:	887a      	ldrh	r2, [r7, #2]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ae4:	e002      	b.n	8001aec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ae6:	887a      	ldrh	r2, [r7, #2]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e081      	b.n	8001c0e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d106      	bne.n	8001b24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7fe fe7a 	bl	8000818 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2224      	movs	r2, #36	; 0x24
 8001b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f022 0201 	bic.w	r2, r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d107      	bne.n	8001b72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	e006      	b.n	8001b80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d104      	bne.n	8001b92 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ba0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ba4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691a      	ldr	r2, [r3, #16]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69d9      	ldr	r1, [r3, #28]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a1a      	ldr	r2, [r3, #32]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f042 0201 	orr.w	r2, r2, #1
 8001bee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b20      	cmp	r3, #32
 8001c2a:	d138      	bne.n	8001c9e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d101      	bne.n	8001c3a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c36:	2302      	movs	r3, #2
 8001c38:	e032      	b.n	8001ca0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2224      	movs	r2, #36	; 0x24
 8001c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 0201 	bic.w	r2, r2, #1
 8001c58:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c68:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6819      	ldr	r1, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f042 0201 	orr.w	r2, r2, #1
 8001c88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	e000      	b.n	8001ca0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c9e:	2302      	movs	r3, #2
  }
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b20      	cmp	r3, #32
 8001cc0:	d139      	bne.n	8001d36 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d101      	bne.n	8001cd0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e033      	b.n	8001d38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2224      	movs	r2, #36	; 0x24
 8001cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0201 	bic.w	r2, r2, #1
 8001cee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cfe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	021b      	lsls	r3, r3, #8
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f042 0201 	orr.w	r2, r2, #1
 8001d20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2220      	movs	r2, #32
 8001d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d32:	2300      	movs	r3, #0
 8001d34:	e000      	b.n	8001d38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d36:	2302      	movs	r3, #2
  }
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d54:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d102      	bne.n	8001d6a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	f001 b823 	b.w	8002db0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 817d 	beq.w	800207a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d80:	4bbc      	ldr	r3, [pc, #752]	; (8002074 <HAL_RCC_OscConfig+0x330>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 030c 	and.w	r3, r3, #12
 8001d88:	2b04      	cmp	r3, #4
 8001d8a:	d00c      	beq.n	8001da6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d8c:	4bb9      	ldr	r3, [pc, #740]	; (8002074 <HAL_RCC_OscConfig+0x330>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 030c 	and.w	r3, r3, #12
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d15c      	bne.n	8001e52 <HAL_RCC_OscConfig+0x10e>
 8001d98:	4bb6      	ldr	r3, [pc, #728]	; (8002074 <HAL_RCC_OscConfig+0x330>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da4:	d155      	bne.n	8001e52 <HAL_RCC_OscConfig+0x10e>
 8001da6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001daa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001db2:	fa93 f3a3 	rbit	r3, r3
 8001db6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001dba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dbe:	fab3 f383 	clz	r3, r3
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	095b      	lsrs	r3, r3, #5
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d102      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x94>
 8001dd2:	4ba8      	ldr	r3, [pc, #672]	; (8002074 <HAL_RCC_OscConfig+0x330>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	e015      	b.n	8001e04 <HAL_RCC_OscConfig+0xc0>
 8001dd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ddc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001de4:	fa93 f3a3 	rbit	r3, r3
 8001de8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001dec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001df0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001df4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001df8:	fa93 f3a3 	rbit	r3, r3
 8001dfc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001e00:	4b9c      	ldr	r3, [pc, #624]	; (8002074 <HAL_RCC_OscConfig+0x330>)
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e08:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001e0c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001e10:	fa92 f2a2 	rbit	r2, r2
 8001e14:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001e18:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001e1c:	fab2 f282 	clz	r2, r2
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	f042 0220 	orr.w	r2, r2, #32
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	f002 021f 	and.w	r2, r2, #31
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e32:	4013      	ands	r3, r2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 811f 	beq.w	8002078 <HAL_RCC_OscConfig+0x334>
 8001e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f040 8116 	bne.w	8002078 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	f000 bfaf 	b.w	8002db0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e62:	d106      	bne.n	8001e72 <HAL_RCC_OscConfig+0x12e>
 8001e64:	4b83      	ldr	r3, [pc, #524]	; (8002074 <HAL_RCC_OscConfig+0x330>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a82      	ldr	r2, [pc, #520]	; (8002074 <HAL_RCC_OscConfig+0x330>)
 8001e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	e036      	b.n	8001ee0 <HAL_RCC_OscConfig+0x19c>
 8001e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10c      	bne.n	8001e9c <HAL_RCC_OscConfig+0x158>
 8001e82:	4b7c      	ldr	r3, [pc, #496]	; (8002074 <HAL_RCC_OscConfig+0x330>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a7b      	ldr	r2, [pc, #492]	; (8002074 <HAL_RCC_OscConfig+0x330>)
 8001e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	4b79      	ldr	r3, [pc, #484]	; (8002074 <HAL_RCC_OscConfig+0x330>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a78      	ldr	r2, [pc, #480]	; (8002074 <HAL_RCC_OscConfig+0x330>)
 8001e94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	e021      	b.n	8001ee0 <HAL_RCC_OscConfig+0x19c>
 8001e9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001eac:	d10c      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x184>
 8001eae:	4b71      	ldr	r3, [pc, #452]	; (8002074 <HAL_RCC_OscConfig+0x330>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a70      	ldr	r2, [pc, #448]	; (8002074 <HAL_RCC_OscConfig+0x330>)
 8001eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	4b6e      	ldr	r3, [pc, #440]	; (8002074 <HAL_RCC_OscConfig+0x330>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a6d      	ldr	r2, [pc, #436]	; (8002074 <HAL_RCC_OscConfig+0x330>)
 8001ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	e00b      	b.n	8001ee0 <HAL_RCC_OscConfig+0x19c>
 8001ec8:	4b6a      	ldr	r3, [pc, #424]	; (8002074 <HAL_RCC_OscConfig+0x330>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a69      	ldr	r2, [pc, #420]	; (8002074 <HAL_RCC_OscConfig+0x330>)
 8001ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed2:	6013      	str	r3, [r2, #0]
 8001ed4:	4b67      	ldr	r3, [pc, #412]	; (8002074 <HAL_RCC_OscConfig+0x330>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a66      	ldr	r2, [pc, #408]	; (8002074 <HAL_RCC_OscConfig+0x330>)
 8001eda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ede:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ee0:	4b64      	ldr	r3, [pc, #400]	; (8002074 <HAL_RCC_OscConfig+0x330>)
 8001ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee4:	f023 020f 	bic.w	r2, r3, #15
 8001ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	495f      	ldr	r1, [pc, #380]	; (8002074 <HAL_RCC_OscConfig+0x330>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d059      	beq.n	8001fbe <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0a:	f7fe fed7 	bl	8000cbc <HAL_GetTick>
 8001f0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f12:	e00a      	b.n	8001f2a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f14:	f7fe fed2 	bl	8000cbc <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b64      	cmp	r3, #100	; 0x64
 8001f22:	d902      	bls.n	8001f2a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	f000 bf43 	b.w	8002db0 <HAL_RCC_OscConfig+0x106c>
 8001f2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f2e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001f36:	fa93 f3a3 	rbit	r3, r3
 8001f3a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001f3e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f42:	fab3 f383 	clz	r3, r3
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	095b      	lsrs	r3, r3, #5
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d102      	bne.n	8001f5c <HAL_RCC_OscConfig+0x218>
 8001f56:	4b47      	ldr	r3, [pc, #284]	; (8002074 <HAL_RCC_OscConfig+0x330>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	e015      	b.n	8001f88 <HAL_RCC_OscConfig+0x244>
 8001f5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f60:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f64:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001f68:	fa93 f3a3 	rbit	r3, r3
 8001f6c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001f70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f74:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001f78:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001f7c:	fa93 f3a3 	rbit	r3, r3
 8001f80:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001f84:	4b3b      	ldr	r3, [pc, #236]	; (8002074 <HAL_RCC_OscConfig+0x330>)
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f8c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001f90:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001f94:	fa92 f2a2 	rbit	r2, r2
 8001f98:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001f9c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001fa0:	fab2 f282 	clz	r2, r2
 8001fa4:	b2d2      	uxtb	r2, r2
 8001fa6:	f042 0220 	orr.w	r2, r2, #32
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	f002 021f 	and.w	r2, r2, #31
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0ab      	beq.n	8001f14 <HAL_RCC_OscConfig+0x1d0>
 8001fbc:	e05d      	b.n	800207a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbe:	f7fe fe7d 	bl	8000cbc <HAL_GetTick>
 8001fc2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc6:	e00a      	b.n	8001fde <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fc8:	f7fe fe78 	bl	8000cbc <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b64      	cmp	r3, #100	; 0x64
 8001fd6:	d902      	bls.n	8001fde <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	f000 bee9 	b.w	8002db0 <HAL_RCC_OscConfig+0x106c>
 8001fde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fe2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001fea:	fa93 f3a3 	rbit	r3, r3
 8001fee:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001ff2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff6:	fab3 f383 	clz	r3, r3
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	095b      	lsrs	r3, r3, #5
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b01      	cmp	r3, #1
 8002008:	d102      	bne.n	8002010 <HAL_RCC_OscConfig+0x2cc>
 800200a:	4b1a      	ldr	r3, [pc, #104]	; (8002074 <HAL_RCC_OscConfig+0x330>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	e015      	b.n	800203c <HAL_RCC_OscConfig+0x2f8>
 8002010:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002014:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002018:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800201c:	fa93 f3a3 	rbit	r3, r3
 8002020:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002024:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002028:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800202c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002030:	fa93 f3a3 	rbit	r3, r3
 8002034:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002038:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <HAL_RCC_OscConfig+0x330>)
 800203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002040:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002044:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002048:	fa92 f2a2 	rbit	r2, r2
 800204c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002050:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002054:	fab2 f282 	clz	r2, r2
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	f042 0220 	orr.w	r2, r2, #32
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	f002 021f 	and.w	r2, r2, #31
 8002064:	2101      	movs	r1, #1
 8002066:	fa01 f202 	lsl.w	r2, r1, r2
 800206a:	4013      	ands	r3, r2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1ab      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x284>
 8002070:	e003      	b.n	800207a <HAL_RCC_OscConfig+0x336>
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800207a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 817d 	beq.w	800238a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002090:	4ba6      	ldr	r3, [pc, #664]	; (800232c <HAL_RCC_OscConfig+0x5e8>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 030c 	and.w	r3, r3, #12
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00b      	beq.n	80020b4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800209c:	4ba3      	ldr	r3, [pc, #652]	; (800232c <HAL_RCC_OscConfig+0x5e8>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 030c 	and.w	r3, r3, #12
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d172      	bne.n	800218e <HAL_RCC_OscConfig+0x44a>
 80020a8:	4ba0      	ldr	r3, [pc, #640]	; (800232c <HAL_RCC_OscConfig+0x5e8>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d16c      	bne.n	800218e <HAL_RCC_OscConfig+0x44a>
 80020b4:	2302      	movs	r3, #2
 80020b6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ba:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80020be:	fa93 f3a3 	rbit	r3, r3
 80020c2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80020c6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ca:	fab3 f383 	clz	r3, r3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	095b      	lsrs	r3, r3, #5
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d102      	bne.n	80020e4 <HAL_RCC_OscConfig+0x3a0>
 80020de:	4b93      	ldr	r3, [pc, #588]	; (800232c <HAL_RCC_OscConfig+0x5e8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	e013      	b.n	800210c <HAL_RCC_OscConfig+0x3c8>
 80020e4:	2302      	movs	r3, #2
 80020e6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80020ee:	fa93 f3a3 	rbit	r3, r3
 80020f2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80020f6:	2302      	movs	r3, #2
 80020f8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80020fc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002100:	fa93 f3a3 	rbit	r3, r3
 8002104:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002108:	4b88      	ldr	r3, [pc, #544]	; (800232c <HAL_RCC_OscConfig+0x5e8>)
 800210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210c:	2202      	movs	r2, #2
 800210e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002112:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002116:	fa92 f2a2 	rbit	r2, r2
 800211a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800211e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002122:	fab2 f282 	clz	r2, r2
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	f042 0220 	orr.w	r2, r2, #32
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	f002 021f 	and.w	r2, r2, #31
 8002132:	2101      	movs	r1, #1
 8002134:	fa01 f202 	lsl.w	r2, r1, r2
 8002138:	4013      	ands	r3, r2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00a      	beq.n	8002154 <HAL_RCC_OscConfig+0x410>
 800213e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002142:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d002      	beq.n	8002154 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	f000 be2e 	b.w	8002db0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002154:	4b75      	ldr	r3, [pc, #468]	; (800232c <HAL_RCC_OscConfig+0x5e8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800215c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002160:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	21f8      	movs	r1, #248	; 0xf8
 800216a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002172:	fa91 f1a1 	rbit	r1, r1
 8002176:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800217a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800217e:	fab1 f181 	clz	r1, r1
 8002182:	b2c9      	uxtb	r1, r1
 8002184:	408b      	lsls	r3, r1
 8002186:	4969      	ldr	r1, [pc, #420]	; (800232c <HAL_RCC_OscConfig+0x5e8>)
 8002188:	4313      	orrs	r3, r2
 800218a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800218c:	e0fd      	b.n	800238a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800218e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002192:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 8088 	beq.w	80022b0 <HAL_RCC_OscConfig+0x56c>
 80021a0:	2301      	movs	r3, #1
 80021a2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80021aa:	fa93 f3a3 	rbit	r3, r3
 80021ae:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80021b2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021b6:	fab3 f383 	clz	r3, r3
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	461a      	mov	r2, r3
 80021c8:	2301      	movs	r3, #1
 80021ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021cc:	f7fe fd76 	bl	8000cbc <HAL_GetTick>
 80021d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d4:	e00a      	b.n	80021ec <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021d6:	f7fe fd71 	bl	8000cbc <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d902      	bls.n	80021ec <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	f000 bde2 	b.w	8002db0 <HAL_RCC_OscConfig+0x106c>
 80021ec:	2302      	movs	r3, #2
 80021ee:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80021f6:	fa93 f3a3 	rbit	r3, r3
 80021fa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80021fe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	095b      	lsrs	r3, r3, #5
 800220a:	b2db      	uxtb	r3, r3
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b01      	cmp	r3, #1
 8002214:	d102      	bne.n	800221c <HAL_RCC_OscConfig+0x4d8>
 8002216:	4b45      	ldr	r3, [pc, #276]	; (800232c <HAL_RCC_OscConfig+0x5e8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	e013      	b.n	8002244 <HAL_RCC_OscConfig+0x500>
 800221c:	2302      	movs	r3, #2
 800221e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002222:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002226:	fa93 f3a3 	rbit	r3, r3
 800222a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800222e:	2302      	movs	r3, #2
 8002230:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002234:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002238:	fa93 f3a3 	rbit	r3, r3
 800223c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002240:	4b3a      	ldr	r3, [pc, #232]	; (800232c <HAL_RCC_OscConfig+0x5e8>)
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	2202      	movs	r2, #2
 8002246:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800224a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800224e:	fa92 f2a2 	rbit	r2, r2
 8002252:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002256:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800225a:	fab2 f282 	clz	r2, r2
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	f042 0220 	orr.w	r2, r2, #32
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	f002 021f 	and.w	r2, r2, #31
 800226a:	2101      	movs	r1, #1
 800226c:	fa01 f202 	lsl.w	r2, r1, r2
 8002270:	4013      	ands	r3, r2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0af      	beq.n	80021d6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002276:	4b2d      	ldr	r3, [pc, #180]	; (800232c <HAL_RCC_OscConfig+0x5e8>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800227e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002282:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	21f8      	movs	r1, #248	; 0xf8
 800228c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002290:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002294:	fa91 f1a1 	rbit	r1, r1
 8002298:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800229c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80022a0:	fab1 f181 	clz	r1, r1
 80022a4:	b2c9      	uxtb	r1, r1
 80022a6:	408b      	lsls	r3, r1
 80022a8:	4920      	ldr	r1, [pc, #128]	; (800232c <HAL_RCC_OscConfig+0x5e8>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	600b      	str	r3, [r1, #0]
 80022ae:	e06c      	b.n	800238a <HAL_RCC_OscConfig+0x646>
 80022b0:	2301      	movs	r3, #1
 80022b2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80022ba:	fa93 f3a3 	rbit	r3, r3
 80022be:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80022c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022c6:	fab3 f383 	clz	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	461a      	mov	r2, r3
 80022d8:	2300      	movs	r3, #0
 80022da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7fe fcee 	bl	8000cbc <HAL_GetTick>
 80022e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e4:	e00a      	b.n	80022fc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022e6:	f7fe fce9 	bl	8000cbc <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d902      	bls.n	80022fc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	f000 bd5a 	b.w	8002db0 <HAL_RCC_OscConfig+0x106c>
 80022fc:	2302      	movs	r3, #2
 80022fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002302:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002306:	fa93 f3a3 	rbit	r3, r3
 800230a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800230e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002312:	fab3 f383 	clz	r3, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	095b      	lsrs	r3, r3, #5
 800231a:	b2db      	uxtb	r3, r3
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b01      	cmp	r3, #1
 8002324:	d104      	bne.n	8002330 <HAL_RCC_OscConfig+0x5ec>
 8002326:	4b01      	ldr	r3, [pc, #4]	; (800232c <HAL_RCC_OscConfig+0x5e8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	e015      	b.n	8002358 <HAL_RCC_OscConfig+0x614>
 800232c:	40021000 	.word	0x40021000
 8002330:	2302      	movs	r3, #2
 8002332:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800233a:	fa93 f3a3 	rbit	r3, r3
 800233e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002342:	2302      	movs	r3, #2
 8002344:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002348:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800234c:	fa93 f3a3 	rbit	r3, r3
 8002350:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002354:	4bc8      	ldr	r3, [pc, #800]	; (8002678 <HAL_RCC_OscConfig+0x934>)
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	2202      	movs	r2, #2
 800235a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800235e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002362:	fa92 f2a2 	rbit	r2, r2
 8002366:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800236a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800236e:	fab2 f282 	clz	r2, r2
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	f042 0220 	orr.w	r2, r2, #32
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	f002 021f 	and.w	r2, r2, #31
 800237e:	2101      	movs	r1, #1
 8002380:	fa01 f202 	lsl.w	r2, r1, r2
 8002384:	4013      	ands	r3, r2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1ad      	bne.n	80022e6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800238a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 8110 	beq.w	80025c0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d079      	beq.n	80024a4 <HAL_RCC_OscConfig+0x760>
 80023b0:	2301      	movs	r3, #1
 80023b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80023ba:	fa93 f3a3 	rbit	r3, r3
 80023be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80023c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023c6:	fab3 f383 	clz	r3, r3
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	461a      	mov	r2, r3
 80023ce:	4bab      	ldr	r3, [pc, #684]	; (800267c <HAL_RCC_OscConfig+0x938>)
 80023d0:	4413      	add	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	461a      	mov	r2, r3
 80023d6:	2301      	movs	r3, #1
 80023d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023da:	f7fe fc6f 	bl	8000cbc <HAL_GetTick>
 80023de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023e2:	e00a      	b.n	80023fa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023e4:	f7fe fc6a 	bl	8000cbc <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d902      	bls.n	80023fa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	f000 bcdb 	b.w	8002db0 <HAL_RCC_OscConfig+0x106c>
 80023fa:	2302      	movs	r3, #2
 80023fc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002400:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002404:	fa93 f3a3 	rbit	r3, r3
 8002408:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800240c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002410:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002414:	2202      	movs	r2, #2
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	fa93 f2a3 	rbit	r2, r3
 8002426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002438:	2202      	movs	r2, #2
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	fa93 f2a3 	rbit	r2, r3
 800244a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002452:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002454:	4b88      	ldr	r3, [pc, #544]	; (8002678 <HAL_RCC_OscConfig+0x934>)
 8002456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002460:	2102      	movs	r1, #2
 8002462:	6019      	str	r1, [r3, #0]
 8002464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002468:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	fa93 f1a3 	rbit	r1, r3
 8002472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002476:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800247a:	6019      	str	r1, [r3, #0]
  return result;
 800247c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002480:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	fab3 f383 	clz	r3, r3
 800248a:	b2db      	uxtb	r3, r3
 800248c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002490:	b2db      	uxtb	r3, r3
 8002492:	f003 031f 	and.w	r3, r3, #31
 8002496:	2101      	movs	r1, #1
 8002498:	fa01 f303 	lsl.w	r3, r1, r3
 800249c:	4013      	ands	r3, r2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0a0      	beq.n	80023e4 <HAL_RCC_OscConfig+0x6a0>
 80024a2:	e08d      	b.n	80025c0 <HAL_RCC_OscConfig+0x87c>
 80024a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80024ac:	2201      	movs	r2, #1
 80024ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	fa93 f2a3 	rbit	r2, r3
 80024be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80024c6:	601a      	str	r2, [r3, #0]
  return result;
 80024c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024cc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80024d0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024d2:	fab3 f383 	clz	r3, r3
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	461a      	mov	r2, r3
 80024da:	4b68      	ldr	r3, [pc, #416]	; (800267c <HAL_RCC_OscConfig+0x938>)
 80024dc:	4413      	add	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	461a      	mov	r2, r3
 80024e2:	2300      	movs	r3, #0
 80024e4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e6:	f7fe fbe9 	bl	8000cbc <HAL_GetTick>
 80024ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ee:	e00a      	b.n	8002506 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024f0:	f7fe fbe4 	bl	8000cbc <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d902      	bls.n	8002506 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	f000 bc55 	b.w	8002db0 <HAL_RCC_OscConfig+0x106c>
 8002506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800250e:	2202      	movs	r2, #2
 8002510:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002516:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	fa93 f2a3 	rbit	r2, r3
 8002520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002524:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002532:	2202      	movs	r2, #2
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	fa93 f2a3 	rbit	r2, r3
 8002544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002548:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002552:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002556:	2202      	movs	r2, #2
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	fa93 f2a3 	rbit	r2, r3
 8002568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002570:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002572:	4b41      	ldr	r3, [pc, #260]	; (8002678 <HAL_RCC_OscConfig+0x934>)
 8002574:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800257e:	2102      	movs	r1, #2
 8002580:	6019      	str	r1, [r3, #0]
 8002582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002586:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	fa93 f1a3 	rbit	r1, r3
 8002590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002594:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002598:	6019      	str	r1, [r3, #0]
  return result;
 800259a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	fab3 f383 	clz	r3, r3
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	f003 031f 	and.w	r3, r3, #31
 80025b4:	2101      	movs	r1, #1
 80025b6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ba:	4013      	ands	r3, r2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d197      	bne.n	80024f0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 81a1 	beq.w	8002918 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025d6:	2300      	movs	r3, #0
 80025d8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025dc:	4b26      	ldr	r3, [pc, #152]	; (8002678 <HAL_RCC_OscConfig+0x934>)
 80025de:	69db      	ldr	r3, [r3, #28]
 80025e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d116      	bne.n	8002616 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025e8:	4b23      	ldr	r3, [pc, #140]	; (8002678 <HAL_RCC_OscConfig+0x934>)
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	4a22      	ldr	r2, [pc, #136]	; (8002678 <HAL_RCC_OscConfig+0x934>)
 80025ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f2:	61d3      	str	r3, [r2, #28]
 80025f4:	4b20      	ldr	r3, [pc, #128]	; (8002678 <HAL_RCC_OscConfig+0x934>)
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80025fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002600:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800260e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002610:	2301      	movs	r3, #1
 8002612:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002616:	4b1a      	ldr	r3, [pc, #104]	; (8002680 <HAL_RCC_OscConfig+0x93c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d11a      	bne.n	8002658 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002622:	4b17      	ldr	r3, [pc, #92]	; (8002680 <HAL_RCC_OscConfig+0x93c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a16      	ldr	r2, [pc, #88]	; (8002680 <HAL_RCC_OscConfig+0x93c>)
 8002628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800262c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800262e:	f7fe fb45 	bl	8000cbc <HAL_GetTick>
 8002632:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002636:	e009      	b.n	800264c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002638:	f7fe fb40 	bl	8000cbc <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b64      	cmp	r3, #100	; 0x64
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e3b1      	b.n	8002db0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264c:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <HAL_RCC_OscConfig+0x93c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0ef      	beq.n	8002638 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d10d      	bne.n	8002684 <HAL_RCC_OscConfig+0x940>
 8002668:	4b03      	ldr	r3, [pc, #12]	; (8002678 <HAL_RCC_OscConfig+0x934>)
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	4a02      	ldr	r2, [pc, #8]	; (8002678 <HAL_RCC_OscConfig+0x934>)
 800266e:	f043 0301 	orr.w	r3, r3, #1
 8002672:	6213      	str	r3, [r2, #32]
 8002674:	e03c      	b.n	80026f0 <HAL_RCC_OscConfig+0x9ac>
 8002676:	bf00      	nop
 8002678:	40021000 	.word	0x40021000
 800267c:	10908120 	.word	0x10908120
 8002680:	40007000 	.word	0x40007000
 8002684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002688:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10c      	bne.n	80026ae <HAL_RCC_OscConfig+0x96a>
 8002694:	4bc1      	ldr	r3, [pc, #772]	; (800299c <HAL_RCC_OscConfig+0xc58>)
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	4ac0      	ldr	r2, [pc, #768]	; (800299c <HAL_RCC_OscConfig+0xc58>)
 800269a:	f023 0301 	bic.w	r3, r3, #1
 800269e:	6213      	str	r3, [r2, #32]
 80026a0:	4bbe      	ldr	r3, [pc, #760]	; (800299c <HAL_RCC_OscConfig+0xc58>)
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	4abd      	ldr	r2, [pc, #756]	; (800299c <HAL_RCC_OscConfig+0xc58>)
 80026a6:	f023 0304 	bic.w	r3, r3, #4
 80026aa:	6213      	str	r3, [r2, #32]
 80026ac:	e020      	b.n	80026f0 <HAL_RCC_OscConfig+0x9ac>
 80026ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	2b05      	cmp	r3, #5
 80026bc:	d10c      	bne.n	80026d8 <HAL_RCC_OscConfig+0x994>
 80026be:	4bb7      	ldr	r3, [pc, #732]	; (800299c <HAL_RCC_OscConfig+0xc58>)
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	4ab6      	ldr	r2, [pc, #728]	; (800299c <HAL_RCC_OscConfig+0xc58>)
 80026c4:	f043 0304 	orr.w	r3, r3, #4
 80026c8:	6213      	str	r3, [r2, #32]
 80026ca:	4bb4      	ldr	r3, [pc, #720]	; (800299c <HAL_RCC_OscConfig+0xc58>)
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	4ab3      	ldr	r2, [pc, #716]	; (800299c <HAL_RCC_OscConfig+0xc58>)
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	6213      	str	r3, [r2, #32]
 80026d6:	e00b      	b.n	80026f0 <HAL_RCC_OscConfig+0x9ac>
 80026d8:	4bb0      	ldr	r3, [pc, #704]	; (800299c <HAL_RCC_OscConfig+0xc58>)
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	4aaf      	ldr	r2, [pc, #700]	; (800299c <HAL_RCC_OscConfig+0xc58>)
 80026de:	f023 0301 	bic.w	r3, r3, #1
 80026e2:	6213      	str	r3, [r2, #32]
 80026e4:	4bad      	ldr	r3, [pc, #692]	; (800299c <HAL_RCC_OscConfig+0xc58>)
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	4aac      	ldr	r2, [pc, #688]	; (800299c <HAL_RCC_OscConfig+0xc58>)
 80026ea:	f023 0304 	bic.w	r3, r3, #4
 80026ee:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 8081 	beq.w	8002804 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002702:	f7fe fadb 	bl	8000cbc <HAL_GetTick>
 8002706:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270a:	e00b      	b.n	8002724 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800270c:	f7fe fad6 	bl	8000cbc <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	f241 3288 	movw	r2, #5000	; 0x1388
 800271c:	4293      	cmp	r3, r2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e345      	b.n	8002db0 <HAL_RCC_OscConfig+0x106c>
 8002724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002728:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800272c:	2202      	movs	r2, #2
 800272e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002734:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	fa93 f2a3 	rbit	r2, r3
 800273e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002742:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002750:	2202      	movs	r2, #2
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002758:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	fa93 f2a3 	rbit	r2, r3
 8002762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002766:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800276a:	601a      	str	r2, [r3, #0]
  return result;
 800276c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002770:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002774:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002776:	fab3 f383 	clz	r3, r3
 800277a:	b2db      	uxtb	r3, r3
 800277c:	095b      	lsrs	r3, r3, #5
 800277e:	b2db      	uxtb	r3, r3
 8002780:	f043 0302 	orr.w	r3, r3, #2
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d102      	bne.n	8002790 <HAL_RCC_OscConfig+0xa4c>
 800278a:	4b84      	ldr	r3, [pc, #528]	; (800299c <HAL_RCC_OscConfig+0xc58>)
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	e013      	b.n	80027b8 <HAL_RCC_OscConfig+0xa74>
 8002790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002794:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002798:	2202      	movs	r2, #2
 800279a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	fa93 f2a3 	rbit	r2, r3
 80027aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ae:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	4b79      	ldr	r3, [pc, #484]	; (800299c <HAL_RCC_OscConfig+0xc58>)
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027bc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80027c0:	2102      	movs	r1, #2
 80027c2:	6011      	str	r1, [r2, #0]
 80027c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027c8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80027cc:	6812      	ldr	r2, [r2, #0]
 80027ce:	fa92 f1a2 	rbit	r1, r2
 80027d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027d6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80027da:	6011      	str	r1, [r2, #0]
  return result;
 80027dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027e0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80027e4:	6812      	ldr	r2, [r2, #0]
 80027e6:	fab2 f282 	clz	r2, r2
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	f002 021f 	and.w	r2, r2, #31
 80027f6:	2101      	movs	r1, #1
 80027f8:	fa01 f202 	lsl.w	r2, r1, r2
 80027fc:	4013      	ands	r3, r2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d084      	beq.n	800270c <HAL_RCC_OscConfig+0x9c8>
 8002802:	e07f      	b.n	8002904 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002804:	f7fe fa5a 	bl	8000cbc <HAL_GetTick>
 8002808:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800280c:	e00b      	b.n	8002826 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800280e:	f7fe fa55 	bl	8000cbc <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	f241 3288 	movw	r2, #5000	; 0x1388
 800281e:	4293      	cmp	r3, r2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e2c4      	b.n	8002db0 <HAL_RCC_OscConfig+0x106c>
 8002826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800282e:	2202      	movs	r2, #2
 8002830:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002836:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	fa93 f2a3 	rbit	r2, r3
 8002840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002844:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002852:	2202      	movs	r2, #2
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	fa93 f2a3 	rbit	r2, r3
 8002864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002868:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800286c:	601a      	str	r2, [r3, #0]
  return result;
 800286e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002872:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002876:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002878:	fab3 f383 	clz	r3, r3
 800287c:	b2db      	uxtb	r3, r3
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	b2db      	uxtb	r3, r3
 8002882:	f043 0302 	orr.w	r3, r3, #2
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d102      	bne.n	8002892 <HAL_RCC_OscConfig+0xb4e>
 800288c:	4b43      	ldr	r3, [pc, #268]	; (800299c <HAL_RCC_OscConfig+0xc58>)
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	e013      	b.n	80028ba <HAL_RCC_OscConfig+0xb76>
 8002892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002896:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800289a:	2202      	movs	r2, #2
 800289c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	fa93 f2a3 	rbit	r2, r3
 80028ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	4b39      	ldr	r3, [pc, #228]	; (800299c <HAL_RCC_OscConfig+0xc58>)
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028be:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80028c2:	2102      	movs	r1, #2
 80028c4:	6011      	str	r1, [r2, #0]
 80028c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028ca:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80028ce:	6812      	ldr	r2, [r2, #0]
 80028d0:	fa92 f1a2 	rbit	r1, r2
 80028d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028d8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80028dc:	6011      	str	r1, [r2, #0]
  return result;
 80028de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028e2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80028e6:	6812      	ldr	r2, [r2, #0]
 80028e8:	fab2 f282 	clz	r2, r2
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	f002 021f 	and.w	r2, r2, #31
 80028f8:	2101      	movs	r1, #1
 80028fa:	fa01 f202 	lsl.w	r2, r1, r2
 80028fe:	4013      	ands	r3, r2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d184      	bne.n	800280e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002904:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002908:	2b01      	cmp	r3, #1
 800290a:	d105      	bne.n	8002918 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800290c:	4b23      	ldr	r3, [pc, #140]	; (800299c <HAL_RCC_OscConfig+0xc58>)
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	4a22      	ldr	r2, [pc, #136]	; (800299c <HAL_RCC_OscConfig+0xc58>)
 8002912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002916:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 8242 	beq.w	8002dae <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800292a:	4b1c      	ldr	r3, [pc, #112]	; (800299c <HAL_RCC_OscConfig+0xc58>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f003 030c 	and.w	r3, r3, #12
 8002932:	2b08      	cmp	r3, #8
 8002934:	f000 8213 	beq.w	8002d5e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	69db      	ldr	r3, [r3, #28]
 8002944:	2b02      	cmp	r3, #2
 8002946:	f040 8162 	bne.w	8002c0e <HAL_RCC_OscConfig+0xeca>
 800294a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002952:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002956:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002958:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	fa93 f2a3 	rbit	r2, r3
 8002966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800296e:	601a      	str	r2, [r3, #0]
  return result;
 8002970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002974:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002978:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297a:	fab3 f383 	clz	r3, r3
 800297e:	b2db      	uxtb	r3, r3
 8002980:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002984:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	461a      	mov	r2, r3
 800298c:	2300      	movs	r3, #0
 800298e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002990:	f7fe f994 	bl	8000cbc <HAL_GetTick>
 8002994:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002998:	e00c      	b.n	80029b4 <HAL_RCC_OscConfig+0xc70>
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a0:	f7fe f98c 	bl	8000cbc <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e1fd      	b.n	8002db0 <HAL_RCC_OscConfig+0x106c>
 80029b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80029bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	fa93 f2a3 	rbit	r2, r3
 80029d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80029d8:	601a      	str	r2, [r3, #0]
  return result;
 80029da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029de:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80029e2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e4:	fab3 f383 	clz	r3, r3
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	095b      	lsrs	r3, r3, #5
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d102      	bne.n	80029fe <HAL_RCC_OscConfig+0xcba>
 80029f8:	4bb0      	ldr	r3, [pc, #704]	; (8002cbc <HAL_RCC_OscConfig+0xf78>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	e027      	b.n	8002a4e <HAL_RCC_OscConfig+0xd0a>
 80029fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a02:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002a06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a10:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	fa93 f2a3 	rbit	r2, r3
 8002a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a28:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002a2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a36:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	fa93 f2a3 	rbit	r2, r3
 8002a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a44:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	4b9c      	ldr	r3, [pc, #624]	; (8002cbc <HAL_RCC_OscConfig+0xf78>)
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a52:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002a56:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a5a:	6011      	str	r1, [r2, #0]
 8002a5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a60:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002a64:	6812      	ldr	r2, [r2, #0]
 8002a66:	fa92 f1a2 	rbit	r1, r2
 8002a6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a6e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a72:	6011      	str	r1, [r2, #0]
  return result;
 8002a74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a78:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a7c:	6812      	ldr	r2, [r2, #0]
 8002a7e:	fab2 f282 	clz	r2, r2
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	f042 0220 	orr.w	r2, r2, #32
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	f002 021f 	and.w	r2, r2, #31
 8002a8e:	2101      	movs	r1, #1
 8002a90:	fa01 f202 	lsl.w	r2, r1, r2
 8002a94:	4013      	ands	r3, r2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d182      	bne.n	80029a0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a9a:	4b88      	ldr	r3, [pc, #544]	; (8002cbc <HAL_RCC_OscConfig+0xf78>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	430b      	orrs	r3, r1
 8002abc:	497f      	ldr	r1, [pc, #508]	; (8002cbc <HAL_RCC_OscConfig+0xf78>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	604b      	str	r3, [r1, #4]
 8002ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002aca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ace:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	fa93 f2a3 	rbit	r2, r3
 8002ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002ae6:	601a      	str	r2, [r3, #0]
  return result;
 8002ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aec:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002af0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002af2:	fab3 f383 	clz	r3, r3
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002afc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	461a      	mov	r2, r3
 8002b04:	2301      	movs	r3, #1
 8002b06:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7fe f8d8 	bl	8000cbc <HAL_GetTick>
 8002b0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b10:	e009      	b.n	8002b26 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b12:	f7fe f8d3 	bl	8000cbc <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e144      	b.n	8002db0 <HAL_RCC_OscConfig+0x106c>
 8002b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b38:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	fa93 f2a3 	rbit	r2, r3
 8002b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b46:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b4a:	601a      	str	r2, [r3, #0]
  return result;
 8002b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b50:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b54:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b56:	fab3 f383 	clz	r3, r3
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	095b      	lsrs	r3, r3, #5
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d102      	bne.n	8002b70 <HAL_RCC_OscConfig+0xe2c>
 8002b6a:	4b54      	ldr	r3, [pc, #336]	; (8002cbc <HAL_RCC_OscConfig+0xf78>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	e027      	b.n	8002bc0 <HAL_RCC_OscConfig+0xe7c>
 8002b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b74:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002b78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b82:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	fa93 f2a3 	rbit	r2, r3
 8002b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b90:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b9a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002b9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	fa93 f2a3 	rbit	r2, r3
 8002bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	4b3f      	ldr	r3, [pc, #252]	; (8002cbc <HAL_RCC_OscConfig+0xf78>)
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bc4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002bc8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002bcc:	6011      	str	r1, [r2, #0]
 8002bce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bd2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002bd6:	6812      	ldr	r2, [r2, #0]
 8002bd8:	fa92 f1a2 	rbit	r1, r2
 8002bdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002be0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002be4:	6011      	str	r1, [r2, #0]
  return result;
 8002be6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bea:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002bee:	6812      	ldr	r2, [r2, #0]
 8002bf0:	fab2 f282 	clz	r2, r2
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	f042 0220 	orr.w	r2, r2, #32
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	f002 021f 	and.w	r2, r2, #31
 8002c00:	2101      	movs	r1, #1
 8002c02:	fa01 f202 	lsl.w	r2, r1, r2
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d082      	beq.n	8002b12 <HAL_RCC_OscConfig+0xdce>
 8002c0c:	e0cf      	b.n	8002dae <HAL_RCC_OscConfig+0x106a>
 8002c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c12:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002c16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c20:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	fa93 f2a3 	rbit	r2, r3
 8002c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c32:	601a      	str	r2, [r3, #0]
  return result;
 8002c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c38:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c3c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c3e:	fab3 f383 	clz	r3, r3
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c48:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	461a      	mov	r2, r3
 8002c50:	2300      	movs	r3, #0
 8002c52:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c54:	f7fe f832 	bl	8000cbc <HAL_GetTick>
 8002c58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c5c:	e009      	b.n	8002c72 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c5e:	f7fe f82d 	bl	8000cbc <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e09e      	b.n	8002db0 <HAL_RCC_OscConfig+0x106c>
 8002c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c76:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002c7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c84:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	fa93 f2a3 	rbit	r2, r3
 8002c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c92:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c96:	601a      	str	r2, [r3, #0]
  return result;
 8002c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002ca0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca2:	fab3 f383 	clz	r3, r3
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	095b      	lsrs	r3, r3, #5
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d104      	bne.n	8002cc0 <HAL_RCC_OscConfig+0xf7c>
 8002cb6:	4b01      	ldr	r3, [pc, #4]	; (8002cbc <HAL_RCC_OscConfig+0xf78>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	e029      	b.n	8002d10 <HAL_RCC_OscConfig+0xfcc>
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002cc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ccc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	fa93 f2a3 	rbit	r2, r3
 8002cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cea:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002cee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	fa93 f2a3 	rbit	r2, r3
 8002d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d06:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	4b2b      	ldr	r3, [pc, #172]	; (8002dbc <HAL_RCC_OscConfig+0x1078>)
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d14:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002d18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d1c:	6011      	str	r1, [r2, #0]
 8002d1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d22:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002d26:	6812      	ldr	r2, [r2, #0]
 8002d28:	fa92 f1a2 	rbit	r1, r2
 8002d2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d30:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d34:	6011      	str	r1, [r2, #0]
  return result;
 8002d36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d3a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	fab2 f282 	clz	r2, r2
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	f042 0220 	orr.w	r2, r2, #32
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	f002 021f 	and.w	r2, r2, #31
 8002d50:	2101      	movs	r1, #1
 8002d52:	fa01 f202 	lsl.w	r2, r1, r2
 8002d56:	4013      	ands	r3, r2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d180      	bne.n	8002c5e <HAL_RCC_OscConfig+0xf1a>
 8002d5c:	e027      	b.n	8002dae <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d101      	bne.n	8002d72 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e01e      	b.n	8002db0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d72:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <HAL_RCC_OscConfig+0x1078>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d7a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d7e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d10b      	bne.n	8002daa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002d92:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d001      	beq.n	8002dae <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40021000 	.word	0x40021000

08002dc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b09e      	sub	sp, #120	; 0x78
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e162      	b.n	800309e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dd8:	4b90      	ldr	r3, [pc, #576]	; (800301c <HAL_RCC_ClockConfig+0x25c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d910      	bls.n	8002e08 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de6:	4b8d      	ldr	r3, [pc, #564]	; (800301c <HAL_RCC_ClockConfig+0x25c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f023 0207 	bic.w	r2, r3, #7
 8002dee:	498b      	ldr	r1, [pc, #556]	; (800301c <HAL_RCC_ClockConfig+0x25c>)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df6:	4b89      	ldr	r3, [pc, #548]	; (800301c <HAL_RCC_ClockConfig+0x25c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d001      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e14a      	b.n	800309e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d008      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e14:	4b82      	ldr	r3, [pc, #520]	; (8003020 <HAL_RCC_ClockConfig+0x260>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	497f      	ldr	r1, [pc, #508]	; (8003020 <HAL_RCC_ClockConfig+0x260>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 80dc 	beq.w	8002fec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d13c      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0xf6>
 8002e3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e40:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e44:	fa93 f3a3 	rbit	r3, r3
 8002e48:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4c:	fab3 f383 	clz	r3, r3
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	095b      	lsrs	r3, r3, #5
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	f043 0301 	orr.w	r3, r3, #1
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d102      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xa6>
 8002e60:	4b6f      	ldr	r3, [pc, #444]	; (8003020 <HAL_RCC_ClockConfig+0x260>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	e00f      	b.n	8002e86 <HAL_RCC_ClockConfig+0xc6>
 8002e66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e6a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e6e:	fa93 f3a3 	rbit	r3, r3
 8002e72:	667b      	str	r3, [r7, #100]	; 0x64
 8002e74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e78:	663b      	str	r3, [r7, #96]	; 0x60
 8002e7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e7c:	fa93 f3a3 	rbit	r3, r3
 8002e80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e82:	4b67      	ldr	r3, [pc, #412]	; (8003020 <HAL_RCC_ClockConfig+0x260>)
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e8a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e8e:	fa92 f2a2 	rbit	r2, r2
 8002e92:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002e94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e96:	fab2 f282 	clz	r2, r2
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	f042 0220 	orr.w	r2, r2, #32
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	f002 021f 	and.w	r2, r2, #31
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8002eac:	4013      	ands	r3, r2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d17b      	bne.n	8002faa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e0f3      	b.n	800309e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d13c      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x178>
 8002ebe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ec2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ec6:	fa93 f3a3 	rbit	r3, r3
 8002eca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ece:	fab3 f383 	clz	r3, r3
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	095b      	lsrs	r3, r3, #5
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d102      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0x128>
 8002ee2:	4b4f      	ldr	r3, [pc, #316]	; (8003020 <HAL_RCC_ClockConfig+0x260>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	e00f      	b.n	8002f08 <HAL_RCC_ClockConfig+0x148>
 8002ee8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ef0:	fa93 f3a3 	rbit	r3, r3
 8002ef4:	647b      	str	r3, [r7, #68]	; 0x44
 8002ef6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002efa:	643b      	str	r3, [r7, #64]	; 0x40
 8002efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002efe:	fa93 f3a3 	rbit	r3, r3
 8002f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f04:	4b46      	ldr	r3, [pc, #280]	; (8003020 <HAL_RCC_ClockConfig+0x260>)
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f0c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002f0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f10:	fa92 f2a2 	rbit	r2, r2
 8002f14:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002f16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f18:	fab2 f282 	clz	r2, r2
 8002f1c:	b2d2      	uxtb	r2, r2
 8002f1e:	f042 0220 	orr.w	r2, r2, #32
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	f002 021f 	and.w	r2, r2, #31
 8002f28:	2101      	movs	r1, #1
 8002f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f2e:	4013      	ands	r3, r2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d13a      	bne.n	8002faa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0b2      	b.n	800309e <HAL_RCC_ClockConfig+0x2de>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3e:	fa93 f3a3 	rbit	r3, r3
 8002f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f46:	fab3 f383 	clz	r3, r3
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	095b      	lsrs	r3, r3, #5
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d102      	bne.n	8002f60 <HAL_RCC_ClockConfig+0x1a0>
 8002f5a:	4b31      	ldr	r3, [pc, #196]	; (8003020 <HAL_RCC_ClockConfig+0x260>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	e00d      	b.n	8002f7c <HAL_RCC_ClockConfig+0x1bc>
 8002f60:	2302      	movs	r3, #2
 8002f62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f66:	fa93 f3a3 	rbit	r3, r3
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	623b      	str	r3, [r7, #32]
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	fa93 f3a3 	rbit	r3, r3
 8002f76:	61fb      	str	r3, [r7, #28]
 8002f78:	4b29      	ldr	r3, [pc, #164]	; (8003020 <HAL_RCC_ClockConfig+0x260>)
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	61ba      	str	r2, [r7, #24]
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	fa92 f2a2 	rbit	r2, r2
 8002f86:	617a      	str	r2, [r7, #20]
  return result;
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	fab2 f282 	clz	r2, r2
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	f042 0220 	orr.w	r2, r2, #32
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	f002 021f 	and.w	r2, r2, #31
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e079      	b.n	800309e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002faa:	4b1d      	ldr	r3, [pc, #116]	; (8003020 <HAL_RCC_ClockConfig+0x260>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f023 0203 	bic.w	r2, r3, #3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	491a      	ldr	r1, [pc, #104]	; (8003020 <HAL_RCC_ClockConfig+0x260>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fbc:	f7fd fe7e 	bl	8000cbc <HAL_GetTick>
 8002fc0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc2:	e00a      	b.n	8002fda <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc4:	f7fd fe7a 	bl	8000cbc <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e061      	b.n	800309e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fda:	4b11      	ldr	r3, [pc, #68]	; (8003020 <HAL_RCC_ClockConfig+0x260>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f003 020c 	and.w	r2, r3, #12
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d1eb      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fec:	4b0b      	ldr	r3, [pc, #44]	; (800301c <HAL_RCC_ClockConfig+0x25c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d214      	bcs.n	8003024 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffa:	4b08      	ldr	r3, [pc, #32]	; (800301c <HAL_RCC_ClockConfig+0x25c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f023 0207 	bic.w	r2, r3, #7
 8003002:	4906      	ldr	r1, [pc, #24]	; (800301c <HAL_RCC_ClockConfig+0x25c>)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	4313      	orrs	r3, r2
 8003008:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800300a:	4b04      	ldr	r3, [pc, #16]	; (800301c <HAL_RCC_ClockConfig+0x25c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	d005      	beq.n	8003024 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e040      	b.n	800309e <HAL_RCC_ClockConfig+0x2de>
 800301c:	40022000 	.word	0x40022000
 8003020:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	2b00      	cmp	r3, #0
 800302e:	d008      	beq.n	8003042 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003030:	4b1d      	ldr	r3, [pc, #116]	; (80030a8 <HAL_RCC_ClockConfig+0x2e8>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	491a      	ldr	r1, [pc, #104]	; (80030a8 <HAL_RCC_ClockConfig+0x2e8>)
 800303e:	4313      	orrs	r3, r2
 8003040:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d009      	beq.n	8003062 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800304e:	4b16      	ldr	r3, [pc, #88]	; (80030a8 <HAL_RCC_ClockConfig+0x2e8>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	4912      	ldr	r1, [pc, #72]	; (80030a8 <HAL_RCC_ClockConfig+0x2e8>)
 800305e:	4313      	orrs	r3, r2
 8003060:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003062:	f000 f829 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 8003066:	4601      	mov	r1, r0
 8003068:	4b0f      	ldr	r3, [pc, #60]	; (80030a8 <HAL_RCC_ClockConfig+0x2e8>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003070:	22f0      	movs	r2, #240	; 0xf0
 8003072:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	fa92 f2a2 	rbit	r2, r2
 800307a:	60fa      	str	r2, [r7, #12]
  return result;
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	fab2 f282 	clz	r2, r2
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	40d3      	lsrs	r3, r2
 8003086:	4a09      	ldr	r2, [pc, #36]	; (80030ac <HAL_RCC_ClockConfig+0x2ec>)
 8003088:	5cd3      	ldrb	r3, [r2, r3]
 800308a:	fa21 f303 	lsr.w	r3, r1, r3
 800308e:	4a08      	ldr	r2, [pc, #32]	; (80030b0 <HAL_RCC_ClockConfig+0x2f0>)
 8003090:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003092:	4b08      	ldr	r3, [pc, #32]	; (80030b4 <HAL_RCC_ClockConfig+0x2f4>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f7fd fdcc 	bl	8000c34 <HAL_InitTick>
  
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3778      	adds	r7, #120	; 0x78
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40021000 	.word	0x40021000
 80030ac:	08003d80 	.word	0x08003d80
 80030b0:	20000000 	.word	0x20000000
 80030b4:	20000004 	.word	0x20000004

080030b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b08b      	sub	sp, #44	; 0x2c
 80030bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	61fb      	str	r3, [r7, #28]
 80030c2:	2300      	movs	r3, #0
 80030c4:	61bb      	str	r3, [r7, #24]
 80030c6:	2300      	movs	r3, #0
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
 80030ca:	2300      	movs	r3, #0
 80030cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80030d2:	4b29      	ldr	r3, [pc, #164]	; (8003178 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	f003 030c 	and.w	r3, r3, #12
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d002      	beq.n	80030e8 <HAL_RCC_GetSysClockFreq+0x30>
 80030e2:	2b08      	cmp	r3, #8
 80030e4:	d003      	beq.n	80030ee <HAL_RCC_GetSysClockFreq+0x36>
 80030e6:	e03c      	b.n	8003162 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030e8:	4b24      	ldr	r3, [pc, #144]	; (800317c <HAL_RCC_GetSysClockFreq+0xc4>)
 80030ea:	623b      	str	r3, [r7, #32]
      break;
 80030ec:	e03c      	b.n	8003168 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80030f4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80030f8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	fa92 f2a2 	rbit	r2, r2
 8003100:	607a      	str	r2, [r7, #4]
  return result;
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	fab2 f282 	clz	r2, r2
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	40d3      	lsrs	r3, r2
 800310c:	4a1c      	ldr	r2, [pc, #112]	; (8003180 <HAL_RCC_GetSysClockFreq+0xc8>)
 800310e:	5cd3      	ldrb	r3, [r2, r3]
 8003110:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003112:	4b19      	ldr	r3, [pc, #100]	; (8003178 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	220f      	movs	r2, #15
 800311c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	fa92 f2a2 	rbit	r2, r2
 8003124:	60fa      	str	r2, [r7, #12]
  return result;
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	fab2 f282 	clz	r2, r2
 800312c:	b2d2      	uxtb	r2, r2
 800312e:	40d3      	lsrs	r3, r2
 8003130:	4a14      	ldr	r2, [pc, #80]	; (8003184 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003132:	5cd3      	ldrb	r3, [r2, r3]
 8003134:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d008      	beq.n	8003152 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003140:	4a0e      	ldr	r2, [pc, #56]	; (800317c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	fbb2 f2f3 	udiv	r2, r2, r3
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	fb02 f303 	mul.w	r3, r2, r3
 800314e:	627b      	str	r3, [r7, #36]	; 0x24
 8003150:	e004      	b.n	800315c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	4a0c      	ldr	r2, [pc, #48]	; (8003188 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003156:	fb02 f303 	mul.w	r3, r2, r3
 800315a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	623b      	str	r3, [r7, #32]
      break;
 8003160:	e002      	b.n	8003168 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003162:	4b06      	ldr	r3, [pc, #24]	; (800317c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003164:	623b      	str	r3, [r7, #32]
      break;
 8003166:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003168:	6a3b      	ldr	r3, [r7, #32]
}
 800316a:	4618      	mov	r0, r3
 800316c:	372c      	adds	r7, #44	; 0x2c
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	40021000 	.word	0x40021000
 800317c:	007a1200 	.word	0x007a1200
 8003180:	08003d98 	.word	0x08003d98
 8003184:	08003da8 	.word	0x08003da8
 8003188:	003d0900 	.word	0x003d0900

0800318c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003190:	4b03      	ldr	r3, [pc, #12]	; (80031a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003192:	681b      	ldr	r3, [r3, #0]
}
 8003194:	4618      	mov	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	20000000 	.word	0x20000000

080031a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80031aa:	f7ff ffef 	bl	800318c <HAL_RCC_GetHCLKFreq>
 80031ae:	4601      	mov	r1, r0
 80031b0:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031b8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80031bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	fa92 f2a2 	rbit	r2, r2
 80031c4:	603a      	str	r2, [r7, #0]
  return result;
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	fab2 f282 	clz	r2, r2
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	40d3      	lsrs	r3, r2
 80031d0:	4a04      	ldr	r2, [pc, #16]	; (80031e4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80031d2:	5cd3      	ldrb	r3, [r2, r3]
 80031d4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80031d8:	4618      	mov	r0, r3
 80031da:	3708      	adds	r7, #8
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40021000 	.word	0x40021000
 80031e4:	08003d90 	.word	0x08003d90

080031e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80031ee:	f7ff ffcd 	bl	800318c <HAL_RCC_GetHCLKFreq>
 80031f2:	4601      	mov	r1, r0
 80031f4:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80031fc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003200:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	fa92 f2a2 	rbit	r2, r2
 8003208:	603a      	str	r2, [r7, #0]
  return result;
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	fab2 f282 	clz	r2, r2
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	40d3      	lsrs	r3, r2
 8003214:	4a04      	ldr	r2, [pc, #16]	; (8003228 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003216:	5cd3      	ldrb	r3, [r2, r3]
 8003218:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800321c:	4618      	mov	r0, r3
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40021000 	.word	0x40021000
 8003228:	08003d90 	.word	0x08003d90

0800322c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b092      	sub	sp, #72	; 0x48
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800323c:	2300      	movs	r3, #0
 800323e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 80d4 	beq.w	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003250:	4b4e      	ldr	r3, [pc, #312]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003252:	69db      	ldr	r3, [r3, #28]
 8003254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10e      	bne.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800325c:	4b4b      	ldr	r3, [pc, #300]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325e:	69db      	ldr	r3, [r3, #28]
 8003260:	4a4a      	ldr	r2, [pc, #296]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003266:	61d3      	str	r3, [r2, #28]
 8003268:	4b48      	ldr	r3, [pc, #288]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003270:	60bb      	str	r3, [r7, #8]
 8003272:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003274:	2301      	movs	r3, #1
 8003276:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327a:	4b45      	ldr	r3, [pc, #276]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003282:	2b00      	cmp	r3, #0
 8003284:	d118      	bne.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003286:	4b42      	ldr	r3, [pc, #264]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a41      	ldr	r2, [pc, #260]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800328c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003290:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003292:	f7fd fd13 	bl	8000cbc <HAL_GetTick>
 8003296:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003298:	e008      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800329a:	f7fd fd0f 	bl	8000cbc <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b64      	cmp	r3, #100	; 0x64
 80032a6:	d901      	bls.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e14b      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ac:	4b38      	ldr	r3, [pc, #224]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0f0      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032b8:	4b34      	ldr	r3, [pc, #208]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 8084 	beq.w	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d07c      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032d8:	4b2c      	ldr	r3, [pc, #176]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ea:	fa93 f3a3 	rbit	r3, r3
 80032ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80032f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032f2:	fab3 f383 	clz	r3, r3
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	461a      	mov	r2, r3
 80032fa:	4b26      	ldr	r3, [pc, #152]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032fc:	4413      	add	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	461a      	mov	r2, r3
 8003302:	2301      	movs	r3, #1
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800330a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330e:	fa93 f3a3 	rbit	r3, r3
 8003312:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003316:	fab3 f383 	clz	r3, r3
 800331a:	b2db      	uxtb	r3, r3
 800331c:	461a      	mov	r2, r3
 800331e:	4b1d      	ldr	r3, [pc, #116]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003320:	4413      	add	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	461a      	mov	r2, r3
 8003326:	2300      	movs	r3, #0
 8003328:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800332a:	4a18      	ldr	r2, [pc, #96]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800332c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800332e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d04b      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333a:	f7fd fcbf 	bl	8000cbc <HAL_GetTick>
 800333e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003340:	e00a      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003342:	f7fd fcbb 	bl	8000cbc <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003350:	4293      	cmp	r3, r2
 8003352:	d901      	bls.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e0f5      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003358:	2302      	movs	r3, #2
 800335a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335e:	fa93 f3a3 	rbit	r3, r3
 8003362:	627b      	str	r3, [r7, #36]	; 0x24
 8003364:	2302      	movs	r3, #2
 8003366:	623b      	str	r3, [r7, #32]
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	fa93 f3a3 	rbit	r3, r3
 800336e:	61fb      	str	r3, [r7, #28]
  return result;
 8003370:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003372:	fab3 f383 	clz	r3, r3
 8003376:	b2db      	uxtb	r3, r3
 8003378:	095b      	lsrs	r3, r3, #5
 800337a:	b2db      	uxtb	r3, r3
 800337c:	f043 0302 	orr.w	r3, r3, #2
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d108      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003386:	4b01      	ldr	r3, [pc, #4]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	e00d      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800338c:	40021000 	.word	0x40021000
 8003390:	40007000 	.word	0x40007000
 8003394:	10908100 	.word	0x10908100
 8003398:	2302      	movs	r3, #2
 800339a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	fa93 f3a3 	rbit	r3, r3
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	4b69      	ldr	r3, [pc, #420]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	2202      	movs	r2, #2
 80033aa:	613a      	str	r2, [r7, #16]
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	fa92 f2a2 	rbit	r2, r2
 80033b2:	60fa      	str	r2, [r7, #12]
  return result;
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	fab2 f282 	clz	r2, r2
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033c0:	b2d2      	uxtb	r2, r2
 80033c2:	f002 021f 	and.w	r2, r2, #31
 80033c6:	2101      	movs	r1, #1
 80033c8:	fa01 f202 	lsl.w	r2, r1, r2
 80033cc:	4013      	ands	r3, r2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0b7      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80033d2:	4b5e      	ldr	r3, [pc, #376]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	495b      	ldr	r1, [pc, #364]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d105      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ec:	4b57      	ldr	r3, [pc, #348]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	4a56      	ldr	r2, [pc, #344]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d008      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003404:	4b51      	ldr	r3, [pc, #324]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003408:	f023 0203 	bic.w	r2, r3, #3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	494e      	ldr	r1, [pc, #312]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003412:	4313      	orrs	r3, r2
 8003414:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0320 	and.w	r3, r3, #32
 800341e:	2b00      	cmp	r3, #0
 8003420:	d008      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003422:	4b4a      	ldr	r3, [pc, #296]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	f023 0210 	bic.w	r2, r3, #16
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	4947      	ldr	r1, [pc, #284]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003430:	4313      	orrs	r3, r2
 8003432:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d008      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003440:	4b42      	ldr	r3, [pc, #264]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344c:	493f      	ldr	r1, [pc, #252]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800344e:	4313      	orrs	r3, r2
 8003450:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345a:	2b00      	cmp	r3, #0
 800345c:	d008      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800345e:	4b3b      	ldr	r3, [pc, #236]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	f023 0220 	bic.w	r2, r3, #32
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	4938      	ldr	r1, [pc, #224]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800346c:	4313      	orrs	r3, r2
 800346e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d008      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800347c:	4b33      	ldr	r3, [pc, #204]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800347e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003480:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	4930      	ldr	r1, [pc, #192]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800348a:	4313      	orrs	r3, r2
 800348c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003496:	2b00      	cmp	r3, #0
 8003498:	d008      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800349a:	4b2c      	ldr	r3, [pc, #176]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	4929      	ldr	r1, [pc, #164]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d008      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80034b8:	4b24      	ldr	r3, [pc, #144]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	4921      	ldr	r1, [pc, #132]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d008      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80034d6:	4b1d      	ldr	r3, [pc, #116]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	491a      	ldr	r1, [pc, #104]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d008      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80034f4:	4b15      	ldr	r3, [pc, #84]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	4912      	ldr	r1, [pc, #72]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003502:	4313      	orrs	r3, r2
 8003504:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d008      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003512:	4b0e      	ldr	r3, [pc, #56]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351e:	490b      	ldr	r1, [pc, #44]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003520:	4313      	orrs	r3, r2
 8003522:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003530:	4b06      	ldr	r3, [pc, #24]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353c:	4903      	ldr	r1, [pc, #12]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800353e:	4313      	orrs	r3, r2
 8003540:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3748      	adds	r7, #72	; 0x48
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40021000 	.word	0x40021000

08003550 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e09d      	b.n	800369e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	2b00      	cmp	r3, #0
 8003568:	d108      	bne.n	800357c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003572:	d009      	beq.n	8003588 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	61da      	str	r2, [r3, #28]
 800357a:	e005      	b.n	8003588 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d106      	bne.n	80035a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7fd f9ae 	bl	8000904 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2202      	movs	r2, #2
 80035ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035c8:	d902      	bls.n	80035d0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80035ca:	2300      	movs	r3, #0
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	e002      	b.n	80035d6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80035d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035d4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80035de:	d007      	beq.n	80035f0 <HAL_SPI_Init+0xa0>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035e8:	d002      	beq.n	80035f0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003600:	431a      	orrs	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	431a      	orrs	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003628:	431a      	orrs	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003632:	ea42 0103 	orr.w	r1, r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	0c1b      	lsrs	r3, r3, #16
 800364c:	f003 0204 	and.w	r2, r3, #4
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	f003 0310 	and.w	r3, r3, #16
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800366c:	ea42 0103 	orr.w	r1, r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	69da      	ldr	r2, [r3, #28]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800368c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b082      	sub	sp, #8
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e040      	b.n	800373a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d106      	bne.n	80036ce <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f7fd f98f 	bl	80009ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2224      	movs	r2, #36	; 0x24
 80036d2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0201 	bic.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f82d 	bl	8003744 <UART_SetConfig>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d101      	bne.n	80036f4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e022      	b.n	800373a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d002      	beq.n	8003702 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f957 	bl	80039b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003710:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003720:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f042 0201 	orr.w	r2, r2, #1
 8003730:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f9de 	bl	8003af4 <UART_CheckIdleState>
 8003738:	4603      	mov	r3, r0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
	...

08003744 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b088      	sub	sp, #32
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800374c:	2300      	movs	r3, #0
 800374e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	4313      	orrs	r3, r2
 8003766:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	4b8a      	ldr	r3, [pc, #552]	; (8003998 <UART_SetConfig+0x254>)
 8003770:	4013      	ands	r3, r2
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6812      	ldr	r2, [r2, #0]
 8003776:	6979      	ldr	r1, [r7, #20]
 8003778:	430b      	orrs	r3, r1
 800377a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	4313      	orrs	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a78      	ldr	r2, [pc, #480]	; (800399c <UART_SetConfig+0x258>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d120      	bne.n	8003802 <UART_SetConfig+0xbe>
 80037c0:	4b77      	ldr	r3, [pc, #476]	; (80039a0 <UART_SetConfig+0x25c>)
 80037c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c4:	f003 0303 	and.w	r3, r3, #3
 80037c8:	2b03      	cmp	r3, #3
 80037ca:	d817      	bhi.n	80037fc <UART_SetConfig+0xb8>
 80037cc:	a201      	add	r2, pc, #4	; (adr r2, 80037d4 <UART_SetConfig+0x90>)
 80037ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d2:	bf00      	nop
 80037d4:	080037e5 	.word	0x080037e5
 80037d8:	080037f1 	.word	0x080037f1
 80037dc:	080037f7 	.word	0x080037f7
 80037e0:	080037eb 	.word	0x080037eb
 80037e4:	2300      	movs	r3, #0
 80037e6:	77fb      	strb	r3, [r7, #31]
 80037e8:	e01d      	b.n	8003826 <UART_SetConfig+0xe2>
 80037ea:	2302      	movs	r3, #2
 80037ec:	77fb      	strb	r3, [r7, #31]
 80037ee:	e01a      	b.n	8003826 <UART_SetConfig+0xe2>
 80037f0:	2304      	movs	r3, #4
 80037f2:	77fb      	strb	r3, [r7, #31]
 80037f4:	e017      	b.n	8003826 <UART_SetConfig+0xe2>
 80037f6:	2308      	movs	r3, #8
 80037f8:	77fb      	strb	r3, [r7, #31]
 80037fa:	e014      	b.n	8003826 <UART_SetConfig+0xe2>
 80037fc:	2310      	movs	r3, #16
 80037fe:	77fb      	strb	r3, [r7, #31]
 8003800:	e011      	b.n	8003826 <UART_SetConfig+0xe2>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a67      	ldr	r2, [pc, #412]	; (80039a4 <UART_SetConfig+0x260>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d102      	bne.n	8003812 <UART_SetConfig+0xce>
 800380c:	2300      	movs	r3, #0
 800380e:	77fb      	strb	r3, [r7, #31]
 8003810:	e009      	b.n	8003826 <UART_SetConfig+0xe2>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a64      	ldr	r2, [pc, #400]	; (80039a8 <UART_SetConfig+0x264>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d102      	bne.n	8003822 <UART_SetConfig+0xde>
 800381c:	2300      	movs	r3, #0
 800381e:	77fb      	strb	r3, [r7, #31]
 8003820:	e001      	b.n	8003826 <UART_SetConfig+0xe2>
 8003822:	2310      	movs	r3, #16
 8003824:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800382e:	d15b      	bne.n	80038e8 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8003830:	7ffb      	ldrb	r3, [r7, #31]
 8003832:	2b08      	cmp	r3, #8
 8003834:	d827      	bhi.n	8003886 <UART_SetConfig+0x142>
 8003836:	a201      	add	r2, pc, #4	; (adr r2, 800383c <UART_SetConfig+0xf8>)
 8003838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383c:	08003861 	.word	0x08003861
 8003840:	08003869 	.word	0x08003869
 8003844:	08003871 	.word	0x08003871
 8003848:	08003887 	.word	0x08003887
 800384c:	08003877 	.word	0x08003877
 8003850:	08003887 	.word	0x08003887
 8003854:	08003887 	.word	0x08003887
 8003858:	08003887 	.word	0x08003887
 800385c:	0800387f 	.word	0x0800387f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003860:	f7ff fca0 	bl	80031a4 <HAL_RCC_GetPCLK1Freq>
 8003864:	61b8      	str	r0, [r7, #24]
        break;
 8003866:	e013      	b.n	8003890 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003868:	f7ff fcbe 	bl	80031e8 <HAL_RCC_GetPCLK2Freq>
 800386c:	61b8      	str	r0, [r7, #24]
        break;
 800386e:	e00f      	b.n	8003890 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003870:	4b4e      	ldr	r3, [pc, #312]	; (80039ac <UART_SetConfig+0x268>)
 8003872:	61bb      	str	r3, [r7, #24]
        break;
 8003874:	e00c      	b.n	8003890 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003876:	f7ff fc1f 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 800387a:	61b8      	str	r0, [r7, #24]
        break;
 800387c:	e008      	b.n	8003890 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800387e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003882:	61bb      	str	r3, [r7, #24]
        break;
 8003884:	e004      	b.n	8003890 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	77bb      	strb	r3, [r7, #30]
        break;
 800388e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d074      	beq.n	8003980 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	005a      	lsls	r2, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	085b      	lsrs	r3, r3, #1
 80038a0:	441a      	add	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	2b0f      	cmp	r3, #15
 80038b2:	d916      	bls.n	80038e2 <UART_SetConfig+0x19e>
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ba:	d212      	bcs.n	80038e2 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	b29b      	uxth	r3, r3
 80038c0:	f023 030f 	bic.w	r3, r3, #15
 80038c4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	085b      	lsrs	r3, r3, #1
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	89fb      	ldrh	r3, [r7, #14]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	89fa      	ldrh	r2, [r7, #14]
 80038de:	60da      	str	r2, [r3, #12]
 80038e0:	e04e      	b.n	8003980 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	77bb      	strb	r3, [r7, #30]
 80038e6:	e04b      	b.n	8003980 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038e8:	7ffb      	ldrb	r3, [r7, #31]
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d827      	bhi.n	800393e <UART_SetConfig+0x1fa>
 80038ee:	a201      	add	r2, pc, #4	; (adr r2, 80038f4 <UART_SetConfig+0x1b0>)
 80038f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f4:	08003919 	.word	0x08003919
 80038f8:	08003921 	.word	0x08003921
 80038fc:	08003929 	.word	0x08003929
 8003900:	0800393f 	.word	0x0800393f
 8003904:	0800392f 	.word	0x0800392f
 8003908:	0800393f 	.word	0x0800393f
 800390c:	0800393f 	.word	0x0800393f
 8003910:	0800393f 	.word	0x0800393f
 8003914:	08003937 	.word	0x08003937
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003918:	f7ff fc44 	bl	80031a4 <HAL_RCC_GetPCLK1Freq>
 800391c:	61b8      	str	r0, [r7, #24]
        break;
 800391e:	e013      	b.n	8003948 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003920:	f7ff fc62 	bl	80031e8 <HAL_RCC_GetPCLK2Freq>
 8003924:	61b8      	str	r0, [r7, #24]
        break;
 8003926:	e00f      	b.n	8003948 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003928:	4b20      	ldr	r3, [pc, #128]	; (80039ac <UART_SetConfig+0x268>)
 800392a:	61bb      	str	r3, [r7, #24]
        break;
 800392c:	e00c      	b.n	8003948 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800392e:	f7ff fbc3 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 8003932:	61b8      	str	r0, [r7, #24]
        break;
 8003934:	e008      	b.n	8003948 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800393a:	61bb      	str	r3, [r7, #24]
        break;
 800393c:	e004      	b.n	8003948 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800393e:	2300      	movs	r3, #0
 8003940:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	77bb      	strb	r3, [r7, #30]
        break;
 8003946:	bf00      	nop
    }

    if (pclk != 0U)
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d018      	beq.n	8003980 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	085a      	lsrs	r2, r3, #1
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	441a      	add	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003960:	b29b      	uxth	r3, r3
 8003962:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	2b0f      	cmp	r3, #15
 8003968:	d908      	bls.n	800397c <UART_SetConfig+0x238>
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003970:	d204      	bcs.n	800397c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	60da      	str	r2, [r3, #12]
 800397a:	e001      	b.n	8003980 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800398c:	7fbb      	ldrb	r3, [r7, #30]
}
 800398e:	4618      	mov	r0, r3
 8003990:	3720      	adds	r7, #32
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	efff69f3 	.word	0xefff69f3
 800399c:	40013800 	.word	0x40013800
 80039a0:	40021000 	.word	0x40021000
 80039a4:	40004400 	.word	0x40004400
 80039a8:	40004800 	.word	0x40004800
 80039ac:	007a1200 	.word	0x007a1200

080039b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00a      	beq.n	80039da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00a      	beq.n	8003a1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00a      	beq.n	8003a40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	f003 0310 	and.w	r3, r3, #16
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	f003 0320 	and.w	r3, r3, #32
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d01a      	beq.n	8003ac6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aae:	d10a      	bne.n	8003ac6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00a      	beq.n	8003ae8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	605a      	str	r2, [r3, #4]
  }
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af02      	add	r7, sp, #8
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b04:	f7fd f8da 	bl	8000cbc <HAL_GetTick>
 8003b08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0308 	and.w	r3, r3, #8
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d10e      	bne.n	8003b36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f82d 	bl	8003b86 <UART_WaitOnFlagUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e023      	b.n	8003b7e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b04      	cmp	r3, #4
 8003b42:	d10e      	bne.n	8003b62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f817 	bl	8003b86 <UART_WaitOnFlagUntilTimeout>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e00d      	b.n	8003b7e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2220      	movs	r2, #32
 8003b66:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b09c      	sub	sp, #112	; 0x70
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	60f8      	str	r0, [r7, #12]
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	603b      	str	r3, [r7, #0]
 8003b92:	4613      	mov	r3, r2
 8003b94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b96:	e0a5      	b.n	8003ce4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9e:	f000 80a1 	beq.w	8003ce4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ba2:	f7fd f88b 	bl	8000cbc <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d302      	bcc.n	8003bb8 <UART_WaitOnFlagUntilTimeout+0x32>
 8003bb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d13e      	bne.n	8003c36 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bc0:	e853 3f00 	ldrex	r3, [r3]
 8003bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bcc:	667b      	str	r3, [r7, #100]	; 0x64
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bd8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003bdc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003bde:	e841 2300 	strex	r3, r2, [r1]
 8003be2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003be4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1e6      	bne.n	8003bb8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	3308      	adds	r3, #8
 8003bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bf4:	e853 3f00 	ldrex	r3, [r3]
 8003bf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfc:	f023 0301 	bic.w	r3, r3, #1
 8003c00:	663b      	str	r3, [r7, #96]	; 0x60
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3308      	adds	r3, #8
 8003c08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c0a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c12:	e841 2300 	strex	r3, r2, [r1]
 8003c16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1e5      	bne.n	8003bea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2220      	movs	r2, #32
 8003c22:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2220      	movs	r2, #32
 8003c28:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e067      	b.n	8003d06 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d04f      	beq.n	8003ce4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c52:	d147      	bne.n	8003ce4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c5c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c66:	e853 3f00 	ldrex	r3, [r3]
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	461a      	mov	r2, r3
 8003c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c7c:	637b      	str	r3, [r7, #52]	; 0x34
 8003c7e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c84:	e841 2300 	strex	r3, r2, [r1]
 8003c88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1e6      	bne.n	8003c5e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3308      	adds	r3, #8
 8003c96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	e853 3f00 	ldrex	r3, [r3]
 8003c9e:	613b      	str	r3, [r7, #16]
   return(result);
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	f023 0301 	bic.w	r3, r3, #1
 8003ca6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	3308      	adds	r3, #8
 8003cae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003cb0:	623a      	str	r2, [r7, #32]
 8003cb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb4:	69f9      	ldr	r1, [r7, #28]
 8003cb6:	6a3a      	ldr	r2, [r7, #32]
 8003cb8:	e841 2300 	strex	r3, r2, [r1]
 8003cbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1e5      	bne.n	8003c90 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e010      	b.n	8003d06 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	69da      	ldr	r2, [r3, #28]
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	4013      	ands	r3, r2
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	bf0c      	ite	eq
 8003cf4:	2301      	moveq	r3, #1
 8003cf6:	2300      	movne	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	79fb      	ldrb	r3, [r7, #7]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	f43f af4a 	beq.w	8003b98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3770      	adds	r7, #112	; 0x70
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <__libc_init_array>:
 8003d10:	b570      	push	{r4, r5, r6, lr}
 8003d12:	4d0d      	ldr	r5, [pc, #52]	; (8003d48 <__libc_init_array+0x38>)
 8003d14:	4c0d      	ldr	r4, [pc, #52]	; (8003d4c <__libc_init_array+0x3c>)
 8003d16:	1b64      	subs	r4, r4, r5
 8003d18:	10a4      	asrs	r4, r4, #2
 8003d1a:	2600      	movs	r6, #0
 8003d1c:	42a6      	cmp	r6, r4
 8003d1e:	d109      	bne.n	8003d34 <__libc_init_array+0x24>
 8003d20:	4d0b      	ldr	r5, [pc, #44]	; (8003d50 <__libc_init_array+0x40>)
 8003d22:	4c0c      	ldr	r4, [pc, #48]	; (8003d54 <__libc_init_array+0x44>)
 8003d24:	f000 f820 	bl	8003d68 <_init>
 8003d28:	1b64      	subs	r4, r4, r5
 8003d2a:	10a4      	asrs	r4, r4, #2
 8003d2c:	2600      	movs	r6, #0
 8003d2e:	42a6      	cmp	r6, r4
 8003d30:	d105      	bne.n	8003d3e <__libc_init_array+0x2e>
 8003d32:	bd70      	pop	{r4, r5, r6, pc}
 8003d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d38:	4798      	blx	r3
 8003d3a:	3601      	adds	r6, #1
 8003d3c:	e7ee      	b.n	8003d1c <__libc_init_array+0xc>
 8003d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d42:	4798      	blx	r3
 8003d44:	3601      	adds	r6, #1
 8003d46:	e7f2      	b.n	8003d2e <__libc_init_array+0x1e>
 8003d48:	08003db8 	.word	0x08003db8
 8003d4c:	08003db8 	.word	0x08003db8
 8003d50:	08003db8 	.word	0x08003db8
 8003d54:	08003dbc 	.word	0x08003dbc

08003d58 <memset>:
 8003d58:	4402      	add	r2, r0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d100      	bne.n	8003d62 <memset+0xa>
 8003d60:	4770      	bx	lr
 8003d62:	f803 1b01 	strb.w	r1, [r3], #1
 8003d66:	e7f9      	b.n	8003d5c <memset+0x4>

08003d68 <_init>:
 8003d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d6a:	bf00      	nop
 8003d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d6e:	bc08      	pop	{r3}
 8003d70:	469e      	mov	lr, r3
 8003d72:	4770      	bx	lr

08003d74 <_fini>:
 8003d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d76:	bf00      	nop
 8003d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d7a:	bc08      	pop	{r3}
 8003d7c:	469e      	mov	lr, r3
 8003d7e:	4770      	bx	lr

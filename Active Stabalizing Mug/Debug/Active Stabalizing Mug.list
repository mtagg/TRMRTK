
Active Stabalizing Mug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cf8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004e04  08004e04  00014e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e2c  08004e2c  000202e4  2**0
                  CONTENTS
  4 .ARM          00000000  08004e2c  08004e2c  000202e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e2c  08004e2c  000202e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e2c  08004e2c  00014e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e30  08004e30  00014e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e4  20000000  08004e34  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  200002e4  08005118  000202e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b0  08005118  000204b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f8a9  00000000  00000000  0002030d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024ff  00000000  00000000  0002fbb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  000320b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee0  00000000  00000000  00033080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a060  00000000  00000000  00033f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010429  00000000  00000000  0004dfc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eece  00000000  00000000  0005e3e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed2b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043d0  00000000  00000000  000ed308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002e4 	.word	0x200002e4
 8000128:	00000000 	.word	0x00000000
 800012c:	08004dec 	.word	0x08004dec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002e8 	.word	0x200002e8
 8000148:	08004dec 	.word	0x08004dec

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__gedf2>:
 80008e8:	f04f 3cff 	mov.w	ip, #4294967295
 80008ec:	e006      	b.n	80008fc <__cmpdf2+0x4>
 80008ee:	bf00      	nop

080008f0 <__ledf2>:
 80008f0:	f04f 0c01 	mov.w	ip, #1
 80008f4:	e002      	b.n	80008fc <__cmpdf2+0x4>
 80008f6:	bf00      	nop

080008f8 <__cmpdf2>:
 80008f8:	f04f 0c01 	mov.w	ip, #1
 80008fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800090c:	bf18      	it	ne
 800090e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000912:	d01b      	beq.n	800094c <__cmpdf2+0x54>
 8000914:	b001      	add	sp, #4
 8000916:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091a:	bf0c      	ite	eq
 800091c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000920:	ea91 0f03 	teqne	r1, r3
 8000924:	bf02      	ittt	eq
 8000926:	ea90 0f02 	teqeq	r0, r2
 800092a:	2000      	moveq	r0, #0
 800092c:	4770      	bxeq	lr
 800092e:	f110 0f00 	cmn.w	r0, #0
 8000932:	ea91 0f03 	teq	r1, r3
 8000936:	bf58      	it	pl
 8000938:	4299      	cmppl	r1, r3
 800093a:	bf08      	it	eq
 800093c:	4290      	cmpeq	r0, r2
 800093e:	bf2c      	ite	cs
 8000940:	17d8      	asrcs	r0, r3, #31
 8000942:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000946:	f040 0001 	orr.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000950:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000954:	d102      	bne.n	800095c <__cmpdf2+0x64>
 8000956:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095a:	d107      	bne.n	800096c <__cmpdf2+0x74>
 800095c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d1d6      	bne.n	8000914 <__cmpdf2+0x1c>
 8000966:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096a:	d0d3      	beq.n	8000914 <__cmpdf2+0x1c>
 800096c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <__aeabi_cdrcmple>:
 8000974:	4684      	mov	ip, r0
 8000976:	4610      	mov	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	468c      	mov	ip, r1
 800097c:	4619      	mov	r1, r3
 800097e:	4663      	mov	r3, ip
 8000980:	e000      	b.n	8000984 <__aeabi_cdcmpeq>
 8000982:	bf00      	nop

08000984 <__aeabi_cdcmpeq>:
 8000984:	b501      	push	{r0, lr}
 8000986:	f7ff ffb7 	bl	80008f8 <__cmpdf2>
 800098a:	2800      	cmp	r0, #0
 800098c:	bf48      	it	mi
 800098e:	f110 0f00 	cmnmi.w	r0, #0
 8000992:	bd01      	pop	{r0, pc}

08000994 <__aeabi_dcmpeq>:
 8000994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000998:	f7ff fff4 	bl	8000984 <__aeabi_cdcmpeq>
 800099c:	bf0c      	ite	eq
 800099e:	2001      	moveq	r0, #1
 80009a0:	2000      	movne	r0, #0
 80009a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a6:	bf00      	nop

080009a8 <__aeabi_dcmplt>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff ffea 	bl	8000984 <__aeabi_cdcmpeq>
 80009b0:	bf34      	ite	cc
 80009b2:	2001      	movcc	r0, #1
 80009b4:	2000      	movcs	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmple>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffe0 	bl	8000984 <__aeabi_cdcmpeq>
 80009c4:	bf94      	ite	ls
 80009c6:	2001      	movls	r0, #1
 80009c8:	2000      	movhi	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmpge>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffce 	bl	8000974 <__aeabi_cdrcmple>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpgt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffc4 	bl	8000974 <__aeabi_cdrcmple>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <_ZN12ControlClass11lookupAngleEss>:
#include "controlSystem.h"

ControlClass ControlSystem;

int16_t ControlClass::lookupAngle(int16_t z_acc, int16_t axis_acc)
{
 80009f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80009fc:	b086      	sub	sp, #24
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
 8000a02:	460b      	mov	r3, r1
 8000a04:	807b      	strh	r3, [r7, #2]
 8000a06:	4613      	mov	r3, r2
 8000a08:	803b      	strh	r3, [r7, #0]


	if (z_acc == 0){
 8000a0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d108      	bne.n	8000a24 <_ZN12ControlClass11lookupAngleEss+0x2c>
		//divide by 0 case:
		return (axis_acc < 0) ? (int16_t) -90 : (int16_t) 90;
 8000a12:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	da02      	bge.n	8000a20 <_ZN12ControlClass11lookupAngleEss+0x28>
 8000a1a:	f06f 0359 	mvn.w	r3, #89	; 0x59
 8000a1e:	e04f      	b.n	8000ac0 <_ZN12ControlClass11lookupAngleEss+0xc8>
 8000a20:	235a      	movs	r3, #90	; 0x5a
 8000a22:	e04d      	b.n	8000ac0 <_ZN12ControlClass11lookupAngleEss+0xc8>
	}

	double arctan_theta = (double)((double)axis_acc/(double)z_acc);
 8000a24:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff fce1 	bl	80003f0 <__aeabi_i2d>
 8000a2e:	4680      	mov	r8, r0
 8000a30:	4689      	mov	r9, r1
 8000a32:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fcda 	bl	80003f0 <__aeabi_i2d>
 8000a3c:	4602      	mov	r2, r0
 8000a3e:	460b      	mov	r3, r1
 8000a40:	4640      	mov	r0, r8
 8000a42:	4649      	mov	r1, r9
 8000a44:	f7ff fe68 	bl	8000718 <__aeabi_ddiv>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int sign;

	//convert ratio to positive for quicker LUT result
	if (arctan_theta < 0)
 8000a50:	f04f 0200 	mov.w	r2, #0
 8000a54:	f04f 0300 	mov.w	r3, #0
 8000a58:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000a5c:	f7ff ffa4 	bl	80009a8 <__aeabi_dcmplt>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d009      	beq.n	8000a7a <_ZN12ControlClass11lookupAngleEss+0x82>
	{
		arctan_theta *= -1;
 8000a66:	693c      	ldr	r4, [r7, #16]
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000a6e:	e9c7 4504 	strd	r4, r5, [r7, #16]
		sign = -1;
 8000a72:	f04f 33ff 	mov.w	r3, #4294967295
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	e001      	b.n	8000a7e <_ZN12ControlClass11lookupAngleEss+0x86>
	}
	else
	{
		sign = 1;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	60fb      	str	r3, [r7, #12]
	}
	uint8_t i;
	for (i = 0; i < sizeof(ControlSystem.angleTable)/sizeof(double); i++)
 8000a7e:	2300      	movs	r3, #0
 8000a80:	72fb      	strb	r3, [r7, #11]
 8000a82:	7afb      	ldrb	r3, [r7, #11]
 8000a84:	2b59      	cmp	r3, #89	; 0x59
 8000a86:	d813      	bhi.n	8000ab0 <_ZN12ControlClass11lookupAngleEss+0xb8>
	{
		if (arctan_theta < ControlSystem.angleTable[i+1]){
 8000a88:	7afb      	ldrb	r3, [r7, #11]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	4a0f      	ldr	r2, [pc, #60]	; (8000acc <_ZN12ControlClass11lookupAngleEss+0xd4>)
 8000a8e:	3301      	adds	r3, #1
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	4413      	add	r3, r2
 8000a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a98:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000a9c:	f7ff ff84 	bl	80009a8 <__aeabi_dcmplt>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d103      	bne.n	8000aae <_ZN12ControlClass11lookupAngleEss+0xb6>
	for (i = 0; i < sizeof(ControlSystem.angleTable)/sizeof(double); i++)
 8000aa6:	7afb      	ldrb	r3, [r7, #11]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	72fb      	strb	r3, [r7, #11]
 8000aac:	e7e9      	b.n	8000a82 <_ZN12ControlClass11lookupAngleEss+0x8a>
			break;
 8000aae:	bf00      	nop
		}
	}

	return sign * i; //angle between -89 and +89
 8000ab0:	7afb      	ldrb	r3, [r7, #11]
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	68fa      	ldr	r2, [r7, #12]
 8000ab6:	b292      	uxth	r2, r2
 8000ab8:	fb02 f303 	mul.w	r3, r2, r3
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	b21b      	sxth	r3, r3
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000aca:	bf00      	nop
 8000acc:	20000000 	.word	0x20000000

08000ad0 <_ZN12ControlClass14normalizeThetaEhhhh>:


int16_t ControlClass::normalizeTheta(uint8_t data0, uint8_t data1, uint8_t z0, uint8_t z1)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	4608      	mov	r0, r1
 8000ada:	4611      	mov	r1, r2
 8000adc:	461a      	mov	r2, r3
 8000ade:	4603      	mov	r3, r0
 8000ae0:	70fb      	strb	r3, [r7, #3]
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	70bb      	strb	r3, [r7, #2]
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	707b      	strb	r3, [r7, #1]
	int16_t z_acc = (z1 << 8) | z0;
 8000aea:	7e3b      	ldrb	r3, [r7, #24]
 8000aec:	021b      	lsls	r3, r3, #8
 8000aee:	b21a      	sxth	r2, r3
 8000af0:	787b      	ldrb	r3, [r7, #1]
 8000af2:	b21b      	sxth	r3, r3
 8000af4:	4313      	orrs	r3, r2
 8000af6:	81fb      	strh	r3, [r7, #14]
	int16_t axis_acc = (data1 << 8) | data0;
 8000af8:	78bb      	ldrb	r3, [r7, #2]
 8000afa:	021b      	lsls	r3, r3, #8
 8000afc:	b21a      	sxth	r2, r3
 8000afe:	78fb      	ldrb	r3, [r7, #3]
 8000b00:	b21b      	sxth	r3, r3
 8000b02:	4313      	orrs	r3, r2
 8000b04:	81bb      	strh	r3, [r7, #12]
	return lookupAngle(z_acc, axis_acc);
 8000b06:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000b0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b0e:	4619      	mov	r1, r3
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f7ff ff71 	bl	80009f8 <_ZN12ControlClass11lookupAngleEss>
 8000b16:	4603      	mov	r3, r0
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <_ZN12ControlClass19updateControlSystemEssaa>:

// TODO: Do we need to have an init method, or keep all variables in main???
bool ControlClass::updateControlSystem(int16_t x_nominal, int16_t y_nominal, int8_t x_allowable, int8_t y_allowable)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	4608      	mov	r0, r1
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4603      	mov	r3, r0
 8000b30:	817b      	strh	r3, [r7, #10]
 8000b32:	460b      	mov	r3, r1
 8000b34:	813b      	strh	r3, [r7, #8]
 8000b36:	4613      	mov	r3, r2
 8000b38:	71fb      	strb	r3, [r7, #7]
	this->x_nominalAngle = x_nominal;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	897a      	ldrh	r2, [r7, #10]
 8000b3e:	805a      	strh	r2, [r3, #2]
	this->x_allowableAngle = x_allowable;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	79fa      	ldrb	r2, [r7, #7]
 8000b44:	701a      	strb	r2, [r3, #0]
	this->y_nominalAngle = y_nominal;
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	893a      	ldrh	r2, [r7, #8]
 8000b4a:	809a      	strh	r2, [r3, #4]
	this->y_allowableAngle = y_allowable;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	7e3a      	ldrb	r2, [r7, #24]
 8000b50:	705a      	strb	r2, [r3, #1]
	return 1;
 8000b52:	2301      	movs	r3, #1
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr
	...

08000b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b092      	sub	sp, #72	; 0x48
 8000b64:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b66:	f000 fe21 	bl	80017ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b6a:	f000 f93d 	bl	8000de8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6e:	f000 fb73 	bl	8001258 <_ZL12MX_GPIO_Initv>
  MX_ADC2_Init();
 8000b72:	f000 f999 	bl	8000ea8 <_ZL12MX_ADC2_Initv>
  MX_SPI1_Init();
 8000b76:	f000 fa09 	bl	8000f8c <_ZL12MX_SPI1_Initv>
  MX_TIM1_Init();
 8000b7a:	f000 fa43 	bl	8001004 <_ZL12MX_TIM1_Initv>
  MX_USART2_UART_Init();
 8000b7e:	f000 fb0f 	bl	80011a0 <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 8000b82:	f000 fb3b 	bl	80011fc <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */

  //Configure Accelerometer using PA4 for CSn, in SPI mode
  MC3479.setSerialSPI(&hspi1, GPIOA, SPI1_CSn_Pin);
 8000b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b8a:	4a8e      	ldr	r2, [pc, #568]	; (8000dc4 <main+0x264>)
 8000b8c:	498e      	ldr	r1, [pc, #568]	; (8000dc8 <main+0x268>)
 8000b8e:	488f      	ldr	r0, [pc, #572]	; (8000dcc <main+0x26c>)
 8000b90:	f003 fe56 	bl	8004840 <_ZN11MC3479Class12setSerialSPIEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
  MC3479.configAccelerometer();
 8000b94:	488d      	ldr	r0, [pc, #564]	; (8000dcc <main+0x26c>)
 8000b96:	f003 ff0e 	bl	80049b6 <_ZN11MC3479Class19configAccelerometerEv>

  //Configure GPIO variables for x-axis
  MP6543H.x_configMotorController(TIM_CHANNEL_1, &htim1,
 8000b9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b9e:	9306      	str	r3, [sp, #24]
 8000ba0:	4b8b      	ldr	r3, [pc, #556]	; (8000dd0 <main+0x270>)
 8000ba2:	9305      	str	r3, [sp, #20]
 8000ba4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ba8:	9304      	str	r3, [sp, #16]
 8000baa:	4b89      	ldr	r3, [pc, #548]	; (8000dd0 <main+0x270>)
 8000bac:	9303      	str	r3, [sp, #12]
 8000bae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bb2:	9302      	str	r3, [sp, #8]
 8000bb4:	4b86      	ldr	r3, [pc, #536]	; (8000dd0 <main+0x270>)
 8000bb6:	9301      	str	r3, [sp, #4]
 8000bb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bbc:	9300      	str	r3, [sp, #0]
 8000bbe:	4b84      	ldr	r3, [pc, #528]	; (8000dd0 <main+0x270>)
 8000bc0:	4a84      	ldr	r2, [pc, #528]	; (8000dd4 <main+0x274>)
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4884      	ldr	r0, [pc, #528]	; (8000dd8 <main+0x278>)
 8000bc6:	f003 ffd6 	bl	8004b76 <_ZN12MP6543HClass23x_configMotorControllerEtP17TIM_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>
		  	  	  	  	  	  	  GPIOB, MP6543H_DIR_X_Pin,
								  	  GPIOB, MP6543H_nBRAKE_X_Pin,
									  	  GPIOB, MP6543H_nSLEEP_X_Pin,
										  	  GPIOB, MP6543H_nFAULT_X_Pin);
  // Configure GPIO variables for y-axis
  MP6543H.y_configMotorController(TIM_CHANNEL_2, &htim1,
 8000bca:	2304      	movs	r3, #4
 8000bcc:	9306      	str	r3, [sp, #24]
 8000bce:	4b80      	ldr	r3, [pc, #512]	; (8000dd0 <main+0x270>)
 8000bd0:	9305      	str	r3, [sp, #20]
 8000bd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bd6:	9304      	str	r3, [sp, #16]
 8000bd8:	4b7a      	ldr	r3, [pc, #488]	; (8000dc4 <main+0x264>)
 8000bda:	9303      	str	r3, [sp, #12]
 8000bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be0:	9302      	str	r3, [sp, #8]
 8000be2:	4b78      	ldr	r3, [pc, #480]	; (8000dc4 <main+0x264>)
 8000be4:	9301      	str	r3, [sp, #4]
 8000be6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bea:	9300      	str	r3, [sp, #0]
 8000bec:	4b75      	ldr	r3, [pc, #468]	; (8000dc4 <main+0x264>)
 8000bee:	4a79      	ldr	r2, [pc, #484]	; (8000dd4 <main+0x274>)
 8000bf0:	2104      	movs	r1, #4
 8000bf2:	4879      	ldr	r0, [pc, #484]	; (8000dd8 <main+0x278>)
 8000bf4:	f004 f856 	bl	8004ca4 <_ZN12MP6543HClass23y_configMotorControllerEtP17TIM_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>
// TODO: implement sleep routine
//  int inactivity_counter = 0;
//  bool x_inactive = false;
//  bool y_inactive = false;

  int16_t x_theta = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	84fb      	strh	r3, [r7, #38]	; 0x26
  int16_t y_theta = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t x_nominal = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	847b      	strh	r3, [r7, #34]	; 0x22
  int16_t y_nominal = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	843b      	strh	r3, [r7, #32]
  uint8_t xPWM = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	77fb      	strb	r3, [r7, #31]
  uint8_t yPWM = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	77bb      	strb	r3, [r7, #30]
  int8_t allowableAngle = 5;
 8000c10:	2305      	movs	r3, #5
 8000c12:	777b      	strb	r3, [r7, #29]

  ControlSystem.updateControlSystem(x_nominal, y_nominal, allowableAngle, allowableAngle);
 8000c14:	f997 001d 	ldrsb.w	r0, [r7, #29]
 8000c18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000c1c:	f9b7 1022 	ldrsh.w	r1, [r7, #34]	; 0x22
 8000c20:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	4603      	mov	r3, r0
 8000c28:	486c      	ldr	r0, [pc, #432]	; (8000ddc <main+0x27c>)
 8000c2a:	f7ff ff79 	bl	8000b20 <_ZN12ControlClass19updateControlSystemEssaa>

#ifdef	 __SIMULINK_EN
	  //UART3 used for Simulink output/input
  uint8_t SimulinkPwm[2] = {0};
 8000c2e:	2300      	movs	r3, #0
 8000c30:	81bb      	strh	r3, [r7, #12]
  uint8_t Simulink_Packet[8] = {0};
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	2300      	movs	r3, #0
 8000c38:	60bb      	str	r3, [r7, #8]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4865      	ldr	r0, [pc, #404]	; (8000dd4 <main+0x274>)
 8000c3e:	f002 fdcb 	bl	80037d8 <HAL_TIM_PWM_Start>
  while (1)
  {
	  // Brake if any motor fault or if tilt button is pressed.
	  while(HAL_GPIO_ReadPin(nTILT_BUTTON_GPIO_Port, nTILT_BUTTON_Pin) == 0){
 8000c42:	2102      	movs	r1, #2
 8000c44:	485f      	ldr	r0, [pc, #380]	; (8000dc4 <main+0x264>)
 8000c46:	f001 fab1 	bl	80021ac <HAL_GPIO_ReadPin>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	bf0c      	ite	eq
 8000c50:	2301      	moveq	r3, #1
 8000c52:	2300      	movne	r3, #0
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d00b      	beq.n	8000c72 <main+0x112>
//		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
		  MP6543H.x_motorBrake(true);
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	485e      	ldr	r0, [pc, #376]	; (8000dd8 <main+0x278>)
 8000c5e:	f003 ffec 	bl	8004c3a <_ZN12MP6543HClass12x_motorBrakeEb>
		  MP6543H.y_motorBrake(true);
 8000c62:	2101      	movs	r1, #1
 8000c64:	485c      	ldr	r0, [pc, #368]	; (8000dd8 <main+0x278>)
 8000c66:	f004 f860 	bl	8004d2a <_ZN12MP6543HClass12y_motorBrakeEb>
		  HAL_Delay(1);
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f000 fe00 	bl	8001870 <HAL_Delay>
	  while(HAL_GPIO_ReadPin(nTILT_BUTTON_GPIO_Port, nTILT_BUTTON_Pin) == 0){
 8000c70:	e7e7      	b.n	8000c42 <main+0xe2>
	  }
	  while(MP6543H.x_motorFault() || MP6543H.y_motorFault()){
 8000c72:	4859      	ldr	r0, [pc, #356]	; (8000dd8 <main+0x278>)
 8000c74:	f004 f800 	bl	8004c78 <_ZN12MP6543HClass12x_motorFaultEv>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d105      	bne.n	8000c8a <main+0x12a>
 8000c7e:	4856      	ldr	r0, [pc, #344]	; (8000dd8 <main+0x278>)
 8000c80:	f004 f872 	bl	8004d68 <_ZN12MP6543HClass12y_motorFaultEv>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <main+0x12e>
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e000      	b.n	8000c90 <main+0x130>
 8000c8e:	2300      	movs	r3, #0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d008      	beq.n	8000ca6 <main+0x146>
//		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
		  MP6543H.x_motorBrake(true);
 8000c94:	2101      	movs	r1, #1
 8000c96:	4850      	ldr	r0, [pc, #320]	; (8000dd8 <main+0x278>)
 8000c98:	f003 ffcf 	bl	8004c3a <_ZN12MP6543HClass12x_motorBrakeEb>
		  MP6543H.y_motorBrake(true);
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	484e      	ldr	r0, [pc, #312]	; (8000dd8 <main+0x278>)
 8000ca0:	f004 f843 	bl	8004d2a <_ZN12MP6543HClass12y_motorBrakeEb>
	  while(MP6543H.x_motorFault() || MP6543H.y_motorFault()){
 8000ca4:	e7e5      	b.n	8000c72 <main+0x112>
		  //This should allow us to see how long (approximately) we stay in the nFault loop
		  uint8_t fault_current [2] = {0xFF, 0xFF};
		  HAL_UART_Transmit(&huart3, &fault_current[0], sizeof(fault_current), HAL_MAX_DELAY);
#endif
	  }
	  MP6543H.x_motorBrake(false);
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	484b      	ldr	r0, [pc, #300]	; (8000dd8 <main+0x278>)
 8000caa:	f003 ffc6 	bl	8004c3a <_ZN12MP6543HClass12x_motorBrakeEb>
	  MP6543H.y_motorBrake(false);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4849      	ldr	r0, [pc, #292]	; (8000dd8 <main+0x278>)
 8000cb2:	f004 f83a 	bl	8004d2a <_ZN12MP6543HClass12y_motorBrakeEb>


	  // Loop Delay (for testing)
//	  HAL_Delay(1);
	  // fetch and normalize theta:
	  MC3479.getXYZ(xData, yData, zData);
 8000cb6:	f107 0310 	add.w	r3, r7, #16
 8000cba:	f107 0214 	add.w	r2, r7, #20
 8000cbe:	f107 0118 	add.w	r1, r7, #24
 8000cc2:	4842      	ldr	r0, [pc, #264]	; (8000dcc <main+0x26c>)
 8000cc4:	f003 ff2f 	bl	8004b26 <_ZN11MC3479Class6getXYZEPhS0_S0_>
//	  HAL_UART_Transmit(&huart3, &xData[0], sizeof(xData), 10);
//	  HAL_UART_Transmit(&huart3, &yData[0], sizeof(yData), 10);
//	  HAL_UART_Transmit(&huart3, &zData[0], sizeof(zData), 10);

	  x_theta = ControlSystem.normalizeTheta(xData[0], xData[1], zData[0], zData[1]);
 8000cc8:	7e39      	ldrb	r1, [r7, #24]
 8000cca:	7e7a      	ldrb	r2, [r7, #25]
 8000ccc:	7c38      	ldrb	r0, [r7, #16]
 8000cce:	7c7b      	ldrb	r3, [r7, #17]
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	4841      	ldr	r0, [pc, #260]	; (8000ddc <main+0x27c>)
 8000cd6:	f7ff fefb 	bl	8000ad0 <_ZN12ControlClass14normalizeThetaEhhhh>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	84fb      	strh	r3, [r7, #38]	; 0x26
	  y_theta = ControlSystem.normalizeTheta(yData[0], yData[1], zData[0], zData[1]);
 8000cde:	7d39      	ldrb	r1, [r7, #20]
 8000ce0:	7d7a      	ldrb	r2, [r7, #21]
 8000ce2:	7c38      	ldrb	r0, [r7, #16]
 8000ce4:	7c7b      	ldrb	r3, [r7, #17]
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	4603      	mov	r3, r0
 8000cea:	483c      	ldr	r0, [pc, #240]	; (8000ddc <main+0x27c>)
 8000cec:	f7ff fef0 	bl	8000ad0 <_ZN12ControlClass14normalizeThetaEhhhh>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	84bb      	strh	r3, [r7, #36]	; 0x24
//		  MP6543H.x_setMotorDir(!CLOCKWISE_DIR);
//	  }else{
//		  MP6543H.x_setMotorDir(CLOCKWISE_DIR);
//	  }

	  if (y_theta < 0){
 8000cf4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	da03      	bge.n	8000d04 <main+0x1a4>
		  MP6543H.x_setMotorDir(!CLOCKWISE_DIR);
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4836      	ldr	r0, [pc, #216]	; (8000dd8 <main+0x278>)
 8000d00:	f003 ff7c 	bl	8004bfc <_ZN12MP6543HClass13x_setMotorDirEb>
//		  MP6543H.y_setMotorDir(!CLOCKWISE_DIR);
	  }
	  if (y_theta > 0){
 8000d04:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	dd03      	ble.n	8000d14 <main+0x1b4>
//  	  MP6543H.y_setMotorDir(CLOCKWISE_DIR);
		  MP6543H.x_setMotorDir(CLOCKWISE_DIR);
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	4832      	ldr	r0, [pc, #200]	; (8000dd8 <main+0x278>)
 8000d10:	f003 ff74 	bl	8004bfc <_ZN12MP6543HClass13x_setMotorDirEb>
#ifdef	 __SIMULINK_EN

	  // NOTE: UART3 used for Simulink output/input

	  // Construct the Simulink Packet:
	  Simulink_Packet[0] = (uint8_t)(x_theta & 0x00FF); // Bottom 8 bits of xTheta
 8000d14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	713b      	strb	r3, [r7, #4]
	  Simulink_Packet[1] = (uint8_t)(x_theta >> 8);		// Upper 8 bits of xTheta
 8000d1a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000d1e:	121b      	asrs	r3, r3, #8
 8000d20:	b21b      	sxth	r3, r3
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	717b      	strb	r3, [r7, #5]
	  Simulink_Packet[2] = 0;							// Bottom 8 bits of xNominal
 8000d26:	2300      	movs	r3, #0
 8000d28:	71bb      	strb	r3, [r7, #6]
	  Simulink_Packet[3] = 0;							// Upper 8 bits of xNominal
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	71fb      	strb	r3, [r7, #7]
	  Simulink_Packet[4] = (uint8_t)(y_theta & 0x00FF);	// Bottom 8 bits of yTheta
 8000d2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	723b      	strb	r3, [r7, #8]
	  Simulink_Packet[5] = (uint8_t)(y_theta >> 8);		// Upper 8 bits of yTheta
 8000d34:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000d38:	121b      	asrs	r3, r3, #8
 8000d3a:	b21b      	sxth	r3, r3
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	727b      	strb	r3, [r7, #9]
	  Simulink_Packet[6] = 0;							// Bottom 8 bits of yNominal
 8000d40:	2300      	movs	r3, #0
 8000d42:	72bb      	strb	r3, [r7, #10]
	  Simulink_Packet[7] = 0;							// Upper 8 bits of yNominal
 8000d44:	2300      	movs	r3, #0
 8000d46:	72fb      	strb	r3, [r7, #11]

	  // Send the Simulink Packet - Least significant Byte first - Byte 0 : Byte 7
	  // dividing simulink packet size by 4 to only send x_theta
//	  HAL_UART_Transmit(&huart3, &Simulink_Packet[0], sizeof(Simulink_Packet)/4, 10);
	  HAL_UART_Transmit(&huart3, &Simulink_Packet[4], sizeof(Simulink_Packet)/4, 10);
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	1d19      	adds	r1, r3, #4
 8000d4c:	230a      	movs	r3, #10
 8000d4e:	2202      	movs	r2, #2
 8000d50:	4823      	ldr	r0, [pc, #140]	; (8000de0 <main+0x280>)
 8000d52:	f003 fb69 	bl	8004428 <HAL_UART_Transmit>
// Check for UART Rx Buffer:
// Loop until we recieve xAxis PWM value in SimulinkPwm[0]:
//	  while (HAL_UART_Receive(&huart3, &SimulinkPwm[0], sizeof(SimulinkPwm[0]), 0) == HAL_TIMEOUT){
//		  HAL_Delay(1);
//	  }
	  HAL_UART_Receive(&huart3, &SimulinkPwm[0], sizeof(SimulinkPwm[0]), 1);
 8000d56:	f107 010c 	add.w	r1, r7, #12
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	4820      	ldr	r0, [pc, #128]	; (8000de0 <main+0x280>)
 8000d60:	f003 fbf4 	bl	800454c <HAL_UART_Receive>

// Update X-axis PWM control:
//	  if (xPWM != SimulinkPwm[0])
//	  {
//	  	  TIM1->CCR1 = 50;
		  xPWM = SimulinkPwm[0];
 8000d64:	7b3b      	ldrb	r3, [r7, #12]
 8000d66:	77fb      	strb	r3, [r7, #31]
//		  MP6543H.x_motorBrake(true);
	  	  xPWM = (y_theta < 0) ? (int16_t)(-y_theta/2) : (int16_t)(y_theta/2);
 8000d68:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	da08      	bge.n	8000d82 <main+0x222>
 8000d70:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000d74:	0fda      	lsrs	r2, r3, #31
 8000d76:	4413      	add	r3, r2
 8000d78:	105b      	asrs	r3, r3, #1
 8000d7a:	425b      	negs	r3, r3
 8000d7c:	b21b      	sxth	r3, r3
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	e006      	b.n	8000d90 <main+0x230>
 8000d82:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000d86:	0fda      	lsrs	r2, r3, #31
 8000d88:	4413      	add	r3, r2
 8000d8a:	105b      	asrs	r3, r3, #1
 8000d8c:	b21b      	sxth	r3, r3
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	77fb      	strb	r3, [r7, #31]
	  	  if (xPWM > 3){
 8000d92:	7ffb      	ldrb	r3, [r7, #31]
 8000d94:	2b03      	cmp	r3, #3
 8000d96:	f67f af54 	bls.w	8000c42 <main+0xe2>
//			  MP6543H.x_setMotorDir(CLOCKWISE_DIR);
	  		  MP6543H.x_motorBrake(true);
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	480e      	ldr	r0, [pc, #56]	; (8000dd8 <main+0x278>)
 8000d9e:	f003 ff4c 	bl	8004c3a <_ZN12MP6543HClass12x_motorBrakeEb>
	  		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000da2:	2100      	movs	r1, #0
 8000da4:	480b      	ldr	r0, [pc, #44]	; (8000dd4 <main+0x274>)
 8000da6:	f002 fdb9 	bl	800391c <HAL_TIM_PWM_Stop>
	  		  TIM1->CCR1 = xPWM;
 8000daa:	4a0e      	ldr	r2, [pc, #56]	; (8000de4 <main+0x284>)
 8000dac:	7ffb      	ldrb	r3, [r7, #31]
 8000dae:	6353      	str	r3, [r2, #52]	; 0x34
			  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000db0:	2100      	movs	r1, #0
 8000db2:	4808      	ldr	r0, [pc, #32]	; (8000dd4 <main+0x274>)
 8000db4:	f002 fd10 	bl	80037d8 <HAL_TIM_PWM_Start>
			  MP6543H.x_motorBrake(false);
 8000db8:	2100      	movs	r1, #0
 8000dba:	4807      	ldr	r0, [pc, #28]	; (8000dd8 <main+0x278>)
 8000dbc:	f003 ff3d 	bl	8004c3a <_ZN12MP6543HClass12x_motorBrakeEb>
	  while(HAL_GPIO_ReadPin(nTILT_BUTTON_GPIO_Port, nTILT_BUTTON_Pin) == 0){
 8000dc0:	e73f      	b.n	8000c42 <main+0xe2>
 8000dc2:	bf00      	nop
 8000dc4:	40010800 	.word	0x40010800
 8000dc8:	20000330 	.word	0x20000330
 8000dcc:	2000045c 	.word	0x2000045c
 8000dd0:	40010c00 	.word	0x40010c00
 8000dd4:	20000388 	.word	0x20000388
 8000dd8:	20000470 	.word	0x20000470
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	20000414 	.word	0x20000414
 8000de4:	40012c00 	.word	0x40012c00

08000de8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b094      	sub	sp, #80	; 0x50
 8000dec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df2:	2228      	movs	r2, #40	; 0x28
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f003 fff0 	bl	8004ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e20:	2310      	movs	r3, #16
 8000e22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f001 f9ed 	bl	800220c <HAL_RCC_OscConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	bf14      	ite	ne
 8000e38:	2301      	movne	r3, #1
 8000e3a:	2300      	moveq	r3, #0
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <_Z18SystemClock_Configv+0x5e>
  {
    Error_Handler();
 8000e42:	f000 faa1 	bl	8001388 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e46:	230f      	movs	r3, #15
 8000e48:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f001 fc55 	bl	8002710 <HAL_RCC_ClockConfig>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	bf14      	ite	ne
 8000e6c:	2301      	movne	r3, #1
 8000e6e:	2300      	moveq	r3, #0
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <_Z18SystemClock_Configv+0x92>
  {
    Error_Handler();
 8000e76:	f000 fa87 	bl	8001388 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	4618      	mov	r0, r3
 8000e86:	f001 fddd 	bl	8002a44 <HAL_RCCEx_PeriphCLKConfig>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	bf14      	ite	ne
 8000e90:	2301      	movne	r3, #1
 8000e92:	2300      	moveq	r3, #0
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8000e9a:	f000 fa75 	bl	8001388 <Error_Handler>
  }
}
 8000e9e:	bf00      	nop
 8000ea0:	3750      	adds	r7, #80	; 0x50
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
	...

08000ea8 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000eb8:	4b32      	ldr	r3, [pc, #200]	; (8000f84 <_ZL12MX_ADC2_Initv+0xdc>)
 8000eba:	4a33      	ldr	r2, [pc, #204]	; (8000f88 <_ZL12MX_ADC2_Initv+0xe0>)
 8000ebc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ebe:	4b31      	ldr	r3, [pc, #196]	; (8000f84 <_ZL12MX_ADC2_Initv+0xdc>)
 8000ec0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ec4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ec6:	4b2f      	ldr	r3, [pc, #188]	; (8000f84 <_ZL12MX_ADC2_Initv+0xdc>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = ENABLE;
 8000ecc:	4b2d      	ldr	r3, [pc, #180]	; (8000f84 <_ZL12MX_ADC2_Initv+0xdc>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	751a      	strb	r2, [r3, #20]
  hadc2.Init.NbrOfDiscConversion = 3;
 8000ed2:	4b2c      	ldr	r3, [pc, #176]	; (8000f84 <_ZL12MX_ADC2_Initv+0xdc>)
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	619a      	str	r2, [r3, #24]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ed8:	4b2a      	ldr	r3, [pc, #168]	; (8000f84 <_ZL12MX_ADC2_Initv+0xdc>)
 8000eda:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ede:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ee0:	4b28      	ldr	r3, [pc, #160]	; (8000f84 <_ZL12MX_ADC2_Initv+0xdc>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 3;
 8000ee6:	4b27      	ldr	r3, [pc, #156]	; (8000f84 <_ZL12MX_ADC2_Initv+0xdc>)
 8000ee8:	2203      	movs	r2, #3
 8000eea:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000eec:	4825      	ldr	r0, [pc, #148]	; (8000f84 <_ZL12MX_ADC2_Initv+0xdc>)
 8000eee:	f000 fce3 	bl	80018b8 <HAL_ADC_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	bf14      	ite	ne
 8000ef8:	2301      	movne	r3, #1
 8000efa:	2300      	moveq	r3, #0
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <_ZL12MX_ADC2_Initv+0x5e>
  {
    Error_Handler();
 8000f02:	f000 fa41 	bl	8001388 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f06:	2304      	movs	r3, #4
 8000f08:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	4619      	mov	r1, r3
 8000f16:	481b      	ldr	r0, [pc, #108]	; (8000f84 <_ZL12MX_ADC2_Initv+0xdc>)
 8000f18:	f000 fda6 	bl	8001a68 <HAL_ADC_ConfigChannel>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	bf14      	ite	ne
 8000f22:	2301      	movne	r3, #1
 8000f24:	2300      	moveq	r3, #0
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <_ZL12MX_ADC2_Initv+0x88>
  {
    Error_Handler();
 8000f2c:	f000 fa2c 	bl	8001388 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f30:	2305      	movs	r3, #5
 8000f32:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f34:	2302      	movs	r3, #2
 8000f36:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4811      	ldr	r0, [pc, #68]	; (8000f84 <_ZL12MX_ADC2_Initv+0xdc>)
 8000f3e:	f000 fd93 	bl	8001a68 <HAL_ADC_ConfigChannel>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	bf14      	ite	ne
 8000f48:	2301      	movne	r3, #1
 8000f4a:	2300      	moveq	r3, #0
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <_ZL12MX_ADC2_Initv+0xae>
  {
    Error_Handler();
 8000f52:	f000 fa19 	bl	8001388 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f56:	2306      	movs	r3, #6
 8000f58:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	4619      	mov	r1, r3
 8000f62:	4808      	ldr	r0, [pc, #32]	; (8000f84 <_ZL12MX_ADC2_Initv+0xdc>)
 8000f64:	f000 fd80 	bl	8001a68 <HAL_ADC_ConfigChannel>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	bf14      	ite	ne
 8000f6e:	2301      	movne	r3, #1
 8000f70:	2300      	moveq	r3, #0
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <_ZL12MX_ADC2_Initv+0xd4>
  {
    Error_Handler();
 8000f78:	f000 fa06 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f7c:	bf00      	nop
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000300 	.word	0x20000300
 8000f88:	40012800 	.word	0x40012800

08000f8c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f90:	4b1a      	ldr	r3, [pc, #104]	; (8000ffc <_ZL12MX_SPI1_Initv+0x70>)
 8000f92:	4a1b      	ldr	r2, [pc, #108]	; (8001000 <_ZL12MX_SPI1_Initv+0x74>)
 8000f94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f96:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <_ZL12MX_SPI1_Initv+0x70>)
 8000f98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f9e:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <_ZL12MX_SPI1_Initv+0x70>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fa4:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <_ZL12MX_SPI1_Initv+0x70>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000faa:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <_ZL12MX_SPI1_Initv+0x70>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <_ZL12MX_SPI1_Initv+0x70>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <_ZL12MX_SPI1_Initv+0x70>)
 8000fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fbc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <_ZL12MX_SPI1_Initv+0x70>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fc4:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <_ZL12MX_SPI1_Initv+0x70>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fca:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <_ZL12MX_SPI1_Initv+0x70>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fd0:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <_ZL12MX_SPI1_Initv+0x70>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000fd6:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <_ZL12MX_SPI1_Initv+0x70>)
 8000fd8:	220a      	movs	r2, #10
 8000fda:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fdc:	4807      	ldr	r0, [pc, #28]	; (8000ffc <_ZL12MX_SPI1_Initv+0x70>)
 8000fde:	f001 fde7 	bl	8002bb0 <HAL_SPI_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	bf14      	ite	ne
 8000fe8:	2301      	movne	r3, #1
 8000fea:	2300      	moveq	r3, #0
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8000ff2:	f000 f9c9 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000330 	.word	0x20000330
 8001000:	40013000 	.word	0x40013000

08001004 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b096      	sub	sp, #88	; 0x58
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800100a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001018:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	611a      	str	r2, [r3, #16]
 8001032:	615a      	str	r2, [r3, #20]
 8001034:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	2220      	movs	r2, #32
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f003 fecd 	bl	8004ddc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001042:	4b55      	ldr	r3, [pc, #340]	; (8001198 <_ZL12MX_TIM1_Initv+0x194>)
 8001044:	4a55      	ldr	r2, [pc, #340]	; (800119c <_ZL12MX_TIM1_Initv+0x198>)
 8001046:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001048:	4b53      	ldr	r3, [pc, #332]	; (8001198 <_ZL12MX_TIM1_Initv+0x194>)
 800104a:	2200      	movs	r2, #0
 800104c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104e:	4b52      	ldr	r3, [pc, #328]	; (8001198 <_ZL12MX_TIM1_Initv+0x194>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8001054:	4b50      	ldr	r3, [pc, #320]	; (8001198 <_ZL12MX_TIM1_Initv+0x194>)
 8001056:	2264      	movs	r2, #100	; 0x64
 8001058:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105a:	4b4f      	ldr	r3, [pc, #316]	; (8001198 <_ZL12MX_TIM1_Initv+0x194>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001060:	4b4d      	ldr	r3, [pc, #308]	; (8001198 <_ZL12MX_TIM1_Initv+0x194>)
 8001062:	2200      	movs	r2, #0
 8001064:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001066:	4b4c      	ldr	r3, [pc, #304]	; (8001198 <_ZL12MX_TIM1_Initv+0x194>)
 8001068:	2280      	movs	r2, #128	; 0x80
 800106a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800106c:	484a      	ldr	r0, [pc, #296]	; (8001198 <_ZL12MX_TIM1_Initv+0x194>)
 800106e:	f002 fb0b 	bl	8003688 <HAL_TIM_Base_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	bf14      	ite	ne
 8001078:	2301      	movne	r3, #1
 800107a:	2300      	moveq	r3, #0
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <_ZL12MX_TIM1_Initv+0x82>
  {
    Error_Handler();
 8001082:	f000 f981 	bl	8001388 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800108c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001090:	4619      	mov	r1, r3
 8001092:	4841      	ldr	r0, [pc, #260]	; (8001198 <_ZL12MX_TIM1_Initv+0x194>)
 8001094:	f002 fd64 	bl	8003b60 <HAL_TIM_ConfigClockSource>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	bf14      	ite	ne
 800109e:	2301      	movne	r3, #1
 80010a0:	2300      	moveq	r3, #0
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <_ZL12MX_TIM1_Initv+0xa8>
  {
    Error_Handler();
 80010a8:	f000 f96e 	bl	8001388 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010ac:	483a      	ldr	r0, [pc, #232]	; (8001198 <_ZL12MX_TIM1_Initv+0x194>)
 80010ae:	f002 fb3a 	bl	8003726 <HAL_TIM_PWM_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	bf14      	ite	ne
 80010b8:	2301      	movne	r3, #1
 80010ba:	2300      	moveq	r3, #0
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <_ZL12MX_TIM1_Initv+0xc2>
  {
    Error_Handler();
 80010c2:	f000 f961 	bl	8001388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c6:	2300      	movs	r3, #0
 80010c8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010d2:	4619      	mov	r1, r3
 80010d4:	4830      	ldr	r0, [pc, #192]	; (8001198 <_ZL12MX_TIM1_Initv+0x194>)
 80010d6:	f003 f8ab 	bl	8004230 <HAL_TIMEx_MasterConfigSynchronization>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	bf14      	ite	ne
 80010e0:	2301      	movne	r3, #1
 80010e2:	2300      	moveq	r3, #0
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <_ZL12MX_TIM1_Initv+0xea>
  {
    Error_Handler();
 80010ea:	f000 f94d 	bl	8001388 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ee:	2360      	movs	r3, #96	; 0x60
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 50;
 80010f2:	2332      	movs	r3, #50	; 0x32
 80010f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010f6:	2300      	movs	r3, #0
 80010f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010fa:	2300      	movs	r3, #0
 80010fc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010fe:	2300      	movs	r3, #0
 8001100:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001102:	2300      	movs	r3, #0
 8001104:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001106:	2300      	movs	r3, #0
 8001108:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800110a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110e:	2200      	movs	r2, #0
 8001110:	4619      	mov	r1, r3
 8001112:	4821      	ldr	r0, [pc, #132]	; (8001198 <_ZL12MX_TIM1_Initv+0x194>)
 8001114:	f002 fc66 	bl	80039e4 <HAL_TIM_PWM_ConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	bf14      	ite	ne
 800111e:	2301      	movne	r3, #1
 8001120:	2300      	moveq	r3, #0
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <_ZL12MX_TIM1_Initv+0x128>
  {
    Error_Handler();
 8001128:	f000 f92e 	bl	8001388 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800112c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001130:	2204      	movs	r2, #4
 8001132:	4619      	mov	r1, r3
 8001134:	4818      	ldr	r0, [pc, #96]	; (8001198 <_ZL12MX_TIM1_Initv+0x194>)
 8001136:	f002 fc55 	bl	80039e4 <HAL_TIM_PWM_ConfigChannel>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	bf14      	ite	ne
 8001140:	2301      	movne	r3, #1
 8001142:	2300      	moveq	r3, #0
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <_ZL12MX_TIM1_Initv+0x14a>
  {
    Error_Handler();
 800114a:	f000 f91d 	bl	8001388 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001162:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001166:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001168:	2300      	movs	r3, #0
 800116a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	4619      	mov	r1, r3
 8001170:	4809      	ldr	r0, [pc, #36]	; (8001198 <_ZL12MX_TIM1_Initv+0x194>)
 8001172:	f003 f8bb 	bl	80042ec <HAL_TIMEx_ConfigBreakDeadTime>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	bf14      	ite	ne
 800117c:	2301      	movne	r3, #1
 800117e:	2300      	moveq	r3, #0
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <_ZL12MX_TIM1_Initv+0x186>
  {
    Error_Handler();
 8001186:	f000 f8ff 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800118a:	4803      	ldr	r0, [pc, #12]	; (8001198 <_ZL12MX_TIM1_Initv+0x194>)
 800118c:	f000 fa00 	bl	8001590 <HAL_TIM_MspPostInit>

}
 8001190:	bf00      	nop
 8001192:	3758      	adds	r7, #88	; 0x58
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000388 	.word	0x20000388
 800119c:	40012c00 	.word	0x40012c00

080011a0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011a4:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80011a6:	4a14      	ldr	r2, [pc, #80]	; (80011f8 <_ZL19MX_USART2_UART_Initv+0x58>)
 80011a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 80011aa:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80011ac:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80011b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011b8:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011be:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011c4:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80011c6:	220c      	movs	r2, #12
 80011c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011d6:	4807      	ldr	r0, [pc, #28]	; (80011f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80011d8:	f003 f8d9 	bl	800438e <HAL_UART_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	bf14      	ite	ne
 80011e2:	2301      	movne	r3, #1
 80011e4:	2300      	moveq	r3, #0
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80011ec:	f000 f8cc 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200003d0 	.word	0x200003d0
 80011f8:	40004400 	.word	0x40004400

080011fc <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001200:	4b13      	ldr	r3, [pc, #76]	; (8001250 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001202:	4a14      	ldr	r2, [pc, #80]	; (8001254 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001204:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8001206:	4b12      	ldr	r3, [pc, #72]	; (8001250 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001208:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 800120c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800121a:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <_ZL19MX_USART3_UART_Initv+0x54>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001222:	220c      	movs	r2, #12
 8001224:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001226:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <_ZL19MX_USART3_UART_Initv+0x54>)
 800122e:	2200      	movs	r2, #0
 8001230:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001232:	4807      	ldr	r0, [pc, #28]	; (8001250 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001234:	f003 f8ab 	bl	800438e <HAL_UART_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	bf14      	ite	ne
 800123e:	2301      	movne	r3, #1
 8001240:	2300      	moveq	r3, #0
 8001242:	b2db      	uxtb	r3, r3
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8001248:	f000 f89e 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000414 	.word	0x20000414
 8001254:	40004800 	.word	0x40004800

08001258 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125e:	f107 0310 	add.w	r3, r7, #16
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126c:	4b41      	ldr	r3, [pc, #260]	; (8001374 <_ZL12MX_GPIO_Initv+0x11c>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	4a40      	ldr	r2, [pc, #256]	; (8001374 <_ZL12MX_GPIO_Initv+0x11c>)
 8001272:	f043 0310 	orr.w	r3, r3, #16
 8001276:	6193      	str	r3, [r2, #24]
 8001278:	4b3e      	ldr	r3, [pc, #248]	; (8001374 <_ZL12MX_GPIO_Initv+0x11c>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f003 0310 	and.w	r3, r3, #16
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001284:	4b3b      	ldr	r3, [pc, #236]	; (8001374 <_ZL12MX_GPIO_Initv+0x11c>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	4a3a      	ldr	r2, [pc, #232]	; (8001374 <_ZL12MX_GPIO_Initv+0x11c>)
 800128a:	f043 0320 	orr.w	r3, r3, #32
 800128e:	6193      	str	r3, [r2, #24]
 8001290:	4b38      	ldr	r3, [pc, #224]	; (8001374 <_ZL12MX_GPIO_Initv+0x11c>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	f003 0320 	and.w	r3, r3, #32
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129c:	4b35      	ldr	r3, [pc, #212]	; (8001374 <_ZL12MX_GPIO_Initv+0x11c>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	4a34      	ldr	r2, [pc, #208]	; (8001374 <_ZL12MX_GPIO_Initv+0x11c>)
 80012a2:	f043 0304 	orr.w	r3, r3, #4
 80012a6:	6193      	str	r3, [r2, #24]
 80012a8:	4b32      	ldr	r3, [pc, #200]	; (8001374 <_ZL12MX_GPIO_Initv+0x11c>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	f003 0304 	and.w	r3, r3, #4
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b4:	4b2f      	ldr	r3, [pc, #188]	; (8001374 <_ZL12MX_GPIO_Initv+0x11c>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	4a2e      	ldr	r2, [pc, #184]	; (8001374 <_ZL12MX_GPIO_Initv+0x11c>)
 80012ba:	f043 0308 	orr.w	r3, r3, #8
 80012be:	6193      	str	r3, [r2, #24]
 80012c0:	4b2c      	ldr	r3, [pc, #176]	; (8001374 <_ZL12MX_GPIO_Initv+0x11c>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	f003 0308 	and.w	r3, r3, #8
 80012c8:	603b      	str	r3, [r7, #0]
 80012ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MP6543H_DIR_X_Pin|MP6543H_nSLEEP_X_Pin|MP6543H_nBRAKE_X_Pin, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80012d2:	4829      	ldr	r0, [pc, #164]	; (8001378 <_ZL12MX_GPIO_Initv+0x120>)
 80012d4:	f000 ff81 	bl	80021da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MP6543H_DIR_Y_Pin|MP6543H_nSLEEP_Y_Pin|MP6543H_nBRAKE_Y_Pin|SPI1_CSn_Pin, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	f44f 411c 	mov.w	r1, #39936	; 0x9c00
 80012de:	4827      	ldr	r0, [pc, #156]	; (800137c <_ZL12MX_GPIO_Initv+0x124>)
 80012e0:	f000 ff7b 	bl	80021da <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80012e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ea:	4b25      	ldr	r3, [pc, #148]	; (8001380 <_ZL12MX_GPIO_Initv+0x128>)
 80012ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f2:	f107 0310 	add.w	r3, r7, #16
 80012f6:	4619      	mov	r1, r3
 80012f8:	4822      	ldr	r0, [pc, #136]	; (8001384 <_ZL12MX_GPIO_Initv+0x12c>)
 80012fa:	f000 fdd3 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : nTILT_BUTTON_Pin */
  GPIO_InitStruct.Pin = nTILT_BUTTON_Pin;
 80012fe:	2302      	movs	r3, #2
 8001300:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001306:	2301      	movs	r3, #1
 8001308:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(nTILT_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800130a:	f107 0310 	add.w	r3, r7, #16
 800130e:	4619      	mov	r1, r3
 8001310:	481a      	ldr	r0, [pc, #104]	; (800137c <_ZL12MX_GPIO_Initv+0x124>)
 8001312:	f000 fdc7 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MP6543H_nFAULT_Y_Pin MP6543H_nFAULT_X_Pin MC3479_INTN1_Pin MC3479_INTN2_Pin */
  GPIO_InitStruct.Pin = MP6543H_nFAULT_Y_Pin|MP6543H_nFAULT_X_Pin|MC3479_INTN1_Pin|MC3479_INTN2_Pin;
 8001316:	f241 03c4 	movw	r3, #4292	; 0x10c4
 800131a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001320:	2301      	movs	r3, #1
 8001322:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001324:	f107 0310 	add.w	r3, r7, #16
 8001328:	4619      	mov	r1, r3
 800132a:	4813      	ldr	r0, [pc, #76]	; (8001378 <_ZL12MX_GPIO_Initv+0x120>)
 800132c:	f000 fdba 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MP6543H_DIR_X_Pin MP6543H_nSLEEP_X_Pin MP6543H_nBRAKE_X_Pin */
  GPIO_InitStruct.Pin = MP6543H_DIR_X_Pin|MP6543H_nSLEEP_X_Pin|MP6543H_nBRAKE_X_Pin;
 8001330:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001336:	2301      	movs	r3, #1
 8001338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2302      	movs	r3, #2
 8001340:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001342:	f107 0310 	add.w	r3, r7, #16
 8001346:	4619      	mov	r1, r3
 8001348:	480b      	ldr	r0, [pc, #44]	; (8001378 <_ZL12MX_GPIO_Initv+0x120>)
 800134a:	f000 fdab 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MP6543H_DIR_Y_Pin MP6543H_nSLEEP_Y_Pin MP6543H_nBRAKE_Y_Pin SPI1_CSn_Pin */
  GPIO_InitStruct.Pin = MP6543H_DIR_Y_Pin|MP6543H_nSLEEP_Y_Pin|MP6543H_nBRAKE_Y_Pin|SPI1_CSn_Pin;
 800134e:	f44f 431c 	mov.w	r3, #39936	; 0x9c00
 8001352:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001354:	2301      	movs	r3, #1
 8001356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	2302      	movs	r3, #2
 800135e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	4619      	mov	r1, r3
 8001366:	4805      	ldr	r0, [pc, #20]	; (800137c <_ZL12MX_GPIO_Initv+0x124>)
 8001368:	f000 fd9c 	bl	8001ea4 <HAL_GPIO_Init>

}
 800136c:	bf00      	nop
 800136e:	3720      	adds	r7, #32
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40021000 	.word	0x40021000
 8001378:	40010c00 	.word	0x40010c00
 800137c:	40010800 	.word	0x40010800
 8001380:	10110000 	.word	0x10110000
 8001384:	40011000 	.word	0x40011000

08001388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800138c:	b672      	cpsid	i
}
 800138e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001390:	e7fe      	b.n	8001390 <Error_Handler+0x8>
	...

08001394 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <HAL_MspInit+0x5c>)
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	4a14      	ldr	r2, [pc, #80]	; (80013f0 <HAL_MspInit+0x5c>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6193      	str	r3, [r2, #24]
 80013a6:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <HAL_MspInit+0x5c>)
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b2:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <HAL_MspInit+0x5c>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <HAL_MspInit+0x5c>)
 80013b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013bc:	61d3      	str	r3, [r2, #28]
 80013be:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <HAL_MspInit+0x5c>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_MspInit+0x60>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <HAL_MspInit+0x60>)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e6:	bf00      	nop
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40010000 	.word	0x40010000

080013f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0318 	add.w	r3, r7, #24
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC2)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a1f      	ldr	r2, [pc, #124]	; (8001490 <HAL_ADC_MspInit+0x98>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d137      	bne.n	8001488 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001418:	4b1e      	ldr	r3, [pc, #120]	; (8001494 <HAL_ADC_MspInit+0x9c>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	4a1d      	ldr	r2, [pc, #116]	; (8001494 <HAL_ADC_MspInit+0x9c>)
 800141e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001422:	6193      	str	r3, [r2, #24]
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <HAL_ADC_MspInit+0x9c>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001430:	4b18      	ldr	r3, [pc, #96]	; (8001494 <HAL_ADC_MspInit+0x9c>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	4a17      	ldr	r2, [pc, #92]	; (8001494 <HAL_ADC_MspInit+0x9c>)
 8001436:	f043 0304 	orr.w	r3, r3, #4
 800143a:	6193      	str	r3, [r2, #24]
 800143c:	4b15      	ldr	r3, [pc, #84]	; (8001494 <HAL_ADC_MspInit+0x9c>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <HAL_ADC_MspInit+0x9c>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a11      	ldr	r2, [pc, #68]	; (8001494 <HAL_ADC_MspInit+0x9c>)
 800144e:	f043 0308 	orr.w	r3, r3, #8
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <HAL_ADC_MspInit+0x9c>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = MP6543H_SOA_X_Pin|MP6543H_SOB_X_Pin|MP6543H_SOC_X_Pin|MP6543H_SOA_Y_Pin;
 8001460:	23f0      	movs	r3, #240	; 0xf0
 8001462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001464:	2303      	movs	r3, #3
 8001466:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001468:	f107 0318 	add.w	r3, r7, #24
 800146c:	4619      	mov	r1, r3
 800146e:	480a      	ldr	r0, [pc, #40]	; (8001498 <HAL_ADC_MspInit+0xa0>)
 8001470:	f000 fd18 	bl	8001ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MP6543H_SOB_Y_Pin|MP6543H_SOC_Y_Pin;
 8001474:	2303      	movs	r3, #3
 8001476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001478:	2303      	movs	r3, #3
 800147a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147c:	f107 0318 	add.w	r3, r7, #24
 8001480:	4619      	mov	r1, r3
 8001482:	4806      	ldr	r0, [pc, #24]	; (800149c <HAL_ADC_MspInit+0xa4>)
 8001484:	f000 fd0e 	bl	8001ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001488:	bf00      	nop
 800148a:	3728      	adds	r7, #40	; 0x28
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40012800 	.word	0x40012800
 8001494:	40021000 	.word	0x40021000
 8001498:	40010800 	.word	0x40010800
 800149c:	40010c00 	.word	0x40010c00

080014a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	; 0x28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a22      	ldr	r2, [pc, #136]	; (8001544 <HAL_SPI_MspInit+0xa4>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d13d      	bne.n	800153c <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014c0:	4b21      	ldr	r3, [pc, #132]	; (8001548 <HAL_SPI_MspInit+0xa8>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	4a20      	ldr	r2, [pc, #128]	; (8001548 <HAL_SPI_MspInit+0xa8>)
 80014c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014ca:	6193      	str	r3, [r2, #24]
 80014cc:	4b1e      	ldr	r3, [pc, #120]	; (8001548 <HAL_SPI_MspInit+0xa8>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d8:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <HAL_SPI_MspInit+0xa8>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	4a1a      	ldr	r2, [pc, #104]	; (8001548 <HAL_SPI_MspInit+0xa8>)
 80014de:	f043 0308 	orr.w	r3, r3, #8
 80014e2:	6193      	str	r3, [r2, #24]
 80014e4:	4b18      	ldr	r3, [pc, #96]	; (8001548 <HAL_SPI_MspInit+0xa8>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	f003 0308 	and.w	r3, r3, #8
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80014f0:	2328      	movs	r3, #40	; 0x28
 80014f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4619      	mov	r1, r3
 8001502:	4812      	ldr	r0, [pc, #72]	; (800154c <HAL_SPI_MspInit+0xac>)
 8001504:	f000 fcce 	bl	8001ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001508:	2310      	movs	r3, #16
 800150a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150c:	2300      	movs	r3, #0
 800150e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001510:	2301      	movs	r3, #1
 8001512:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4619      	mov	r1, r3
 800151a:	480c      	ldr	r0, [pc, #48]	; (800154c <HAL_SPI_MspInit+0xac>)
 800151c:	f000 fcc2 	bl	8001ea4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <HAL_SPI_MspInit+0xb0>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
 8001536:	4a06      	ldr	r2, [pc, #24]	; (8001550 <HAL_SPI_MspInit+0xb0>)
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800153c:	bf00      	nop
 800153e:	3728      	adds	r7, #40	; 0x28
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40013000 	.word	0x40013000
 8001548:	40021000 	.word	0x40021000
 800154c:	40010c00 	.word	0x40010c00
 8001550:	40010000 	.word	0x40010000

08001554 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a09      	ldr	r2, [pc, #36]	; (8001588 <HAL_TIM_Base_MspInit+0x34>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d10b      	bne.n	800157e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <HAL_TIM_Base_MspInit+0x38>)
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	4a08      	ldr	r2, [pc, #32]	; (800158c <HAL_TIM_Base_MspInit+0x38>)
 800156c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001570:	6193      	str	r3, [r2, #24]
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_TIM_Base_MspInit+0x38>)
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800157e:	bf00      	nop
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr
 8001588:	40012c00 	.word	0x40012c00
 800158c:	40021000 	.word	0x40021000

08001590 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b088      	sub	sp, #32
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 0310 	add.w	r3, r7, #16
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a10      	ldr	r2, [pc, #64]	; (80015ec <HAL_TIM_MspPostInit+0x5c>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d118      	bne.n	80015e2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <HAL_TIM_MspPostInit+0x60>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	4a0e      	ldr	r2, [pc, #56]	; (80015f0 <HAL_TIM_MspPostInit+0x60>)
 80015b6:	f043 0304 	orr.w	r3, r3, #4
 80015ba:	6193      	str	r3, [r2, #24]
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <HAL_TIM_MspPostInit+0x60>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MP6543H_PWM_X_Pin|MP6543H_PWM_Y_Pin;
 80015c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2302      	movs	r3, #2
 80015d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d6:	f107 0310 	add.w	r3, r7, #16
 80015da:	4619      	mov	r1, r3
 80015dc:	4805      	ldr	r0, [pc, #20]	; (80015f4 <HAL_TIM_MspPostInit+0x64>)
 80015de:	f000 fc61 	bl	8001ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80015e2:	bf00      	nop
 80015e4:	3720      	adds	r7, #32
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40012c00 	.word	0x40012c00
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40010800 	.word	0x40010800

080015f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0318 	add.w	r3, r7, #24
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a37      	ldr	r2, [pc, #220]	; (80016f0 <HAL_UART_MspInit+0xf8>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d130      	bne.n	800167a <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001618:	4b36      	ldr	r3, [pc, #216]	; (80016f4 <HAL_UART_MspInit+0xfc>)
 800161a:	69db      	ldr	r3, [r3, #28]
 800161c:	4a35      	ldr	r2, [pc, #212]	; (80016f4 <HAL_UART_MspInit+0xfc>)
 800161e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001622:	61d3      	str	r3, [r2, #28]
 8001624:	4b33      	ldr	r3, [pc, #204]	; (80016f4 <HAL_UART_MspInit+0xfc>)
 8001626:	69db      	ldr	r3, [r3, #28]
 8001628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001630:	4b30      	ldr	r3, [pc, #192]	; (80016f4 <HAL_UART_MspInit+0xfc>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	4a2f      	ldr	r2, [pc, #188]	; (80016f4 <HAL_UART_MspInit+0xfc>)
 8001636:	f043 0304 	orr.w	r3, r3, #4
 800163a:	6193      	str	r3, [r2, #24]
 800163c:	4b2d      	ldr	r3, [pc, #180]	; (80016f4 <HAL_UART_MspInit+0xfc>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001648:	2304      	movs	r3, #4
 800164a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	2302      	movs	r3, #2
 800164e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001650:	2303      	movs	r3, #3
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001654:	f107 0318 	add.w	r3, r7, #24
 8001658:	4619      	mov	r1, r3
 800165a:	4827      	ldr	r0, [pc, #156]	; (80016f8 <HAL_UART_MspInit+0x100>)
 800165c:	f000 fc22 	bl	8001ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001660:	2308      	movs	r3, #8
 8001662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166c:	f107 0318 	add.w	r3, r7, #24
 8001670:	4619      	mov	r1, r3
 8001672:	4821      	ldr	r0, [pc, #132]	; (80016f8 <HAL_UART_MspInit+0x100>)
 8001674:	f000 fc16 	bl	8001ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001678:	e036      	b.n	80016e8 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a1f      	ldr	r2, [pc, #124]	; (80016fc <HAL_UART_MspInit+0x104>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d131      	bne.n	80016e8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001684:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <HAL_UART_MspInit+0xfc>)
 8001686:	69db      	ldr	r3, [r3, #28]
 8001688:	4a1a      	ldr	r2, [pc, #104]	; (80016f4 <HAL_UART_MspInit+0xfc>)
 800168a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800168e:	61d3      	str	r3, [r2, #28]
 8001690:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <HAL_UART_MspInit+0xfc>)
 8001692:	69db      	ldr	r3, [r3, #28]
 8001694:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169c:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <HAL_UART_MspInit+0xfc>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	4a14      	ldr	r2, [pc, #80]	; (80016f4 <HAL_UART_MspInit+0xfc>)
 80016a2:	f043 0308 	orr.w	r3, r3, #8
 80016a6:	6193      	str	r3, [r2, #24]
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <HAL_UART_MspInit+0xfc>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016be:	2303      	movs	r3, #3
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c2:	f107 0318 	add.w	r3, r7, #24
 80016c6:	4619      	mov	r1, r3
 80016c8:	480d      	ldr	r0, [pc, #52]	; (8001700 <HAL_UART_MspInit+0x108>)
 80016ca:	f000 fbeb 	bl	8001ea4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80016ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016dc:	f107 0318 	add.w	r3, r7, #24
 80016e0:	4619      	mov	r1, r3
 80016e2:	4807      	ldr	r0, [pc, #28]	; (8001700 <HAL_UART_MspInit+0x108>)
 80016e4:	f000 fbde 	bl	8001ea4 <HAL_GPIO_Init>
}
 80016e8:	bf00      	nop
 80016ea:	3728      	adds	r7, #40	; 0x28
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40004400 	.word	0x40004400
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40010800 	.word	0x40010800
 80016fc:	40004800 	.word	0x40004800
 8001700:	40010c00 	.word	0x40010c00

08001704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <NMI_Handler+0x4>

0800170a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170e:	e7fe      	b.n	800170e <HardFault_Handler+0x4>

08001710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001714:	e7fe      	b.n	8001714 <MemManage_Handler+0x4>

08001716 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800171a:	e7fe      	b.n	800171a <BusFault_Handler+0x4>

0800171c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <UsageFault_Handler+0x4>

08001722 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr

0800172e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr

0800173a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr

08001746 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800174a:	f000 f875 	bl	8001838 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}

08001752 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr
	...

08001760 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001760:	480c      	ldr	r0, [pc, #48]	; (8001794 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001762:	490d      	ldr	r1, [pc, #52]	; (8001798 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001764:	4a0d      	ldr	r2, [pc, #52]	; (800179c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001768:	e002      	b.n	8001770 <LoopCopyDataInit>

0800176a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800176c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176e:	3304      	adds	r3, #4

08001770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001774:	d3f9      	bcc.n	800176a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001778:	4c0a      	ldr	r4, [pc, #40]	; (80017a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800177c:	e001      	b.n	8001782 <LoopFillZerobss>

0800177e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001780:	3204      	adds	r2, #4

08001782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001784:	d3fb      	bcc.n	800177e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001786:	f7ff ffe4 	bl	8001752 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800178a:	f003 fb03 	bl	8004d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800178e:	f7ff f9e7 	bl	8000b60 <main>
  bx lr
 8001792:	4770      	bx	lr
  ldr r0, =_sdata
 8001794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001798:	200002e4 	.word	0x200002e4
  ldr r2, =_sidata
 800179c:	08004e34 	.word	0x08004e34
  ldr r2, =_sbss
 80017a0:	200002e4 	.word	0x200002e4
  ldr r4, =_ebss
 80017a4:	200004b0 	.word	0x200004b0

080017a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017a8:	e7fe      	b.n	80017a8 <ADC1_2_IRQHandler>
	...

080017ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <HAL_Init+0x28>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a07      	ldr	r2, [pc, #28]	; (80017d4 <HAL_Init+0x28>)
 80017b6:	f043 0310 	orr.w	r3, r3, #16
 80017ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017bc:	2003      	movs	r0, #3
 80017be:	f000 fb3d 	bl	8001e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017c2:	200f      	movs	r0, #15
 80017c4:	f000 f808 	bl	80017d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017c8:	f7ff fde4 	bl	8001394 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40022000 	.word	0x40022000

080017d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_InitTick+0x54>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <HAL_InitTick+0x58>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	4619      	mov	r1, r3
 80017ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80017f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f6:	4618      	mov	r0, r3
 80017f8:	f000 fb47 	bl	8001e8a <HAL_SYSTICK_Config>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e00e      	b.n	8001824 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b0f      	cmp	r3, #15
 800180a:	d80a      	bhi.n	8001822 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800180c:	2200      	movs	r2, #0
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	f04f 30ff 	mov.w	r0, #4294967295
 8001814:	f000 fb1d 	bl	8001e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001818:	4a06      	ldr	r2, [pc, #24]	; (8001834 <HAL_InitTick+0x5c>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800181e:	2300      	movs	r3, #0
 8001820:	e000      	b.n	8001824 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	200002d8 	.word	0x200002d8
 8001830:	200002e0 	.word	0x200002e0
 8001834:	200002dc 	.word	0x200002dc

08001838 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800183c:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_IncTick+0x1c>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4b05      	ldr	r3, [pc, #20]	; (8001858 <HAL_IncTick+0x20>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4413      	add	r3, r2
 8001848:	4a03      	ldr	r2, [pc, #12]	; (8001858 <HAL_IncTick+0x20>)
 800184a:	6013      	str	r3, [r2, #0]
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	200002e0 	.word	0x200002e0
 8001858:	20000458 	.word	0x20000458

0800185c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return uwTick;
 8001860:	4b02      	ldr	r3, [pc, #8]	; (800186c <HAL_GetTick+0x10>)
 8001862:	681b      	ldr	r3, [r3, #0]
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	20000458 	.word	0x20000458

08001870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001878:	f7ff fff0 	bl	800185c <HAL_GetTick>
 800187c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001888:	d005      	beq.n	8001896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <HAL_Delay+0x44>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	461a      	mov	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4413      	add	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001896:	bf00      	nop
 8001898:	f7ff ffe0 	bl	800185c <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d8f7      	bhi.n	8001898 <HAL_Delay+0x28>
  {
  }
}
 80018a8:	bf00      	nop
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200002e0 	.word	0x200002e0

080018b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018c0:	2300      	movs	r3, #0
 80018c2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e0be      	b.n	8001a58 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d109      	bne.n	80018fc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff fd7e 	bl	80013f8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 f9ab 	bl	8001c58 <ADC_ConversionStop_Disable>
 8001902:	4603      	mov	r3, r0
 8001904:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190a:	f003 0310 	and.w	r3, r3, #16
 800190e:	2b00      	cmp	r3, #0
 8001910:	f040 8099 	bne.w	8001a46 <HAL_ADC_Init+0x18e>
 8001914:	7dfb      	ldrb	r3, [r7, #23]
 8001916:	2b00      	cmp	r3, #0
 8001918:	f040 8095 	bne.w	8001a46 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001920:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001924:	f023 0302 	bic.w	r3, r3, #2
 8001928:	f043 0202 	orr.w	r2, r3, #2
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001938:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	7b1b      	ldrb	r3, [r3, #12]
 800193e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001940:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	4313      	orrs	r3, r2
 8001946:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001950:	d003      	beq.n	800195a <HAL_ADC_Init+0xa2>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d102      	bne.n	8001960 <HAL_ADC_Init+0xa8>
 800195a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800195e:	e000      	b.n	8001962 <HAL_ADC_Init+0xaa>
 8001960:	2300      	movs	r3, #0
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4313      	orrs	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	7d1b      	ldrb	r3, [r3, #20]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d119      	bne.n	80019a4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	7b1b      	ldrb	r3, [r3, #12]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d109      	bne.n	800198c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	3b01      	subs	r3, #1
 800197e:	035a      	lsls	r2, r3, #13
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	4313      	orrs	r3, r2
 8001984:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	e00b      	b.n	80019a4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001990:	f043 0220 	orr.w	r2, r3, #32
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199c:	f043 0201 	orr.w	r2, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	4b28      	ldr	r3, [pc, #160]	; (8001a60 <HAL_ADC_Init+0x1a8>)
 80019c0:	4013      	ands	r3, r2
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6812      	ldr	r2, [r2, #0]
 80019c6:	68b9      	ldr	r1, [r7, #8]
 80019c8:	430b      	orrs	r3, r1
 80019ca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019d4:	d003      	beq.n	80019de <HAL_ADC_Init+0x126>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d104      	bne.n	80019e8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	051b      	lsls	r3, r3, #20
 80019e6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ee:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <HAL_ADC_Init+0x1ac>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d10b      	bne.n	8001a24 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a16:	f023 0303 	bic.w	r3, r3, #3
 8001a1a:	f043 0201 	orr.w	r2, r3, #1
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a22:	e018      	b.n	8001a56 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a28:	f023 0312 	bic.w	r3, r3, #18
 8001a2c:	f043 0210 	orr.w	r2, r3, #16
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a38:	f043 0201 	orr.w	r2, r3, #1
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a44:	e007      	b.n	8001a56 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4a:	f043 0210 	orr.w	r2, r3, #16
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	ffe1f7fd 	.word	0xffe1f7fd
 8001a64:	ff1f0efe 	.word	0xff1f0efe

08001a68 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d101      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x20>
 8001a84:	2302      	movs	r3, #2
 8001a86:	e0dc      	b.n	8001c42 <HAL_ADC_ConfigChannel+0x1da>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b06      	cmp	r3, #6
 8001a96:	d81c      	bhi.n	8001ad2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3b05      	subs	r3, #5
 8001aaa:	221f      	movs	r2, #31
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	4019      	ands	r1, r3
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	6818      	ldr	r0, [r3, #0]
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	4613      	mov	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3b05      	subs	r3, #5
 8001ac4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	635a      	str	r2, [r3, #52]	; 0x34
 8001ad0:	e03c      	b.n	8001b4c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b0c      	cmp	r3, #12
 8001ad8:	d81c      	bhi.n	8001b14 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	3b23      	subs	r3, #35	; 0x23
 8001aec:	221f      	movs	r2, #31
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	4019      	ands	r1, r3
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	6818      	ldr	r0, [r3, #0]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	3b23      	subs	r3, #35	; 0x23
 8001b06:	fa00 f203 	lsl.w	r2, r0, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	631a      	str	r2, [r3, #48]	; 0x30
 8001b12:	e01b      	b.n	8001b4c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	3b41      	subs	r3, #65	; 0x41
 8001b26:	221f      	movs	r2, #31
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	4019      	ands	r1, r3
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	6818      	ldr	r0, [r3, #0]
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3b41      	subs	r3, #65	; 0x41
 8001b40:	fa00 f203 	lsl.w	r2, r0, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b09      	cmp	r3, #9
 8001b52:	d91c      	bls.n	8001b8e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68d9      	ldr	r1, [r3, #12]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4413      	add	r3, r2
 8001b64:	3b1e      	subs	r3, #30
 8001b66:	2207      	movs	r2, #7
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	4019      	ands	r1, r3
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	6898      	ldr	r0, [r3, #8]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	3b1e      	subs	r3, #30
 8001b80:	fa00 f203 	lsl.w	r2, r0, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	60da      	str	r2, [r3, #12]
 8001b8c:	e019      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6919      	ldr	r1, [r3, #16]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	2207      	movs	r2, #7
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	4019      	ands	r1, r3
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	6898      	ldr	r0, [r3, #8]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2b10      	cmp	r3, #16
 8001bc8:	d003      	beq.n	8001bd2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bce:	2b11      	cmp	r3, #17
 8001bd0:	d132      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a1d      	ldr	r2, [pc, #116]	; (8001c4c <HAL_ADC_ConfigChannel+0x1e4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d125      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d126      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001bf8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2b10      	cmp	r3, #16
 8001c00:	d11a      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c02:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <HAL_ADC_ConfigChannel+0x1e8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a13      	ldr	r2, [pc, #76]	; (8001c54 <HAL_ADC_ConfigChannel+0x1ec>)
 8001c08:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0c:	0c9a      	lsrs	r2, r3, #18
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c18:	e002      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f9      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x1b2>
 8001c26:	e007      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2c:	f043 0220 	orr.w	r2, r3, #32
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr
 8001c4c:	40012400 	.word	0x40012400
 8001c50:	200002d8 	.word	0x200002d8
 8001c54:	431bde83 	.word	0x431bde83

08001c58 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d12e      	bne.n	8001cd0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0201 	bic.w	r2, r2, #1
 8001c80:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c82:	f7ff fdeb 	bl	800185c <HAL_GetTick>
 8001c86:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c88:	e01b      	b.n	8001cc2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c8a:	f7ff fde7 	bl	800185c <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d914      	bls.n	8001cc2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d10d      	bne.n	8001cc2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001caa:	f043 0210 	orr.w	r2, r3, #16
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb6:	f043 0201 	orr.w	r2, r3, #1
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e007      	b.n	8001cd2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d0dc      	beq.n	8001c8a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cec:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <__NVIC_SetPriorityGrouping+0x44>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d0e:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <__NVIC_SetPriorityGrouping+0x44>)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	60d3      	str	r3, [r2, #12]
}
 8001d14:	bf00      	nop
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d28:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <__NVIC_GetPriorityGrouping+0x18>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	0a1b      	lsrs	r3, r3, #8
 8001d2e:	f003 0307 	and.w	r3, r3, #7
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	6039      	str	r1, [r7, #0]
 8001d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	db0a      	blt.n	8001d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	490c      	ldr	r1, [pc, #48]	; (8001d8c <__NVIC_SetPriority+0x4c>)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	0112      	lsls	r2, r2, #4
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	440b      	add	r3, r1
 8001d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d68:	e00a      	b.n	8001d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	4908      	ldr	r1, [pc, #32]	; (8001d90 <__NVIC_SetPriority+0x50>)
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	3b04      	subs	r3, #4
 8001d78:	0112      	lsls	r2, r2, #4
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	761a      	strb	r2, [r3, #24]
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	e000e100 	.word	0xe000e100
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b089      	sub	sp, #36	; 0x24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f1c3 0307 	rsb	r3, r3, #7
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	bf28      	it	cs
 8001db2:	2304      	movcs	r3, #4
 8001db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3304      	adds	r3, #4
 8001dba:	2b06      	cmp	r3, #6
 8001dbc:	d902      	bls.n	8001dc4 <NVIC_EncodePriority+0x30>
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3b03      	subs	r3, #3
 8001dc2:	e000      	b.n	8001dc6 <NVIC_EncodePriority+0x32>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43da      	mvns	r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	401a      	ands	r2, r3
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	fa01 f303 	lsl.w	r3, r1, r3
 8001de6:	43d9      	mvns	r1, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	4313      	orrs	r3, r2
         );
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3724      	adds	r7, #36	; 0x24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e08:	d301      	bcc.n	8001e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e00f      	b.n	8001e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e0e:	4a0a      	ldr	r2, [pc, #40]	; (8001e38 <SysTick_Config+0x40>)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e16:	210f      	movs	r1, #15
 8001e18:	f04f 30ff 	mov.w	r0, #4294967295
 8001e1c:	f7ff ff90 	bl	8001d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <SysTick_Config+0x40>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e26:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <SysTick_Config+0x40>)
 8001e28:	2207      	movs	r2, #7
 8001e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	e000e010 	.word	0xe000e010

08001e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff ff49 	bl	8001cdc <__NVIC_SetPriorityGrouping>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b086      	sub	sp, #24
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	4603      	mov	r3, r0
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
 8001e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e64:	f7ff ff5e 	bl	8001d24 <__NVIC_GetPriorityGrouping>
 8001e68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	68b9      	ldr	r1, [r7, #8]
 8001e6e:	6978      	ldr	r0, [r7, #20]
 8001e70:	f7ff ff90 	bl	8001d94 <NVIC_EncodePriority>
 8001e74:	4602      	mov	r2, r0
 8001e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff5f 	bl	8001d40 <__NVIC_SetPriority>
}
 8001e82:	bf00      	nop
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff ffb0 	bl	8001df8 <SysTick_Config>
 8001e98:	4603      	mov	r3, r0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b08b      	sub	sp, #44	; 0x2c
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eb6:	e169      	b.n	800218c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001eb8:	2201      	movs	r2, #1
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	69fa      	ldr	r2, [r7, #28]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	f040 8158 	bne.w	8002186 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	4a9a      	ldr	r2, [pc, #616]	; (8002144 <HAL_GPIO_Init+0x2a0>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d05e      	beq.n	8001f9e <HAL_GPIO_Init+0xfa>
 8001ee0:	4a98      	ldr	r2, [pc, #608]	; (8002144 <HAL_GPIO_Init+0x2a0>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d875      	bhi.n	8001fd2 <HAL_GPIO_Init+0x12e>
 8001ee6:	4a98      	ldr	r2, [pc, #608]	; (8002148 <HAL_GPIO_Init+0x2a4>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d058      	beq.n	8001f9e <HAL_GPIO_Init+0xfa>
 8001eec:	4a96      	ldr	r2, [pc, #600]	; (8002148 <HAL_GPIO_Init+0x2a4>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d86f      	bhi.n	8001fd2 <HAL_GPIO_Init+0x12e>
 8001ef2:	4a96      	ldr	r2, [pc, #600]	; (800214c <HAL_GPIO_Init+0x2a8>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d052      	beq.n	8001f9e <HAL_GPIO_Init+0xfa>
 8001ef8:	4a94      	ldr	r2, [pc, #592]	; (800214c <HAL_GPIO_Init+0x2a8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d869      	bhi.n	8001fd2 <HAL_GPIO_Init+0x12e>
 8001efe:	4a94      	ldr	r2, [pc, #592]	; (8002150 <HAL_GPIO_Init+0x2ac>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d04c      	beq.n	8001f9e <HAL_GPIO_Init+0xfa>
 8001f04:	4a92      	ldr	r2, [pc, #584]	; (8002150 <HAL_GPIO_Init+0x2ac>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d863      	bhi.n	8001fd2 <HAL_GPIO_Init+0x12e>
 8001f0a:	4a92      	ldr	r2, [pc, #584]	; (8002154 <HAL_GPIO_Init+0x2b0>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d046      	beq.n	8001f9e <HAL_GPIO_Init+0xfa>
 8001f10:	4a90      	ldr	r2, [pc, #576]	; (8002154 <HAL_GPIO_Init+0x2b0>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d85d      	bhi.n	8001fd2 <HAL_GPIO_Init+0x12e>
 8001f16:	2b12      	cmp	r3, #18
 8001f18:	d82a      	bhi.n	8001f70 <HAL_GPIO_Init+0xcc>
 8001f1a:	2b12      	cmp	r3, #18
 8001f1c:	d859      	bhi.n	8001fd2 <HAL_GPIO_Init+0x12e>
 8001f1e:	a201      	add	r2, pc, #4	; (adr r2, 8001f24 <HAL_GPIO_Init+0x80>)
 8001f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f24:	08001f9f 	.word	0x08001f9f
 8001f28:	08001f79 	.word	0x08001f79
 8001f2c:	08001f8b 	.word	0x08001f8b
 8001f30:	08001fcd 	.word	0x08001fcd
 8001f34:	08001fd3 	.word	0x08001fd3
 8001f38:	08001fd3 	.word	0x08001fd3
 8001f3c:	08001fd3 	.word	0x08001fd3
 8001f40:	08001fd3 	.word	0x08001fd3
 8001f44:	08001fd3 	.word	0x08001fd3
 8001f48:	08001fd3 	.word	0x08001fd3
 8001f4c:	08001fd3 	.word	0x08001fd3
 8001f50:	08001fd3 	.word	0x08001fd3
 8001f54:	08001fd3 	.word	0x08001fd3
 8001f58:	08001fd3 	.word	0x08001fd3
 8001f5c:	08001fd3 	.word	0x08001fd3
 8001f60:	08001fd3 	.word	0x08001fd3
 8001f64:	08001fd3 	.word	0x08001fd3
 8001f68:	08001f81 	.word	0x08001f81
 8001f6c:	08001f95 	.word	0x08001f95
 8001f70:	4a79      	ldr	r2, [pc, #484]	; (8002158 <HAL_GPIO_Init+0x2b4>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d013      	beq.n	8001f9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f76:	e02c      	b.n	8001fd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	623b      	str	r3, [r7, #32]
          break;
 8001f7e:	e029      	b.n	8001fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	3304      	adds	r3, #4
 8001f86:	623b      	str	r3, [r7, #32]
          break;
 8001f88:	e024      	b.n	8001fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	3308      	adds	r3, #8
 8001f90:	623b      	str	r3, [r7, #32]
          break;
 8001f92:	e01f      	b.n	8001fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	330c      	adds	r3, #12
 8001f9a:	623b      	str	r3, [r7, #32]
          break;
 8001f9c:	e01a      	b.n	8001fd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d102      	bne.n	8001fac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fa6:	2304      	movs	r3, #4
 8001fa8:	623b      	str	r3, [r7, #32]
          break;
 8001faa:	e013      	b.n	8001fd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d105      	bne.n	8001fc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fb4:	2308      	movs	r3, #8
 8001fb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	611a      	str	r2, [r3, #16]
          break;
 8001fbe:	e009      	b.n	8001fd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fc0:	2308      	movs	r3, #8
 8001fc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69fa      	ldr	r2, [r7, #28]
 8001fc8:	615a      	str	r2, [r3, #20]
          break;
 8001fca:	e003      	b.n	8001fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	623b      	str	r3, [r7, #32]
          break;
 8001fd0:	e000      	b.n	8001fd4 <HAL_GPIO_Init+0x130>
          break;
 8001fd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	2bff      	cmp	r3, #255	; 0xff
 8001fd8:	d801      	bhi.n	8001fde <HAL_GPIO_Init+0x13a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	e001      	b.n	8001fe2 <HAL_GPIO_Init+0x13e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	2bff      	cmp	r3, #255	; 0xff
 8001fe8:	d802      	bhi.n	8001ff0 <HAL_GPIO_Init+0x14c>
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	e002      	b.n	8001ff6 <HAL_GPIO_Init+0x152>
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	3b08      	subs	r3, #8
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	210f      	movs	r1, #15
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	fa01 f303 	lsl.w	r3, r1, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	401a      	ands	r2, r3
 8002008:	6a39      	ldr	r1, [r7, #32]
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	fa01 f303 	lsl.w	r3, r1, r3
 8002010:	431a      	orrs	r2, r3
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	f000 80b1 	beq.w	8002186 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002024:	4b4d      	ldr	r3, [pc, #308]	; (800215c <HAL_GPIO_Init+0x2b8>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	4a4c      	ldr	r2, [pc, #304]	; (800215c <HAL_GPIO_Init+0x2b8>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	6193      	str	r3, [r2, #24]
 8002030:	4b4a      	ldr	r3, [pc, #296]	; (800215c <HAL_GPIO_Init+0x2b8>)
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800203c:	4a48      	ldr	r2, [pc, #288]	; (8002160 <HAL_GPIO_Init+0x2bc>)
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	089b      	lsrs	r3, r3, #2
 8002042:	3302      	adds	r3, #2
 8002044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002048:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	f003 0303 	and.w	r3, r3, #3
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	220f      	movs	r2, #15
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43db      	mvns	r3, r3
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4013      	ands	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a40      	ldr	r2, [pc, #256]	; (8002164 <HAL_GPIO_Init+0x2c0>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d013      	beq.n	8002090 <HAL_GPIO_Init+0x1ec>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a3f      	ldr	r2, [pc, #252]	; (8002168 <HAL_GPIO_Init+0x2c4>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d00d      	beq.n	800208c <HAL_GPIO_Init+0x1e8>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a3e      	ldr	r2, [pc, #248]	; (800216c <HAL_GPIO_Init+0x2c8>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d007      	beq.n	8002088 <HAL_GPIO_Init+0x1e4>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a3d      	ldr	r2, [pc, #244]	; (8002170 <HAL_GPIO_Init+0x2cc>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d101      	bne.n	8002084 <HAL_GPIO_Init+0x1e0>
 8002080:	2303      	movs	r3, #3
 8002082:	e006      	b.n	8002092 <HAL_GPIO_Init+0x1ee>
 8002084:	2304      	movs	r3, #4
 8002086:	e004      	b.n	8002092 <HAL_GPIO_Init+0x1ee>
 8002088:	2302      	movs	r3, #2
 800208a:	e002      	b.n	8002092 <HAL_GPIO_Init+0x1ee>
 800208c:	2301      	movs	r3, #1
 800208e:	e000      	b.n	8002092 <HAL_GPIO_Init+0x1ee>
 8002090:	2300      	movs	r3, #0
 8002092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002094:	f002 0203 	and.w	r2, r2, #3
 8002098:	0092      	lsls	r2, r2, #2
 800209a:	4093      	lsls	r3, r2
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	4313      	orrs	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020a2:	492f      	ldr	r1, [pc, #188]	; (8002160 <HAL_GPIO_Init+0x2bc>)
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	089b      	lsrs	r3, r3, #2
 80020a8:	3302      	adds	r3, #2
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d006      	beq.n	80020ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020bc:	4b2d      	ldr	r3, [pc, #180]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	492c      	ldr	r1, [pc, #176]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	600b      	str	r3, [r1, #0]
 80020c8:	e006      	b.n	80020d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020ca:	4b2a      	ldr	r3, [pc, #168]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	4928      	ldr	r1, [pc, #160]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d006      	beq.n	80020f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020e4:	4b23      	ldr	r3, [pc, #140]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	4922      	ldr	r1, [pc, #136]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	604b      	str	r3, [r1, #4]
 80020f0:	e006      	b.n	8002100 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020f2:	4b20      	ldr	r3, [pc, #128]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	491e      	ldr	r1, [pc, #120]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d006      	beq.n	800211a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800210c:	4b19      	ldr	r3, [pc, #100]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	4918      	ldr	r1, [pc, #96]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	608b      	str	r3, [r1, #8]
 8002118:	e006      	b.n	8002128 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800211a:	4b16      	ldr	r3, [pc, #88]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	43db      	mvns	r3, r3
 8002122:	4914      	ldr	r1, [pc, #80]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 8002124:	4013      	ands	r3, r2
 8002126:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d021      	beq.n	8002178 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002134:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	490e      	ldr	r1, [pc, #56]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	4313      	orrs	r3, r2
 800213e:	60cb      	str	r3, [r1, #12]
 8002140:	e021      	b.n	8002186 <HAL_GPIO_Init+0x2e2>
 8002142:	bf00      	nop
 8002144:	10320000 	.word	0x10320000
 8002148:	10310000 	.word	0x10310000
 800214c:	10220000 	.word	0x10220000
 8002150:	10210000 	.word	0x10210000
 8002154:	10120000 	.word	0x10120000
 8002158:	10110000 	.word	0x10110000
 800215c:	40021000 	.word	0x40021000
 8002160:	40010000 	.word	0x40010000
 8002164:	40010800 	.word	0x40010800
 8002168:	40010c00 	.word	0x40010c00
 800216c:	40011000 	.word	0x40011000
 8002170:	40011400 	.word	0x40011400
 8002174:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002178:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <HAL_GPIO_Init+0x304>)
 800217a:	68da      	ldr	r2, [r3, #12]
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	43db      	mvns	r3, r3
 8002180:	4909      	ldr	r1, [pc, #36]	; (80021a8 <HAL_GPIO_Init+0x304>)
 8002182:	4013      	ands	r3, r2
 8002184:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	3301      	adds	r3, #1
 800218a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	fa22 f303 	lsr.w	r3, r2, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	f47f ae8e 	bne.w	8001eb8 <HAL_GPIO_Init+0x14>
  }
}
 800219c:	bf00      	nop
 800219e:	bf00      	nop
 80021a0:	372c      	adds	r7, #44	; 0x2c
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr
 80021a8:	40010400 	.word	0x40010400

080021ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	887b      	ldrh	r3, [r7, #2]
 80021be:	4013      	ands	r3, r2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d002      	beq.n	80021ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021c4:	2301      	movs	r3, #1
 80021c6:	73fb      	strb	r3, [r7, #15]
 80021c8:	e001      	b.n	80021ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021ca:	2300      	movs	r3, #0
 80021cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr

080021da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	460b      	mov	r3, r1
 80021e4:	807b      	strh	r3, [r7, #2]
 80021e6:	4613      	mov	r3, r2
 80021e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021ea:	787b      	ldrb	r3, [r7, #1]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021f0:	887a      	ldrh	r2, [r7, #2]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021f6:	e003      	b.n	8002200 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021f8:	887b      	ldrh	r3, [r7, #2]
 80021fa:	041a      	lsls	r2, r3, #16
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	611a      	str	r2, [r3, #16]
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	bc80      	pop	{r7}
 8002208:	4770      	bx	lr
	...

0800220c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e272      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 8087 	beq.w	800233a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800222c:	4b92      	ldr	r3, [pc, #584]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 030c 	and.w	r3, r3, #12
 8002234:	2b04      	cmp	r3, #4
 8002236:	d00c      	beq.n	8002252 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002238:	4b8f      	ldr	r3, [pc, #572]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 030c 	and.w	r3, r3, #12
 8002240:	2b08      	cmp	r3, #8
 8002242:	d112      	bne.n	800226a <HAL_RCC_OscConfig+0x5e>
 8002244:	4b8c      	ldr	r3, [pc, #560]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002250:	d10b      	bne.n	800226a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002252:	4b89      	ldr	r3, [pc, #548]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d06c      	beq.n	8002338 <HAL_RCC_OscConfig+0x12c>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d168      	bne.n	8002338 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e24c      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002272:	d106      	bne.n	8002282 <HAL_RCC_OscConfig+0x76>
 8002274:	4b80      	ldr	r3, [pc, #512]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a7f      	ldr	r2, [pc, #508]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 800227a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	e02e      	b.n	80022e0 <HAL_RCC_OscConfig+0xd4>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10c      	bne.n	80022a4 <HAL_RCC_OscConfig+0x98>
 800228a:	4b7b      	ldr	r3, [pc, #492]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a7a      	ldr	r2, [pc, #488]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	4b78      	ldr	r3, [pc, #480]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a77      	ldr	r2, [pc, #476]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 800229c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	e01d      	b.n	80022e0 <HAL_RCC_OscConfig+0xd4>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022ac:	d10c      	bne.n	80022c8 <HAL_RCC_OscConfig+0xbc>
 80022ae:	4b72      	ldr	r3, [pc, #456]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a71      	ldr	r2, [pc, #452]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	4b6f      	ldr	r3, [pc, #444]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a6e      	ldr	r2, [pc, #440]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	e00b      	b.n	80022e0 <HAL_RCC_OscConfig+0xd4>
 80022c8:	4b6b      	ldr	r3, [pc, #428]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a6a      	ldr	r2, [pc, #424]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80022ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	4b68      	ldr	r3, [pc, #416]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a67      	ldr	r2, [pc, #412]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80022da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d013      	beq.n	8002310 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e8:	f7ff fab8 	bl	800185c <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f0:	f7ff fab4 	bl	800185c <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b64      	cmp	r3, #100	; 0x64
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e200      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002302:	4b5d      	ldr	r3, [pc, #372]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0f0      	beq.n	80022f0 <HAL_RCC_OscConfig+0xe4>
 800230e:	e014      	b.n	800233a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002310:	f7ff faa4 	bl	800185c <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002318:	f7ff faa0 	bl	800185c <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b64      	cmp	r3, #100	; 0x64
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e1ec      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232a:	4b53      	ldr	r3, [pc, #332]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f0      	bne.n	8002318 <HAL_RCC_OscConfig+0x10c>
 8002336:	e000      	b.n	800233a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d063      	beq.n	800240e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002346:	4b4c      	ldr	r3, [pc, #304]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00b      	beq.n	800236a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002352:	4b49      	ldr	r3, [pc, #292]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f003 030c 	and.w	r3, r3, #12
 800235a:	2b08      	cmp	r3, #8
 800235c:	d11c      	bne.n	8002398 <HAL_RCC_OscConfig+0x18c>
 800235e:	4b46      	ldr	r3, [pc, #280]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d116      	bne.n	8002398 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236a:	4b43      	ldr	r3, [pc, #268]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d005      	beq.n	8002382 <HAL_RCC_OscConfig+0x176>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d001      	beq.n	8002382 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e1c0      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002382:	4b3d      	ldr	r3, [pc, #244]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4939      	ldr	r1, [pc, #228]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002392:	4313      	orrs	r3, r2
 8002394:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002396:	e03a      	b.n	800240e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d020      	beq.n	80023e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a0:	4b36      	ldr	r3, [pc, #216]	; (800247c <HAL_RCC_OscConfig+0x270>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a6:	f7ff fa59 	bl	800185c <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ae:	f7ff fa55 	bl	800185c <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e1a1      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c0:	4b2d      	ldr	r3, [pc, #180]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0f0      	beq.n	80023ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023cc:	4b2a      	ldr	r3, [pc, #168]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4927      	ldr	r1, [pc, #156]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	600b      	str	r3, [r1, #0]
 80023e0:	e015      	b.n	800240e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023e2:	4b26      	ldr	r3, [pc, #152]	; (800247c <HAL_RCC_OscConfig+0x270>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e8:	f7ff fa38 	bl	800185c <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f0:	f7ff fa34 	bl	800185c <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e180      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002402:	4b1d      	ldr	r3, [pc, #116]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b00      	cmp	r3, #0
 8002418:	d03a      	beq.n	8002490 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d019      	beq.n	8002456 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002422:	4b17      	ldr	r3, [pc, #92]	; (8002480 <HAL_RCC_OscConfig+0x274>)
 8002424:	2201      	movs	r2, #1
 8002426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002428:	f7ff fa18 	bl	800185c <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002430:	f7ff fa14 	bl	800185c <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e160      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002442:	4b0d      	ldr	r3, [pc, #52]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800244e:	2001      	movs	r0, #1
 8002450:	f000 fada 	bl	8002a08 <RCC_Delay>
 8002454:	e01c      	b.n	8002490 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002456:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <HAL_RCC_OscConfig+0x274>)
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800245c:	f7ff f9fe 	bl	800185c <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002462:	e00f      	b.n	8002484 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002464:	f7ff f9fa 	bl	800185c <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d908      	bls.n	8002484 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e146      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
 8002476:	bf00      	nop
 8002478:	40021000 	.word	0x40021000
 800247c:	42420000 	.word	0x42420000
 8002480:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002484:	4b92      	ldr	r3, [pc, #584]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1e9      	bne.n	8002464 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 80a6 	beq.w	80025ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800249e:	2300      	movs	r3, #0
 80024a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024a2:	4b8b      	ldr	r3, [pc, #556]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10d      	bne.n	80024ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ae:	4b88      	ldr	r3, [pc, #544]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	4a87      	ldr	r2, [pc, #540]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 80024b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b8:	61d3      	str	r3, [r2, #28]
 80024ba:	4b85      	ldr	r3, [pc, #532]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c2:	60bb      	str	r3, [r7, #8]
 80024c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024c6:	2301      	movs	r3, #1
 80024c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ca:	4b82      	ldr	r3, [pc, #520]	; (80026d4 <HAL_RCC_OscConfig+0x4c8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d118      	bne.n	8002508 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024d6:	4b7f      	ldr	r3, [pc, #508]	; (80026d4 <HAL_RCC_OscConfig+0x4c8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a7e      	ldr	r2, [pc, #504]	; (80026d4 <HAL_RCC_OscConfig+0x4c8>)
 80024dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024e2:	f7ff f9bb 	bl	800185c <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ea:	f7ff f9b7 	bl	800185c <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b64      	cmp	r3, #100	; 0x64
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e103      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fc:	4b75      	ldr	r3, [pc, #468]	; (80026d4 <HAL_RCC_OscConfig+0x4c8>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0f0      	beq.n	80024ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d106      	bne.n	800251e <HAL_RCC_OscConfig+0x312>
 8002510:	4b6f      	ldr	r3, [pc, #444]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	4a6e      	ldr	r2, [pc, #440]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002516:	f043 0301 	orr.w	r3, r3, #1
 800251a:	6213      	str	r3, [r2, #32]
 800251c:	e02d      	b.n	800257a <HAL_RCC_OscConfig+0x36e>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10c      	bne.n	8002540 <HAL_RCC_OscConfig+0x334>
 8002526:	4b6a      	ldr	r3, [pc, #424]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	4a69      	ldr	r2, [pc, #420]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 800252c:	f023 0301 	bic.w	r3, r3, #1
 8002530:	6213      	str	r3, [r2, #32]
 8002532:	4b67      	ldr	r3, [pc, #412]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	4a66      	ldr	r2, [pc, #408]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002538:	f023 0304 	bic.w	r3, r3, #4
 800253c:	6213      	str	r3, [r2, #32]
 800253e:	e01c      	b.n	800257a <HAL_RCC_OscConfig+0x36e>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	2b05      	cmp	r3, #5
 8002546:	d10c      	bne.n	8002562 <HAL_RCC_OscConfig+0x356>
 8002548:	4b61      	ldr	r3, [pc, #388]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	4a60      	ldr	r2, [pc, #384]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 800254e:	f043 0304 	orr.w	r3, r3, #4
 8002552:	6213      	str	r3, [r2, #32]
 8002554:	4b5e      	ldr	r3, [pc, #376]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	4a5d      	ldr	r2, [pc, #372]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	6213      	str	r3, [r2, #32]
 8002560:	e00b      	b.n	800257a <HAL_RCC_OscConfig+0x36e>
 8002562:	4b5b      	ldr	r3, [pc, #364]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	4a5a      	ldr	r2, [pc, #360]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002568:	f023 0301 	bic.w	r3, r3, #1
 800256c:	6213      	str	r3, [r2, #32]
 800256e:	4b58      	ldr	r3, [pc, #352]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	4a57      	ldr	r2, [pc, #348]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002574:	f023 0304 	bic.w	r3, r3, #4
 8002578:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d015      	beq.n	80025ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002582:	f7ff f96b 	bl	800185c <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002588:	e00a      	b.n	80025a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258a:	f7ff f967 	bl	800185c <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	f241 3288 	movw	r2, #5000	; 0x1388
 8002598:	4293      	cmp	r3, r2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e0b1      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a0:	4b4b      	ldr	r3, [pc, #300]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0ee      	beq.n	800258a <HAL_RCC_OscConfig+0x37e>
 80025ac:	e014      	b.n	80025d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ae:	f7ff f955 	bl	800185c <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b4:	e00a      	b.n	80025cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b6:	f7ff f951 	bl	800185c <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e09b      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025cc:	4b40      	ldr	r3, [pc, #256]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1ee      	bne.n	80025b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025d8:	7dfb      	ldrb	r3, [r7, #23]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d105      	bne.n	80025ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025de:	4b3c      	ldr	r3, [pc, #240]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	4a3b      	ldr	r2, [pc, #236]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 8087 	beq.w	8002702 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025f4:	4b36      	ldr	r3, [pc, #216]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 030c 	and.w	r3, r3, #12
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d061      	beq.n	80026c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	2b02      	cmp	r3, #2
 8002606:	d146      	bne.n	8002696 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002608:	4b33      	ldr	r3, [pc, #204]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260e:	f7ff f925 	bl	800185c <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002616:	f7ff f921 	bl	800185c <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e06d      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002628:	4b29      	ldr	r3, [pc, #164]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1f0      	bne.n	8002616 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800263c:	d108      	bne.n	8002650 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800263e:	4b24      	ldr	r3, [pc, #144]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	4921      	ldr	r1, [pc, #132]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 800264c:	4313      	orrs	r3, r2
 800264e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002650:	4b1f      	ldr	r3, [pc, #124]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a19      	ldr	r1, [r3, #32]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	430b      	orrs	r3, r1
 8002662:	491b      	ldr	r1, [pc, #108]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002664:	4313      	orrs	r3, r2
 8002666:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002668:	4b1b      	ldr	r3, [pc, #108]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 800266a:	2201      	movs	r2, #1
 800266c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266e:	f7ff f8f5 	bl	800185c <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002676:	f7ff f8f1 	bl	800185c <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e03d      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002688:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0f0      	beq.n	8002676 <HAL_RCC_OscConfig+0x46a>
 8002694:	e035      	b.n	8002702 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002696:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269c:	f7ff f8de 	bl	800185c <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a4:	f7ff f8da 	bl	800185c <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e026      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b6:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f0      	bne.n	80026a4 <HAL_RCC_OscConfig+0x498>
 80026c2:	e01e      	b.n	8002702 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d107      	bne.n	80026dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e019      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
 80026d0:	40021000 	.word	0x40021000
 80026d4:	40007000 	.word	0x40007000
 80026d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026dc:	4b0b      	ldr	r3, [pc, #44]	; (800270c <HAL_RCC_OscConfig+0x500>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d106      	bne.n	80026fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d001      	beq.n	8002702 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40021000 	.word	0x40021000

08002710 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e0d0      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002724:	4b6a      	ldr	r3, [pc, #424]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	d910      	bls.n	8002754 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002732:	4b67      	ldr	r3, [pc, #412]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 0207 	bic.w	r2, r3, #7
 800273a:	4965      	ldr	r1, [pc, #404]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	4313      	orrs	r3, r2
 8002740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002742:	4b63      	ldr	r3, [pc, #396]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d001      	beq.n	8002754 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e0b8      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d020      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	d005      	beq.n	8002778 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800276c:	4b59      	ldr	r3, [pc, #356]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	4a58      	ldr	r2, [pc, #352]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002772:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002776:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0308 	and.w	r3, r3, #8
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002784:	4b53      	ldr	r3, [pc, #332]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	4a52      	ldr	r2, [pc, #328]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800278e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002790:	4b50      	ldr	r3, [pc, #320]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	494d      	ldr	r1, [pc, #308]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d040      	beq.n	8002830 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d107      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b6:	4b47      	ldr	r3, [pc, #284]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d115      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e07f      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d107      	bne.n	80027de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ce:	4b41      	ldr	r3, [pc, #260]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d109      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e073      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027de:	4b3d      	ldr	r3, [pc, #244]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e06b      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ee:	4b39      	ldr	r3, [pc, #228]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f023 0203 	bic.w	r2, r3, #3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	4936      	ldr	r1, [pc, #216]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002800:	f7ff f82c 	bl	800185c <HAL_GetTick>
 8002804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002806:	e00a      	b.n	800281e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002808:	f7ff f828 	bl	800185c <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	; 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e053      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281e:	4b2d      	ldr	r3, [pc, #180]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f003 020c 	and.w	r2, r3, #12
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	429a      	cmp	r2, r3
 800282e:	d1eb      	bne.n	8002808 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002830:	4b27      	ldr	r3, [pc, #156]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d210      	bcs.n	8002860 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283e:	4b24      	ldr	r3, [pc, #144]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f023 0207 	bic.w	r2, r3, #7
 8002846:	4922      	ldr	r1, [pc, #136]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	4313      	orrs	r3, r2
 800284c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800284e:	4b20      	ldr	r3, [pc, #128]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	429a      	cmp	r2, r3
 800285a:	d001      	beq.n	8002860 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e032      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d008      	beq.n	800287e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800286c:	4b19      	ldr	r3, [pc, #100]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	4916      	ldr	r1, [pc, #88]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 800287a:	4313      	orrs	r3, r2
 800287c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b00      	cmp	r3, #0
 8002888:	d009      	beq.n	800289e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800288a:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	490e      	ldr	r1, [pc, #56]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 800289a:	4313      	orrs	r3, r2
 800289c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800289e:	f000 f821 	bl	80028e4 <HAL_RCC_GetSysClockFreq>
 80028a2:	4602      	mov	r2, r0
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	091b      	lsrs	r3, r3, #4
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	490a      	ldr	r1, [pc, #40]	; (80028d8 <HAL_RCC_ClockConfig+0x1c8>)
 80028b0:	5ccb      	ldrb	r3, [r1, r3]
 80028b2:	fa22 f303 	lsr.w	r3, r2, r3
 80028b6:	4a09      	ldr	r2, [pc, #36]	; (80028dc <HAL_RCC_ClockConfig+0x1cc>)
 80028b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028ba:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <HAL_RCC_ClockConfig+0x1d0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fe ff8a 	bl	80017d8 <HAL_InitTick>

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40022000 	.word	0x40022000
 80028d4:	40021000 	.word	0x40021000
 80028d8:	08004e14 	.word	0x08004e14
 80028dc:	200002d8 	.word	0x200002d8
 80028e0:	200002dc 	.word	0x200002dc

080028e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e4:	b490      	push	{r4, r7}
 80028e6:	b08a      	sub	sp, #40	; 0x28
 80028e8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028ea:	4b29      	ldr	r3, [pc, #164]	; (8002990 <HAL_RCC_GetSysClockFreq+0xac>)
 80028ec:	1d3c      	adds	r4, r7, #4
 80028ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028f4:	f240 2301 	movw	r3, #513	; 0x201
 80028f8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	61fb      	str	r3, [r7, #28]
 80028fe:	2300      	movs	r3, #0
 8002900:	61bb      	str	r3, [r7, #24]
 8002902:	2300      	movs	r3, #0
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800290e:	4b21      	ldr	r3, [pc, #132]	; (8002994 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f003 030c 	and.w	r3, r3, #12
 800291a:	2b04      	cmp	r3, #4
 800291c:	d002      	beq.n	8002924 <HAL_RCC_GetSysClockFreq+0x40>
 800291e:	2b08      	cmp	r3, #8
 8002920:	d003      	beq.n	800292a <HAL_RCC_GetSysClockFreq+0x46>
 8002922:	e02b      	b.n	800297c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002924:	4b1c      	ldr	r3, [pc, #112]	; (8002998 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002926:	623b      	str	r3, [r7, #32]
      break;
 8002928:	e02b      	b.n	8002982 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	0c9b      	lsrs	r3, r3, #18
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	3328      	adds	r3, #40	; 0x28
 8002934:	443b      	add	r3, r7
 8002936:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800293a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d012      	beq.n	800296c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002946:	4b13      	ldr	r3, [pc, #76]	; (8002994 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	0c5b      	lsrs	r3, r3, #17
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	3328      	adds	r3, #40	; 0x28
 8002952:	443b      	add	r3, r7
 8002954:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002958:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	4a0e      	ldr	r2, [pc, #56]	; (8002998 <HAL_RCC_GetSysClockFreq+0xb4>)
 800295e:	fb03 f202 	mul.w	r2, r3, r2
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	fbb2 f3f3 	udiv	r3, r2, r3
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
 800296a:	e004      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	4a0b      	ldr	r2, [pc, #44]	; (800299c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002970:	fb02 f303 	mul.w	r3, r2, r3
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	623b      	str	r3, [r7, #32]
      break;
 800297a:	e002      	b.n	8002982 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800297c:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800297e:	623b      	str	r3, [r7, #32]
      break;
 8002980:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002982:	6a3b      	ldr	r3, [r7, #32]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3728      	adds	r7, #40	; 0x28
 8002988:	46bd      	mov	sp, r7
 800298a:	bc90      	pop	{r4, r7}
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	08004e04 	.word	0x08004e04
 8002994:	40021000 	.word	0x40021000
 8002998:	00f42400 	.word	0x00f42400
 800299c:	003d0900 	.word	0x003d0900
 80029a0:	007a1200 	.word	0x007a1200

080029a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029a8:	4b02      	ldr	r3, [pc, #8]	; (80029b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80029aa:	681b      	ldr	r3, [r3, #0]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr
 80029b4:	200002d8 	.word	0x200002d8

080029b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029bc:	f7ff fff2 	bl	80029a4 <HAL_RCC_GetHCLKFreq>
 80029c0:	4602      	mov	r2, r0
 80029c2:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	0a1b      	lsrs	r3, r3, #8
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	4903      	ldr	r1, [pc, #12]	; (80029dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ce:	5ccb      	ldrb	r3, [r1, r3]
 80029d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40021000 	.word	0x40021000
 80029dc:	08004e24 	.word	0x08004e24

080029e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029e4:	f7ff ffde 	bl	80029a4 <HAL_RCC_GetHCLKFreq>
 80029e8:	4602      	mov	r2, r0
 80029ea:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	0adb      	lsrs	r3, r3, #11
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	4903      	ldr	r1, [pc, #12]	; (8002a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029f6:	5ccb      	ldrb	r3, [r1, r3]
 80029f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40021000 	.word	0x40021000
 8002a04:	08004e24 	.word	0x08004e24

08002a08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a10:	4b0a      	ldr	r3, [pc, #40]	; (8002a3c <RCC_Delay+0x34>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a0a      	ldr	r2, [pc, #40]	; (8002a40 <RCC_Delay+0x38>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	0a5b      	lsrs	r3, r3, #9
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	fb02 f303 	mul.w	r3, r2, r3
 8002a22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a24:	bf00      	nop
  }
  while (Delay --);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	1e5a      	subs	r2, r3, #1
 8002a2a:	60fa      	str	r2, [r7, #12]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1f9      	bne.n	8002a24 <RCC_Delay+0x1c>
}
 8002a30:	bf00      	nop
 8002a32:	bf00      	nop
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr
 8002a3c:	200002d8 	.word	0x200002d8
 8002a40:	10624dd3 	.word	0x10624dd3

08002a44 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	2300      	movs	r3, #0
 8002a52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d07d      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002a60:	2300      	movs	r3, #0
 8002a62:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a64:	4b4f      	ldr	r3, [pc, #316]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10d      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a70:	4b4c      	ldr	r3, [pc, #304]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	4a4b      	ldr	r2, [pc, #300]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	61d3      	str	r3, [r2, #28]
 8002a7c:	4b49      	ldr	r3, [pc, #292]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8c:	4b46      	ldr	r3, [pc, #280]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d118      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a98:	4b43      	ldr	r3, [pc, #268]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a42      	ldr	r2, [pc, #264]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aa4:	f7fe feda 	bl	800185c <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aaa:	e008      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aac:	f7fe fed6 	bl	800185c <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b64      	cmp	r3, #100	; 0x64
 8002ab8:	d901      	bls.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e06d      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002abe:	4b3a      	ldr	r3, [pc, #232]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0f0      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002aca:	4b36      	ldr	r3, [pc, #216]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d02e      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d027      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ae8:	4b2e      	ldr	r3, [pc, #184]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002af0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002af2:	4b2e      	ldr	r3, [pc, #184]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002af4:	2201      	movs	r2, #1
 8002af6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002af8:	4b2c      	ldr	r3, [pc, #176]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002afe:	4a29      	ldr	r2, [pc, #164]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d014      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0e:	f7fe fea5 	bl	800185c <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b14:	e00a      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b16:	f7fe fea1 	bl	800185c <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e036      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0ee      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b38:	4b1a      	ldr	r3, [pc, #104]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	4917      	ldr	r1, [pc, #92]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b4a:	7dfb      	ldrb	r3, [r7, #23]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d105      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b50:	4b14      	ldr	r3, [pc, #80]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	4a13      	ldr	r2, [pc, #76]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b5a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d008      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b68:	4b0e      	ldr	r3, [pc, #56]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	490b      	ldr	r1, [pc, #44]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0310 	and.w	r3, r3, #16
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d008      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b86:	4b07      	ldr	r3, [pc, #28]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	4904      	ldr	r1, [pc, #16]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40007000 	.word	0x40007000
 8002bac:	42420440 	.word	0x42420440

08002bb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e076      	b.n	8002cb0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d108      	bne.n	8002bdc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bd2:	d009      	beq.n	8002be8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	61da      	str	r2, [r3, #28]
 8002bda:	e005      	b.n	8002be8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d106      	bne.n	8002c08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7fe fc4c 	bl	80014a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6c:	ea42 0103 	orr.w	r1, r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c74:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	0c1a      	lsrs	r2, r3, #16
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f002 0204 	and.w	r2, r2, #4
 8002c8e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	69da      	ldr	r2, [r3, #28]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c9e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b088      	sub	sp, #32
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	603b      	str	r3, [r7, #0]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d101      	bne.n	8002cda <HAL_SPI_Transmit+0x22>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	e126      	b.n	8002f28 <HAL_SPI_Transmit+0x270>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ce2:	f7fe fdbb 	bl	800185c <HAL_GetTick>
 8002ce6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ce8:	88fb      	ldrh	r3, [r7, #6]
 8002cea:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d002      	beq.n	8002cfe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cfc:	e10b      	b.n	8002f16 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <HAL_SPI_Transmit+0x52>
 8002d04:	88fb      	ldrh	r3, [r7, #6]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d102      	bne.n	8002d10 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d0e:	e102      	b.n	8002f16 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2203      	movs	r2, #3
 8002d14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	88fa      	ldrh	r2, [r7, #6]
 8002d28:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	88fa      	ldrh	r2, [r7, #6]
 8002d2e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d56:	d10f      	bne.n	8002d78 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d76:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d82:	2b40      	cmp	r3, #64	; 0x40
 8002d84:	d007      	beq.n	8002d96 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d9e:	d14b      	bne.n	8002e38 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d002      	beq.n	8002dae <HAL_SPI_Transmit+0xf6>
 8002da8:	8afb      	ldrh	r3, [r7, #22]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d13e      	bne.n	8002e2c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	881a      	ldrh	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	1c9a      	adds	r2, r3, #2
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002dd2:	e02b      	b.n	8002e2c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d112      	bne.n	8002e08 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	881a      	ldrh	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	1c9a      	adds	r2, r3, #2
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e06:	e011      	b.n	8002e2c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e08:	f7fe fd28 	bl	800185c <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d803      	bhi.n	8002e20 <HAL_SPI_Transmit+0x168>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1e:	d102      	bne.n	8002e26 <HAL_SPI_Transmit+0x16e>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d102      	bne.n	8002e2c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e2a:	e074      	b.n	8002f16 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1ce      	bne.n	8002dd4 <HAL_SPI_Transmit+0x11c>
 8002e36:	e04c      	b.n	8002ed2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <HAL_SPI_Transmit+0x18e>
 8002e40:	8afb      	ldrh	r3, [r7, #22]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d140      	bne.n	8002ec8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	330c      	adds	r3, #12
 8002e50:	7812      	ldrb	r2, [r2, #0]
 8002e52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e6c:	e02c      	b.n	8002ec8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d113      	bne.n	8002ea4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	330c      	adds	r3, #12
 8002e86:	7812      	ldrb	r2, [r2, #0]
 8002e88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	1c5a      	adds	r2, r3, #1
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ea2:	e011      	b.n	8002ec8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ea4:	f7fe fcda 	bl	800185c <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d803      	bhi.n	8002ebc <HAL_SPI_Transmit+0x204>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eba:	d102      	bne.n	8002ec2 <HAL_SPI_Transmit+0x20a>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d102      	bne.n	8002ec8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ec6:	e026      	b.n	8002f16 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1cd      	bne.n	8002e6e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	6839      	ldr	r1, [r7, #0]
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 fbb8 	bl	800364c <SPI_EndRxTxTransaction>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10a      	bne.n	8002f06 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	613b      	str	r3, [r7, #16]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	613b      	str	r3, [r7, #16]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	613b      	str	r3, [r7, #16]
 8002f04:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	77fb      	strb	r3, [r7, #31]
 8002f12:	e000      	b.n	8002f16 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002f14:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f26:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3720      	adds	r7, #32
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b088      	sub	sp, #32
 8002f34:	af02      	add	r7, sp, #8
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	603b      	str	r3, [r7, #0]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f4c:	d112      	bne.n	8002f74 <HAL_SPI_Receive+0x44>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10e      	bne.n	8002f74 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2204      	movs	r2, #4
 8002f5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002f5e:	88fa      	ldrh	r2, [r7, #6]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	4613      	mov	r3, r2
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	68b9      	ldr	r1, [r7, #8]
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 f8f1 	bl	8003152 <HAL_SPI_TransmitReceive>
 8002f70:	4603      	mov	r3, r0
 8002f72:	e0ea      	b.n	800314a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d101      	bne.n	8002f82 <HAL_SPI_Receive+0x52>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e0e3      	b.n	800314a <HAL_SPI_Receive+0x21a>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f8a:	f7fe fc67 	bl	800185c <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d002      	beq.n	8002fa2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002fa0:	e0ca      	b.n	8003138 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d002      	beq.n	8002fae <HAL_SPI_Receive+0x7e>
 8002fa8:	88fb      	ldrh	r3, [r7, #6]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d102      	bne.n	8002fb4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002fb2:	e0c1      	b.n	8003138 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2204      	movs	r2, #4
 8002fb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	88fa      	ldrh	r2, [r7, #6]
 8002fcc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	88fa      	ldrh	r2, [r7, #6]
 8002fd2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ffa:	d10f      	bne.n	800301c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800300a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800301a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003026:	2b40      	cmp	r3, #64	; 0x40
 8003028:	d007      	beq.n	800303a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003038:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d162      	bne.n	8003108 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003042:	e02e      	b.n	80030a2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b01      	cmp	r3, #1
 8003050:	d115      	bne.n	800307e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f103 020c 	add.w	r2, r3, #12
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305e:	7812      	ldrb	r2, [r2, #0]
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003072:	b29b      	uxth	r3, r3
 8003074:	3b01      	subs	r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800307c:	e011      	b.n	80030a2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800307e:	f7fe fbed 	bl	800185c <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	429a      	cmp	r2, r3
 800308c:	d803      	bhi.n	8003096 <HAL_SPI_Receive+0x166>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003094:	d102      	bne.n	800309c <HAL_SPI_Receive+0x16c>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d102      	bne.n	80030a2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	75fb      	strb	r3, [r7, #23]
          goto error;
 80030a0:	e04a      	b.n	8003138 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1cb      	bne.n	8003044 <HAL_SPI_Receive+0x114>
 80030ac:	e031      	b.n	8003112 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d113      	bne.n	80030e4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68da      	ldr	r2, [r3, #12]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c6:	b292      	uxth	r2, r2
 80030c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ce:	1c9a      	adds	r2, r3, #2
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030d8:	b29b      	uxth	r3, r3
 80030da:	3b01      	subs	r3, #1
 80030dc:	b29a      	uxth	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030e2:	e011      	b.n	8003108 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030e4:	f7fe fbba 	bl	800185c <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d803      	bhi.n	80030fc <HAL_SPI_Receive+0x1cc>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fa:	d102      	bne.n	8003102 <HAL_SPI_Receive+0x1d2>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d102      	bne.n	8003108 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003106:	e017      	b.n	8003138 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800310c:	b29b      	uxth	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1cd      	bne.n	80030ae <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	6839      	ldr	r1, [r7, #0]
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 fa46 	bl	80035a8 <SPI_EndRxTransaction>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2220      	movs	r2, #32
 8003126:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312c:	2b00      	cmp	r3, #0
 800312e:	d002      	beq.n	8003136 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	75fb      	strb	r3, [r7, #23]
 8003134:	e000      	b.n	8003138 <HAL_SPI_Receive+0x208>
  }

error :
 8003136:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003148:	7dfb      	ldrb	r3, [r7, #23]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b08c      	sub	sp, #48	; 0x30
 8003156:	af00      	add	r7, sp, #0
 8003158:	60f8      	str	r0, [r7, #12]
 800315a:	60b9      	str	r1, [r7, #8]
 800315c:	607a      	str	r2, [r7, #4]
 800315e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003160:	2301      	movs	r3, #1
 8003162:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003164:	2300      	movs	r3, #0
 8003166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003170:	2b01      	cmp	r3, #1
 8003172:	d101      	bne.n	8003178 <HAL_SPI_TransmitReceive+0x26>
 8003174:	2302      	movs	r3, #2
 8003176:	e18a      	b.n	800348e <HAL_SPI_TransmitReceive+0x33c>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003180:	f7fe fb6c 	bl	800185c <HAL_GetTick>
 8003184:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800318c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003196:	887b      	ldrh	r3, [r7, #2]
 8003198:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800319a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d00f      	beq.n	80031c2 <HAL_SPI_TransmitReceive+0x70>
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031a8:	d107      	bne.n	80031ba <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d103      	bne.n	80031ba <HAL_SPI_TransmitReceive+0x68>
 80031b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d003      	beq.n	80031c2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80031ba:	2302      	movs	r3, #2
 80031bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80031c0:	e15b      	b.n	800347a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d005      	beq.n	80031d4 <HAL_SPI_TransmitReceive+0x82>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d002      	beq.n	80031d4 <HAL_SPI_TransmitReceive+0x82>
 80031ce:	887b      	ldrh	r3, [r7, #2]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d103      	bne.n	80031dc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80031da:	e14e      	b.n	800347a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d003      	beq.n	80031f0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2205      	movs	r2, #5
 80031ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	887a      	ldrh	r2, [r7, #2]
 8003200:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	887a      	ldrh	r2, [r7, #2]
 8003206:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	887a      	ldrh	r2, [r7, #2]
 8003212:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	887a      	ldrh	r2, [r7, #2]
 8003218:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003230:	2b40      	cmp	r3, #64	; 0x40
 8003232:	d007      	beq.n	8003244 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003242:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800324c:	d178      	bne.n	8003340 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <HAL_SPI_TransmitReceive+0x10a>
 8003256:	8b7b      	ldrh	r3, [r7, #26]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d166      	bne.n	800332a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003260:	881a      	ldrh	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	1c9a      	adds	r2, r3, #2
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003276:	b29b      	uxth	r3, r3
 8003278:	3b01      	subs	r3, #1
 800327a:	b29a      	uxth	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003280:	e053      	b.n	800332a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b02      	cmp	r3, #2
 800328e:	d11b      	bne.n	80032c8 <HAL_SPI_TransmitReceive+0x176>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d016      	beq.n	80032c8 <HAL_SPI_TransmitReceive+0x176>
 800329a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329c:	2b01      	cmp	r3, #1
 800329e:	d113      	bne.n	80032c8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a4:	881a      	ldrh	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	1c9a      	adds	r2, r3, #2
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	3b01      	subs	r3, #1
 80032be:	b29a      	uxth	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d119      	bne.n	800330a <HAL_SPI_TransmitReceive+0x1b8>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032da:	b29b      	uxth	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d014      	beq.n	800330a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ea:	b292      	uxth	r2, r2
 80032ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f2:	1c9a      	adds	r2, r3, #2
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003306:	2301      	movs	r3, #1
 8003308:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800330a:	f7fe faa7 	bl	800185c <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003316:	429a      	cmp	r2, r3
 8003318:	d807      	bhi.n	800332a <HAL_SPI_TransmitReceive+0x1d8>
 800331a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003320:	d003      	beq.n	800332a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003328:	e0a7      	b.n	800347a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800332e:	b29b      	uxth	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1a6      	bne.n	8003282 <HAL_SPI_TransmitReceive+0x130>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003338:	b29b      	uxth	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1a1      	bne.n	8003282 <HAL_SPI_TransmitReceive+0x130>
 800333e:	e07c      	b.n	800343a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d002      	beq.n	800334e <HAL_SPI_TransmitReceive+0x1fc>
 8003348:	8b7b      	ldrh	r3, [r7, #26]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d16b      	bne.n	8003426 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	330c      	adds	r3, #12
 8003358:	7812      	ldrb	r2, [r2, #0]
 800335a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003360:	1c5a      	adds	r2, r3, #1
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800336a:	b29b      	uxth	r3, r3
 800336c:	3b01      	subs	r3, #1
 800336e:	b29a      	uxth	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003374:	e057      	b.n	8003426 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b02      	cmp	r3, #2
 8003382:	d11c      	bne.n	80033be <HAL_SPI_TransmitReceive+0x26c>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d017      	beq.n	80033be <HAL_SPI_TransmitReceive+0x26c>
 800338e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003390:	2b01      	cmp	r3, #1
 8003392:	d114      	bne.n	80033be <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	330c      	adds	r3, #12
 800339e:	7812      	ldrb	r2, [r2, #0]
 80033a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	1c5a      	adds	r2, r3, #1
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d119      	bne.n	8003400 <HAL_SPI_TransmitReceive+0x2ae>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d014      	beq.n	8003400 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033fc:	2301      	movs	r3, #1
 80033fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003400:	f7fe fa2c 	bl	800185c <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800340c:	429a      	cmp	r2, r3
 800340e:	d803      	bhi.n	8003418 <HAL_SPI_TransmitReceive+0x2c6>
 8003410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003416:	d102      	bne.n	800341e <HAL_SPI_TransmitReceive+0x2cc>
 8003418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800341a:	2b00      	cmp	r3, #0
 800341c:	d103      	bne.n	8003426 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003424:	e029      	b.n	800347a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800342a:	b29b      	uxth	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1a2      	bne.n	8003376 <HAL_SPI_TransmitReceive+0x224>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003434:	b29b      	uxth	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d19d      	bne.n	8003376 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800343a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800343c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 f904 	bl	800364c <SPI_EndRxTxTransaction>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d006      	beq.n	8003458 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2220      	movs	r2, #32
 8003454:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003456:	e010      	b.n	800347a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10b      	bne.n	8003478 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003460:	2300      	movs	r3, #0
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	e000      	b.n	800347a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003478:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800348a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800348e:	4618      	mov	r0, r3
 8003490:	3730      	adds	r7, #48	; 0x30
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b088      	sub	sp, #32
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	603b      	str	r3, [r7, #0]
 80034a4:	4613      	mov	r3, r2
 80034a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034a8:	f7fe f9d8 	bl	800185c <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b0:	1a9b      	subs	r3, r3, r2
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	4413      	add	r3, r2
 80034b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034b8:	f7fe f9d0 	bl	800185c <HAL_GetTick>
 80034bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034be:	4b39      	ldr	r3, [pc, #228]	; (80035a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	015b      	lsls	r3, r3, #5
 80034c4:	0d1b      	lsrs	r3, r3, #20
 80034c6:	69fa      	ldr	r2, [r7, #28]
 80034c8:	fb02 f303 	mul.w	r3, r2, r3
 80034cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034ce:	e054      	b.n	800357a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d6:	d050      	beq.n	800357a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034d8:	f7fe f9c0 	bl	800185c <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	69fa      	ldr	r2, [r7, #28]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d902      	bls.n	80034ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d13d      	bne.n	800356a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003506:	d111      	bne.n	800352c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003510:	d004      	beq.n	800351c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800351a:	d107      	bne.n	800352c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800352a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003530:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003534:	d10f      	bne.n	8003556 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003554:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e017      	b.n	800359a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	3b01      	subs	r3, #1
 8003578:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	4013      	ands	r3, r2
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	429a      	cmp	r2, r3
 8003588:	bf0c      	ite	eq
 800358a:	2301      	moveq	r3, #1
 800358c:	2300      	movne	r3, #0
 800358e:	b2db      	uxtb	r3, r3
 8003590:	461a      	mov	r2, r3
 8003592:	79fb      	ldrb	r3, [r7, #7]
 8003594:	429a      	cmp	r2, r3
 8003596:	d19b      	bne.n	80034d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3720      	adds	r7, #32
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	200002d8 	.word	0x200002d8

080035a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af02      	add	r7, sp, #8
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035bc:	d111      	bne.n	80035e2 <SPI_EndRxTransaction+0x3a>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035c6:	d004      	beq.n	80035d2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d0:	d107      	bne.n	80035e2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035e0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035ea:	d117      	bne.n	800361c <SPI_EndRxTransaction+0x74>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f4:	d112      	bne.n	800361c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2200      	movs	r2, #0
 80035fe:	2101      	movs	r1, #1
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f7ff ff49 	bl	8003498 <SPI_WaitFlagStateUntilTimeout>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d01a      	beq.n	8003642 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003610:	f043 0220 	orr.w	r2, r3, #32
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e013      	b.n	8003644 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2200      	movs	r2, #0
 8003624:	2180      	movs	r1, #128	; 0x80
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f7ff ff36 	bl	8003498 <SPI_WaitFlagStateUntilTimeout>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d007      	beq.n	8003642 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003636:	f043 0220 	orr.w	r2, r3, #32
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e000      	b.n	8003644 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af02      	add	r7, sp, #8
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2200      	movs	r2, #0
 8003660:	2180      	movs	r1, #128	; 0x80
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f7ff ff18 	bl	8003498 <SPI_WaitFlagStateUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d007      	beq.n	800367e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003672:	f043 0220 	orr.w	r2, r3, #32
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e000      	b.n	8003680 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e041      	b.n	800371e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d106      	bne.n	80036b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7fd ff50 	bl	8001554 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3304      	adds	r3, #4
 80036c4:	4619      	mov	r1, r3
 80036c6:	4610      	mov	r0, r2
 80036c8:	f000 fb0e 	bl	8003ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b082      	sub	sp, #8
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e041      	b.n	80037bc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	d106      	bne.n	8003752 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f839 	bl	80037c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2202      	movs	r2, #2
 8003756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3304      	adds	r3, #4
 8003762:	4619      	mov	r1, r3
 8003764:	4610      	mov	r0, r2
 8003766:	f000 fabf 	bl	8003ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bc80      	pop	{r7}
 80037d4:	4770      	bx	lr
	...

080037d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d109      	bne.n	80037fc <HAL_TIM_PWM_Start+0x24>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	bf14      	ite	ne
 80037f4:	2301      	movne	r3, #1
 80037f6:	2300      	moveq	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	e022      	b.n	8003842 <HAL_TIM_PWM_Start+0x6a>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d109      	bne.n	8003816 <HAL_TIM_PWM_Start+0x3e>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b01      	cmp	r3, #1
 800380c:	bf14      	ite	ne
 800380e:	2301      	movne	r3, #1
 8003810:	2300      	moveq	r3, #0
 8003812:	b2db      	uxtb	r3, r3
 8003814:	e015      	b.n	8003842 <HAL_TIM_PWM_Start+0x6a>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b08      	cmp	r3, #8
 800381a:	d109      	bne.n	8003830 <HAL_TIM_PWM_Start+0x58>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b01      	cmp	r3, #1
 8003826:	bf14      	ite	ne
 8003828:	2301      	movne	r3, #1
 800382a:	2300      	moveq	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	e008      	b.n	8003842 <HAL_TIM_PWM_Start+0x6a>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b01      	cmp	r3, #1
 800383a:	bf14      	ite	ne
 800383c:	2301      	movne	r3, #1
 800383e:	2300      	moveq	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e05e      	b.n	8003908 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d104      	bne.n	800385a <HAL_TIM_PWM_Start+0x82>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003858:	e013      	b.n	8003882 <HAL_TIM_PWM_Start+0xaa>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2b04      	cmp	r3, #4
 800385e:	d104      	bne.n	800386a <HAL_TIM_PWM_Start+0x92>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003868:	e00b      	b.n	8003882 <HAL_TIM_PWM_Start+0xaa>
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b08      	cmp	r3, #8
 800386e:	d104      	bne.n	800387a <HAL_TIM_PWM_Start+0xa2>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2202      	movs	r2, #2
 8003874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003878:	e003      	b.n	8003882 <HAL_TIM_PWM_Start+0xaa>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2202      	movs	r2, #2
 800387e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2201      	movs	r2, #1
 8003888:	6839      	ldr	r1, [r7, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f000 fcac 	bl	80041e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a1e      	ldr	r2, [pc, #120]	; (8003910 <HAL_TIM_PWM_Start+0x138>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d107      	bne.n	80038aa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a18      	ldr	r2, [pc, #96]	; (8003910 <HAL_TIM_PWM_Start+0x138>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d00e      	beq.n	80038d2 <HAL_TIM_PWM_Start+0xfa>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038bc:	d009      	beq.n	80038d2 <HAL_TIM_PWM_Start+0xfa>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a14      	ldr	r2, [pc, #80]	; (8003914 <HAL_TIM_PWM_Start+0x13c>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d004      	beq.n	80038d2 <HAL_TIM_PWM_Start+0xfa>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a12      	ldr	r2, [pc, #72]	; (8003918 <HAL_TIM_PWM_Start+0x140>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d111      	bne.n	80038f6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2b06      	cmp	r3, #6
 80038e2:	d010      	beq.n	8003906 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0201 	orr.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f4:	e007      	b.n	8003906 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f042 0201 	orr.w	r2, r2, #1
 8003904:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40012c00 	.word	0x40012c00
 8003914:	40000400 	.word	0x40000400
 8003918:	40000800 	.word	0x40000800

0800391c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2200      	movs	r2, #0
 800392c:	6839      	ldr	r1, [r7, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f000 fc5a 	bl	80041e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a29      	ldr	r2, [pc, #164]	; (80039e0 <HAL_TIM_PWM_Stop+0xc4>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d117      	bne.n	800396e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6a1a      	ldr	r2, [r3, #32]
 8003944:	f241 1311 	movw	r3, #4369	; 0x1111
 8003948:	4013      	ands	r3, r2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10f      	bne.n	800396e <HAL_TIM_PWM_Stop+0x52>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	6a1a      	ldr	r2, [r3, #32]
 8003954:	f240 4344 	movw	r3, #1092	; 0x444
 8003958:	4013      	ands	r3, r2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d107      	bne.n	800396e <HAL_TIM_PWM_Stop+0x52>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800396c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6a1a      	ldr	r2, [r3, #32]
 8003974:	f241 1311 	movw	r3, #4369	; 0x1111
 8003978:	4013      	ands	r3, r2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10f      	bne.n	800399e <HAL_TIM_PWM_Stop+0x82>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6a1a      	ldr	r2, [r3, #32]
 8003984:	f240 4344 	movw	r3, #1092	; 0x444
 8003988:	4013      	ands	r3, r2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d107      	bne.n	800399e <HAL_TIM_PWM_Stop+0x82>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 0201 	bic.w	r2, r2, #1
 800399c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d104      	bne.n	80039ae <HAL_TIM_PWM_Stop+0x92>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039ac:	e013      	b.n	80039d6 <HAL_TIM_PWM_Stop+0xba>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d104      	bne.n	80039be <HAL_TIM_PWM_Stop+0xa2>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039bc:	e00b      	b.n	80039d6 <HAL_TIM_PWM_Stop+0xba>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d104      	bne.n	80039ce <HAL_TIM_PWM_Stop+0xb2>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039cc:	e003      	b.n	80039d6 <HAL_TIM_PWM_Stop+0xba>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40012c00 	.word	0x40012c00

080039e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d101      	bne.n	80039fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80039fa:	2302      	movs	r3, #2
 80039fc:	e0ac      	b.n	8003b58 <HAL_TIM_PWM_ConfigChannel+0x174>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b0c      	cmp	r3, #12
 8003a0a:	f200 809f 	bhi.w	8003b4c <HAL_TIM_PWM_ConfigChannel+0x168>
 8003a0e:	a201      	add	r2, pc, #4	; (adr r2, 8003a14 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a14:	08003a49 	.word	0x08003a49
 8003a18:	08003b4d 	.word	0x08003b4d
 8003a1c:	08003b4d 	.word	0x08003b4d
 8003a20:	08003b4d 	.word	0x08003b4d
 8003a24:	08003a89 	.word	0x08003a89
 8003a28:	08003b4d 	.word	0x08003b4d
 8003a2c:	08003b4d 	.word	0x08003b4d
 8003a30:	08003b4d 	.word	0x08003b4d
 8003a34:	08003acb 	.word	0x08003acb
 8003a38:	08003b4d 	.word	0x08003b4d
 8003a3c:	08003b4d 	.word	0x08003b4d
 8003a40:	08003b4d 	.word	0x08003b4d
 8003a44:	08003b0b 	.word	0x08003b0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68b9      	ldr	r1, [r7, #8]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 f9ac 	bl	8003dac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699a      	ldr	r2, [r3, #24]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0208 	orr.w	r2, r2, #8
 8003a62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	699a      	ldr	r2, [r3, #24]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0204 	bic.w	r2, r2, #4
 8003a72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6999      	ldr	r1, [r3, #24]
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	691a      	ldr	r2, [r3, #16]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	619a      	str	r2, [r3, #24]
      break;
 8003a86:	e062      	b.n	8003b4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68b9      	ldr	r1, [r7, #8]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 f9f2 	bl	8003e78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699a      	ldr	r2, [r3, #24]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699a      	ldr	r2, [r3, #24]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6999      	ldr	r1, [r3, #24]
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	021a      	lsls	r2, r3, #8
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	619a      	str	r2, [r3, #24]
      break;
 8003ac8:	e041      	b.n	8003b4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68b9      	ldr	r1, [r7, #8]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 fa3b 	bl	8003f4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69da      	ldr	r2, [r3, #28]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f042 0208 	orr.w	r2, r2, #8
 8003ae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	69da      	ldr	r2, [r3, #28]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0204 	bic.w	r2, r2, #4
 8003af4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	69d9      	ldr	r1, [r3, #28]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	61da      	str	r2, [r3, #28]
      break;
 8003b08:	e021      	b.n	8003b4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68b9      	ldr	r1, [r7, #8]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 fa85 	bl	8004020 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	69da      	ldr	r2, [r3, #28]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69da      	ldr	r2, [r3, #28]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	69d9      	ldr	r1, [r3, #28]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	021a      	lsls	r2, r3, #8
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	61da      	str	r2, [r3, #28]
      break;
 8003b4a:	e000      	b.n	8003b4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003b4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d101      	bne.n	8003b78 <HAL_TIM_ConfigClockSource+0x18>
 8003b74:	2302      	movs	r3, #2
 8003b76:	e0b3      	b.n	8003ce0 <HAL_TIM_ConfigClockSource+0x180>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2202      	movs	r2, #2
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b9e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bb0:	d03e      	beq.n	8003c30 <HAL_TIM_ConfigClockSource+0xd0>
 8003bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bb6:	f200 8087 	bhi.w	8003cc8 <HAL_TIM_ConfigClockSource+0x168>
 8003bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bbe:	f000 8085 	beq.w	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc6:	d87f      	bhi.n	8003cc8 <HAL_TIM_ConfigClockSource+0x168>
 8003bc8:	2b70      	cmp	r3, #112	; 0x70
 8003bca:	d01a      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0xa2>
 8003bcc:	2b70      	cmp	r3, #112	; 0x70
 8003bce:	d87b      	bhi.n	8003cc8 <HAL_TIM_ConfigClockSource+0x168>
 8003bd0:	2b60      	cmp	r3, #96	; 0x60
 8003bd2:	d050      	beq.n	8003c76 <HAL_TIM_ConfigClockSource+0x116>
 8003bd4:	2b60      	cmp	r3, #96	; 0x60
 8003bd6:	d877      	bhi.n	8003cc8 <HAL_TIM_ConfigClockSource+0x168>
 8003bd8:	2b50      	cmp	r3, #80	; 0x50
 8003bda:	d03c      	beq.n	8003c56 <HAL_TIM_ConfigClockSource+0xf6>
 8003bdc:	2b50      	cmp	r3, #80	; 0x50
 8003bde:	d873      	bhi.n	8003cc8 <HAL_TIM_ConfigClockSource+0x168>
 8003be0:	2b40      	cmp	r3, #64	; 0x40
 8003be2:	d058      	beq.n	8003c96 <HAL_TIM_ConfigClockSource+0x136>
 8003be4:	2b40      	cmp	r3, #64	; 0x40
 8003be6:	d86f      	bhi.n	8003cc8 <HAL_TIM_ConfigClockSource+0x168>
 8003be8:	2b30      	cmp	r3, #48	; 0x30
 8003bea:	d064      	beq.n	8003cb6 <HAL_TIM_ConfigClockSource+0x156>
 8003bec:	2b30      	cmp	r3, #48	; 0x30
 8003bee:	d86b      	bhi.n	8003cc8 <HAL_TIM_ConfigClockSource+0x168>
 8003bf0:	2b20      	cmp	r3, #32
 8003bf2:	d060      	beq.n	8003cb6 <HAL_TIM_ConfigClockSource+0x156>
 8003bf4:	2b20      	cmp	r3, #32
 8003bf6:	d867      	bhi.n	8003cc8 <HAL_TIM_ConfigClockSource+0x168>
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d05c      	beq.n	8003cb6 <HAL_TIM_ConfigClockSource+0x156>
 8003bfc:	2b10      	cmp	r3, #16
 8003bfe:	d05a      	beq.n	8003cb6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003c00:	e062      	b.n	8003cc8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6818      	ldr	r0, [r3, #0]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	6899      	ldr	r1, [r3, #8]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	f000 faca 	bl	80041aa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c24:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	609a      	str	r2, [r3, #8]
      break;
 8003c2e:	e04e      	b.n	8003cce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6818      	ldr	r0, [r3, #0]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	6899      	ldr	r1, [r3, #8]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f000 fab3 	bl	80041aa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c52:	609a      	str	r2, [r3, #8]
      break;
 8003c54:	e03b      	b.n	8003cce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6818      	ldr	r0, [r3, #0]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	6859      	ldr	r1, [r3, #4]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	461a      	mov	r2, r3
 8003c64:	f000 fa2a 	bl	80040bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2150      	movs	r1, #80	; 0x50
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 fa81 	bl	8004176 <TIM_ITRx_SetConfig>
      break;
 8003c74:	e02b      	b.n	8003cce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6818      	ldr	r0, [r3, #0]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	6859      	ldr	r1, [r3, #4]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	461a      	mov	r2, r3
 8003c84:	f000 fa48 	bl	8004118 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2160      	movs	r1, #96	; 0x60
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 fa71 	bl	8004176 <TIM_ITRx_SetConfig>
      break;
 8003c94:	e01b      	b.n	8003cce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6818      	ldr	r0, [r3, #0]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	6859      	ldr	r1, [r3, #4]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	f000 fa0a 	bl	80040bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2140      	movs	r1, #64	; 0x40
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 fa61 	bl	8004176 <TIM_ITRx_SetConfig>
      break;
 8003cb4:	e00b      	b.n	8003cce <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	f000 fa58 	bl	8004176 <TIM_ITRx_SetConfig>
        break;
 8003cc6:	e002      	b.n	8003cce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003cc8:	bf00      	nop
 8003cca:	e000      	b.n	8003cce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003ccc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a29      	ldr	r2, [pc, #164]	; (8003da0 <TIM_Base_SetConfig+0xb8>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d00b      	beq.n	8003d18 <TIM_Base_SetConfig+0x30>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d06:	d007      	beq.n	8003d18 <TIM_Base_SetConfig+0x30>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a26      	ldr	r2, [pc, #152]	; (8003da4 <TIM_Base_SetConfig+0xbc>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d003      	beq.n	8003d18 <TIM_Base_SetConfig+0x30>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a25      	ldr	r2, [pc, #148]	; (8003da8 <TIM_Base_SetConfig+0xc0>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d108      	bne.n	8003d2a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a1c      	ldr	r2, [pc, #112]	; (8003da0 <TIM_Base_SetConfig+0xb8>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d00b      	beq.n	8003d4a <TIM_Base_SetConfig+0x62>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d38:	d007      	beq.n	8003d4a <TIM_Base_SetConfig+0x62>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a19      	ldr	r2, [pc, #100]	; (8003da4 <TIM_Base_SetConfig+0xbc>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d003      	beq.n	8003d4a <TIM_Base_SetConfig+0x62>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a18      	ldr	r2, [pc, #96]	; (8003da8 <TIM_Base_SetConfig+0xc0>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d108      	bne.n	8003d5c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a07      	ldr	r2, [pc, #28]	; (8003da0 <TIM_Base_SetConfig+0xb8>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d103      	bne.n	8003d90 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	691a      	ldr	r2, [r3, #16]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	615a      	str	r2, [r3, #20]
}
 8003d96:	bf00      	nop
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bc80      	pop	{r7}
 8003d9e:	4770      	bx	lr
 8003da0:	40012c00 	.word	0x40012c00
 8003da4:	40000400 	.word	0x40000400
 8003da8:	40000800 	.word	0x40000800

08003dac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	f023 0201 	bic.w	r2, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f023 0303 	bic.w	r3, r3, #3
 8003de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f023 0302 	bic.w	r3, r3, #2
 8003df4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a1c      	ldr	r2, [pc, #112]	; (8003e74 <TIM_OC1_SetConfig+0xc8>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d10c      	bne.n	8003e22 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f023 0308 	bic.w	r3, r3, #8
 8003e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f023 0304 	bic.w	r3, r3, #4
 8003e20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a13      	ldr	r2, [pc, #76]	; (8003e74 <TIM_OC1_SetConfig+0xc8>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d111      	bne.n	8003e4e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	621a      	str	r2, [r3, #32]
}
 8003e68:	bf00      	nop
 8003e6a:	371c      	adds	r7, #28
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bc80      	pop	{r7}
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	40012c00 	.word	0x40012c00

08003e78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	f023 0210 	bic.w	r2, r3, #16
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	021b      	lsls	r3, r3, #8
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f023 0320 	bic.w	r3, r3, #32
 8003ec2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a1d      	ldr	r2, [pc, #116]	; (8003f48 <TIM_OC2_SetConfig+0xd0>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d10d      	bne.n	8003ef4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ede:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	011b      	lsls	r3, r3, #4
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ef2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a14      	ldr	r2, [pc, #80]	; (8003f48 <TIM_OC2_SetConfig+0xd0>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d113      	bne.n	8003f24 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	621a      	str	r2, [r3, #32]
}
 8003f3e:	bf00      	nop
 8003f40:	371c      	adds	r7, #28
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bc80      	pop	{r7}
 8003f46:	4770      	bx	lr
 8003f48:	40012c00 	.word	0x40012c00

08003f4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b087      	sub	sp, #28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f023 0303 	bic.w	r3, r3, #3
 8003f82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	021b      	lsls	r3, r3, #8
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a1d      	ldr	r2, [pc, #116]	; (800401c <TIM_OC3_SetConfig+0xd0>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d10d      	bne.n	8003fc6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	021b      	lsls	r3, r3, #8
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a14      	ldr	r2, [pc, #80]	; (800401c <TIM_OC3_SetConfig+0xd0>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d113      	bne.n	8003ff6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	011b      	lsls	r3, r3, #4
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	621a      	str	r2, [r3, #32]
}
 8004010:	bf00      	nop
 8004012:	371c      	adds	r7, #28
 8004014:	46bd      	mov	sp, r7
 8004016:	bc80      	pop	{r7}
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	40012c00 	.word	0x40012c00

08004020 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800404e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	021b      	lsls	r3, r3, #8
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4313      	orrs	r3, r2
 8004062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800406a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	031b      	lsls	r3, r3, #12
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4313      	orrs	r3, r2
 8004076:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a0f      	ldr	r2, [pc, #60]	; (80040b8 <TIM_OC4_SetConfig+0x98>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d109      	bne.n	8004094 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004086:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	019b      	lsls	r3, r3, #6
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	4313      	orrs	r3, r2
 8004092:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	621a      	str	r2, [r3, #32]
}
 80040ae:	bf00      	nop
 80040b0:	371c      	adds	r7, #28
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bc80      	pop	{r7}
 80040b6:	4770      	bx	lr
 80040b8:	40012c00 	.word	0x40012c00

080040bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	f023 0201 	bic.w	r2, r3, #1
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f023 030a 	bic.w	r3, r3, #10
 80040f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4313      	orrs	r3, r2
 8004100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	621a      	str	r2, [r3, #32]
}
 800410e:	bf00      	nop
 8004110:	371c      	adds	r7, #28
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr

08004118 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	f023 0210 	bic.w	r2, r3, #16
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004142:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	031b      	lsls	r3, r3, #12
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	4313      	orrs	r3, r2
 800414c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004154:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	621a      	str	r2, [r3, #32]
}
 800416c:	bf00      	nop
 800416e:	371c      	adds	r7, #28
 8004170:	46bd      	mov	sp, r7
 8004172:	bc80      	pop	{r7}
 8004174:	4770      	bx	lr

08004176 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004176:	b480      	push	{r7}
 8004178:	b085      	sub	sp, #20
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
 800417e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	f043 0307 	orr.w	r3, r3, #7
 8004198:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	609a      	str	r2, [r3, #8]
}
 80041a0:	bf00      	nop
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr

080041aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b087      	sub	sp, #28
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	60f8      	str	r0, [r7, #12]
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	607a      	str	r2, [r7, #4]
 80041b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	021a      	lsls	r2, r3, #8
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	431a      	orrs	r2, r3
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	609a      	str	r2, [r3, #8]
}
 80041de:	bf00      	nop
 80041e0:	371c      	adds	r7, #28
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr

080041e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	f003 031f 	and.w	r3, r3, #31
 80041fa:	2201      	movs	r2, #1
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a1a      	ldr	r2, [r3, #32]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	43db      	mvns	r3, r3
 800420a:	401a      	ands	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6a1a      	ldr	r2, [r3, #32]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f003 031f 	and.w	r3, r3, #31
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	fa01 f303 	lsl.w	r3, r1, r3
 8004220:	431a      	orrs	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	621a      	str	r2, [r3, #32]
}
 8004226:	bf00      	nop
 8004228:	371c      	adds	r7, #28
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr

08004230 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004244:	2302      	movs	r3, #2
 8004246:	e046      	b.n	80042d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800426e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a16      	ldr	r2, [pc, #88]	; (80042e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d00e      	beq.n	80042aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004294:	d009      	beq.n	80042aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a12      	ldr	r2, [pc, #72]	; (80042e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d004      	beq.n	80042aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a10      	ldr	r2, [pc, #64]	; (80042e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d10c      	bne.n	80042c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	bc80      	pop	{r7}
 80042de:	4770      	bx	lr
 80042e0:	40012c00 	.word	0x40012c00
 80042e4:	40000400 	.word	0x40000400
 80042e8:	40000800 	.word	0x40000800

080042ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80042f6:	2300      	movs	r3, #0
 80042f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004300:	2b01      	cmp	r3, #1
 8004302:	d101      	bne.n	8004308 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004304:	2302      	movs	r3, #2
 8004306:	e03d      	b.n	8004384 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	4313      	orrs	r3, r2
 800431c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	4313      	orrs	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	4313      	orrs	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4313      	orrs	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	4313      	orrs	r3, r2
 8004354:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	4313      	orrs	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3714      	adds	r7, #20
 8004388:	46bd      	mov	sp, r7
 800438a:	bc80      	pop	{r7}
 800438c:	4770      	bx	lr

0800438e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b082      	sub	sp, #8
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d101      	bne.n	80043a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e03f      	b.n	8004420 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d106      	bne.n	80043ba <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f7fd f91f 	bl	80015f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2224      	movs	r2, #36	; 0x24
 80043be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68da      	ldr	r2, [r3, #12]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043d0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f9a6 	bl	8004724 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	691a      	ldr	r2, [r3, #16]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043e6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695a      	ldr	r2, [r3, #20]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043f6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68da      	ldr	r2, [r3, #12]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004406:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2220      	movs	r2, #32
 8004412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2220      	movs	r2, #32
 800441a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b08a      	sub	sp, #40	; 0x28
 800442c:	af02      	add	r7, sp, #8
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	603b      	str	r3, [r7, #0]
 8004434:	4613      	mov	r3, r2
 8004436:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004438:	2300      	movs	r3, #0
 800443a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b20      	cmp	r3, #32
 8004446:	d17c      	bne.n	8004542 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <HAL_UART_Transmit+0x2c>
 800444e:	88fb      	ldrh	r3, [r7, #6]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e075      	b.n	8004544 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800445e:	2b01      	cmp	r3, #1
 8004460:	d101      	bne.n	8004466 <HAL_UART_Transmit+0x3e>
 8004462:	2302      	movs	r3, #2
 8004464:	e06e      	b.n	8004544 <HAL_UART_Transmit+0x11c>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2221      	movs	r2, #33	; 0x21
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800447c:	f7fd f9ee 	bl	800185c <HAL_GetTick>
 8004480:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	88fa      	ldrh	r2, [r7, #6]
 8004486:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	88fa      	ldrh	r2, [r7, #6]
 800448c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004496:	d108      	bne.n	80044aa <HAL_UART_Transmit+0x82>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d104      	bne.n	80044aa <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80044a0:	2300      	movs	r3, #0
 80044a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	61bb      	str	r3, [r7, #24]
 80044a8:	e003      	b.n	80044b2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80044ba:	e02a      	b.n	8004512 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	2200      	movs	r2, #0
 80044c4:	2180      	movs	r1, #128	; 0x80
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 f8e2 	bl	8004690 <UART_WaitOnFlagUntilTimeout>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e036      	b.n	8004544 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10b      	bne.n	80044f4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	881b      	ldrh	r3, [r3, #0]
 80044e0:	461a      	mov	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044ea:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	3302      	adds	r3, #2
 80044f0:	61bb      	str	r3, [r7, #24]
 80044f2:	e007      	b.n	8004504 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	781a      	ldrb	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	3301      	adds	r3, #1
 8004502:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004508:	b29b      	uxth	r3, r3
 800450a:	3b01      	subs	r3, #1
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1cf      	bne.n	80044bc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	2200      	movs	r2, #0
 8004524:	2140      	movs	r1, #64	; 0x40
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 f8b2 	bl	8004690 <UART_WaitOnFlagUntilTimeout>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e006      	b.n	8004544 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2220      	movs	r2, #32
 800453a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	e000      	b.n	8004544 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004542:	2302      	movs	r3, #2
  }
}
 8004544:	4618      	mov	r0, r3
 8004546:	3720      	adds	r7, #32
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b08a      	sub	sp, #40	; 0x28
 8004550:	af02      	add	r7, sp, #8
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	603b      	str	r3, [r7, #0]
 8004558:	4613      	mov	r3, r2
 800455a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800455c:	2300      	movs	r3, #0
 800455e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b20      	cmp	r3, #32
 800456a:	f040 808c 	bne.w	8004686 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <HAL_UART_Receive+0x2e>
 8004574:	88fb      	ldrh	r3, [r7, #6]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e084      	b.n	8004688 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004584:	2b01      	cmp	r3, #1
 8004586:	d101      	bne.n	800458c <HAL_UART_Receive+0x40>
 8004588:	2302      	movs	r3, #2
 800458a:	e07d      	b.n	8004688 <HAL_UART_Receive+0x13c>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2222      	movs	r2, #34	; 0x22
 800459e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045a8:	f7fd f958 	bl	800185c <HAL_GetTick>
 80045ac:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	88fa      	ldrh	r2, [r7, #6]
 80045b2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	88fa      	ldrh	r2, [r7, #6]
 80045b8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045c2:	d108      	bne.n	80045d6 <HAL_UART_Receive+0x8a>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d104      	bne.n	80045d6 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80045cc:	2300      	movs	r3, #0
 80045ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	61bb      	str	r3, [r7, #24]
 80045d4:	e003      	b.n	80045de <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045da:	2300      	movs	r3, #0
 80045dc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80045e6:	e043      	b.n	8004670 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	2200      	movs	r2, #0
 80045f0:	2120      	movs	r1, #32
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 f84c 	bl	8004690 <UART_WaitOnFlagUntilTimeout>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e042      	b.n	8004688 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10c      	bne.n	8004622 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	b29b      	uxth	r3, r3
 8004610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004614:	b29a      	uxth	r2, r3
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	3302      	adds	r3, #2
 800461e:	61bb      	str	r3, [r7, #24]
 8004620:	e01f      	b.n	8004662 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800462a:	d007      	beq.n	800463c <HAL_UART_Receive+0xf0>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10a      	bne.n	800464a <HAL_UART_Receive+0xfe>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d106      	bne.n	800464a <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	b2da      	uxtb	r2, r3
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	701a      	strb	r2, [r3, #0]
 8004648:	e008      	b.n	800465c <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	b2db      	uxtb	r3, r3
 8004652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004656:	b2da      	uxtb	r2, r3
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	3301      	adds	r3, #1
 8004660:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004666:	b29b      	uxth	r3, r3
 8004668:	3b01      	subs	r3, #1
 800466a:	b29a      	uxth	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004674:	b29b      	uxth	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1b6      	bne.n	80045e8 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2220      	movs	r2, #32
 800467e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	e000      	b.n	8004688 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004686:	2302      	movs	r3, #2
  }
}
 8004688:	4618      	mov	r0, r3
 800468a:	3720      	adds	r7, #32
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	603b      	str	r3, [r7, #0]
 800469c:	4613      	mov	r3, r2
 800469e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046a0:	e02c      	b.n	80046fc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a8:	d028      	beq.n	80046fc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d007      	beq.n	80046c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80046b0:	f7fd f8d4 	bl	800185c <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d21d      	bcs.n	80046fc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68da      	ldr	r2, [r3, #12]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80046ce:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	695a      	ldr	r2, [r3, #20]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0201 	bic.w	r2, r2, #1
 80046de:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2220      	movs	r2, #32
 80046ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e00f      	b.n	800471c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	4013      	ands	r3, r2
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	429a      	cmp	r2, r3
 800470a:	bf0c      	ite	eq
 800470c:	2301      	moveq	r3, #1
 800470e:	2300      	movne	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	461a      	mov	r2, r3
 8004714:	79fb      	ldrb	r3, [r7, #7]
 8004716:	429a      	cmp	r2, r3
 8004718:	d0c3      	beq.n	80046a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68da      	ldr	r2, [r3, #12]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689a      	ldr	r2, [r3, #8]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	4313      	orrs	r3, r2
 8004752:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800475e:	f023 030c 	bic.w	r3, r3, #12
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6812      	ldr	r2, [r2, #0]
 8004766:	68b9      	ldr	r1, [r7, #8]
 8004768:	430b      	orrs	r3, r1
 800476a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	699a      	ldr	r2, [r3, #24]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a2c      	ldr	r2, [pc, #176]	; (8004838 <UART_SetConfig+0x114>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d103      	bne.n	8004794 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800478c:	f7fe f928 	bl	80029e0 <HAL_RCC_GetPCLK2Freq>
 8004790:	60f8      	str	r0, [r7, #12]
 8004792:	e002      	b.n	800479a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004794:	f7fe f910 	bl	80029b8 <HAL_RCC_GetPCLK1Freq>
 8004798:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	4613      	mov	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	009a      	lsls	r2, r3, #2
 80047a4:	441a      	add	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b0:	4a22      	ldr	r2, [pc, #136]	; (800483c <UART_SetConfig+0x118>)
 80047b2:	fba2 2303 	umull	r2, r3, r2, r3
 80047b6:	095b      	lsrs	r3, r3, #5
 80047b8:	0119      	lsls	r1, r3, #4
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	4613      	mov	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	009a      	lsls	r2, r3, #2
 80047c4:	441a      	add	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80047d0:	4b1a      	ldr	r3, [pc, #104]	; (800483c <UART_SetConfig+0x118>)
 80047d2:	fba3 0302 	umull	r0, r3, r3, r2
 80047d6:	095b      	lsrs	r3, r3, #5
 80047d8:	2064      	movs	r0, #100	; 0x64
 80047da:	fb00 f303 	mul.w	r3, r0, r3
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	011b      	lsls	r3, r3, #4
 80047e2:	3332      	adds	r3, #50	; 0x32
 80047e4:	4a15      	ldr	r2, [pc, #84]	; (800483c <UART_SetConfig+0x118>)
 80047e6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ea:	095b      	lsrs	r3, r3, #5
 80047ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047f0:	4419      	add	r1, r3
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	4613      	mov	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	009a      	lsls	r2, r3, #2
 80047fc:	441a      	add	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	fbb2 f2f3 	udiv	r2, r2, r3
 8004808:	4b0c      	ldr	r3, [pc, #48]	; (800483c <UART_SetConfig+0x118>)
 800480a:	fba3 0302 	umull	r0, r3, r3, r2
 800480e:	095b      	lsrs	r3, r3, #5
 8004810:	2064      	movs	r0, #100	; 0x64
 8004812:	fb00 f303 	mul.w	r3, r0, r3
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	011b      	lsls	r3, r3, #4
 800481a:	3332      	adds	r3, #50	; 0x32
 800481c:	4a07      	ldr	r2, [pc, #28]	; (800483c <UART_SetConfig+0x118>)
 800481e:	fba2 2303 	umull	r2, r3, r2, r3
 8004822:	095b      	lsrs	r3, r3, #5
 8004824:	f003 020f 	and.w	r2, r3, #15
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	440a      	add	r2, r1
 800482e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004830:	bf00      	nop
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40013800 	.word	0x40013800
 800483c:	51eb851f 	.word	0x51eb851f

08004840 <_ZN11MC3479Class12setSerialSPIEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:



// Set the MC3479's SPI object
bool MC3479Class::setSerialSPI(SPI_HandleTypeDef * spi,GPIO_TypeDef * csn_GPIO, uint16_t csn_PIN )
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
 800484c:	807b      	strh	r3, [r7, #2]
	this->_SPI1 = spi;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	601a      	str	r2, [r3, #0]
	this->_CSN_GPIO = csn_GPIO;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	609a      	str	r2, [r3, #8]
	this->_CSN_PIN = csn_PIN;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	887a      	ldrh	r2, [r7, #2]
 800485e:	819a      	strh	r2, [r3, #12]
	return 1; // Return Success
 8004860:	2301      	movs	r3, #1
}
 8004862:	4618      	mov	r0, r3
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr

0800486c <_ZN11MC3479Class16SPI_readRegisterEhPh>:

// Read from a register using SPI
bool MC3479Class::SPI_readRegister(uint8_t reg,  uint8_t* data)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	460b      	mov	r3, r1
 8004876:	607a      	str	r2, [r7, #4]
 8004878:	72fb      	strb	r3, [r7, #11]

	uint8_t spiBytes[2];
	spiBytes[0] = SPIread_REG | reg;
 800487a:	7afb      	ldrb	r3, [r7, #11]
 800487c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004880:	b2db      	uxtb	r3, r3
 8004882:	753b      	strb	r3, [r7, #20]
	spiBytes[1] = SPIread_BYTE2;
 8004884:	2300      	movs	r3, #0
 8004886:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_RESET);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6898      	ldr	r0, [r3, #8]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	899b      	ldrh	r3, [r3, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	4619      	mov	r1, r3
 8004894:	f7fd fca1 	bl	80021da <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_SPI1, &spiBytes[0], sizeof(spiBytes), 10);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6818      	ldr	r0, [r3, #0]
 800489c:	f107 0114 	add.w	r1, r7, #20
 80048a0:	230a      	movs	r3, #10
 80048a2:	2202      	movs	r2, #2
 80048a4:	f7fe fa08 	bl	8002cb8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(this->_SPI1, data, REG_BYTES_LEN, 10);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6818      	ldr	r0, [r3, #0]
 80048ac:	230a      	movs	r3, #10
 80048ae:	2201      	movs	r2, #1
 80048b0:	6879      	ldr	r1, [r7, #4]
 80048b2:	f7fe fb3d 	bl	8002f30 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_SET);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6898      	ldr	r0, [r3, #8]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	899b      	ldrh	r3, [r3, #12]
 80048be:	2201      	movs	r2, #1
 80048c0:	4619      	mov	r1, r3
 80048c2:	f7fd fc8a 	bl	80021da <HAL_GPIO_WritePin>
	return 1;
 80048c6:	2301      	movs	r3, #1
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3718      	adds	r7, #24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <_ZN11MC3479Class17SPI_writeRegisterEhh>:

// Write to a register using SPI
uint8_t MC3479Class::SPI_writeRegister(uint8_t reg, uint8_t data)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	460b      	mov	r3, r1
 80048da:	70fb      	strb	r3, [r7, #3]
 80048dc:	4613      	mov	r3, r2
 80048de:	70bb      	strb	r3, [r7, #2]
	// Write data to reg:
	uint8_t spiBytes[2];
	spiBytes[0] = SPIwrite_REG | reg;
 80048e0:	78fb      	ldrb	r3, [r7, #3]
 80048e2:	733b      	strb	r3, [r7, #12]
	spiBytes[1] = data;
 80048e4:	78bb      	ldrb	r3, [r7, #2]
 80048e6:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_RESET);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6898      	ldr	r0, [r3, #8]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	899b      	ldrh	r3, [r3, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	4619      	mov	r1, r3
 80048f4:	f7fd fc71 	bl	80021da <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_SPI1, &spiBytes[0], sizeof(spiBytes), 10);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6818      	ldr	r0, [r3, #0]
 80048fc:	f107 010c 	add.w	r1, r7, #12
 8004900:	230a      	movs	r3, #10
 8004902:	2202      	movs	r2, #2
 8004904:	f7fe f9d8 	bl	8002cb8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_SET);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6898      	ldr	r0, [r3, #8]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	899b      	ldrh	r3, [r3, #12]
 8004910:	2201      	movs	r2, #1
 8004912:	4619      	mov	r1, r3
 8004914:	f7fd fc61 	bl	80021da <HAL_GPIO_WritePin>

	// Read back the register and return the bytes:
	uint8_t regReadBack = 0;
 8004918:	2300      	movs	r3, #0
 800491a:	72fb      	strb	r3, [r7, #11]
	MC3479Class::SPI_readRegister(reg, &regReadBack);
 800491c:	f107 020b 	add.w	r2, r7, #11
 8004920:	78fb      	ldrb	r3, [r7, #3]
 8004922:	4619      	mov	r1, r3
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7ff ffa1 	bl	800486c <_ZN11MC3479Class16SPI_readRegisterEhPh>
	return regReadBack;
 800492a:	7afb      	ldrb	r3, [r7, #11]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <_ZN11MC3479Class21burstSPI_readRegisterEhPhh>:

// Read from a register using SPI
bool MC3479Class::burstSPI_readRegister(uint8_t reg, uint8_t* data, uint8_t reg_count)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	607a      	str	r2, [r7, #4]
 800493e:	461a      	mov	r2, r3
 8004940:	460b      	mov	r3, r1
 8004942:	72fb      	strb	r3, [r7, #11]
 8004944:	4613      	mov	r3, r2
 8004946:	72bb      	strb	r3, [r7, #10]
	uint8_t spiBytes[2];
	spiBytes[0] = SPIread_REG | reg;
 8004948:	7afb      	ldrb	r3, [r7, #11]
 800494a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800494e:	b2db      	uxtb	r3, r3
 8004950:	753b      	strb	r3, [r7, #20]
	spiBytes[1] = SPIread_BYTE2;
 8004952:	2300      	movs	r3, #0
 8004954:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_RESET);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6898      	ldr	r0, [r3, #8]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	899b      	ldrh	r3, [r3, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	4619      	mov	r1, r3
 8004962:	f7fd fc3a 	bl	80021da <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_SPI1, spiBytes, sizeof(spiBytes), 10);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6818      	ldr	r0, [r3, #0]
 800496a:	f107 0114 	add.w	r1, r7, #20
 800496e:	230a      	movs	r3, #10
 8004970:	2202      	movs	r2, #2
 8004972:	f7fe f9a1 	bl	8002cb8 <HAL_SPI_Transmit>

	for (uint8_t i=0; i<reg_count; i++)
 8004976:	2300      	movs	r3, #0
 8004978:	75fb      	strb	r3, [r7, #23]
 800497a:	7dfa      	ldrb	r2, [r7, #23]
 800497c:	7abb      	ldrb	r3, [r7, #10]
 800497e:	429a      	cmp	r2, r3
 8004980:	d20c      	bcs.n	800499c <_ZN11MC3479Class21burstSPI_readRegisterEhPhh+0x68>
	{
		//TODO: Validate that data[0] will be Xdata LSB
		HAL_SPI_Receive(this->_SPI1, &data[i], REG_BYTES_LEN, 10);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6818      	ldr	r0, [r3, #0]
 8004986:	7dfb      	ldrb	r3, [r7, #23]
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	18d1      	adds	r1, r2, r3
 800498c:	230a      	movs	r3, #10
 800498e:	2201      	movs	r2, #1
 8004990:	f7fe face 	bl	8002f30 <HAL_SPI_Receive>
	for (uint8_t i=0; i<reg_count; i++)
 8004994:	7dfb      	ldrb	r3, [r7, #23]
 8004996:	3301      	adds	r3, #1
 8004998:	75fb      	strb	r3, [r7, #23]
 800499a:	e7ee      	b.n	800497a <_ZN11MC3479Class21burstSPI_readRegisterEhPhh+0x46>
	}
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_SET);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6898      	ldr	r0, [r3, #8]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	899b      	ldrh	r3, [r3, #12]
 80049a4:	2201      	movs	r2, #1
 80049a6:	4619      	mov	r1, r3
 80049a8:	f7fd fc17 	bl	80021da <HAL_GPIO_WritePin>
	return 1;
 80049ac:	2301      	movs	r3, #1

}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3718      	adds	r7, #24
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <_ZN11MC3479Class19configAccelerometerEv>:
	return 1;
}
#endif

// Perform the initial MC3479 hard-coded configuration
void MC3479Class::configAccelerometer(){
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b084      	sub	sp, #16
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]

#ifdef _SPI_COM_ENABLED
		//Configuration using SPI:

		// Register 0x06 (interrupt enable)
		data = 0xFF & ACQ_INT_EN; //only activates interrupts after each sample
 80049be:	2380      	movs	r3, #128	; 0x80
 80049c0:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_INTR_CTRL, data);
 80049c2:	7bfb      	ldrb	r3, [r7, #15]
 80049c4:	461a      	mov	r2, r3
 80049c6:	2106      	movs	r1, #6
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f7ff ff81 	bl	80048d0 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x07 (MODE)
		data = 0xFF & WAKE; // clocks running, X,Y,Z axis sampled @ data rate
 80049ce:	2301      	movs	r3, #1
 80049d0:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_MODE, data);
 80049d2:	7bfb      	ldrb	r3, [r7, #15]
 80049d4:	461a      	mov	r2, r3
 80049d6:	2107      	movs	r1, #7
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7ff ff79 	bl	80048d0 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x08 (Sample  Rate)
		data = 0xFF & RATE7_2000Hz; // sample x,y,z @ 100Hz
 80049de:	230f      	movs	r3, #15
 80049e0:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_SR, data);
 80049e2:	7bfb      	ldrb	r3, [r7, #15]
 80049e4:	461a      	mov	r2, r3
 80049e6:	2108      	movs	r1, #8
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7ff ff71 	bl	80048d0 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x09 (Motion Control)
		data = 0xFF & 0x00; //No motion detection enabled Z-axis positive through top of package
 80049ee:	2300      	movs	r3, #0
 80049f0:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_MOTION_CTRL, data);
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
 80049f4:	461a      	mov	r2, r3
 80049f6:	2109      	movs	r1, #9
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f7ff ff69 	bl	80048d0 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x20 (Range Select Control)
		data = 0xFF & 0x00; // No resolution range change, no LPF
 80049fe:	2300      	movs	r3, #0
 8004a00:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_RANGE, data);
 8004a02:	7bfb      	ldrb	r3, [r7, #15]
 8004a04:	461a      	mov	r2, r3
 8004a06:	2120      	movs	r1, #32
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7ff ff61 	bl	80048d0 <_ZN11MC3479Class17SPI_writeRegisterEhh>
//		MC3479Class::SPI_readRegister(MC3479_ZGAIN, &data);
//		data = data & 0xFF; //no GAIN
//		MC3479Class::SPI_writeRegister(MC3479_ZGAIN, data);

		// RegisteO 0x2D (FIFO Control)
		data = 0XFF & FIFO_TH_INT_EN & FIFO_FULL_INT_EN; // FIFO TH/Full IRQ set on INTN2 pin.
 8004a0e:	2300      	movs	r3, #0
 8004a10:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_FIFO_CTRL, data);
 8004a12:	7bfb      	ldrb	r3, [r7, #15]
 8004a14:	461a      	mov	r2, r3
 8004a16:	212d      	movs	r1, #45	; 0x2d
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7ff ff59 	bl	80048d0 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x2E (FIFO Threshold)
		data = 0xFF & 0x10; //FIFO IRQ threshold set to 50%
 8004a1e:	2310      	movs	r3, #16
 8004a20:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_FIFO_TH, data);
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
 8004a24:	461a      	mov	r2, r3
 8004a26:	212e      	movs	r1, #46	; 0x2e
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f7ff ff51 	bl	80048d0 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x30 (FIFO Control 2, Sample Rate 2)
		//Burst-read cycle that includes XOUT[15:0], YOUT[15:0],
		//ZOUT[15:0], annd NOTTTT: STATUS[7:0], and INTR_STATUS[7:0]:
		data = 0xFF & 0x00;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_FIFO_CTRL2_SR2, data);
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
 8004a34:	461a      	mov	r2, r3
 8004a36:	2130      	movs	r1, #48	; 0x30
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f7ff ff49 	bl	80048d0 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x31 (Communication Control)
		data = 0xFF & 0x00; //0x14 interrupts are cleared simultaneously, 4bit SPI, default Interrupt pins
 8004a3e:	2300      	movs	r3, #0
 8004a40:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_COMM_CTRL, data);
 8004a42:	7bfb      	ldrb	r3, [r7, #15]
 8004a44:	461a      	mov	r2, r3
 8004a46:	2131      	movs	r1, #49	; 0x31
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f7ff ff41 	bl	80048d0 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x33 (GPIO Control)
		data = 0xFF & GPIO1_INTN1_IPP & GPIO2_INTN2_IPP; // interrupt pins are push-pull, active low
 8004a4e:	2300      	movs	r3, #0
 8004a50:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_GPIO_CTRL, data);
 8004a52:	7bfb      	ldrb	r3, [r7, #15]
 8004a54:	461a      	mov	r2, r3
 8004a56:	2133      	movs	r1, #51	; 0x33
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f7ff ff39 	bl	80048d0 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x40 (Tilt/Flip threshold LSB)
		data = 0xFF & 0x0F; // 15/255 Tilt/Flip Threshold LSB
 8004a5e:	230f      	movs	r3, #15
 8004a60:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_TF_THRESH_LSB, data);
 8004a62:	7bfb      	ldrb	r3, [r7, #15]
 8004a64:	461a      	mov	r2, r3
 8004a66:	2140      	movs	r1, #64	; 0x40
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f7ff ff31 	bl	80048d0 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x41 (Tilt/Flip threshold MSB)
		data = 0xFF & 0x00; // 0/255 Tilt/Flip Threshold MSB
 8004a6e:	2300      	movs	r3, #0
 8004a70:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_TF_THRESH_MSB, data);
 8004a72:	7bfb      	ldrb	r3, [r7, #15]
 8004a74:	461a      	mov	r2, r3
 8004a76:	2141      	movs	r1, #65	; 0x41
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f7ff ff29 	bl	80048d0 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x42 (Tilt/Flip De-bounce)
		data = 0xFF & 0x0F; // Tilt/Flip de-bounce duration to 15/255 before triggering IRQ
 8004a7e:	230f      	movs	r3, #15
 8004a80:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_TF_DB, data);
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
 8004a84:	461a      	mov	r2, r3
 8004a86:	2142      	movs	r1, #66	; 0x42
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f7ff ff21 	bl	80048d0 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x43 (AnyMotion Threshold LSB)
		data = 0xFF & 0x0F; // 15/255 AnyMotionThreshold LSB
 8004a8e:	230f      	movs	r3, #15
 8004a90:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_AM_THRESH_LSB, data);
 8004a92:	7bfb      	ldrb	r3, [r7, #15]
 8004a94:	461a      	mov	r2, r3
 8004a96:	2143      	movs	r1, #67	; 0x43
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f7ff ff19 	bl	80048d0 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x44 (AnyMotion Threshold MSB)
		data = 0xFF & 0x00; // 0/255 AnyMotionThreshold MSB
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_AM_THRESH_MSB, data);
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	2144      	movs	r1, #68	; 0x44
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7ff ff11 	bl	80048d0 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x45 (AnyMotion De-bounce)
		data = 0xFF & 0x0F; // AnyMotion de-bounce duration to 15/255 before triggering IRQ
 8004aae:	230f      	movs	r3, #15
 8004ab0:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_AM_DB, data);
 8004ab2:	7bfb      	ldrb	r3, [r7, #15]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	2145      	movs	r1, #69	; 0x45
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f7ff ff09 	bl	80048d0 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x46 (Shake Threshold LSB)
		data = 0xFF & 0x0F; // 15/255 Shake Threshold LSB
 8004abe:	230f      	movs	r3, #15
 8004ac0:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_SHK_THRESH_LSB, data);
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	2146      	movs	r1, #70	; 0x46
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f7ff ff01 	bl	80048d0 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x47 (Shake Threshold MSB)
		data = 0xFF & 0x00; // 0/255 Shake Threshold MSB
 8004ace:	2300      	movs	r3, #0
 8004ad0:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_SHK_THRESH_MSB, data);
 8004ad2:	7bfb      	ldrb	r3, [r7, #15]
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	2147      	movs	r1, #71	; 0x47
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f7ff fef9 	bl	80048d0 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x48 (Peak-to-Peak Duration LSB)
		data = 0xFF & 0x00; // Minimum duration to trigger a shake interrupt - unused???
 8004ade:	2300      	movs	r3, #0
 8004ae0:	73fb      	strb	r3, [r7, #15]
		//TODO: are we using p2p or shake counter thresholds for interrupts??
		MC3479Class::SPI_writeRegister(MC3479_PK_P2P_DUR_THRESH_LSB, data);
 8004ae2:	7bfb      	ldrb	r3, [r7, #15]
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	2148      	movs	r1, #72	; 0x48
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f7ff fef1 	bl	80048d0 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x49 (Shake/Peak-to-Peak Duration MSB)
		data = 0xFF & 0x00; // Minimum duration to trigger a shake interrupt - unused???
 8004aee:	2300      	movs	r3, #0
 8004af0:	73fb      	strb	r3, [r7, #15]
		//TODO: are we using p2p or shake counter thresholds for interrupts??
		MC3479Class::SPI_writeRegister(MC3479_PK_P2P_DUR_THRESH_MSB, data);
 8004af2:	7bfb      	ldrb	r3, [r7, #15]
 8004af4:	461a      	mov	r2, r3
 8004af6:	2149      	movs	r1, #73	; 0x49
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7ff fee9 	bl	80048d0 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x4A (Timer control)
		data = 0xFF & 0x00; //Tilt-35 latch disabled,tilt-35 angle detection duration = 1.6s (default)
 8004afe:	2300      	movs	r3, #0
 8004b00:	73fb      	strb	r3, [r7, #15]
		//TODO: if Tilt35 duration is too large for our control system, can we ignore configuration?
		MC3479Class::SPI_writeRegister(MC3479_TIMER_CTRL, data);
 8004b02:	7bfb      	ldrb	r3, [r7, #15]
 8004b04:	461a      	mov	r2, r3
 8004b06:	214a      	movs	r1, #74	; 0x4a
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff fee1 	bl	80048d0 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x4B (Read Count Register)
		data = 0xFF & 0x06; // default 6 reads when register 0x30 bit 7(FIFO_BURST) is enabled
 8004b0e:	2306      	movs	r3, #6
 8004b10:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_RD_CNT, data);
 8004b12:	7bfb      	ldrb	r3, [r7, #15]
 8004b14:	461a      	mov	r2, r3
 8004b16:	214b      	movs	r1, #75	; 0x4b
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f7ff fed9 	bl	80048d0 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x4B (Read Count Register)

#endif /* _SPI_COM_ENABLED */

	return;
 8004b1e:	bf00      	nop
}
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <_ZN11MC3479Class6getXYZEPhS0_S0_>:
		uint8_t data = 0xFF & rate; // sample x,y,z @ 100Hz
		return MC3479Class::SPI_writeRegister(MC3479_SR, data);
}

bool MC3479Class::getXYZ(uint8_t* xData, uint8_t* yData, uint8_t* zData)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b086      	sub	sp, #24
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	60f8      	str	r0, [r7, #12]
 8004b2e:	60b9      	str	r1, [r7, #8]
 8004b30:	607a      	str	r2, [r7, #4]
 8004b32:	603b      	str	r3, [r7, #0]
	uint8_t Buffer[8];
	MC3479Class::burstSPI_readRegister(MC3479_XOUT_EX_L, &Buffer[0], 6);
 8004b34:	f107 0210 	add.w	r2, r7, #16
 8004b38:	2306      	movs	r3, #6
 8004b3a:	210d      	movs	r1, #13
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f7ff fef9 	bl	8004934 <_ZN11MC3479Class21burstSPI_readRegisterEhPhh>
	xData[0] = Buffer[0];
 8004b42:	7c3a      	ldrb	r2, [r7, #16]
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	701a      	strb	r2, [r3, #0]
	xData[1] = Buffer[1];
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	7c7a      	ldrb	r2, [r7, #17]
 8004b4e:	701a      	strb	r2, [r3, #0]
	yData[0] = Buffer[2];
 8004b50:	7cba      	ldrb	r2, [r7, #18]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	701a      	strb	r2, [r3, #0]
	yData[1] = Buffer[3];
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	7cfa      	ldrb	r2, [r7, #19]
 8004b5c:	701a      	strb	r2, [r3, #0]
	zData[0] = Buffer[4];
 8004b5e:	7d3a      	ldrb	r2, [r7, #20]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	701a      	strb	r2, [r3, #0]
	zData[1] = Buffer[5];
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	3301      	adds	r3, #1
 8004b68:	7d7a      	ldrb	r2, [r7, #21]
 8004b6a:	701a      	strb	r2, [r3, #0]
	return 1;
 8004b6c:	2301      	movs	r3, #1
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3718      	adds	r7, #24
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <_ZN12MP6543HClass23x_configMotorControllerEtP17TIM_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>:
bool MP6543HClass::x_configMotorController(uint16_t xPwmChannel, TIM_HandleTypeDef * pwmTimer,
		GPIO_TypeDef* xDir, uint16_t xDirPin,
			GPIO_TypeDef* xBrake, uint16_t xBrakePin,
				GPIO_TypeDef* xSleep, uint16_t xSleepPin,
					GPIO_TypeDef* xFault, uint16_t xFaultPin)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b084      	sub	sp, #16
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	60f8      	str	r0, [r7, #12]
 8004b7e:	607a      	str	r2, [r7, #4]
 8004b80:	603b      	str	r3, [r7, #0]
 8004b82:	460b      	mov	r3, r1
 8004b84:	817b      	strh	r3, [r7, #10]
	this->_x_PWM_CHANNEL = xPwmChannel;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	897a      	ldrh	r2, [r7, #10]
 8004b8a:	829a      	strh	r2, [r3, #20]
	this->_x_PWM_TIMER = pwmTimer;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	611a      	str	r2, [r3, #16]
	this->_x_DIR_GPIO = xDir;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	601a      	str	r2, [r3, #0]
	this->_x_DIR_PIN = xDirPin;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8b3a      	ldrh	r2, [r7, #24]
 8004b9c:	82da      	strh	r2, [r3, #22]
	HAL_GPIO_WritePin(_x_DIR_GPIO, _x_DIR_PIN, GPIO_PIN_SET);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6818      	ldr	r0, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8adb      	ldrh	r3, [r3, #22]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	4619      	mov	r1, r3
 8004baa:	f7fd fb16 	bl	80021da <HAL_GPIO_WritePin>
	this->_x_nBRAKE_GPIO = xBrake;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	69fa      	ldr	r2, [r7, #28]
 8004bb2:	605a      	str	r2, [r3, #4]
	this->_x_nBRAKE_PIN = xBrakePin;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8c3a      	ldrh	r2, [r7, #32]
 8004bb8:	831a      	strh	r2, [r3, #24]
	HAL_GPIO_WritePin(_x_nBRAKE_GPIO, _x_nBRAKE_PIN, GPIO_PIN_SET);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6858      	ldr	r0, [r3, #4]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	8b1b      	ldrh	r3, [r3, #24]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	f7fd fb08 	bl	80021da <HAL_GPIO_WritePin>
	this->_x_nSLEEP_GPIO = xSleep;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bce:	609a      	str	r2, [r3, #8]
	this->_x_nSLEEP_PIN = xSleepPin;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004bd4:	835a      	strh	r2, [r3, #26]
	HAL_GPIO_WritePin(_x_nSLEEP_GPIO, _x_nSLEEP_PIN, GPIO_PIN_SET);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6898      	ldr	r0, [r3, #8]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8b5b      	ldrh	r3, [r3, #26]
 8004bde:	2201      	movs	r2, #1
 8004be0:	4619      	mov	r1, r3
 8004be2:	f7fd fafa 	bl	80021da <HAL_GPIO_WritePin>
	this->_x_nFAULT_GPIO = xFault;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bea:	60da      	str	r2, [r3, #12]
	this->_x_nFAULT_PIN = xFaultPin;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8004bf0:	839a      	strh	r2, [r3, #28]

	return 1;
 8004bf2:	2301      	movs	r3, #1
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <_ZN12MP6543HClass13x_setMotorDirEb>:
	HAL_GPIO_WritePin(_x_nSLEEP_GPIO, _x_nSLEEP_PIN, GPIO_PIN_SET);
	HAL_Delay(1500);
	return 1;
}
bool MP6543HClass::x_setMotorDir(bool forward_polarity)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	70fb      	strb	r3, [r7, #3]
	if (forward_polarity){
 8004c08:	78fb      	ldrb	r3, [r7, #3]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d008      	beq.n	8004c20 <_ZN12MP6543HClass13x_setMotorDirEb+0x24>
		HAL_GPIO_WritePin(_x_DIR_GPIO, _x_DIR_PIN, GPIO_PIN_SET);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6818      	ldr	r0, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	8adb      	ldrh	r3, [r3, #22]
 8004c16:	2201      	movs	r2, #1
 8004c18:	4619      	mov	r1, r3
 8004c1a:	f7fd fade 	bl	80021da <HAL_GPIO_WritePin>
 8004c1e:	e007      	b.n	8004c30 <_ZN12MP6543HClass13x_setMotorDirEb+0x34>
	}
	else{
		HAL_GPIO_WritePin(_x_DIR_GPIO, _x_DIR_PIN, GPIO_PIN_RESET);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6818      	ldr	r0, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	8adb      	ldrh	r3, [r3, #22]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	f7fd fad5 	bl	80021da <HAL_GPIO_WritePin>
	}
	return 1;
 8004c30:	2301      	movs	r3, #1
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <_ZN12MP6543HClass12x_motorBrakeEb>:

bool MP6543HClass::x_motorBrake(bool want_brake)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b082      	sub	sp, #8
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
 8004c42:	460b      	mov	r3, r1
 8004c44:	70fb      	strb	r3, [r7, #3]
	if (want_brake){
 8004c46:	78fb      	ldrb	r3, [r7, #3]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d008      	beq.n	8004c5e <_ZN12MP6543HClass12x_motorBrakeEb+0x24>
		HAL_GPIO_WritePin(_x_nBRAKE_GPIO, _x_nBRAKE_PIN, GPIO_PIN_RESET);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6858      	ldr	r0, [r3, #4]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	8b1b      	ldrh	r3, [r3, #24]
 8004c54:	2200      	movs	r2, #0
 8004c56:	4619      	mov	r1, r3
 8004c58:	f7fd fabf 	bl	80021da <HAL_GPIO_WritePin>
 8004c5c:	e007      	b.n	8004c6e <_ZN12MP6543HClass12x_motorBrakeEb+0x34>
	}else{
		HAL_GPIO_WritePin(_x_nBRAKE_GPIO, _x_nBRAKE_PIN, GPIO_PIN_SET);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6858      	ldr	r0, [r3, #4]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	8b1b      	ldrh	r3, [r3, #24]
 8004c66:	2201      	movs	r2, #1
 8004c68:	4619      	mov	r1, r3
 8004c6a:	f7fd fab6 	bl	80021da <HAL_GPIO_WritePin>
	}
	return 1;
 8004c6e:	2301      	movs	r3, #1
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <_ZN12MP6543HClass12x_motorFaultEv>:
	MP6543H.y_motorBrake(true);
	return 1;
}

bool MP6543HClass::x_motorFault()
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
	return !HAL_GPIO_ReadPin(_x_nFAULT_GPIO, _x_nFAULT_PIN);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68da      	ldr	r2, [r3, #12]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	8b9b      	ldrh	r3, [r3, #28]
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4610      	mov	r0, r2
 8004c8c:	f7fd fa8e 	bl	80021ac <HAL_GPIO_ReadPin>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	bf0c      	ite	eq
 8004c96:	2301      	moveq	r3, #1
 8004c98:	2300      	movne	r3, #0
 8004c9a:	b2db      	uxtb	r3, r3
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <_ZN12MP6543HClass23y_configMotorControllerEtP17TIM_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>:
bool MP6543HClass::y_configMotorController(uint16_t yPwmChannel, TIM_HandleTypeDef * pwmTimer,
		GPIO_TypeDef* yDir, uint16_t yDirPin,
			GPIO_TypeDef* yBrake, uint16_t yBrakePin,
				GPIO_TypeDef* ySleep, uint16_t ySleepPin,
					GPIO_TypeDef* yFault, uint16_t yFaultPin)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	607a      	str	r2, [r7, #4]
 8004cae:	603b      	str	r3, [r7, #0]
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	817b      	strh	r3, [r7, #10]
	this->_y_PWM_CHANNEL = yPwmChannel;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	897a      	ldrh	r2, [r7, #10]
 8004cb8:	869a      	strh	r2, [r3, #52]	; 0x34
	this->_y_PWM_TIMER = pwmTimer;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	631a      	str	r2, [r3, #48]	; 0x30
	this->_y_DIR_GPIO = yDir;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	621a      	str	r2, [r3, #32]
	this->_y_DIR_PIN = yDirPin;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8b3a      	ldrh	r2, [r7, #24]
 8004cca:	86da      	strh	r2, [r3, #54]	; 0x36
	HAL_GPIO_WritePin(_y_DIR_GPIO, _y_DIR_PIN, GPIO_PIN_SET);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6a18      	ldr	r0, [r3, #32]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	f7fd fa7f 	bl	80021da <HAL_GPIO_WritePin>
	this->_y_nBRAKE_GPIO = yBrake;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	69fa      	ldr	r2, [r7, #28]
 8004ce0:	625a      	str	r2, [r3, #36]	; 0x24
	this->_y_nBRAKE_PIN = yBrakePin;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8c3a      	ldrh	r2, [r7, #32]
 8004ce6:	871a      	strh	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(_y_nBRAKE_GPIO, _y_nBRAKE_PIN, GPIO_PIN_SET);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	f7fd fa71 	bl	80021da <HAL_GPIO_WritePin>
	this->_y_nSLEEP_GPIO = ySleep;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cfc:	629a      	str	r2, [r3, #40]	; 0x28
	this->_y_nSLEEP_PIN = ySleepPin;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004d02:	875a      	strh	r2, [r3, #58]	; 0x3a
	HAL_GPIO_WritePin(_y_nSLEEP_GPIO, _y_nSLEEP_PIN, GPIO_PIN_SET);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	4619      	mov	r1, r3
 8004d10:	f7fd fa63 	bl	80021da <HAL_GPIO_WritePin>
	this->_y_nFAULT_GPIO = yFault;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d18:	62da      	str	r2, [r3, #44]	; 0x2c
	this->_y_nFAULT_PIN = yFaultPin;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8004d1e:	879a      	strh	r2, [r3, #60]	; 0x3c

	return 1;
 8004d20:	2301      	movs	r3, #1
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <_ZN12MP6543HClass12y_motorBrakeEb>:
	return 1;
}


bool MP6543HClass::y_motorBrake(bool want_brake)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b082      	sub	sp, #8
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
 8004d32:	460b      	mov	r3, r1
 8004d34:	70fb      	strb	r3, [r7, #3]
	if (want_brake){
 8004d36:	78fb      	ldrb	r3, [r7, #3]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d008      	beq.n	8004d4e <_ZN12MP6543HClass12y_motorBrakeEb+0x24>
		HAL_GPIO_WritePin(_y_nBRAKE_GPIO, _y_nBRAKE_PIN, GPIO_PIN_RESET);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004d44:	2200      	movs	r2, #0
 8004d46:	4619      	mov	r1, r3
 8004d48:	f7fd fa47 	bl	80021da <HAL_GPIO_WritePin>
 8004d4c:	e007      	b.n	8004d5e <_ZN12MP6543HClass12y_motorBrakeEb+0x34>
	}else{
		HAL_GPIO_WritePin(_y_nBRAKE_GPIO, _y_nBRAKE_PIN, GPIO_PIN_SET);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004d56:	2201      	movs	r2, #1
 8004d58:	4619      	mov	r1, r3
 8004d5a:	f7fd fa3e 	bl	80021da <HAL_GPIO_WritePin>
	}
	return 1;
 8004d5e:	2301      	movs	r3, #1
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <_ZN12MP6543HClass12y_motorFaultEv>:
	MP6543H.y_motorBrake(true);
	return 1;
}

bool MP6543HClass::y_motorFault()
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
	return !HAL_GPIO_ReadPin(_y_nFAULT_GPIO, _y_nFAULT_PIN);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4610      	mov	r0, r2
 8004d7c:	f7fd fa16 	bl	80021ac <HAL_GPIO_ReadPin>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	bf0c      	ite	eq
 8004d86:	2301      	moveq	r3, #1
 8004d88:	2300      	movne	r3, #0
 8004d8a:	b2db      	uxtb	r3, r3
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3708      	adds	r7, #8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <__libc_init_array>:
 8004d94:	b570      	push	{r4, r5, r6, lr}
 8004d96:	2600      	movs	r6, #0
 8004d98:	4d0c      	ldr	r5, [pc, #48]	; (8004dcc <__libc_init_array+0x38>)
 8004d9a:	4c0d      	ldr	r4, [pc, #52]	; (8004dd0 <__libc_init_array+0x3c>)
 8004d9c:	1b64      	subs	r4, r4, r5
 8004d9e:	10a4      	asrs	r4, r4, #2
 8004da0:	42a6      	cmp	r6, r4
 8004da2:	d109      	bne.n	8004db8 <__libc_init_array+0x24>
 8004da4:	f000 f822 	bl	8004dec <_init>
 8004da8:	2600      	movs	r6, #0
 8004daa:	4d0a      	ldr	r5, [pc, #40]	; (8004dd4 <__libc_init_array+0x40>)
 8004dac:	4c0a      	ldr	r4, [pc, #40]	; (8004dd8 <__libc_init_array+0x44>)
 8004dae:	1b64      	subs	r4, r4, r5
 8004db0:	10a4      	asrs	r4, r4, #2
 8004db2:	42a6      	cmp	r6, r4
 8004db4:	d105      	bne.n	8004dc2 <__libc_init_array+0x2e>
 8004db6:	bd70      	pop	{r4, r5, r6, pc}
 8004db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dbc:	4798      	blx	r3
 8004dbe:	3601      	adds	r6, #1
 8004dc0:	e7ee      	b.n	8004da0 <__libc_init_array+0xc>
 8004dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dc6:	4798      	blx	r3
 8004dc8:	3601      	adds	r6, #1
 8004dca:	e7f2      	b.n	8004db2 <__libc_init_array+0x1e>
 8004dcc:	08004e2c 	.word	0x08004e2c
 8004dd0:	08004e2c 	.word	0x08004e2c
 8004dd4:	08004e2c 	.word	0x08004e2c
 8004dd8:	08004e30 	.word	0x08004e30

08004ddc <memset>:
 8004ddc:	4603      	mov	r3, r0
 8004dde:	4402      	add	r2, r0
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d100      	bne.n	8004de6 <memset+0xa>
 8004de4:	4770      	bx	lr
 8004de6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dea:	e7f9      	b.n	8004de0 <memset+0x4>

08004dec <_init>:
 8004dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dee:	bf00      	nop
 8004df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004df2:	bc08      	pop	{r3}
 8004df4:	469e      	mov	lr, r3
 8004df6:	4770      	bx	lr

08004df8 <_fini>:
 8004df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfa:	bf00      	nop
 8004dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfe:	bc08      	pop	{r3}
 8004e00:	469e      	mov	lr, r3
 8004e02:	4770      	bx	lr


Active Stabalizing Mug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060dc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080061f0  080061f0  000161f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006288  08006288  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006288  08006288  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006288  08006288  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006288  08006288  00016288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08006290  08006290  00016290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000070  08006308  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08006308  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001918b  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003271  00000000  00000000  00039224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  0003c498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001218  00000000  00000000  0003d7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d0f7  00000000  00000000  0003e9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000131a9  00000000  00000000  0005bac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bf85  00000000  00000000  0006ec70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010abf5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058b8  00000000  00000000  0010ac48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	080061d4 	.word	0x080061d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	080061d4 	.word	0x080061d4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr

08000a62 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8000a62:	b480      	push	{r7}
 8000a64:	b083      	sub	sp, #12
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a70:	d205      	bcs.n	8000a7e <_ZSt16__deque_buf_sizej+0x1c>
 8000a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7c:	e000      	b.n	8000a80 <_ZSt16__deque_buf_sizej+0x1e>
 8000a7e:	2301      	movs	r3, #1
 8000a80:	4618      	mov	r0, r3
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr

08000a8a <_ZNSt5queueIsSt5dequeIsSaIsEEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f000 f8f8 	bl	8000c8a <_ZNSt5dequeIsSaIsEED1Ev>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	0000      	movs	r0, r0
	...

08000aa8 <_ZN12ControlClassC1Ev>:
#include <queue>

using namespace std;


class ControlClass{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	220a      	movs	r2, #10
 8000ab4:	701a      	strb	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	220a      	movs	r2, #10
 8000aba:	705a      	strb	r2, [r3, #1]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	805a      	strh	r2, [r3, #2]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	809a      	strh	r2, [r3, #4]
 8000ac8:	6879      	ldr	r1, [r7, #4]
 8000aca:	a30b      	add	r3, pc, #44	; (adr r3, 8000af8 <_ZN12ControlClassC1Ev+0x50>)
 8000acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ad0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3310      	adds	r3, #16
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f000 f8c2 	bl	8000c62 <_ZNSt5queueIsSt5dequeIsSaIsEEEC1IS2_vEEv>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	3338      	adds	r3, #56	; 0x38
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 f8bd 	bl	8000c62 <_ZNSt5queueIsSt5dequeIsSaIsEEEC1IS2_vEEv>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	f3af 8000 	nop.w
 8000af8:	b05cc3e8 	.word	0xb05cc3e8
 8000afc:	404ca5dd 	.word	0x404ca5dd

08000b00 <_ZN12ControlClass11lookupAngleEss>:
#include "controlSystem.h"

ControlClass ControlSystem;

int16_t ControlClass::lookupAngle(int16_t z_acc, int16_t axis_acc)
{
 8000b00:	b5b0      	push	{r4, r5, r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	460b      	mov	r3, r1
 8000b0a:	807b      	strh	r3, [r7, #2]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	803b      	strh	r3, [r7, #0]


	// Check for divide by 0 at +/- 90 degrees
	if (z_acc == 0){
 8000b10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d108      	bne.n	8000b2a <_ZN12ControlClass11lookupAngleEss+0x2a>
		return (axis_acc < 0) ? (int16_t) -90 : (int16_t) 90;
 8000b18:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	da02      	bge.n	8000b26 <_ZN12ControlClass11lookupAngleEss+0x26>
 8000b20:	f06f 0359 	mvn.w	r3, #89	; 0x59
 8000b24:	e028      	b.n	8000b78 <_ZN12ControlClass11lookupAngleEss+0x78>
 8000b26:	235a      	movs	r3, #90	; 0x5a
 8000b28:	e026      	b.n	8000b78 <_ZN12ControlClass11lookupAngleEss+0x78>
	}
	// Mug needs to remain between -90 and +90 degrees otherwise this method needs to be updated.
	// It can be argued that we have massively failed if the mug reaches +/- 90 degrees tho, haha.
	double theta = atan((double)axis_acc/(double)z_acc)*this->RADS_TO_DEGREES;
 8000b2a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fc60 	bl	80003f4 <__aeabi_i2d>
 8000b34:	4604      	mov	r4, r0
 8000b36:	460d      	mov	r5, r1
 8000b38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fc59 	bl	80003f4 <__aeabi_i2d>
 8000b42:	4602      	mov	r2, r0
 8000b44:	460b      	mov	r3, r1
 8000b46:	4620      	mov	r0, r4
 8000b48:	4629      	mov	r1, r5
 8000b4a:	f7ff fde7 	bl	800071c <__aeabi_ddiv>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	460b      	mov	r3, r1
 8000b52:	4610      	mov	r0, r2
 8000b54:	4619      	mov	r1, r3
 8000b56:	f005 f80f 	bl	8005b78 <atan>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000b60:	f7ff fcb2 	bl	80004c8 <__aeabi_dmul>
 8000b64:	4602      	mov	r2, r0
 8000b66:	460b      	mov	r3, r1
 8000b68:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// Return integer value of theta (rounded closer to 0)
	return (int16_t)theta;
 8000b6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000b70:	f7ff ff44 	bl	80009fc <__aeabi_d2iz>
 8000b74:	4603      	mov	r3, r0
 8000b76:	b21b      	sxth	r3, r3
//			break;
//		}
//	}
//
//	return sign * i; //angle between -89 and +89
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bdb0      	pop	{r4, r5, r7, pc}

08000b80 <_ZN12ControlClass14normalizeThetaEhhhh>:


int16_t ControlClass::normalizeTheta(uint8_t data0, uint8_t data1, uint8_t z0, uint8_t z1)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	4608      	mov	r0, r1
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4603      	mov	r3, r0
 8000b90:	70fb      	strb	r3, [r7, #3]
 8000b92:	460b      	mov	r3, r1
 8000b94:	70bb      	strb	r3, [r7, #2]
 8000b96:	4613      	mov	r3, r2
 8000b98:	707b      	strb	r3, [r7, #1]
	int16_t z_acc = (z1 << 8) | (z0 & 0x00FF);
 8000b9a:	7e3b      	ldrb	r3, [r7, #24]
 8000b9c:	021b      	lsls	r3, r3, #8
 8000b9e:	b21a      	sxth	r2, r3
 8000ba0:	787b      	ldrb	r3, [r7, #1]
 8000ba2:	b21b      	sxth	r3, r3
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	81fb      	strh	r3, [r7, #14]
	int16_t axis_acc = (data1 << 8) | (data0 & 0x00FF);
 8000ba8:	78bb      	ldrb	r3, [r7, #2]
 8000baa:	021b      	lsls	r3, r3, #8
 8000bac:	b21a      	sxth	r2, r3
 8000bae:	78fb      	ldrb	r3, [r7, #3]
 8000bb0:	b21b      	sxth	r3, r3
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	81bb      	strh	r3, [r7, #12]
	//TODO: need to split this into x and y components and update x and y queues seperately. Also calculate current average and return.
	return lookupAngle(z_acc, axis_acc);
 8000bb6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000bba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff ff9d 	bl	8000b00 <_ZN12ControlClass11lookupAngleEss>
 8000bc6:	4603      	mov	r3, r0
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <_ZN12ControlClass19updateControlSystemEssaa>:

// TODO: Do we need to keep nominal/allowable angles here? should this just be an initialization function?
bool ControlClass::updateControlSystem(int16_t x_nominal, int16_t y_nominal, int8_t x_allowable, int8_t y_allowable)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	4608      	mov	r0, r1
 8000bda:	4611      	mov	r1, r2
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4603      	mov	r3, r0
 8000be0:	817b      	strh	r3, [r7, #10]
 8000be2:	460b      	mov	r3, r1
 8000be4:	813b      	strh	r3, [r7, #8]
 8000be6:	4613      	mov	r3, r2
 8000be8:	71fb      	strb	r3, [r7, #7]
	this->x_nominalAngle = x_nominal;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	897a      	ldrh	r2, [r7, #10]
 8000bee:	805a      	strh	r2, [r3, #2]
	this->x_allowableAngle = x_allowable;
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	79fa      	ldrb	r2, [r7, #7]
 8000bf4:	701a      	strb	r2, [r3, #0]
	this->y_nominalAngle = y_nominal;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	893a      	ldrh	r2, [r7, #8]
 8000bfa:	809a      	strh	r2, [r3, #4]
	this->y_allowableAngle = y_allowable;
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000c02:	705a      	strb	r2, [r3, #1]

	//TODO: implement x and y angle updates/averages
	for (int i = 0; i < 10; i++){
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	2b09      	cmp	r3, #9
 8000c0c:	dc17      	bgt.n	8000c3e <_ZN12ControlClass19updateControlSystemEssaa+0x6e>
		this->x_previousAngles.push(0);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	3310      	adds	r3, #16
 8000c12:	2200      	movs	r2, #0
 8000c14:	823a      	strh	r2, [r7, #16]
 8000c16:	f107 0210 	add.w	r2, r7, #16
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 f859 	bl	8000cd4 <_ZNSt5queueIsSt5dequeIsSaIsEEE4pushEOs>
		this->y_previousAngles.push(0);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	3338      	adds	r3, #56	; 0x38
 8000c26:	2200      	movs	r2, #0
 8000c28:	827a      	strh	r2, [r7, #18]
 8000c2a:	f107 0212 	add.w	r2, r7, #18
 8000c2e:	4611      	mov	r1, r2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f000 f84f 	bl	8000cd4 <_ZNSt5queueIsSt5dequeIsSaIsEEE4pushEOs>
	for (int i = 0; i < 10; i++){
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	e7e4      	b.n	8000c08 <_ZN12ControlClass19updateControlSystemEssaa+0x38>
	}

	return 1;
 8000c3e:	2301      	movs	r3, #1
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <_ZNSt5dequeIsSaIsEEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 f85c 	bl	8000d10 <_ZNSt11_Deque_baseIsSaIsEEC1Ev>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <_ZNSt5queueIsSt5dequeIsSaIsEEEC1IS2_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
	: c() { }
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	2328      	movs	r3, #40	; 0x28
 8000c70:	461a      	mov	r2, r3
 8000c72:	2100      	movs	r1, #0
 8000c74:	f005 f968 	bl	8005f48 <memset>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff ffe4 	bl	8000c48 <_ZNSt5dequeIsSaIsEEC1Ev>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <_ZNSt5dequeIsSaIsEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b08a      	sub	sp, #40	; 0x28
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8000c92:	f107 0308 	add.w	r3, r7, #8
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 f86c 	bl	8000d76 <_ZNSt5dequeIsSaIsEE5beginEv>
 8000c9e:	f107 0318 	add.w	r3, r7, #24
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 f875 	bl	8000d94 <_ZNSt5dequeIsSaIsEE3endEv>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 f880 	bl	8000db2 <_ZNSt11_Deque_baseIsSaIsEE19_M_get_Tp_allocatorEv>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	f107 0218 	add.w	r2, r7, #24
 8000cb8:	f107 0108 	add.w	r1, r7, #8
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f000 f89d 	bl	8000dfc <_ZNSt5dequeIsSaIsEE15_M_destroy_dataESt15_Deque_iteratorIsRsPsES5_RKS0_>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 f834 	bl	8000d32 <_ZNSt11_Deque_baseIsSaIsEED1Ev>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3728      	adds	r7, #40	; 0x28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <_ZNSt5queueIsSt5dequeIsSaIsEEE4pushEOs>:
      push(const value_type& __x)
      { c.push_back(__x); }

#if __cplusplus >= 201103L
      void
      push(value_type&& __x)
 8000cd4:	b590      	push	{r4, r7, lr}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
      { c.push_back(std::move(__x)); }
 8000cde:	687c      	ldr	r4, [r7, #4]
 8000ce0:	6838      	ldr	r0, [r7, #0]
 8000ce2:	f000 f897 	bl	8000e14 <_ZSt4moveIRsEONSt16remove_referenceIT_E4typeEOS2_>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4620      	mov	r0, r4
 8000cec:	f000 f89c 	bl	8000e28 <_ZNSt5dequeIsSaIsEE9push_backEOs>
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd90      	pop	{r4, r7, pc}

08000cf8 <_ZNSt11_Deque_baseIsSaIsEE11_Deque_implD1Ev>:
      struct _Deque_impl
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f000 f8b2 	bl	8000e6a <_ZNSaIsED1Ev>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <_ZNSt11_Deque_baseIsSaIsEEC1Ev>:
      _Deque_base()
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 f895 	bl	8000e4a <_ZNSt11_Deque_baseIsSaIsEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8000d20:	2100      	movs	r1, #0
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f000 f8ad 	bl	8000e82 <_ZNSt11_Deque_baseIsSaIsEE17_M_initialize_mapEj>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <_ZNSt11_Deque_baseIsSaIsEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d010      	beq.n	8000d64 <_ZNSt11_Deque_baseIsSaIsEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8000d4a:	3304      	adds	r3, #4
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f000 f8fa 	bl	8000f48 <_ZNSt11_Deque_baseIsSaIsEE16_M_destroy_nodesEPPsS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6819      	ldr	r1, [r3, #0]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f000 f90c 	bl	8000f7c <_ZNSt11_Deque_baseIsSaIsEE17_M_deallocate_mapEPPsj>
    }
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ffc6 	bl	8000cf8 <_ZNSt11_Deque_baseIsSaIsEE11_Deque_implD1Ev>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <_ZNSt5dequeIsSaIsEE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
 8000d7e:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	3308      	adds	r3, #8
 8000d84:	4619      	mov	r1, r3
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f000 f81d 	bl	8000dc6 <_ZNSt15_Deque_iteratorIsRsPsEC1ERKS2_>
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <_ZNSt5dequeIsSaIsEE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	3318      	adds	r3, #24
 8000da2:	4619      	mov	r1, r3
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f000 f80e 	bl	8000dc6 <_ZNSt15_Deque_iteratorIsRsPsEC1ERKS2_>
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <_ZNSt11_Deque_baseIsSaIsEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000db2:	b480      	push	{r7}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bc80      	pop	{r7}
 8000dc4:	4770      	bx	lr

08000dc6 <_ZNSt15_Deque_iteratorIsRsPsEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8000dc6:	b480      	push	{r7}
 8000dc8:	b083      	sub	sp, #12
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
 8000dce:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	689a      	ldr	r2, [r3, #8]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	68da      	ldr	r2, [r3, #12]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4618      	mov	r0, r3
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr

08000dfc <_ZNSt5dequeIsSaIsEE15_M_destroy_dataESt15_Deque_iteratorIsRsPsES5_RKS0_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 8000dfc:	b480      	push	{r7}
 8000dfe:	b08d      	sub	sp, #52	; 0x34
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
 8000e08:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 8000e0a:	bf00      	nop
 8000e0c:	3734      	adds	r7, #52	; 0x34
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr

08000e14 <_ZSt4moveIRsEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr

08000e28 <_ZNSt5dequeIsSaIsEE9push_backEOs>:
      push_back(value_type&& __x)
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8000e32:	6838      	ldr	r0, [r7, #0]
 8000e34:	f7ff ffee 	bl	8000e14 <_ZSt4moveIRsEONSt16remove_referenceIT_E4typeEOS2_>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f000 f8b9 	bl	8000fb4 <_ZNSt5dequeIsSaIsEE12emplace_backIJsEEEvDpOT_>
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <_ZNSt11_Deque_baseIsSaIsEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f000 f8d8 	bl	8001008 <_ZNSaIsEC1Ev>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f8e0 	bl	8001020 <_ZNSt11_Deque_baseIsSaIsEE16_Deque_impl_dataC1Ev>
	{ }
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <_ZNSaIsED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f000 f8ed 	bl	8001052 <_ZN9__gnu_cxx13new_allocatorIsED1Ev>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <_ZNSt11_Deque_baseIsSaIsEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8000e82:	b590      	push	{r4, r7, lr}
 8000e84:	b089      	sub	sp, #36	; 0x24
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
 8000e8a:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8000e8c:	2002      	movs	r0, #2
 8000e8e:	f7ff fde8 	bl	8000a62 <_ZSt16__deque_buf_sizej>
 8000e92:	4602      	mov	r2, r0
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8000e9e:	2308      	movs	r3, #8
 8000ea0:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	f107 0210 	add.w	r2, r7, #16
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f8d7 	bl	8001066 <_ZSt3maxIjERKT_S2_S2_>
 8000eb8:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f000 f8e0 	bl	800108c <_ZNSt11_Deque_baseIsSaIsEE15_M_allocate_mapEj>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6859      	ldr	r1, [r3, #4]
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	1acb      	subs	r3, r1, r3
 8000ede:	085b      	lsrs	r3, r3, #1
 8000ee0:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8000ee2:	4413      	add	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4413      	add	r3, r2
 8000eee:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	69b9      	ldr	r1, [r7, #24]
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f000 f8e6 	bl	80010c6 <_ZNSt11_Deque_baseIsSaIsEE15_M_create_nodesEPPsS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	3308      	adds	r3, #8
 8000efe:	69b9      	ldr	r1, [r7, #24]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f000 f8fa 	bl	80010fa <_ZNSt15_Deque_iteratorIsRsPsE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f103 0218 	add.w	r2, r3, #24
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	3b04      	subs	r3, #4
 8000f10:	4619      	mov	r1, r3
 8000f12:	4610      	mov	r0, r2
 8000f14:	f000 f8f1 	bl	80010fa <_ZNSt15_Deque_iteratorIsRsPsE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68da      	ldr	r2, [r3, #12]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8000f24:	2002      	movs	r0, #2
 8000f26:	f7ff fd9c 	bl	8000a62 <_ZSt16__deque_buf_sizej>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f32:	fb01 f202 	mul.w	r2, r1, r2
 8000f36:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	619a      	str	r2, [r3, #24]
    }
 8000f40:	bf00      	nop
 8000f42:	3724      	adds	r7, #36	; 0x24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd90      	pop	{r4, r7, pc}

08000f48 <_ZNSt11_Deque_baseIsSaIsEE16_M_destroy_nodesEPPsS3_>:
    _Deque_base<_Tp, _Alloc>::
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d209      	bcs.n	8000f74 <_ZNSt11_Deque_baseIsSaIsEE16_M_destroy_nodesEPPsS3_+0x2c>
	_M_deallocate_node(*__n);
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4619      	mov	r1, r3
 8000f66:	68f8      	ldr	r0, [r7, #12]
 8000f68:	f000 f8e0 	bl	800112c <_ZNSt11_Deque_baseIsSaIsEE18_M_deallocate_nodeEPs>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	3304      	adds	r3, #4
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	e7f1      	b.n	8000f58 <_ZNSt11_Deque_baseIsSaIsEE16_M_destroy_nodesEPPsS3_+0x10>
    }
 8000f74:	bf00      	nop
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <_ZNSt11_Deque_baseIsSaIsEE17_M_deallocate_mapEPPsj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	68f9      	ldr	r1, [r7, #12]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f8df 	bl	8001152 <_ZNKSt11_Deque_baseIsSaIsEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	68b9      	ldr	r1, [r7, #8]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f000 f8f5 	bl	800118c <_ZNSt16allocator_traitsISaIPsEE10deallocateERS1_PS0_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 f8e4 	bl	8001174 <_ZNSaIPsED1Ev>
      }
 8000fac:	bf00      	nop
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <_ZNSt5dequeIsSaIsEE12emplace_backIJsEEEvDpOT_>:
#if __cplusplus > 201402L
      typename deque<_Tp, _Alloc>::reference
#else
      void
#endif
      deque<_Tp, _Alloc>::
 8000fb4:	b5b0      	push	{r4, r5, r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish._M_cur
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6a1b      	ldr	r3, [r3, #32]
 8000fc6:	3b02      	subs	r3, #2
	if (this->_M_impl._M_finish._M_cur
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d011      	beq.n	8000ff0 <_ZNSt5dequeIsSaIsEE12emplace_backIJsEEEvDpOT_+0x3c>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 8000fcc:	687c      	ldr	r4, [r7, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	699d      	ldr	r5, [r3, #24]
 8000fd2:	6838      	ldr	r0, [r7, #0]
 8000fd4:	f000 f8e9 	bl	80011aa <_ZSt7forwardIsEOT_RNSt16remove_referenceIS0_E4typeE>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	461a      	mov	r2, r3
 8000fdc:	4629      	mov	r1, r5
 8000fde:	4620      	mov	r0, r4
 8000fe0:	f000 f8ed 	bl	80011be <_ZNSt16allocator_traitsISaIsEE9constructIsJsEEEvRS0_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish._M_cur;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	1c9a      	adds	r2, r3, #2
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	619a      	str	r2, [r3, #24]
	else
	  _M_push_back_aux(std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8000fee:	e007      	b.n	8001000 <_ZNSt5dequeIsSaIsEE12emplace_backIJsEEEvDpOT_+0x4c>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 8000ff0:	6838      	ldr	r0, [r7, #0]
 8000ff2:	f000 f8da 	bl	80011aa <_ZSt7forwardIsEOT_RNSt16remove_referenceIS0_E4typeE>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 f8f2 	bl	80011e4 <_ZNSt5dequeIsSaIsEE16_M_push_back_auxIJsEEEvDpOT_>
      }
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bdb0      	pop	{r4, r5, r7, pc}

08001008 <_ZNSaIsEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f000 f92b 	bl	800126c <_ZN9__gnu_cxx13new_allocatorIsEC1Ev>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <_ZNSt11_Deque_baseIsSaIsEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3308      	adds	r3, #8
 8001038:	4618      	mov	r0, r3
 800103a:	f000 f921 	bl	8001280 <_ZNSt15_Deque_iteratorIsRsPsEC1Ev>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3318      	adds	r3, #24
 8001042:	4618      	mov	r0, r3
 8001044:	f000 f91c 	bl	8001280 <_ZNSt15_Deque_iteratorIsRsPsEC1Ev>
	{ }
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <_ZN9__gnu_cxx13new_allocatorIsED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4618      	mov	r0, r3
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr

08001066 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	429a      	cmp	r2, r3
 800107a:	d201      	bcs.n	8001080 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	e000      	b.n	8001082 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8001080:	687b      	ldr	r3, [r7, #4]
    }
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr

0800108c <_ZNSt11_Deque_baseIsSaIsEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8001096:	f107 030c 	add.w	r3, r7, #12
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	4618      	mov	r0, r3
 800109e:	f000 f858 	bl	8001152 <_ZNKSt11_Deque_baseIsSaIsEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	6839      	ldr	r1, [r7, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 f8ff 	bl	80012ac <_ZNSt16allocator_traitsISaIPsEE8allocateERS1_j>
 80010ae:	4604      	mov	r4, r0
 80010b0:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80010b2:	f107 030c 	add.w	r3, r7, #12
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f85c 	bl	8001174 <_ZNSaIPsED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80010bc:	4623      	mov	r3, r4
      }
 80010be:	4618      	mov	r0, r3
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd90      	pop	{r4, r7, pc}

080010c6 <_ZNSt11_Deque_baseIsSaIsEE15_M_create_nodesEPPsS3_>:
    _Deque_base<_Tp, _Alloc>::
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b086      	sub	sp, #24
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	60f8      	str	r0, [r7, #12]
 80010ce:	60b9      	str	r1, [r7, #8]
 80010d0:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	617b      	str	r3, [r7, #20]
 80010d6:	697a      	ldr	r2, [r7, #20]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d209      	bcs.n	80010f2 <_ZNSt11_Deque_baseIsSaIsEE15_M_create_nodesEPPsS3_+0x2c>
	    *__cur = this->_M_allocate_node();
 80010de:	68f8      	ldr	r0, [r7, #12]
 80010e0:	f000 f8f3 	bl	80012ca <_ZNSt11_Deque_baseIsSaIsEE16_M_allocate_nodeEv>
 80010e4:	4602      	mov	r2, r0
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	3304      	adds	r3, #4
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	e7f1      	b.n	80010d6 <_ZNSt11_Deque_baseIsSaIsEE15_M_create_nodesEPPsS3_+0x10>
    }
 80010f2:	bf00      	nop
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <_ZNSt15_Deque_iteratorIsRsPsE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 80010fa:	b590      	push	{r4, r7, lr}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	683a      	ldr	r2, [r7, #0]
 8001108:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685c      	ldr	r4, [r3, #4]
 8001116:	f000 f8ea 	bl	80012ee <_ZNSt15_Deque_iteratorIsRsPsE14_S_buffer_sizeEv>
 800111a:	4603      	mov	r3, r0
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	18e2      	adds	r2, r4, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	609a      	str	r2, [r3, #8]
      }
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	bd90      	pop	{r4, r7, pc}

0800112c <_ZNSt11_Deque_baseIsSaIsEE18_M_deallocate_nodeEPs>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8001136:	687c      	ldr	r4, [r7, #4]
 8001138:	2002      	movs	r0, #2
 800113a:	f7ff fc92 	bl	8000a62 <_ZSt16__deque_buf_sizej>
 800113e:	4603      	mov	r3, r0
 8001140:	461a      	mov	r2, r3
 8001142:	6839      	ldr	r1, [r7, #0]
 8001144:	4620      	mov	r0, r4
 8001146:	f000 f8da 	bl	80012fe <_ZNSt16allocator_traitsISaIsEE10deallocateERS0_Psj>
      }
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	bd90      	pop	{r4, r7, pc}

08001152 <_ZNKSt11_Deque_baseIsSaIsEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
 800115a:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 800115c:	6838      	ldr	r0, [r7, #0]
 800115e:	f000 f8dd 	bl	800131c <_ZNKSt11_Deque_baseIsSaIsEE19_M_get_Tp_allocatorEv>
 8001162:	4603      	mov	r3, r0
 8001164:	4619      	mov	r1, r3
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 f8e2 	bl	8001330 <_ZNSaIPsEC1IsEERKSaIT_E>
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <_ZNSaIPsED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f000 f8e4 	bl	800134a <_ZN9__gnu_cxx13new_allocatorIPsED1Ev>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <_ZNSt16allocator_traitsISaIPsEE10deallocateERS1_PS0_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	68b9      	ldr	r1, [r7, #8]
 800119c:	68f8      	ldr	r0, [r7, #12]
 800119e:	f000 f8de 	bl	800135e <_ZN9__gnu_cxx13new_allocatorIPsE10deallocateEPS1_j>
 80011a2:	bf00      	nop
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <_ZSt7forwardIsEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4618      	mov	r0, r3
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr

080011be <_ZNSt16allocator_traitsISaIsEE9constructIsJsEEEvRS0_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80011be:	b580      	push	{r7, lr}
 80011c0:	b084      	sub	sp, #16
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	60f8      	str	r0, [r7, #12]
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ffed 	bl	80011aa <_ZSt7forwardIsEOT_RNSt16remove_referenceIS0_E4typeE>
 80011d0:	4603      	mov	r3, r0
 80011d2:	461a      	mov	r2, r3
 80011d4:	68b9      	ldr	r1, [r7, #8]
 80011d6:	68f8      	ldr	r0, [r7, #12]
 80011d8:	f000 f8d1 	bl	800137e <_ZN9__gnu_cxx13new_allocatorIsE9constructIsJsEEEvPT_DpOT0_>
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
 80011dc:	bf00      	nop
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <_ZNSt5dequeIsSaIsEE16_M_push_back_auxIJsEEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 80011e4:	b5b0      	push	{r4, r5, r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 f8dd 	bl	80013ae <_ZNKSt5dequeIsSaIsEE4sizeEv>
 80011f4:	4604      	mov	r4, r0
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f000 f8eb 	bl	80013d2 <_ZNKSt5dequeIsSaIsEE8max_sizeEv>
 80011fc:	4603      	mov	r3, r0
 80011fe:	429c      	cmp	r4, r3
 8001200:	bf0c      	ite	eq
 8001202:	2301      	moveq	r3, #1
 8001204:	2300      	movne	r3, #0
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b00      	cmp	r3, #0
 800120a:	d002      	beq.n	8001212 <_ZNSt5dequeIsSaIsEE16_M_push_back_auxIJsEEEvDpOT_+0x2e>
	  __throw_length_error(
 800120c:	4816      	ldr	r0, [pc, #88]	; (8001268 <_ZNSt5dequeIsSaIsEE16_M_push_back_auxIJsEEEvDpOT_+0x84>)
 800120e:	f004 fca3 	bl	8005b58 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 8001212:	2101      	movs	r1, #1
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 f8ed 	bl	80013f4 <_ZNSt5dequeIsSaIsEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001220:	1d1c      	adds	r4, r3, #4
 8001222:	4610      	mov	r0, r2
 8001224:	f000 f851 	bl	80012ca <_ZNSt11_Deque_baseIsSaIsEE16_M_allocate_nodeEv>
 8001228:	4603      	mov	r3, r0
 800122a:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 800122c:	687c      	ldr	r4, [r7, #4]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	699d      	ldr	r5, [r3, #24]
 8001232:	6838      	ldr	r0, [r7, #0]
 8001234:	f7ff ffb9 	bl	80011aa <_ZSt7forwardIsEOT_RNSt16remove_referenceIS0_E4typeE>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	4629      	mov	r1, r5
 800123e:	4620      	mov	r0, r4
 8001240:	f7ff ffbd 	bl	80011be <_ZNSt16allocator_traitsISaIsEE9constructIsJsEEEvRS0_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f103 0218 	add.w	r2, r3, #24
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124e:	3304      	adds	r3, #4
 8001250:	4619      	mov	r1, r3
 8001252:	4610      	mov	r0, r2
 8001254:	f7ff ff51 	bl	80010fa <_ZNSt15_Deque_iteratorIsRsPsE11_M_set_nodeEPS1_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	69da      	ldr	r2, [r3, #28]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bdb0      	pop	{r4, r5, r7, pc}
 8001268:	080061f0 	.word	0x080061f0

0800126c <_ZN9__gnu_cxx13new_allocatorIsEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <_ZNSt15_Deque_iteratorIsRsPsEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr

080012ac <_ZNSt16allocator_traitsISaIPsEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80012b6:	2200      	movs	r2, #0
 80012b8:	6839      	ldr	r1, [r7, #0]
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f000 f8b5 	bl	800142a <_ZN9__gnu_cxx13new_allocatorIPsE8allocateEjPKv>
 80012c0:	4603      	mov	r3, r0
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <_ZNSt11_Deque_baseIsSaIsEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 80012ca:	b590      	push	{r4, r7, lr}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 80012d2:	687c      	ldr	r4, [r7, #4]
 80012d4:	2002      	movs	r0, #2
 80012d6:	f7ff fbc4 	bl	8000a62 <_ZSt16__deque_buf_sizej>
 80012da:	4603      	mov	r3, r0
 80012dc:	4619      	mov	r1, r3
 80012de:	4620      	mov	r0, r4
 80012e0:	f000 f8c1 	bl	8001466 <_ZNSt16allocator_traitsISaIsEE8allocateERS0_j>
 80012e4:	4603      	mov	r3, r0
      }
 80012e6:	4618      	mov	r0, r3
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd90      	pop	{r4, r7, pc}

080012ee <_ZNSt15_Deque_iteratorIsRsPsE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80012ee:	b580      	push	{r7, lr}
 80012f0:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80012f2:	2002      	movs	r0, #2
 80012f4:	f7ff fbb5 	bl	8000a62 <_ZSt16__deque_buf_sizej>
 80012f8:	4603      	mov	r3, r0
 80012fa:	4618      	mov	r0, r3
 80012fc:	bd80      	pop	{r7, pc}

080012fe <_ZNSt16allocator_traitsISaIsEE10deallocateERS0_Psj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80012fe:	b580      	push	{r7, lr}
 8001300:	b084      	sub	sp, #16
 8001302:	af00      	add	r7, sp, #0
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	68b9      	ldr	r1, [r7, #8]
 800130e:	68f8      	ldr	r0, [r7, #12]
 8001310:	f000 f8b8 	bl	8001484 <_ZN9__gnu_cxx13new_allocatorIsE10deallocateEPsj>
 8001314:	bf00      	nop
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <_ZNKSt11_Deque_baseIsSaIsEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr

08001330 <_ZNSaIPsEC1IsEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f000 f8b2 	bl	80014a4 <_ZN9__gnu_cxx13new_allocatorIPsEC1Ev>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <_ZN9__gnu_cxx13new_allocatorIPsED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4618      	mov	r0, r3
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr

0800135e <_ZN9__gnu_cxx13new_allocatorIPsE10deallocateEPS1_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
 800135e:	b580      	push	{r7, lr}
 8001360:	b084      	sub	sp, #16
 8001362:	af00      	add	r7, sp, #0
 8001364:	60f8      	str	r0, [r7, #12]
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4619      	mov	r1, r3
 8001370:	68b8      	ldr	r0, [r7, #8]
 8001372:	f004 fbdb 	bl	8005b2c <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <_ZN9__gnu_cxx13new_allocatorIsE9constructIsJsEEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800137e:	b590      	push	{r4, r7, lr}
 8001380:	b085      	sub	sp, #20
 8001382:	af00      	add	r7, sp, #0
 8001384:	60f8      	str	r0, [r7, #12]
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ff0d 	bl	80011aa <_ZSt7forwardIsEOT_RNSt16remove_referenceIS0_E4typeE>
 8001390:	4603      	mov	r3, r0
 8001392:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	4619      	mov	r1, r3
 800139a:	2002      	movs	r0, #2
 800139c:	f7ff fb56 	bl	8000a4c <_ZnwjPv>
 80013a0:	4603      	mov	r3, r0
 80013a2:	4622      	mov	r2, r4
 80013a4:	801a      	strh	r2, [r3, #0]
 80013a6:	bf00      	nop
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd90      	pop	{r4, r7, pc}

080013ae <_ZNKSt5dequeIsSaIsEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f103 0218 	add.w	r2, r3, #24
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3308      	adds	r3, #8
 80013c0:	4619      	mov	r1, r3
 80013c2:	4610      	mov	r0, r2
 80013c4:	f000 f878 	bl	80014b8 <_ZStmiRKSt15_Deque_iteratorIsRsPsES4_>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <_ZNKSt5dequeIsSaIsEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff9d 	bl	800131c <_ZNKSt11_Deque_baseIsSaIsEE19_M_get_Tp_allocatorEv>
 80013e2:	4603      	mov	r3, r0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f000 f88b 	bl	8001500 <_ZNSt5dequeIsSaIsEE11_S_max_sizeERKS0_>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4618      	mov	r0, r3
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <_ZNSt5dequeIsSaIsEE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	1c5a      	adds	r2, r3, #1
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	6809      	ldr	r1, [r1, #0]
 800140e:	1a41      	subs	r1, r0, r1
 8001410:	1089      	asrs	r1, r1, #2
 8001412:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8001414:	429a      	cmp	r2, r3
 8001416:	d904      	bls.n	8001422 <_ZNSt5dequeIsSaIsEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8001418:	2200      	movs	r2, #0
 800141a:	6839      	ldr	r1, [r7, #0]
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 f889 	bl	8001534 <_ZNSt5dequeIsSaIsEE17_M_reallocate_mapEjb>
      }
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <_ZN9__gnu_cxx13new_allocatorIPsE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800142a:	b580      	push	{r7, lr}
 800142c:	b084      	sub	sp, #16
 800142e:	af00      	add	r7, sp, #0
 8001430:	60f8      	str	r0, [r7, #12]
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f000 f916 	bl	8001668 <_ZNK9__gnu_cxx13new_allocatorIPsE11_M_max_sizeEv>
 800143c:	4602      	mov	r2, r0
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	4293      	cmp	r3, r2
 8001442:	bf8c      	ite	hi
 8001444:	2301      	movhi	r3, #1
 8001446:	2300      	movls	r3, #0
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <_ZN9__gnu_cxx13new_allocatorIPsE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800144e:	f004 fb80 	bl	8005b52 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4618      	mov	r0, r3
 8001458:	f004 fb6a 	bl	8005b30 <_Znwj>
 800145c:	4603      	mov	r3, r0
      }
 800145e:	4618      	mov	r0, r3
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <_ZNSt16allocator_traitsISaIsEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001470:	2200      	movs	r2, #0
 8001472:	6839      	ldr	r1, [r7, #0]
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f000 f902 	bl	800167e <_ZN9__gnu_cxx13new_allocatorIsE8allocateEjPKv>
 800147a:	4603      	mov	r3, r0
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <_ZN9__gnu_cxx13new_allocatorIsE10deallocateEPsj>:
      deallocate(_Tp* __p, size_type __t)
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	4619      	mov	r1, r3
 8001496:	68b8      	ldr	r0, [r7, #8]
 8001498:	f004 fb48 	bl	8005b2c <_ZdlPvj>
      }
 800149c:	bf00      	nop
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <_ZN9__gnu_cxx13new_allocatorIPsEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4618      	mov	r0, r3
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <_ZStmiRKSt15_Deque_iteratorIsRsPsES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 80014c2:	f7ff ff14 	bl	80012ee <_ZNSt15_Deque_iteratorIsRsPsE14_S_buffer_sizeEv>
 80014c6:	4603      	mov	r3, r0
 80014c8:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	68da      	ldr	r2, [r3, #12]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	109b      	asrs	r3, r3, #2
 80014d6:	3b01      	subs	r3, #1
 80014d8:	fb01 f303 	mul.w	r3, r1, r3
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	6811      	ldr	r1, [r2, #0]
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	6852      	ldr	r2, [r2, #4]
 80014e4:	1a8a      	subs	r2, r1, r2
 80014e6:	1052      	asrs	r2, r2, #1
 80014e8:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	6891      	ldr	r1, [r2, #8]
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	6812      	ldr	r2, [r2, #0]
 80014f2:	1a8a      	subs	r2, r1, r2
 80014f4:	1052      	asrs	r2, r2, #1
 80014f6:	4413      	add	r3, r2
      }
 80014f8:	4618      	mov	r0, r3
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <_ZNSt5dequeIsSaIsEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8001508:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800150c:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 f8d3 	bl	80016ba <_ZNSt16allocator_traitsISaIsEE8max_sizeERKS0_>
 8001514:	4603      	mov	r3, r0
 8001516:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8001518:	f107 0208 	add.w	r2, r7, #8
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	4611      	mov	r1, r2
 8001522:	4618      	mov	r0, r3
 8001524:	f000 f8d5 	bl	80016d2 <_ZSt3minIjERKT_S2_S2_>
 8001528:	4603      	mov	r3, r0
 800152a:	681b      	ldr	r3, [r3, #0]
      }
 800152c:	4618      	mov	r0, r3
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <_ZNSt5dequeIsSaIsEE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8001534:	b590      	push	{r4, r7, lr}
 8001536:	b08b      	sub	sp, #44	; 0x2c
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	4613      	mov	r3, r2
 8001540:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	109b      	asrs	r3, r3, #2
 800154e:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8001550:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	6a3a      	ldr	r2, [r7, #32]
 8001556:	4413      	add	r3, r2
 8001558:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	685a      	ldr	r2, [r3, #4]
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	429a      	cmp	r2, r3
 8001564:	d92d      	bls.n	80015c2 <_ZNSt5dequeIsSaIsEE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	1acb      	subs	r3, r1, r3
 8001572:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8001574:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d002      	beq.n	8001582 <_ZNSt5dequeIsSaIsEE17_M_reallocate_mapEjb+0x4e>
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	e000      	b.n	8001584 <_ZNSt5dequeIsSaIsEE17_M_reallocate_mapEjb+0x50>
 8001582:	2300      	movs	r3, #0
 8001584:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8001586:	4413      	add	r3, r2
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001590:	429a      	cmp	r2, r3
 8001592:	d209      	bcs.n	80015a8 <_ZNSt5dequeIsSaIsEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 800159c:	3304      	adds	r3, #4
 800159e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a0:	4619      	mov	r1, r3
 80015a2:	f000 f8a9 	bl	80016f8 <_ZSt4copyIPPsS1_ET0_T_S3_S2_>
 80015a6:	e048      	b.n	800163a <_ZNSt5dequeIsSaIsEE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80015b0:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80015b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b8:	4413      	add	r3, r2
 80015ba:	461a      	mov	r2, r3
 80015bc:	f000 f8b4 	bl	8001728 <_ZSt13copy_backwardIPPsS1_ET0_T_S3_S2_>
 80015c0:	e03b      	b.n	800163a <_ZNSt5dequeIsSaIsEE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	3304      	adds	r3, #4
 80015ca:	f107 0208 	add.w	r2, r7, #8
 80015ce:	4611      	mov	r1, r2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fd48 	bl	8001066 <_ZSt3maxIjERKT_S2_S2_>
 80015d6:	4603      	mov	r3, r0
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 80015dc:	3302      	adds	r3, #2
 80015de:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	69b9      	ldr	r1, [r7, #24]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fd51 	bl	800108c <_ZNSt11_Deque_baseIsSaIsEE15_M_allocate_mapEj>
 80015ea:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	085b      	lsrs	r3, r3, #1
 80015f4:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d002      	beq.n	8001602 <_ZNSt5dequeIsSaIsEE17_M_reallocate_mapEjb+0xce>
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	e000      	b.n	8001604 <_ZNSt5dequeIsSaIsEE17_M_reallocate_mapEjb+0xd0>
 8001602:	2300      	movs	r3, #0
 8001604:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	4413      	add	r3, r2
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8001614:	3304      	adds	r3, #4
 8001616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001618:	4619      	mov	r1, r3
 800161a:	f000 f86d 	bl	80016f8 <_ZSt4copyIPPsS1_ET0_T_S3_S2_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6819      	ldr	r1, [r3, #0]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	461a      	mov	r2, r3
 800162a:	f7ff fca7 	bl	8000f7c <_ZNSt11_Deque_baseIsSaIsEE17_M_deallocate_mapEPPsj>

	  this->_M_impl._M_map = __new_map;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	3308      	adds	r3, #8
 800163e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fd5a 	bl	80010fa <_ZNSt15_Deque_iteratorIsRsPsE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f103 0018 	add.w	r0, r3, #24
 800164c:	6a3b      	ldr	r3, [r7, #32]
 800164e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001652:	3b01      	subs	r3, #1
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001658:	4413      	add	r3, r2
 800165a:	4619      	mov	r1, r3
 800165c:	f7ff fd4d 	bl	80010fa <_ZNSt15_Deque_iteratorIsRsPsE11_M_set_nodeEPS1_>
    }
 8001660:	bf00      	nop
 8001662:	372c      	adds	r7, #44	; 0x2c
 8001664:	46bd      	mov	sp, r7
 8001666:	bd90      	pop	{r4, r7, pc}

08001668 <_ZNK9__gnu_cxx13new_allocatorIPsE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001670:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8001674:	4618      	mov	r0, r3
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr

0800167e <_ZN9__gnu_cxx13new_allocatorIsE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800167e:	b580      	push	{r7, lr}
 8001680:	b084      	sub	sp, #16
 8001682:	af00      	add	r7, sp, #0
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f000 f864 	bl	8001758 <_ZNK9__gnu_cxx13new_allocatorIsE11_M_max_sizeEv>
 8001690:	4602      	mov	r2, r0
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	4293      	cmp	r3, r2
 8001696:	bf8c      	ite	hi
 8001698:	2301      	movhi	r3, #1
 800169a:	2300      	movls	r3, #0
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <_ZN9__gnu_cxx13new_allocatorIsE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80016a2:	f004 fa56 	bl	8005b52 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	4618      	mov	r0, r3
 80016ac:	f004 fa40 	bl	8005b30 <_Znwj>
 80016b0:	4603      	mov	r3, r0
      }
 80016b2:	4618      	mov	r0, r3
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <_ZNSt16allocator_traitsISaIsEE8max_sizeERKS0_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static _GLIBCXX20_CONSTEXPR size_type
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus <= 201703L
	return __a.max_size();
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 f853 	bl	800176e <_ZNK9__gnu_cxx13new_allocatorIsE8max_sizeEv>
 80016c8:	4603      	mov	r3, r0
#else
	return size_t(-1) / sizeof(value_type);
#endif
      }
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
 80016da:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d201      	bcs.n	80016ec <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	e000      	b.n	80016ee <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80016ec:	687b      	ldr	r3, [r7, #4]
    }
 80016ee:	4618      	mov	r0, r3
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr

080016f8 <_ZSt4copyIPPsS1_ET0_T_S3_S2_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80016f8:	b590      	push	{r4, r7, lr}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f000 f83e 	bl	8001786 <_ZSt12__miter_baseIPPsET_S2_>
 800170a:	4604      	mov	r4, r0
 800170c:	68b8      	ldr	r0, [r7, #8]
 800170e:	f000 f83a 	bl	8001786 <_ZSt12__miter_baseIPPsET_S2_>
 8001712:	4603      	mov	r3, r0
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	4619      	mov	r1, r3
 8001718:	4620      	mov	r0, r4
 800171a:	f000 f83e 	bl	800179a <_ZSt13__copy_move_aILb0EPPsS1_ET1_T0_S3_S2_>
 800171e:	4603      	mov	r3, r0
    }
 8001720:	4618      	mov	r0, r3
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	bd90      	pop	{r4, r7, pc}

08001728 <_ZSt13copy_backwardIPPsS1_ET0_T_S3_S2_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f000 f826 	bl	8001786 <_ZSt12__miter_baseIPPsET_S2_>
 800173a:	4604      	mov	r4, r0
 800173c:	68b8      	ldr	r0, [r7, #8]
 800173e:	f000 f822 	bl	8001786 <_ZSt12__miter_baseIPPsET_S2_>
 8001742:	4603      	mov	r3, r0
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	4619      	mov	r1, r3
 8001748:	4620      	mov	r0, r4
 800174a:	f000 f849 	bl	80017e0 <_ZSt22__copy_move_backward_aILb0EPPsS1_ET1_T0_S3_S2_>
 800174e:	4603      	mov	r3, r0
    }
 8001750:	4618      	mov	r0, r3
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	bd90      	pop	{r4, r7, pc}

08001758 <_ZNK9__gnu_cxx13new_allocatorIsE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001760:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr

0800176e <_ZNK9__gnu_cxx13new_allocatorIsE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff ffee 	bl	8001758 <_ZNK9__gnu_cxx13new_allocatorIsE11_M_max_sizeEv>
 800177c:	4603      	mov	r3, r0
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <_ZSt12__miter_baseIPPsET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4618      	mov	r0, r3
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr

0800179a <_ZSt13__copy_move_aILb0EPPsS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800179a:	b5b0      	push	{r4, r5, r7, lr}
 800179c:	b084      	sub	sp, #16
 800179e:	af00      	add	r7, sp, #0
 80017a0:	60f8      	str	r0, [r7, #12]
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80017a6:	68f8      	ldr	r0, [r7, #12]
 80017a8:	f000 f83d 	bl	8001826 <_ZSt12__niter_baseIPPsET_S2_>
 80017ac:	4604      	mov	r4, r0
 80017ae:	68b8      	ldr	r0, [r7, #8]
 80017b0:	f000 f839 	bl	8001826 <_ZSt12__niter_baseIPPsET_S2_>
 80017b4:	4605      	mov	r5, r0
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 f834 	bl	8001826 <_ZSt12__niter_baseIPPsET_S2_>
 80017be:	4603      	mov	r3, r0
 80017c0:	461a      	mov	r2, r3
 80017c2:	4629      	mov	r1, r5
 80017c4:	4620      	mov	r0, r4
 80017c6:	f000 f838 	bl	800183a <_ZSt14__copy_move_a1ILb0EPPsS1_ET1_T0_S3_S2_>
 80017ca:	4602      	mov	r2, r0
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 f842 	bl	800185a <_ZSt12__niter_wrapIPPsET_RKS2_S2_>
 80017d6:	4603      	mov	r3, r0
    }
 80017d8:	4618      	mov	r0, r3
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bdb0      	pop	{r4, r5, r7, pc}

080017e0 <_ZSt22__copy_move_backward_aILb0EPPsS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 80017e0:	b5b0      	push	{r4, r5, r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80017ec:	68f8      	ldr	r0, [r7, #12]
 80017ee:	f000 f81a 	bl	8001826 <_ZSt12__niter_baseIPPsET_S2_>
 80017f2:	4604      	mov	r4, r0
 80017f4:	68b8      	ldr	r0, [r7, #8]
 80017f6:	f000 f816 	bl	8001826 <_ZSt12__niter_baseIPPsET_S2_>
 80017fa:	4605      	mov	r5, r0
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f811 	bl	8001826 <_ZSt12__niter_baseIPPsET_S2_>
 8001804:	4603      	mov	r3, r0
 8001806:	461a      	mov	r2, r3
 8001808:	4629      	mov	r1, r5
 800180a:	4620      	mov	r0, r4
 800180c:	f000 f830 	bl	8001870 <_ZSt23__copy_move_backward_a1ILb0EPPsS1_ET1_T0_S3_S2_>
 8001810:	4602      	mov	r2, r0
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	4611      	mov	r1, r2
 8001816:	4618      	mov	r0, r3
 8001818:	f000 f81f 	bl	800185a <_ZSt12__niter_wrapIPPsET_RKS2_S2_>
 800181c:	4603      	mov	r3, r0
    }
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bdb0      	pop	{r4, r5, r7, pc}

08001826 <_ZSt12__niter_baseIPPsET_S2_>:
    __niter_base(_Iterator __it)
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4618      	mov	r0, r3
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr

0800183a <_ZSt14__copy_move_a1ILb0EPPsS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800183a:	b580      	push	{r7, lr}
 800183c:	b084      	sub	sp, #16
 800183e:	af00      	add	r7, sp, #0
 8001840:	60f8      	str	r0, [r7, #12]
 8001842:	60b9      	str	r1, [r7, #8]
 8001844:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	68b9      	ldr	r1, [r7, #8]
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f000 f820 	bl	8001890 <_ZSt14__copy_move_a2ILb0EPPsS1_ET1_T0_S3_S2_>
 8001850:	4603      	mov	r3, r0
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <_ZSt12__niter_wrapIPPsET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	6039      	str	r1, [r7, #0]
    { return __res; }
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <_ZSt23__copy_move_backward_a1ILb0EPPsS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	68b9      	ldr	r1, [r7, #8]
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f000 f815 	bl	80018b0 <_ZSt23__copy_move_backward_a2ILb0EPPsS1_ET1_T0_S3_S2_>
 8001886:	4603      	mov	r3, r0
 8001888:	4618      	mov	r0, r3
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <_ZSt14__copy_move_a2ILb0EPPsS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	68b9      	ldr	r1, [r7, #8]
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f000 f815 	bl	80018d0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPsEEPT_PKS4_S7_S5_>
 80018a6:	4603      	mov	r3, r0
    }
 80018a8:	4618      	mov	r0, r3
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <_ZSt23__copy_move_backward_a2ILb0EPPsS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	68b9      	ldr	r1, [r7, #8]
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f000 f822 	bl	800190a <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPsEEPT_PKS4_S7_S5_>
 80018c6:	4603      	mov	r3, r0
    }
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPsEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80018dc:	68ba      	ldr	r2, [r7, #8]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	109b      	asrs	r3, r3, #2
 80018e4:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d006      	beq.n	80018fa <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPsEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	461a      	mov	r2, r3
 80018f2:	68f9      	ldr	r1, [r7, #12]
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f004 fb0d 	bl	8005f14 <memmove>
	  return __result + _Num;
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	4413      	add	r3, r2
	}
 8001902:	4618      	mov	r0, r3
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPsEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800190a:	b580      	push	{r7, lr}
 800190c:	b086      	sub	sp, #24
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	109b      	asrs	r3, r3, #2
 800191e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d00a      	beq.n	800193c <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPsEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	425b      	negs	r3, r3
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	18d0      	adds	r0, r2, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	461a      	mov	r2, r3
 8001936:	68f9      	ldr	r1, [r7, #12]
 8001938:	f004 faec 	bl	8005f14 <memmove>
	  return __result - _Num;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	425b      	negs	r3, r3
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	4413      	add	r3, r2
	}
 8001946:	4618      	mov	r0, r3
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <_ZN12ControlClassD1Ev>:
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	3338      	adds	r3, #56	; 0x38
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff f895 	bl	8000a8a <_ZNSt5queueIsSt5dequeIsSaIsEEED1Ev>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3310      	adds	r3, #16
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff f890 	bl	8000a8a <_ZNSt5queueIsSt5dequeIsSaIsEEED1Ev>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <_Z41__static_initialization_and_destruction_0ii>:
	}
	if (delta){
		return (uint8_t)(1 + 70*(delta/45));
	}
	return 0;
}
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d107      	bne.n	8001994 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800198a:	4293      	cmp	r3, r2
 800198c:	d102      	bne.n	8001994 <_Z41__static_initialization_and_destruction_0ii+0x20>
ControlClass ControlSystem;
 800198e:	4809      	ldr	r0, [pc, #36]	; (80019b4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001990:	f7ff f88a 	bl	8000aa8 <_ZN12ControlClassC1Ev>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d107      	bne.n	80019aa <_Z41__static_initialization_and_destruction_0ii+0x36>
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d102      	bne.n	80019aa <_Z41__static_initialization_and_destruction_0ii+0x36>
 80019a4:	4803      	ldr	r0, [pc, #12]	; (80019b4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80019a6:	f7ff ffd2 	bl	800194e <_ZN12ControlClassD1Ev>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000090 	.word	0x20000090

080019b8 <_GLOBAL__sub_I_ControlSystem>:
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019c0:	2001      	movs	r0, #1
 80019c2:	f7ff ffd7 	bl	8001974 <_Z41__static_initialization_and_destruction_0ii>
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <_GLOBAL__sub_D_ControlSystem>:
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019d0:	2000      	movs	r0, #0
 80019d2:	f7ff ffcf 	bl	8001974 <_Z41__static_initialization_and_destruction_0ii>
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b092      	sub	sp, #72	; 0x48
 80019dc:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019de:	f000 fe53 	bl	8002688 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019e2:	f000 f919 	bl	8001c18 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019e6:	f000 fb4f 	bl	8002088 <_ZL12MX_GPIO_Initv>
  MX_ADC2_Init();
 80019ea:	f000 f975 	bl	8001cd8 <_ZL12MX_ADC2_Initv>
  MX_SPI1_Init();
 80019ee:	f000 f9e5 	bl	8001dbc <_ZL12MX_SPI1_Initv>
  MX_TIM1_Init();
 80019f2:	f000 fa1f 	bl	8001e34 <_ZL12MX_TIM1_Initv>
  MX_USART2_UART_Init();
 80019f6:	f000 faeb 	bl	8001fd0 <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 80019fa:	f000 fb17 	bl	800202c <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */

  //Configure Accelerometer using PA4 for CSn, in SPI mode
  MC3479.setSerialSPI(&hspi1, GPIOA, SPI1_CSn_Pin);
 80019fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a02:	4a7c      	ldr	r2, [pc, #496]	; (8001bf4 <main+0x21c>)
 8001a04:	497c      	ldr	r1, [pc, #496]	; (8001bf8 <main+0x220>)
 8001a06:	487d      	ldr	r0, [pc, #500]	; (8001bfc <main+0x224>)
 8001a08:	f003 fde6 	bl	80055d8 <_ZN11MC3479Class12setSerialSPIEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
  MC3479.configAccelerometer();
 8001a0c:	487b      	ldr	r0, [pc, #492]	; (8001bfc <main+0x224>)
 8001a0e:	f003 fe9e 	bl	800574e <_ZN11MC3479Class19configAccelerometerEv>

  //Configure GPIO variables for x-axis
  MP6543H.x_configMotorController(TIM_CHANNEL_1, &htim1,
 8001a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a16:	9306      	str	r3, [sp, #24]
 8001a18:	4b79      	ldr	r3, [pc, #484]	; (8001c00 <main+0x228>)
 8001a1a:	9305      	str	r3, [sp, #20]
 8001a1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a20:	9304      	str	r3, [sp, #16]
 8001a22:	4b77      	ldr	r3, [pc, #476]	; (8001c00 <main+0x228>)
 8001a24:	9303      	str	r3, [sp, #12]
 8001a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a2a:	9302      	str	r3, [sp, #8]
 8001a2c:	4b74      	ldr	r3, [pc, #464]	; (8001c00 <main+0x228>)
 8001a2e:	9301      	str	r3, [sp, #4]
 8001a30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	4b72      	ldr	r3, [pc, #456]	; (8001c00 <main+0x228>)
 8001a38:	4a72      	ldr	r2, [pc, #456]	; (8001c04 <main+0x22c>)
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4872      	ldr	r0, [pc, #456]	; (8001c08 <main+0x230>)
 8001a3e:	f003 ff66 	bl	800590e <_ZN12MP6543HClass23x_configMotorControllerEtP17TIM_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>
		  	  	  	  	  	  	  GPIOB, MP6543H_DIR_X_Pin,
								  	  GPIOB, MP6543H_nBRAKE_X_Pin,
									  	  GPIOB, MP6543H_nSLEEP_X_Pin,
										  	  GPIOB, MP6543H_nFAULT_X_Pin);
  // Configure GPIO variables for y-axis
  MP6543H.y_configMotorController(TIM_CHANNEL_2, &htim1,
 8001a42:	2304      	movs	r3, #4
 8001a44:	9306      	str	r3, [sp, #24]
 8001a46:	4b6e      	ldr	r3, [pc, #440]	; (8001c00 <main+0x228>)
 8001a48:	9305      	str	r3, [sp, #20]
 8001a4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a4e:	9304      	str	r3, [sp, #16]
 8001a50:	4b68      	ldr	r3, [pc, #416]	; (8001bf4 <main+0x21c>)
 8001a52:	9303      	str	r3, [sp, #12]
 8001a54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a58:	9302      	str	r3, [sp, #8]
 8001a5a:	4b66      	ldr	r3, [pc, #408]	; (8001bf4 <main+0x21c>)
 8001a5c:	9301      	str	r3, [sp, #4]
 8001a5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	4b63      	ldr	r3, [pc, #396]	; (8001bf4 <main+0x21c>)
 8001a66:	4a67      	ldr	r2, [pc, #412]	; (8001c04 <main+0x22c>)
 8001a68:	2104      	movs	r1, #4
 8001a6a:	4867      	ldr	r0, [pc, #412]	; (8001c08 <main+0x230>)
 8001a6c:	f003 ffe6 	bl	8005a3c <_ZN12MP6543HClass23y_configMotorControllerEtP17TIM_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>
// TODO: implement sleep routine
//  int inactivity_counter = 0;
//  bool x_inactive = false;
//  bool y_inactive = false;

  int16_t x_theta = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	84fb      	strh	r3, [r7, #38]	; 0x26
  int16_t y_theta = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t x_nominal = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	847b      	strh	r3, [r7, #34]	; 0x22
  int16_t y_nominal = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	843b      	strh	r3, [r7, #32]
  uint8_t xPWM = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	77fb      	strb	r3, [r7, #31]
  uint8_t yPWM = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	77bb      	strb	r3, [r7, #30]
  int8_t allowableAngle = 5;
 8001a88:	2305      	movs	r3, #5
 8001a8a:	777b      	strb	r3, [r7, #29]

  ControlSystem.updateControlSystem(x_nominal, y_nominal, allowableAngle, allowableAngle);
 8001a8c:	f997 001d 	ldrsb.w	r0, [r7, #29]
 8001a90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001a94:	f9b7 1022 	ldrsh.w	r1, [r7, #34]	; 0x22
 8001a98:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	485a      	ldr	r0, [pc, #360]	; (8001c0c <main+0x234>)
 8001aa2:	f7ff f895 	bl	8000bd0 <_ZN12ControlClass19updateControlSystemEssaa>

#ifdef	 __SIMULINK_EN
	  //UART3 used for Simulink output/input
  uint8_t SimulinkPwm[2] = {0};
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	81bb      	strh	r3, [r7, #12]
  uint8_t Simulink_Packet[8] = {0};
 8001aaa:	2300      	movs	r3, #0
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60bb      	str	r3, [r7, #8]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  TIM1->CCR1 = 66;
 8001ab2:	4b57      	ldr	r3, [pc, #348]	; (8001c10 <main+0x238>)
 8001ab4:	2242      	movs	r2, #66	; 0x42
 8001ab6:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4852      	ldr	r0, [pc, #328]	; (8001c04 <main+0x22c>)
 8001abc:	f002 fdfa 	bl	80046b4 <HAL_TIM_PWM_Start>
  TIM1->CCR2 = 33;
 8001ac0:	4b53      	ldr	r3, [pc, #332]	; (8001c10 <main+0x238>)
 8001ac2:	2221      	movs	r2, #33	; 0x21
 8001ac4:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001ac6:	2104      	movs	r1, #4
 8001ac8:	484e      	ldr	r0, [pc, #312]	; (8001c04 <main+0x22c>)
 8001aca:	f002 fdf3 	bl	80046b4 <HAL_TIM_PWM_Start>
  while (1)
  {
	  // Brake if any motor fault or if tilt button is pressed.
	  while(HAL_GPIO_ReadPin(nTILT_BUTTON_GPIO_Port, nTILT_BUTTON_Pin) == 0){
 8001ace:	2102      	movs	r1, #2
 8001ad0:	4848      	ldr	r0, [pc, #288]	; (8001bf4 <main+0x21c>)
 8001ad2:	f001 fad9 	bl	8003088 <HAL_GPIO_ReadPin>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	bf0c      	ite	eq
 8001adc:	2301      	moveq	r3, #1
 8001ade:	2300      	movne	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00b      	beq.n	8001afe <main+0x126>
//		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
		  MP6543H.x_motorBrake(true);
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	4847      	ldr	r0, [pc, #284]	; (8001c08 <main+0x230>)
 8001aea:	f003 ff72 	bl	80059d2 <_ZN12MP6543HClass12x_motorBrakeEb>
		  MP6543H.y_motorBrake(true);
 8001aee:	2101      	movs	r1, #1
 8001af0:	4845      	ldr	r0, [pc, #276]	; (8001c08 <main+0x230>)
 8001af2:	f003 ffe6 	bl	8005ac2 <_ZN12MP6543HClass12y_motorBrakeEb>
		  HAL_Delay(1);
 8001af6:	2001      	movs	r0, #1
 8001af8:	f000 fe28 	bl	800274c <HAL_Delay>
	  while(HAL_GPIO_ReadPin(nTILT_BUTTON_GPIO_Port, nTILT_BUTTON_Pin) == 0){
 8001afc:	e7e7      	b.n	8001ace <main+0xf6>
	  }
	  while(MP6543H.x_motorFault() || MP6543H.y_motorFault()){
 8001afe:	4842      	ldr	r0, [pc, #264]	; (8001c08 <main+0x230>)
 8001b00:	f003 ff86 	bl	8005a10 <_ZN12MP6543HClass12x_motorFaultEv>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d105      	bne.n	8001b16 <main+0x13e>
 8001b0a:	483f      	ldr	r0, [pc, #252]	; (8001c08 <main+0x230>)
 8001b0c:	f003 fff8 	bl	8005b00 <_ZN12MP6543HClass12y_motorFaultEv>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <main+0x142>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <main+0x144>
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d008      	beq.n	8001b32 <main+0x15a>
//		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
		  MP6543H.x_motorBrake(true);
 8001b20:	2101      	movs	r1, #1
 8001b22:	4839      	ldr	r0, [pc, #228]	; (8001c08 <main+0x230>)
 8001b24:	f003 ff55 	bl	80059d2 <_ZN12MP6543HClass12x_motorBrakeEb>
		  MP6543H.y_motorBrake(true);
 8001b28:	2101      	movs	r1, #1
 8001b2a:	4837      	ldr	r0, [pc, #220]	; (8001c08 <main+0x230>)
 8001b2c:	f003 ffc9 	bl	8005ac2 <_ZN12MP6543HClass12y_motorBrakeEb>
	  while(MP6543H.x_motorFault() || MP6543H.y_motorFault()){
 8001b30:	e7e5      	b.n	8001afe <main+0x126>
		  //This should allow us to see how long (approximately) we stay in the nFault loop
		  uint8_t fault_current [2] = {0xFF, 0xFF};
		  HAL_UART_Transmit(&huart3, &fault_current[0], sizeof(fault_current), HAL_MAX_DELAY);
#endif
	  }
	  MP6543H.x_motorBrake(false);
 8001b32:	2100      	movs	r1, #0
 8001b34:	4834      	ldr	r0, [pc, #208]	; (8001c08 <main+0x230>)
 8001b36:	f003 ff4c 	bl	80059d2 <_ZN12MP6543HClass12x_motorBrakeEb>
	  MP6543H.y_motorBrake(false);
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4832      	ldr	r0, [pc, #200]	; (8001c08 <main+0x230>)
 8001b3e:	f003 ffc0 	bl	8005ac2 <_ZN12MP6543HClass12y_motorBrakeEb>

#ifdef __NORMAL_MODE_EN


	  // fetch and normalize theta:
	  MC3479.getXYZ(xData, yData, zData);
 8001b42:	f107 0310 	add.w	r3, r7, #16
 8001b46:	f107 0214 	add.w	r2, r7, #20
 8001b4a:	f107 0118 	add.w	r1, r7, #24
 8001b4e:	482b      	ldr	r0, [pc, #172]	; (8001bfc <main+0x224>)
 8001b50:	f003 feb5 	bl	80058be <_ZN11MC3479Class6getXYZEPhS0_S0_>
	  x_theta = ControlSystem.normalizeTheta(xData[0], xData[1], zData[0], zData[1]);
 8001b54:	7e39      	ldrb	r1, [r7, #24]
 8001b56:	7e7a      	ldrb	r2, [r7, #25]
 8001b58:	7c38      	ldrb	r0, [r7, #16]
 8001b5a:	7c7b      	ldrb	r3, [r7, #17]
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	4603      	mov	r3, r0
 8001b60:	482a      	ldr	r0, [pc, #168]	; (8001c0c <main+0x234>)
 8001b62:	f7ff f80d 	bl	8000b80 <_ZN12ControlClass14normalizeThetaEhhhh>
 8001b66:	4603      	mov	r3, r0
 8001b68:	84fb      	strh	r3, [r7, #38]	; 0x26
	  y_theta = ControlSystem.normalizeTheta(yData[0], yData[1], zData[0], zData[1]);
 8001b6a:	7d39      	ldrb	r1, [r7, #20]
 8001b6c:	7d7a      	ldrb	r2, [r7, #21]
 8001b6e:	7c38      	ldrb	r0, [r7, #16]
 8001b70:	7c7b      	ldrb	r3, [r7, #17]
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	4603      	mov	r3, r0
 8001b76:	4825      	ldr	r0, [pc, #148]	; (8001c0c <main+0x234>)
 8001b78:	f7ff f802 	bl	8000b80 <_ZN12ControlClass14normalizeThetaEhhhh>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	84bb      	strh	r3, [r7, #36]	; 0x24
#ifdef	 __SIMULINK_EN

	  // NOTE: UART3 used for Simulink output/input

	  // Construct the Simulink Packet:
	  Simulink_Packet[0] = (uint8_t)(x_theta & 0x00FF); // Bottom 8 bits of xTheta
 8001b80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	713b      	strb	r3, [r7, #4]
	  Simulink_Packet[1] = (uint8_t)(x_theta >> 8);		// Upper 8 bits of xTheta
 8001b86:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001b8a:	121b      	asrs	r3, r3, #8
 8001b8c:	b21b      	sxth	r3, r3
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	717b      	strb	r3, [r7, #5]
	  Simulink_Packet[2] = 0;							// Bottom 8 bits of xNominal
 8001b92:	2300      	movs	r3, #0
 8001b94:	71bb      	strb	r3, [r7, #6]
	  Simulink_Packet[3] = 0;							// Upper 8 bits of xNominal
 8001b96:	2300      	movs	r3, #0
 8001b98:	71fb      	strb	r3, [r7, #7]
	  Simulink_Packet[4] = (uint8_t)(y_theta & 0x00FF);	// Bottom 8 bits of yTheta
 8001b9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	723b      	strb	r3, [r7, #8]
	  Simulink_Packet[5] = (uint8_t)(y_theta >> 8);		// Upper 8 bits of yTheta
 8001ba0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001ba4:	121b      	asrs	r3, r3, #8
 8001ba6:	b21b      	sxth	r3, r3
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	727b      	strb	r3, [r7, #9]
	  Simulink_Packet[6] = 0;							// Bottom 8 bits of yNominal
 8001bac:	2300      	movs	r3, #0
 8001bae:	72bb      	strb	r3, [r7, #10]
	  Simulink_Packet[7] = 0;							// Upper 8 bits of yNominal
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	72fb      	strb	r3, [r7, #11]

// Send the Simulink Packet - Least significant Byte first - Byte 0 : Byte 7
// dividing simulink packet size by 4 to only send x_theta
//	  HAL_UART_Transmit(&huart3, &Simulink_Packet[0], sizeof(Simulink_Packet)/4, 10);
	  HAL_UART_Transmit(&huart3, &Simulink_Packet[4], sizeof(Simulink_Packet)/4, 10);
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	1d19      	adds	r1, r3, #4
 8001bb8:	230a      	movs	r3, #10
 8001bba:	2202      	movs	r2, #2
 8001bbc:	4815      	ldr	r0, [pc, #84]	; (8001c14 <main+0x23c>)
 8001bbe:	f003 fba1 	bl	8005304 <HAL_UART_Transmit>
// Update X-axis PWM control:
//		  xPWM = SimulinkPwm[0];

// TEMPORARY IN-CODE P-CONTROL (ANISH)
//	  	  xPWM = (y_theta < 0) ? (int16_t)(-y_theta/2) : (int16_t)(y_theta/2); 	// Set xPWM to 50% Theta
	  	  MP6543H.x_motorBrake(true);											// Stop driving motor temporarily
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	4810      	ldr	r0, [pc, #64]	; (8001c08 <main+0x230>)
 8001bc6:	f003 ff04 	bl	80059d2 <_ZN12MP6543HClass12x_motorBrakeEb>
	  	  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); 								// Stop PWM output temporarily to update
 8001bca:	2100      	movs	r1, #0
 8001bcc:	480d      	ldr	r0, [pc, #52]	; (8001c04 <main+0x22c>)
 8001bce:	f002 fe13 	bl	80047f8 <HAL_TIM_PWM_Stop>
//	  	  TIM1->CCR1 = xPWM;													// Update duty-cycle register with new duty%
	  	  MP6543H.x_setMotorDir(1);
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	480c      	ldr	r0, [pc, #48]	; (8001c08 <main+0x230>)
 8001bd6:	f003 fedd 	bl	8005994 <_ZN12MP6543HClass13x_setMotorDirEb>
	  	  TIM1->CCR1 = 50;
 8001bda:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <main+0x238>)
 8001bdc:	2232      	movs	r2, #50	; 0x32
 8001bde:	635a      	str	r2, [r3, #52]	; 0x34
	  	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);								// Restart PWM output
 8001be0:	2100      	movs	r1, #0
 8001be2:	4808      	ldr	r0, [pc, #32]	; (8001c04 <main+0x22c>)
 8001be4:	f002 fd66 	bl	80046b4 <HAL_TIM_PWM_Start>
	  	  MP6543H.x_motorBrake(false);											// Release the x motor again
 8001be8:	2100      	movs	r1, #0
 8001bea:	4807      	ldr	r0, [pc, #28]	; (8001c08 <main+0x230>)
 8001bec:	f003 fef1 	bl	80059d2 <_ZN12MP6543HClass12x_motorBrakeEb>
	  while(HAL_GPIO_ReadPin(nTILT_BUTTON_GPIO_Port, nTILT_BUTTON_Pin) == 0){
 8001bf0:	e76d      	b.n	8001ace <main+0xf6>
 8001bf2:	bf00      	nop
 8001bf4:	40010800 	.word	0x40010800
 8001bf8:	20000120 	.word	0x20000120
 8001bfc:	20000250 	.word	0x20000250
 8001c00:	40010c00 	.word	0x40010c00
 8001c04:	20000178 	.word	0x20000178
 8001c08:	20000264 	.word	0x20000264
 8001c0c:	20000090 	.word	0x20000090
 8001c10:	40012c00 	.word	0x40012c00
 8001c14:	20000204 	.word	0x20000204

08001c18 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b094      	sub	sp, #80	; 0x50
 8001c1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c22:	2228      	movs	r2, #40	; 0x28
 8001c24:	2100      	movs	r1, #0
 8001c26:	4618      	mov	r0, r3
 8001c28:	f004 f98e 	bl	8005f48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c3c:	1d3b      	adds	r3, r7, #4
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	609a      	str	r2, [r3, #8]
 8001c46:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c50:	2310      	movs	r3, #16
 8001c52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c54:	2300      	movs	r3, #0
 8001c56:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f001 fa43 	bl	80030e8 <HAL_RCC_OscConfig>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	bf14      	ite	ne
 8001c68:	2301      	movne	r3, #1
 8001c6a:	2300      	moveq	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <_Z18SystemClock_Configv+0x5e>
  {
    Error_Handler();
 8001c72:	f000 faa1 	bl	80021b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c76:	230f      	movs	r3, #15
 8001c78:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c82:	2300      	movs	r3, #0
 8001c84:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c86:	2300      	movs	r3, #0
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c8a:	f107 0314 	add.w	r3, r7, #20
 8001c8e:	2100      	movs	r1, #0
 8001c90:	4618      	mov	r0, r3
 8001c92:	f001 fcab 	bl	80035ec <HAL_RCC_ClockConfig>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	bf14      	ite	ne
 8001c9c:	2301      	movne	r3, #1
 8001c9e:	2300      	moveq	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <_Z18SystemClock_Configv+0x92>
  {
    Error_Handler();
 8001ca6:	f000 fa87 	bl	80021b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001caa:	2302      	movs	r3, #2
 8001cac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cb2:	1d3b      	adds	r3, r7, #4
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f001 fe33 	bl	8003920 <HAL_RCCEx_PeriphCLKConfig>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	bf14      	ite	ne
 8001cc0:	2301      	movne	r3, #1
 8001cc2:	2300      	moveq	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8001cca:	f000 fa75 	bl	80021b8 <Error_Handler>
  }
}
 8001cce:	bf00      	nop
 8001cd0:	3750      	adds	r7, #80	; 0x50
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
	...

08001cd8 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001ce8:	4b32      	ldr	r3, [pc, #200]	; (8001db4 <_ZL12MX_ADC2_Initv+0xdc>)
 8001cea:	4a33      	ldr	r2, [pc, #204]	; (8001db8 <_ZL12MX_ADC2_Initv+0xe0>)
 8001cec:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001cee:	4b31      	ldr	r3, [pc, #196]	; (8001db4 <_ZL12MX_ADC2_Initv+0xdc>)
 8001cf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cf4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001cf6:	4b2f      	ldr	r3, [pc, #188]	; (8001db4 <_ZL12MX_ADC2_Initv+0xdc>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = ENABLE;
 8001cfc:	4b2d      	ldr	r3, [pc, #180]	; (8001db4 <_ZL12MX_ADC2_Initv+0xdc>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	751a      	strb	r2, [r3, #20]
  hadc2.Init.NbrOfDiscConversion = 3;
 8001d02:	4b2c      	ldr	r3, [pc, #176]	; (8001db4 <_ZL12MX_ADC2_Initv+0xdc>)
 8001d04:	2203      	movs	r2, #3
 8001d06:	619a      	str	r2, [r3, #24]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d08:	4b2a      	ldr	r3, [pc, #168]	; (8001db4 <_ZL12MX_ADC2_Initv+0xdc>)
 8001d0a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001d0e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d10:	4b28      	ldr	r3, [pc, #160]	; (8001db4 <_ZL12MX_ADC2_Initv+0xdc>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 3;
 8001d16:	4b27      	ldr	r3, [pc, #156]	; (8001db4 <_ZL12MX_ADC2_Initv+0xdc>)
 8001d18:	2203      	movs	r2, #3
 8001d1a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001d1c:	4825      	ldr	r0, [pc, #148]	; (8001db4 <_ZL12MX_ADC2_Initv+0xdc>)
 8001d1e:	f000 fd39 	bl	8002794 <HAL_ADC_Init>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	bf14      	ite	ne
 8001d28:	2301      	movne	r3, #1
 8001d2a:	2300      	moveq	r3, #0
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <_ZL12MX_ADC2_Initv+0x5e>
  {
    Error_Handler();
 8001d32:	f000 fa41 	bl	80021b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001d36:	2304      	movs	r3, #4
 8001d38:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	4619      	mov	r1, r3
 8001d46:	481b      	ldr	r0, [pc, #108]	; (8001db4 <_ZL12MX_ADC2_Initv+0xdc>)
 8001d48:	f000 fdfc 	bl	8002944 <HAL_ADC_ConfigChannel>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	bf14      	ite	ne
 8001d52:	2301      	movne	r3, #1
 8001d54:	2300      	moveq	r3, #0
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <_ZL12MX_ADC2_Initv+0x88>
  {
    Error_Handler();
 8001d5c:	f000 fa2c 	bl	80021b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001d60:	2305      	movs	r3, #5
 8001d62:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001d64:	2302      	movs	r3, #2
 8001d66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d68:	1d3b      	adds	r3, r7, #4
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4811      	ldr	r0, [pc, #68]	; (8001db4 <_ZL12MX_ADC2_Initv+0xdc>)
 8001d6e:	f000 fde9 	bl	8002944 <HAL_ADC_ConfigChannel>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	bf14      	ite	ne
 8001d78:	2301      	movne	r3, #1
 8001d7a:	2300      	moveq	r3, #0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <_ZL12MX_ADC2_Initv+0xae>
  {
    Error_Handler();
 8001d82:	f000 fa19 	bl	80021b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001d86:	2306      	movs	r3, #6
 8001d88:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d8e:	1d3b      	adds	r3, r7, #4
 8001d90:	4619      	mov	r1, r3
 8001d92:	4808      	ldr	r0, [pc, #32]	; (8001db4 <_ZL12MX_ADC2_Initv+0xdc>)
 8001d94:	f000 fdd6 	bl	8002944 <HAL_ADC_ConfigChannel>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	bf14      	ite	ne
 8001d9e:	2301      	movne	r3, #1
 8001da0:	2300      	moveq	r3, #0
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <_ZL12MX_ADC2_Initv+0xd4>
  {
    Error_Handler();
 8001da8:	f000 fa06 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001dac:	bf00      	nop
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	200000f0 	.word	0x200000f0
 8001db8:	40012800 	.word	0x40012800

08001dbc <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001dc0:	4b1a      	ldr	r3, [pc, #104]	; (8001e2c <_ZL12MX_SPI1_Initv+0x70>)
 8001dc2:	4a1b      	ldr	r2, [pc, #108]	; (8001e30 <_ZL12MX_SPI1_Initv+0x74>)
 8001dc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001dc6:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <_ZL12MX_SPI1_Initv+0x70>)
 8001dc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001dcc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001dce:	4b17      	ldr	r3, [pc, #92]	; (8001e2c <_ZL12MX_SPI1_Initv+0x70>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dd4:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <_ZL12MX_SPI1_Initv+0x70>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dda:	4b14      	ldr	r3, [pc, #80]	; (8001e2c <_ZL12MX_SPI1_Initv+0x70>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001de0:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <_ZL12MX_SPI1_Initv+0x70>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001de6:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <_ZL12MX_SPI1_Initv+0x70>)
 8001de8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dee:	4b0f      	ldr	r3, [pc, #60]	; (8001e2c <_ZL12MX_SPI1_Initv+0x70>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001df4:	4b0d      	ldr	r3, [pc, #52]	; (8001e2c <_ZL12MX_SPI1_Initv+0x70>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dfa:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <_ZL12MX_SPI1_Initv+0x70>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e00:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <_ZL12MX_SPI1_Initv+0x70>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e06:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <_ZL12MX_SPI1_Initv+0x70>)
 8001e08:	220a      	movs	r2, #10
 8001e0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e0c:	4807      	ldr	r0, [pc, #28]	; (8001e2c <_ZL12MX_SPI1_Initv+0x70>)
 8001e0e:	f001 fe3d 	bl	8003a8c <HAL_SPI_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	bf14      	ite	ne
 8001e18:	2301      	movne	r3, #1
 8001e1a:	2300      	moveq	r3, #0
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8001e22:	f000 f9c9 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000120 	.word	0x20000120
 8001e30:	40013000 	.word	0x40013000

08001e34 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b096      	sub	sp, #88	; 0x58
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	605a      	str	r2, [r3, #4]
 8001e44:	609a      	str	r2, [r3, #8]
 8001e46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	609a      	str	r2, [r3, #8]
 8001e5e:	60da      	str	r2, [r3, #12]
 8001e60:	611a      	str	r2, [r3, #16]
 8001e62:	615a      	str	r2, [r3, #20]
 8001e64:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e66:	1d3b      	adds	r3, r7, #4
 8001e68:	2220      	movs	r2, #32
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f004 f86b 	bl	8005f48 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e72:	4b55      	ldr	r3, [pc, #340]	; (8001fc8 <_ZL12MX_TIM1_Initv+0x194>)
 8001e74:	4a55      	ldr	r2, [pc, #340]	; (8001fcc <_ZL12MX_TIM1_Initv+0x198>)
 8001e76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e78:	4b53      	ldr	r3, [pc, #332]	; (8001fc8 <_ZL12MX_TIM1_Initv+0x194>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7e:	4b52      	ldr	r3, [pc, #328]	; (8001fc8 <_ZL12MX_TIM1_Initv+0x194>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8001e84:	4b50      	ldr	r3, [pc, #320]	; (8001fc8 <_ZL12MX_TIM1_Initv+0x194>)
 8001e86:	2264      	movs	r2, #100	; 0x64
 8001e88:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e8a:	4b4f      	ldr	r3, [pc, #316]	; (8001fc8 <_ZL12MX_TIM1_Initv+0x194>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e90:	4b4d      	ldr	r3, [pc, #308]	; (8001fc8 <_ZL12MX_TIM1_Initv+0x194>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e96:	4b4c      	ldr	r3, [pc, #304]	; (8001fc8 <_ZL12MX_TIM1_Initv+0x194>)
 8001e98:	2280      	movs	r2, #128	; 0x80
 8001e9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e9c:	484a      	ldr	r0, [pc, #296]	; (8001fc8 <_ZL12MX_TIM1_Initv+0x194>)
 8001e9e:	f002 fb61 	bl	8004564 <HAL_TIM_Base_Init>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	bf14      	ite	ne
 8001ea8:	2301      	movne	r3, #1
 8001eaa:	2300      	moveq	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <_ZL12MX_TIM1_Initv+0x82>
  {
    Error_Handler();
 8001eb2:	f000 f981 	bl	80021b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ebc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4841      	ldr	r0, [pc, #260]	; (8001fc8 <_ZL12MX_TIM1_Initv+0x194>)
 8001ec4:	f002 fdba 	bl	8004a3c <HAL_TIM_ConfigClockSource>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	bf14      	ite	ne
 8001ece:	2301      	movne	r3, #1
 8001ed0:	2300      	moveq	r3, #0
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <_ZL12MX_TIM1_Initv+0xa8>
  {
    Error_Handler();
 8001ed8:	f000 f96e 	bl	80021b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001edc:	483a      	ldr	r0, [pc, #232]	; (8001fc8 <_ZL12MX_TIM1_Initv+0x194>)
 8001ede:	f002 fb90 	bl	8004602 <HAL_TIM_PWM_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	bf14      	ite	ne
 8001ee8:	2301      	movne	r3, #1
 8001eea:	2300      	moveq	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <_ZL12MX_TIM1_Initv+0xc2>
  {
    Error_Handler();
 8001ef2:	f000 f961 	bl	80021b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001efe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f02:	4619      	mov	r1, r3
 8001f04:	4830      	ldr	r0, [pc, #192]	; (8001fc8 <_ZL12MX_TIM1_Initv+0x194>)
 8001f06:	f003 f901 	bl	800510c <HAL_TIMEx_MasterConfigSynchronization>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	bf14      	ite	ne
 8001f10:	2301      	movne	r3, #1
 8001f12:	2300      	moveq	r3, #0
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <_ZL12MX_TIM1_Initv+0xea>
  {
    Error_Handler();
 8001f1a:	f000 f94d 	bl	80021b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f1e:	2360      	movs	r3, #96	; 0x60
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 50;
 8001f22:	2332      	movs	r3, #50	; 0x32
 8001f24:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f26:	2300      	movs	r3, #0
 8001f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f32:	2300      	movs	r3, #0
 8001f34:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f36:	2300      	movs	r3, #0
 8001f38:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f3e:	2200      	movs	r2, #0
 8001f40:	4619      	mov	r1, r3
 8001f42:	4821      	ldr	r0, [pc, #132]	; (8001fc8 <_ZL12MX_TIM1_Initv+0x194>)
 8001f44:	f002 fcbc 	bl	80048c0 <HAL_TIM_PWM_ConfigChannel>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	bf14      	ite	ne
 8001f4e:	2301      	movne	r3, #1
 8001f50:	2300      	moveq	r3, #0
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <_ZL12MX_TIM1_Initv+0x128>
  {
    Error_Handler();
 8001f58:	f000 f92e 	bl	80021b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f60:	2204      	movs	r2, #4
 8001f62:	4619      	mov	r1, r3
 8001f64:	4818      	ldr	r0, [pc, #96]	; (8001fc8 <_ZL12MX_TIM1_Initv+0x194>)
 8001f66:	f002 fcab 	bl	80048c0 <HAL_TIM_PWM_ConfigChannel>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	bf14      	ite	ne
 8001f70:	2301      	movne	r3, #1
 8001f72:	2300      	moveq	r3, #0
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <_ZL12MX_TIM1_Initv+0x14a>
  {
    Error_Handler();
 8001f7a:	f000 f91d 	bl	80021b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f82:	2300      	movs	r3, #0
 8001f84:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f86:	2300      	movs	r3, #0
 8001f88:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f96:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f9c:	1d3b      	adds	r3, r7, #4
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4809      	ldr	r0, [pc, #36]	; (8001fc8 <_ZL12MX_TIM1_Initv+0x194>)
 8001fa2:	f003 f911 	bl	80051c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	bf14      	ite	ne
 8001fac:	2301      	movne	r3, #1
 8001fae:	2300      	moveq	r3, #0
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <_ZL12MX_TIM1_Initv+0x186>
  {
    Error_Handler();
 8001fb6:	f000 f8ff 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001fba:	4803      	ldr	r0, [pc, #12]	; (8001fc8 <_ZL12MX_TIM1_Initv+0x194>)
 8001fbc:	f000 fa00 	bl	80023c0 <HAL_TIM_MspPostInit>

}
 8001fc0:	bf00      	nop
 8001fc2:	3758      	adds	r7, #88	; 0x58
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	20000178 	.word	0x20000178
 8001fcc:	40012c00 	.word	0x40012c00

08001fd0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fd4:	4b13      	ldr	r3, [pc, #76]	; (8002024 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001fd6:	4a14      	ldr	r2, [pc, #80]	; (8002028 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001fd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8001fda:	4b12      	ldr	r3, [pc, #72]	; (8002024 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001fdc:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001fe0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fe2:	4b10      	ldr	r3, [pc, #64]	; (8002024 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fe8:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fee:	4b0d      	ldr	r3, [pc, #52]	; (8002024 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ff6:	220c      	movs	r2, #12
 8001ff8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002000:	4b08      	ldr	r3, [pc, #32]	; (8002024 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002002:	2200      	movs	r2, #0
 8002004:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002006:	4807      	ldr	r0, [pc, #28]	; (8002024 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002008:	f003 f92f 	bl	800526a <HAL_UART_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	bf14      	ite	ne
 8002012:	2301      	movne	r3, #1
 8002014:	2300      	moveq	r3, #0
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 800201c:	f000 f8cc 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}
 8002024:	200001c0 	.word	0x200001c0
 8002028:	40004400 	.word	0x40004400

0800202c <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002030:	4b13      	ldr	r3, [pc, #76]	; (8002080 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002032:	4a14      	ldr	r2, [pc, #80]	; (8002084 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002034:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8002036:	4b12      	ldr	r3, [pc, #72]	; (8002080 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002038:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 800203c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800203e:	4b10      	ldr	r3, [pc, #64]	; (8002080 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002040:	2200      	movs	r2, #0
 8002042:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002044:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002046:	2200      	movs	r2, #0
 8002048:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800204a:	4b0d      	ldr	r3, [pc, #52]	; (8002080 <_ZL19MX_USART3_UART_Initv+0x54>)
 800204c:	2200      	movs	r2, #0
 800204e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002050:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002052:	220c      	movs	r2, #12
 8002054:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002056:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002058:	2200      	movs	r2, #0
 800205a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800205c:	4b08      	ldr	r3, [pc, #32]	; (8002080 <_ZL19MX_USART3_UART_Initv+0x54>)
 800205e:	2200      	movs	r2, #0
 8002060:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002062:	4807      	ldr	r0, [pc, #28]	; (8002080 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002064:	f003 f901 	bl	800526a <HAL_UART_Init>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	bf14      	ite	ne
 800206e:	2301      	movne	r3, #1
 8002070:	2300      	moveq	r3, #0
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8002078:	f000 f89e 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}
 8002080:	20000204 	.word	0x20000204
 8002084:	40004800 	.word	0x40004800

08002088 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b088      	sub	sp, #32
 800208c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208e:	f107 0310 	add.w	r3, r7, #16
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	609a      	str	r2, [r3, #8]
 800209a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800209c:	4b41      	ldr	r3, [pc, #260]	; (80021a4 <_ZL12MX_GPIO_Initv+0x11c>)
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	4a40      	ldr	r2, [pc, #256]	; (80021a4 <_ZL12MX_GPIO_Initv+0x11c>)
 80020a2:	f043 0310 	orr.w	r3, r3, #16
 80020a6:	6193      	str	r3, [r2, #24]
 80020a8:	4b3e      	ldr	r3, [pc, #248]	; (80021a4 <_ZL12MX_GPIO_Initv+0x11c>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	f003 0310 	and.w	r3, r3, #16
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020b4:	4b3b      	ldr	r3, [pc, #236]	; (80021a4 <_ZL12MX_GPIO_Initv+0x11c>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	4a3a      	ldr	r2, [pc, #232]	; (80021a4 <_ZL12MX_GPIO_Initv+0x11c>)
 80020ba:	f043 0320 	orr.w	r3, r3, #32
 80020be:	6193      	str	r3, [r2, #24]
 80020c0:	4b38      	ldr	r3, [pc, #224]	; (80021a4 <_ZL12MX_GPIO_Initv+0x11c>)
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	f003 0320 	and.w	r3, r3, #32
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020cc:	4b35      	ldr	r3, [pc, #212]	; (80021a4 <_ZL12MX_GPIO_Initv+0x11c>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	4a34      	ldr	r2, [pc, #208]	; (80021a4 <_ZL12MX_GPIO_Initv+0x11c>)
 80020d2:	f043 0304 	orr.w	r3, r3, #4
 80020d6:	6193      	str	r3, [r2, #24]
 80020d8:	4b32      	ldr	r3, [pc, #200]	; (80021a4 <_ZL12MX_GPIO_Initv+0x11c>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	607b      	str	r3, [r7, #4]
 80020e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e4:	4b2f      	ldr	r3, [pc, #188]	; (80021a4 <_ZL12MX_GPIO_Initv+0x11c>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	4a2e      	ldr	r2, [pc, #184]	; (80021a4 <_ZL12MX_GPIO_Initv+0x11c>)
 80020ea:	f043 0308 	orr.w	r3, r3, #8
 80020ee:	6193      	str	r3, [r2, #24]
 80020f0:	4b2c      	ldr	r3, [pc, #176]	; (80021a4 <_ZL12MX_GPIO_Initv+0x11c>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	603b      	str	r3, [r7, #0]
 80020fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MP6543H_DIR_X_Pin|MP6543H_nSLEEP_X_Pin|MP6543H_nBRAKE_X_Pin, GPIO_PIN_RESET);
 80020fc:	2200      	movs	r2, #0
 80020fe:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8002102:	4829      	ldr	r0, [pc, #164]	; (80021a8 <_ZL12MX_GPIO_Initv+0x120>)
 8002104:	f000 ffd7 	bl	80030b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MP6543H_DIR_Y_Pin|MP6543H_nSLEEP_Y_Pin|MP6543H_nBRAKE_Y_Pin|SPI1_CSn_Pin, GPIO_PIN_RESET);
 8002108:	2200      	movs	r2, #0
 800210a:	f44f 411c 	mov.w	r1, #39936	; 0x9c00
 800210e:	4827      	ldr	r0, [pc, #156]	; (80021ac <_ZL12MX_GPIO_Initv+0x124>)
 8002110:	f000 ffd1 	bl	80030b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002114:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002118:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800211a:	4b25      	ldr	r3, [pc, #148]	; (80021b0 <_ZL12MX_GPIO_Initv+0x128>)
 800211c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211e:	2300      	movs	r3, #0
 8002120:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002122:	f107 0310 	add.w	r3, r7, #16
 8002126:	4619      	mov	r1, r3
 8002128:	4822      	ldr	r0, [pc, #136]	; (80021b4 <_ZL12MX_GPIO_Initv+0x12c>)
 800212a:	f000 fe29 	bl	8002d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : nTILT_BUTTON_Pin */
  GPIO_InitStruct.Pin = nTILT_BUTTON_Pin;
 800212e:	2302      	movs	r3, #2
 8002130:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002136:	2301      	movs	r3, #1
 8002138:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(nTILT_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800213a:	f107 0310 	add.w	r3, r7, #16
 800213e:	4619      	mov	r1, r3
 8002140:	481a      	ldr	r0, [pc, #104]	; (80021ac <_ZL12MX_GPIO_Initv+0x124>)
 8002142:	f000 fe1d 	bl	8002d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : MP6543H_nFAULT_Y_Pin MP6543H_nFAULT_X_Pin MC3479_INTN1_Pin MC3479_INTN2_Pin */
  GPIO_InitStruct.Pin = MP6543H_nFAULT_Y_Pin|MP6543H_nFAULT_X_Pin|MC3479_INTN1_Pin|MC3479_INTN2_Pin;
 8002146:	f241 03c4 	movw	r3, #4292	; 0x10c4
 800214a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002150:	2301      	movs	r3, #1
 8002152:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002154:	f107 0310 	add.w	r3, r7, #16
 8002158:	4619      	mov	r1, r3
 800215a:	4813      	ldr	r0, [pc, #76]	; (80021a8 <_ZL12MX_GPIO_Initv+0x120>)
 800215c:	f000 fe10 	bl	8002d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : MP6543H_DIR_X_Pin MP6543H_nSLEEP_X_Pin MP6543H_nBRAKE_X_Pin */
  GPIO_InitStruct.Pin = MP6543H_DIR_X_Pin|MP6543H_nSLEEP_X_Pin|MP6543H_nBRAKE_X_Pin;
 8002160:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002164:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002166:	2301      	movs	r3, #1
 8002168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216e:	2302      	movs	r3, #2
 8002170:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002172:	f107 0310 	add.w	r3, r7, #16
 8002176:	4619      	mov	r1, r3
 8002178:	480b      	ldr	r0, [pc, #44]	; (80021a8 <_ZL12MX_GPIO_Initv+0x120>)
 800217a:	f000 fe01 	bl	8002d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : MP6543H_DIR_Y_Pin MP6543H_nSLEEP_Y_Pin MP6543H_nBRAKE_Y_Pin SPI1_CSn_Pin */
  GPIO_InitStruct.Pin = MP6543H_DIR_Y_Pin|MP6543H_nSLEEP_Y_Pin|MP6543H_nBRAKE_Y_Pin|SPI1_CSn_Pin;
 800217e:	f44f 431c 	mov.w	r3, #39936	; 0x9c00
 8002182:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002184:	2301      	movs	r3, #1
 8002186:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218c:	2302      	movs	r3, #2
 800218e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002190:	f107 0310 	add.w	r3, r7, #16
 8002194:	4619      	mov	r1, r3
 8002196:	4805      	ldr	r0, [pc, #20]	; (80021ac <_ZL12MX_GPIO_Initv+0x124>)
 8002198:	f000 fdf2 	bl	8002d80 <HAL_GPIO_Init>

}
 800219c:	bf00      	nop
 800219e:	3720      	adds	r7, #32
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40010c00 	.word	0x40010c00
 80021ac:	40010800 	.word	0x40010800
 80021b0:	10110000 	.word	0x10110000
 80021b4:	40011000 	.word	0x40011000

080021b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021bc:	b672      	cpsid	i
}
 80021be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021c0:	e7fe      	b.n	80021c0 <Error_Handler+0x8>
	...

080021c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021ca:	4b15      	ldr	r3, [pc, #84]	; (8002220 <HAL_MspInit+0x5c>)
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	4a14      	ldr	r2, [pc, #80]	; (8002220 <HAL_MspInit+0x5c>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	6193      	str	r3, [r2, #24]
 80021d6:	4b12      	ldr	r3, [pc, #72]	; (8002220 <HAL_MspInit+0x5c>)
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021e2:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <HAL_MspInit+0x5c>)
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	4a0e      	ldr	r2, [pc, #56]	; (8002220 <HAL_MspInit+0x5c>)
 80021e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ec:	61d3      	str	r3, [r2, #28]
 80021ee:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <HAL_MspInit+0x5c>)
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f6:	607b      	str	r3, [r7, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021fa:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <HAL_MspInit+0x60>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	4a04      	ldr	r2, [pc, #16]	; (8002224 <HAL_MspInit+0x60>)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002216:	bf00      	nop
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr
 8002220:	40021000 	.word	0x40021000
 8002224:	40010000 	.word	0x40010000

08002228 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b08a      	sub	sp, #40	; 0x28
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002230:	f107 0318 	add.w	r3, r7, #24
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC2)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a1f      	ldr	r2, [pc, #124]	; (80022c0 <HAL_ADC_MspInit+0x98>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d137      	bne.n	80022b8 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002248:	4b1e      	ldr	r3, [pc, #120]	; (80022c4 <HAL_ADC_MspInit+0x9c>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	4a1d      	ldr	r2, [pc, #116]	; (80022c4 <HAL_ADC_MspInit+0x9c>)
 800224e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002252:	6193      	str	r3, [r2, #24]
 8002254:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <HAL_ADC_MspInit+0x9c>)
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800225c:	617b      	str	r3, [r7, #20]
 800225e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002260:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <HAL_ADC_MspInit+0x9c>)
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	4a17      	ldr	r2, [pc, #92]	; (80022c4 <HAL_ADC_MspInit+0x9c>)
 8002266:	f043 0304 	orr.w	r3, r3, #4
 800226a:	6193      	str	r3, [r2, #24]
 800226c:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <HAL_ADC_MspInit+0x9c>)
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002278:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <HAL_ADC_MspInit+0x9c>)
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	4a11      	ldr	r2, [pc, #68]	; (80022c4 <HAL_ADC_MspInit+0x9c>)
 800227e:	f043 0308 	orr.w	r3, r3, #8
 8002282:	6193      	str	r3, [r2, #24]
 8002284:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <HAL_ADC_MspInit+0x9c>)
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	f003 0308 	and.w	r3, r3, #8
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = MP6543H_SOA_X_Pin|MP6543H_SOB_X_Pin|MP6543H_SOC_X_Pin|MP6543H_SOA_Y_Pin;
 8002290:	23f0      	movs	r3, #240	; 0xf0
 8002292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002294:	2303      	movs	r3, #3
 8002296:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002298:	f107 0318 	add.w	r3, r7, #24
 800229c:	4619      	mov	r1, r3
 800229e:	480a      	ldr	r0, [pc, #40]	; (80022c8 <HAL_ADC_MspInit+0xa0>)
 80022a0:	f000 fd6e 	bl	8002d80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MP6543H_SOB_Y_Pin|MP6543H_SOC_Y_Pin;
 80022a4:	2303      	movs	r3, #3
 80022a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022a8:	2303      	movs	r3, #3
 80022aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ac:	f107 0318 	add.w	r3, r7, #24
 80022b0:	4619      	mov	r1, r3
 80022b2:	4806      	ldr	r0, [pc, #24]	; (80022cc <HAL_ADC_MspInit+0xa4>)
 80022b4:	f000 fd64 	bl	8002d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80022b8:	bf00      	nop
 80022ba:	3728      	adds	r7, #40	; 0x28
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40012800 	.word	0x40012800
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40010800 	.word	0x40010800
 80022cc:	40010c00 	.word	0x40010c00

080022d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08a      	sub	sp, #40	; 0x28
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d8:	f107 0314 	add.w	r3, r7, #20
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a22      	ldr	r2, [pc, #136]	; (8002374 <HAL_SPI_MspInit+0xa4>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d13d      	bne.n	800236c <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022f0:	4b21      	ldr	r3, [pc, #132]	; (8002378 <HAL_SPI_MspInit+0xa8>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	4a20      	ldr	r2, [pc, #128]	; (8002378 <HAL_SPI_MspInit+0xa8>)
 80022f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022fa:	6193      	str	r3, [r2, #24]
 80022fc:	4b1e      	ldr	r3, [pc, #120]	; (8002378 <HAL_SPI_MspInit+0xa8>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002308:	4b1b      	ldr	r3, [pc, #108]	; (8002378 <HAL_SPI_MspInit+0xa8>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	4a1a      	ldr	r2, [pc, #104]	; (8002378 <HAL_SPI_MspInit+0xa8>)
 800230e:	f043 0308 	orr.w	r3, r3, #8
 8002312:	6193      	str	r3, [r2, #24]
 8002314:	4b18      	ldr	r3, [pc, #96]	; (8002378 <HAL_SPI_MspInit+0xa8>)
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	f003 0308 	and.w	r3, r3, #8
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002320:	2328      	movs	r3, #40	; 0x28
 8002322:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002324:	2302      	movs	r3, #2
 8002326:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002328:	2303      	movs	r3, #3
 800232a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800232c:	f107 0314 	add.w	r3, r7, #20
 8002330:	4619      	mov	r1, r3
 8002332:	4812      	ldr	r0, [pc, #72]	; (800237c <HAL_SPI_MspInit+0xac>)
 8002334:	f000 fd24 	bl	8002d80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002338:	2310      	movs	r3, #16
 800233a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800233c:	2300      	movs	r3, #0
 800233e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002340:	2301      	movs	r3, #1
 8002342:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	4619      	mov	r1, r3
 800234a:	480c      	ldr	r0, [pc, #48]	; (800237c <HAL_SPI_MspInit+0xac>)
 800234c:	f000 fd18 	bl	8002d80 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8002350:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <HAL_SPI_MspInit+0xb0>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
 8002366:	4a06      	ldr	r2, [pc, #24]	; (8002380 <HAL_SPI_MspInit+0xb0>)
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800236c:	bf00      	nop
 800236e:	3728      	adds	r7, #40	; 0x28
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40013000 	.word	0x40013000
 8002378:	40021000 	.word	0x40021000
 800237c:	40010c00 	.word	0x40010c00
 8002380:	40010000 	.word	0x40010000

08002384 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a09      	ldr	r2, [pc, #36]	; (80023b8 <HAL_TIM_Base_MspInit+0x34>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d10b      	bne.n	80023ae <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002396:	4b09      	ldr	r3, [pc, #36]	; (80023bc <HAL_TIM_Base_MspInit+0x38>)
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	4a08      	ldr	r2, [pc, #32]	; (80023bc <HAL_TIM_Base_MspInit+0x38>)
 800239c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023a0:	6193      	str	r3, [r2, #24]
 80023a2:	4b06      	ldr	r3, [pc, #24]	; (80023bc <HAL_TIM_Base_MspInit+0x38>)
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80023ae:	bf00      	nop
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr
 80023b8:	40012c00 	.word	0x40012c00
 80023bc:	40021000 	.word	0x40021000

080023c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b088      	sub	sp, #32
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c8:	f107 0310 	add.w	r3, r7, #16
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a10      	ldr	r2, [pc, #64]	; (800241c <HAL_TIM_MspPostInit+0x5c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d118      	bne.n	8002412 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e0:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <HAL_TIM_MspPostInit+0x60>)
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	4a0e      	ldr	r2, [pc, #56]	; (8002420 <HAL_TIM_MspPostInit+0x60>)
 80023e6:	f043 0304 	orr.w	r3, r3, #4
 80023ea:	6193      	str	r3, [r2, #24]
 80023ec:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <HAL_TIM_MspPostInit+0x60>)
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MP6543H_PWM_X_Pin|MP6543H_PWM_Y_Pin;
 80023f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fe:	2302      	movs	r3, #2
 8002400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002402:	2302      	movs	r3, #2
 8002404:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002406:	f107 0310 	add.w	r3, r7, #16
 800240a:	4619      	mov	r1, r3
 800240c:	4805      	ldr	r0, [pc, #20]	; (8002424 <HAL_TIM_MspPostInit+0x64>)
 800240e:	f000 fcb7 	bl	8002d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002412:	bf00      	nop
 8002414:	3720      	adds	r7, #32
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40012c00 	.word	0x40012c00
 8002420:	40021000 	.word	0x40021000
 8002424:	40010800 	.word	0x40010800

08002428 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	; 0x28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002430:	f107 0318 	add.w	r3, r7, #24
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a37      	ldr	r2, [pc, #220]	; (8002520 <HAL_UART_MspInit+0xf8>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d130      	bne.n	80024aa <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002448:	4b36      	ldr	r3, [pc, #216]	; (8002524 <HAL_UART_MspInit+0xfc>)
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	4a35      	ldr	r2, [pc, #212]	; (8002524 <HAL_UART_MspInit+0xfc>)
 800244e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002452:	61d3      	str	r3, [r2, #28]
 8002454:	4b33      	ldr	r3, [pc, #204]	; (8002524 <HAL_UART_MspInit+0xfc>)
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002460:	4b30      	ldr	r3, [pc, #192]	; (8002524 <HAL_UART_MspInit+0xfc>)
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	4a2f      	ldr	r2, [pc, #188]	; (8002524 <HAL_UART_MspInit+0xfc>)
 8002466:	f043 0304 	orr.w	r3, r3, #4
 800246a:	6193      	str	r3, [r2, #24]
 800246c:	4b2d      	ldr	r3, [pc, #180]	; (8002524 <HAL_UART_MspInit+0xfc>)
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002478:	2304      	movs	r3, #4
 800247a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247c:	2302      	movs	r3, #2
 800247e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002480:	2303      	movs	r3, #3
 8002482:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002484:	f107 0318 	add.w	r3, r7, #24
 8002488:	4619      	mov	r1, r3
 800248a:	4827      	ldr	r0, [pc, #156]	; (8002528 <HAL_UART_MspInit+0x100>)
 800248c:	f000 fc78 	bl	8002d80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002490:	2308      	movs	r3, #8
 8002492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002494:	2300      	movs	r3, #0
 8002496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249c:	f107 0318 	add.w	r3, r7, #24
 80024a0:	4619      	mov	r1, r3
 80024a2:	4821      	ldr	r0, [pc, #132]	; (8002528 <HAL_UART_MspInit+0x100>)
 80024a4:	f000 fc6c 	bl	8002d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80024a8:	e036      	b.n	8002518 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a1f      	ldr	r2, [pc, #124]	; (800252c <HAL_UART_MspInit+0x104>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d131      	bne.n	8002518 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80024b4:	4b1b      	ldr	r3, [pc, #108]	; (8002524 <HAL_UART_MspInit+0xfc>)
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	4a1a      	ldr	r2, [pc, #104]	; (8002524 <HAL_UART_MspInit+0xfc>)
 80024ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024be:	61d3      	str	r3, [r2, #28]
 80024c0:	4b18      	ldr	r3, [pc, #96]	; (8002524 <HAL_UART_MspInit+0xfc>)
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024cc:	4b15      	ldr	r3, [pc, #84]	; (8002524 <HAL_UART_MspInit+0xfc>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	4a14      	ldr	r2, [pc, #80]	; (8002524 <HAL_UART_MspInit+0xfc>)
 80024d2:	f043 0308 	orr.w	r3, r3, #8
 80024d6:	6193      	str	r3, [r2, #24]
 80024d8:	4b12      	ldr	r3, [pc, #72]	; (8002524 <HAL_UART_MspInit+0xfc>)
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	60bb      	str	r3, [r7, #8]
 80024e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ea:	2302      	movs	r3, #2
 80024ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024ee:	2303      	movs	r3, #3
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f2:	f107 0318 	add.w	r3, r7, #24
 80024f6:	4619      	mov	r1, r3
 80024f8:	480d      	ldr	r0, [pc, #52]	; (8002530 <HAL_UART_MspInit+0x108>)
 80024fa:	f000 fc41 	bl	8002d80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80024fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002504:	2300      	movs	r3, #0
 8002506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800250c:	f107 0318 	add.w	r3, r7, #24
 8002510:	4619      	mov	r1, r3
 8002512:	4807      	ldr	r0, [pc, #28]	; (8002530 <HAL_UART_MspInit+0x108>)
 8002514:	f000 fc34 	bl	8002d80 <HAL_GPIO_Init>
}
 8002518:	bf00      	nop
 800251a:	3728      	adds	r7, #40	; 0x28
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40004400 	.word	0x40004400
 8002524:	40021000 	.word	0x40021000
 8002528:	40010800 	.word	0x40010800
 800252c:	40004800 	.word	0x40004800
 8002530:	40010c00 	.word	0x40010c00

08002534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002538:	e7fe      	b.n	8002538 <NMI_Handler+0x4>

0800253a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800253a:	b480      	push	{r7}
 800253c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800253e:	e7fe      	b.n	800253e <HardFault_Handler+0x4>

08002540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002544:	e7fe      	b.n	8002544 <MemManage_Handler+0x4>

08002546 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002546:	b480      	push	{r7}
 8002548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800254a:	e7fe      	b.n	800254a <BusFault_Handler+0x4>

0800254c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002550:	e7fe      	b.n	8002550 <UsageFault_Handler+0x4>

08002552 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr

0800255e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800255e:	b480      	push	{r7}
 8002560:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr

0800256a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800256a:	b480      	push	{r7}
 800256c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr

08002576 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800257a:	f000 f8cb 	bl	8002714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}

08002582 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002582:	b480      	push	{r7}
 8002584:	af00      	add	r7, sp, #0
	return 1;
 8002586:	2301      	movs	r3, #1
}
 8002588:	4618      	mov	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <_kill>:

int _kill(int pid, int sig)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800259a:	f003 fc81 	bl	8005ea0 <__errno>
 800259e:	4603      	mov	r3, r0
 80025a0:	2216      	movs	r2, #22
 80025a2:	601a      	str	r2, [r3, #0]
	return -1;
 80025a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <_exit>:

void _exit (int status)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025b8:	f04f 31ff 	mov.w	r1, #4294967295
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7ff ffe7 	bl	8002590 <_kill>
	while (1) {}		/* Make sure we hang here */
 80025c2:	e7fe      	b.n	80025c2 <_exit+0x12>

080025c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025cc:	4a14      	ldr	r2, [pc, #80]	; (8002620 <_sbrk+0x5c>)
 80025ce:	4b15      	ldr	r3, [pc, #84]	; (8002624 <_sbrk+0x60>)
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025d8:	4b13      	ldr	r3, [pc, #76]	; (8002628 <_sbrk+0x64>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d102      	bne.n	80025e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025e0:	4b11      	ldr	r3, [pc, #68]	; (8002628 <_sbrk+0x64>)
 80025e2:	4a12      	ldr	r2, [pc, #72]	; (800262c <_sbrk+0x68>)
 80025e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025e6:	4b10      	ldr	r3, [pc, #64]	; (8002628 <_sbrk+0x64>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4413      	add	r3, r2
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d207      	bcs.n	8002604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025f4:	f003 fc54 	bl	8005ea0 <__errno>
 80025f8:	4603      	mov	r3, r0
 80025fa:	220c      	movs	r2, #12
 80025fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002602:	e009      	b.n	8002618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002604:	4b08      	ldr	r3, [pc, #32]	; (8002628 <_sbrk+0x64>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800260a:	4b07      	ldr	r3, [pc, #28]	; (8002628 <_sbrk+0x64>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4413      	add	r3, r2
 8002612:	4a05      	ldr	r2, [pc, #20]	; (8002628 <_sbrk+0x64>)
 8002614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002616:	68fb      	ldr	r3, [r7, #12]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20005000 	.word	0x20005000
 8002624:	00000400 	.word	0x00000400
 8002628:	20000248 	.word	0x20000248
 800262c:	200002b8 	.word	0x200002b8

08002630 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr

0800263c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800263c:	480c      	ldr	r0, [pc, #48]	; (8002670 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800263e:	490d      	ldr	r1, [pc, #52]	; (8002674 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002640:	4a0d      	ldr	r2, [pc, #52]	; (8002678 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002644:	e002      	b.n	800264c <LoopCopyDataInit>

08002646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800264a:	3304      	adds	r3, #4

0800264c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800264c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800264e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002650:	d3f9      	bcc.n	8002646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002652:	4a0a      	ldr	r2, [pc, #40]	; (800267c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002654:	4c0a      	ldr	r4, [pc, #40]	; (8002680 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002658:	e001      	b.n	800265e <LoopFillZerobss>

0800265a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800265a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800265c:	3204      	adds	r2, #4

0800265e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800265e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002660:	d3fb      	bcc.n	800265a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002662:	f7ff ffe5 	bl	8002630 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002666:	f003 fc21 	bl	8005eac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800266a:	f7ff f9b5 	bl	80019d8 <main>
  bx lr
 800266e:	4770      	bx	lr
  ldr r0, =_sdata
 8002670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002674:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002678:	08006298 	.word	0x08006298
  ldr r2, =_sbss
 800267c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002680:	200002b8 	.word	0x200002b8

08002684 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002684:	e7fe      	b.n	8002684 <ADC1_2_IRQHandler>
	...

08002688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800268c:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <HAL_Init+0x28>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a07      	ldr	r2, [pc, #28]	; (80026b0 <HAL_Init+0x28>)
 8002692:	f043 0310 	orr.w	r3, r3, #16
 8002696:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002698:	2003      	movs	r0, #3
 800269a:	f000 fb3d 	bl	8002d18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800269e:	200f      	movs	r0, #15
 80026a0:	f000 f808 	bl	80026b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026a4:	f7ff fd8e 	bl	80021c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40022000 	.word	0x40022000

080026b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026bc:	4b12      	ldr	r3, [pc, #72]	; (8002708 <HAL_InitTick+0x54>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	4b12      	ldr	r3, [pc, #72]	; (800270c <HAL_InitTick+0x58>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	4619      	mov	r1, r3
 80026c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 fb47 	bl	8002d66 <HAL_SYSTICK_Config>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e00e      	b.n	8002700 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b0f      	cmp	r3, #15
 80026e6:	d80a      	bhi.n	80026fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026e8:	2200      	movs	r2, #0
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	f04f 30ff 	mov.w	r0, #4294967295
 80026f0:	f000 fb1d 	bl	8002d2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026f4:	4a06      	ldr	r2, [pc, #24]	; (8002710 <HAL_InitTick+0x5c>)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
 80026fc:	e000      	b.n	8002700 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
}
 8002700:	4618      	mov	r0, r3
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	20000000 	.word	0x20000000
 800270c:	20000008 	.word	0x20000008
 8002710:	20000004 	.word	0x20000004

08002714 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002718:	4b05      	ldr	r3, [pc, #20]	; (8002730 <HAL_IncTick+0x1c>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	461a      	mov	r2, r3
 800271e:	4b05      	ldr	r3, [pc, #20]	; (8002734 <HAL_IncTick+0x20>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4413      	add	r3, r2
 8002724:	4a03      	ldr	r2, [pc, #12]	; (8002734 <HAL_IncTick+0x20>)
 8002726:	6013      	str	r3, [r2, #0]
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr
 8002730:	20000008 	.word	0x20000008
 8002734:	2000024c 	.word	0x2000024c

08002738 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return uwTick;
 800273c:	4b02      	ldr	r3, [pc, #8]	; (8002748 <HAL_GetTick+0x10>)
 800273e:	681b      	ldr	r3, [r3, #0]
}
 8002740:	4618      	mov	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr
 8002748:	2000024c 	.word	0x2000024c

0800274c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002754:	f7ff fff0 	bl	8002738 <HAL_GetTick>
 8002758:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002764:	d005      	beq.n	8002772 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002766:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <HAL_Delay+0x44>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	461a      	mov	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4413      	add	r3, r2
 8002770:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002772:	bf00      	nop
 8002774:	f7ff ffe0 	bl	8002738 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	429a      	cmp	r2, r3
 8002782:	d8f7      	bhi.n	8002774 <HAL_Delay+0x28>
  {
  }
}
 8002784:	bf00      	nop
 8002786:	bf00      	nop
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000008 	.word	0x20000008

08002794 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800279c:	2300      	movs	r3, #0
 800279e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e0be      	b.n	8002934 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d109      	bne.n	80027d8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7ff fd28 	bl	8002228 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 f9ab 	bl	8002b34 <ADC_ConversionStop_Disable>
 80027de:	4603      	mov	r3, r0
 80027e0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e6:	f003 0310 	and.w	r3, r3, #16
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f040 8099 	bne.w	8002922 <HAL_ADC_Init+0x18e>
 80027f0:	7dfb      	ldrb	r3, [r7, #23]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f040 8095 	bne.w	8002922 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002800:	f023 0302 	bic.w	r3, r3, #2
 8002804:	f043 0202 	orr.w	r2, r3, #2
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002814:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	7b1b      	ldrb	r3, [r3, #12]
 800281a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800281c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	4313      	orrs	r3, r2
 8002822:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800282c:	d003      	beq.n	8002836 <HAL_ADC_Init+0xa2>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d102      	bne.n	800283c <HAL_ADC_Init+0xa8>
 8002836:	f44f 7380 	mov.w	r3, #256	; 0x100
 800283a:	e000      	b.n	800283e <HAL_ADC_Init+0xaa>
 800283c:	2300      	movs	r3, #0
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	7d1b      	ldrb	r3, [r3, #20]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d119      	bne.n	8002880 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	7b1b      	ldrb	r3, [r3, #12]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d109      	bne.n	8002868 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	3b01      	subs	r3, #1
 800285a:	035a      	lsls	r2, r3, #13
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	4313      	orrs	r3, r2
 8002860:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	e00b      	b.n	8002880 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286c:	f043 0220 	orr.w	r2, r3, #32
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002878:	f043 0201 	orr.w	r2, r3, #1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	430a      	orrs	r2, r1
 8002892:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	4b28      	ldr	r3, [pc, #160]	; (800293c <HAL_ADC_Init+0x1a8>)
 800289c:	4013      	ands	r3, r2
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6812      	ldr	r2, [r2, #0]
 80028a2:	68b9      	ldr	r1, [r7, #8]
 80028a4:	430b      	orrs	r3, r1
 80028a6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028b0:	d003      	beq.n	80028ba <HAL_ADC_Init+0x126>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d104      	bne.n	80028c4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	3b01      	subs	r3, #1
 80028c0:	051b      	lsls	r3, r3, #20
 80028c2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ca:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	4b18      	ldr	r3, [pc, #96]	; (8002940 <HAL_ADC_Init+0x1ac>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d10b      	bne.n	8002900 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f2:	f023 0303 	bic.w	r3, r3, #3
 80028f6:	f043 0201 	orr.w	r2, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028fe:	e018      	b.n	8002932 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002904:	f023 0312 	bic.w	r3, r3, #18
 8002908:	f043 0210 	orr.w	r2, r3, #16
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	f043 0201 	orr.w	r2, r3, #1
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002920:	e007      	b.n	8002932 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002926:	f043 0210 	orr.w	r2, r3, #16
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002932:	7dfb      	ldrb	r3, [r7, #23]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	ffe1f7fd 	.word	0xffe1f7fd
 8002940:	ff1f0efe 	.word	0xff1f0efe

08002944 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002952:	2300      	movs	r3, #0
 8002954:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_ADC_ConfigChannel+0x20>
 8002960:	2302      	movs	r3, #2
 8002962:	e0dc      	b.n	8002b1e <HAL_ADC_ConfigChannel+0x1da>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2b06      	cmp	r3, #6
 8002972:	d81c      	bhi.n	80029ae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	4613      	mov	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	3b05      	subs	r3, #5
 8002986:	221f      	movs	r2, #31
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	4019      	ands	r1, r3
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	6818      	ldr	r0, [r3, #0]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	3b05      	subs	r3, #5
 80029a0:	fa00 f203 	lsl.w	r2, r0, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	635a      	str	r2, [r3, #52]	; 0x34
 80029ac:	e03c      	b.n	8002a28 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b0c      	cmp	r3, #12
 80029b4:	d81c      	bhi.n	80029f0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	3b23      	subs	r3, #35	; 0x23
 80029c8:	221f      	movs	r2, #31
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	4019      	ands	r1, r3
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	6818      	ldr	r0, [r3, #0]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	3b23      	subs	r3, #35	; 0x23
 80029e2:	fa00 f203 	lsl.w	r2, r0, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	631a      	str	r2, [r3, #48]	; 0x30
 80029ee:	e01b      	b.n	8002a28 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	3b41      	subs	r3, #65	; 0x41
 8002a02:	221f      	movs	r2, #31
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	4019      	ands	r1, r3
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	6818      	ldr	r0, [r3, #0]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	4613      	mov	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	3b41      	subs	r3, #65	; 0x41
 8002a1c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2b09      	cmp	r3, #9
 8002a2e:	d91c      	bls.n	8002a6a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68d9      	ldr	r1, [r3, #12]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	4413      	add	r3, r2
 8002a40:	3b1e      	subs	r3, #30
 8002a42:	2207      	movs	r2, #7
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	4019      	ands	r1, r3
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	6898      	ldr	r0, [r3, #8]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	4613      	mov	r3, r2
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	4413      	add	r3, r2
 8002a5a:	3b1e      	subs	r3, #30
 8002a5c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	60da      	str	r2, [r3, #12]
 8002a68:	e019      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6919      	ldr	r1, [r3, #16]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	4613      	mov	r3, r2
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	4413      	add	r3, r2
 8002a7a:	2207      	movs	r2, #7
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	4019      	ands	r1, r3
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	6898      	ldr	r0, [r3, #8]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	4413      	add	r3, r2
 8002a92:	fa00 f203 	lsl.w	r2, r0, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2b10      	cmp	r3, #16
 8002aa4:	d003      	beq.n	8002aae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002aaa:	2b11      	cmp	r3, #17
 8002aac:	d132      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a1d      	ldr	r2, [pc, #116]	; (8002b28 <HAL_ADC_ConfigChannel+0x1e4>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d125      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d126      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002ad4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b10      	cmp	r3, #16
 8002adc:	d11a      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ade:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <HAL_ADC_ConfigChannel+0x1e8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a13      	ldr	r2, [pc, #76]	; (8002b30 <HAL_ADC_ConfigChannel+0x1ec>)
 8002ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae8:	0c9a      	lsrs	r2, r3, #18
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002af4:	e002      	b.n	8002afc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	3b01      	subs	r3, #1
 8002afa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f9      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x1b2>
 8002b02:	e007      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b08:	f043 0220 	orr.w	r2, r3, #32
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr
 8002b28:	40012400 	.word	0x40012400
 8002b2c:	20000000 	.word	0x20000000
 8002b30:	431bde83 	.word	0x431bde83

08002b34 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d12e      	bne.n	8002bac <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0201 	bic.w	r2, r2, #1
 8002b5c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b5e:	f7ff fdeb 	bl	8002738 <HAL_GetTick>
 8002b62:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b64:	e01b      	b.n	8002b9e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b66:	f7ff fde7 	bl	8002738 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d914      	bls.n	8002b9e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d10d      	bne.n	8002b9e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b86:	f043 0210 	orr.w	r2, r3, #16
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b92:	f043 0201 	orr.w	r2, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e007      	b.n	8002bae <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d0dc      	beq.n	8002b66 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
	...

08002bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bc8:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <__NVIC_SetPriorityGrouping+0x44>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bea:	4a04      	ldr	r2, [pc, #16]	; (8002bfc <__NVIC_SetPriorityGrouping+0x44>)
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	60d3      	str	r3, [r2, #12]
}
 8002bf0:	bf00      	nop
 8002bf2:	3714      	adds	r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	e000ed00 	.word	0xe000ed00

08002c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c04:	4b04      	ldr	r3, [pc, #16]	; (8002c18 <__NVIC_GetPriorityGrouping+0x18>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	0a1b      	lsrs	r3, r3, #8
 8002c0a:	f003 0307 	and.w	r3, r3, #7
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	e000ed00 	.word	0xe000ed00

08002c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	6039      	str	r1, [r7, #0]
 8002c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	db0a      	blt.n	8002c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	490c      	ldr	r1, [pc, #48]	; (8002c68 <__NVIC_SetPriority+0x4c>)
 8002c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3a:	0112      	lsls	r2, r2, #4
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	440b      	add	r3, r1
 8002c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c44:	e00a      	b.n	8002c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	4908      	ldr	r1, [pc, #32]	; (8002c6c <__NVIC_SetPriority+0x50>)
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	3b04      	subs	r3, #4
 8002c54:	0112      	lsls	r2, r2, #4
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	440b      	add	r3, r1
 8002c5a:	761a      	strb	r2, [r3, #24]
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	e000e100 	.word	0xe000e100
 8002c6c:	e000ed00 	.word	0xe000ed00

08002c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b089      	sub	sp, #36	; 0x24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f1c3 0307 	rsb	r3, r3, #7
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	bf28      	it	cs
 8002c8e:	2304      	movcs	r3, #4
 8002c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3304      	adds	r3, #4
 8002c96:	2b06      	cmp	r3, #6
 8002c98:	d902      	bls.n	8002ca0 <NVIC_EncodePriority+0x30>
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	3b03      	subs	r3, #3
 8002c9e:	e000      	b.n	8002ca2 <NVIC_EncodePriority+0x32>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43da      	mvns	r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	401a      	ands	r2, r3
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc2:	43d9      	mvns	r1, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc8:	4313      	orrs	r3, r2
         );
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3724      	adds	r7, #36	; 0x24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ce4:	d301      	bcc.n	8002cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e00f      	b.n	8002d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cea:	4a0a      	ldr	r2, [pc, #40]	; (8002d14 <SysTick_Config+0x40>)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cf2:	210f      	movs	r1, #15
 8002cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf8:	f7ff ff90 	bl	8002c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cfc:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <SysTick_Config+0x40>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d02:	4b04      	ldr	r3, [pc, #16]	; (8002d14 <SysTick_Config+0x40>)
 8002d04:	2207      	movs	r2, #7
 8002d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	e000e010 	.word	0xe000e010

08002d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7ff ff49 	bl	8002bb8 <__NVIC_SetPriorityGrouping>
}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b086      	sub	sp, #24
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	4603      	mov	r3, r0
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	607a      	str	r2, [r7, #4]
 8002d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d40:	f7ff ff5e 	bl	8002c00 <__NVIC_GetPriorityGrouping>
 8002d44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	68b9      	ldr	r1, [r7, #8]
 8002d4a:	6978      	ldr	r0, [r7, #20]
 8002d4c:	f7ff ff90 	bl	8002c70 <NVIC_EncodePriority>
 8002d50:	4602      	mov	r2, r0
 8002d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d56:	4611      	mov	r1, r2
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff ff5f 	bl	8002c1c <__NVIC_SetPriority>
}
 8002d5e:	bf00      	nop
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7ff ffb0 	bl	8002cd4 <SysTick_Config>
 8002d74:	4603      	mov	r3, r0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b08b      	sub	sp, #44	; 0x2c
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d92:	e169      	b.n	8003068 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d94:	2201      	movs	r2, #1
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	69fa      	ldr	r2, [r7, #28]
 8002da4:	4013      	ands	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	f040 8158 	bne.w	8003062 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	4a9a      	ldr	r2, [pc, #616]	; (8003020 <HAL_GPIO_Init+0x2a0>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d05e      	beq.n	8002e7a <HAL_GPIO_Init+0xfa>
 8002dbc:	4a98      	ldr	r2, [pc, #608]	; (8003020 <HAL_GPIO_Init+0x2a0>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d875      	bhi.n	8002eae <HAL_GPIO_Init+0x12e>
 8002dc2:	4a98      	ldr	r2, [pc, #608]	; (8003024 <HAL_GPIO_Init+0x2a4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d058      	beq.n	8002e7a <HAL_GPIO_Init+0xfa>
 8002dc8:	4a96      	ldr	r2, [pc, #600]	; (8003024 <HAL_GPIO_Init+0x2a4>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d86f      	bhi.n	8002eae <HAL_GPIO_Init+0x12e>
 8002dce:	4a96      	ldr	r2, [pc, #600]	; (8003028 <HAL_GPIO_Init+0x2a8>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d052      	beq.n	8002e7a <HAL_GPIO_Init+0xfa>
 8002dd4:	4a94      	ldr	r2, [pc, #592]	; (8003028 <HAL_GPIO_Init+0x2a8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d869      	bhi.n	8002eae <HAL_GPIO_Init+0x12e>
 8002dda:	4a94      	ldr	r2, [pc, #592]	; (800302c <HAL_GPIO_Init+0x2ac>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d04c      	beq.n	8002e7a <HAL_GPIO_Init+0xfa>
 8002de0:	4a92      	ldr	r2, [pc, #584]	; (800302c <HAL_GPIO_Init+0x2ac>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d863      	bhi.n	8002eae <HAL_GPIO_Init+0x12e>
 8002de6:	4a92      	ldr	r2, [pc, #584]	; (8003030 <HAL_GPIO_Init+0x2b0>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d046      	beq.n	8002e7a <HAL_GPIO_Init+0xfa>
 8002dec:	4a90      	ldr	r2, [pc, #576]	; (8003030 <HAL_GPIO_Init+0x2b0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d85d      	bhi.n	8002eae <HAL_GPIO_Init+0x12e>
 8002df2:	2b12      	cmp	r3, #18
 8002df4:	d82a      	bhi.n	8002e4c <HAL_GPIO_Init+0xcc>
 8002df6:	2b12      	cmp	r3, #18
 8002df8:	d859      	bhi.n	8002eae <HAL_GPIO_Init+0x12e>
 8002dfa:	a201      	add	r2, pc, #4	; (adr r2, 8002e00 <HAL_GPIO_Init+0x80>)
 8002dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e00:	08002e7b 	.word	0x08002e7b
 8002e04:	08002e55 	.word	0x08002e55
 8002e08:	08002e67 	.word	0x08002e67
 8002e0c:	08002ea9 	.word	0x08002ea9
 8002e10:	08002eaf 	.word	0x08002eaf
 8002e14:	08002eaf 	.word	0x08002eaf
 8002e18:	08002eaf 	.word	0x08002eaf
 8002e1c:	08002eaf 	.word	0x08002eaf
 8002e20:	08002eaf 	.word	0x08002eaf
 8002e24:	08002eaf 	.word	0x08002eaf
 8002e28:	08002eaf 	.word	0x08002eaf
 8002e2c:	08002eaf 	.word	0x08002eaf
 8002e30:	08002eaf 	.word	0x08002eaf
 8002e34:	08002eaf 	.word	0x08002eaf
 8002e38:	08002eaf 	.word	0x08002eaf
 8002e3c:	08002eaf 	.word	0x08002eaf
 8002e40:	08002eaf 	.word	0x08002eaf
 8002e44:	08002e5d 	.word	0x08002e5d
 8002e48:	08002e71 	.word	0x08002e71
 8002e4c:	4a79      	ldr	r2, [pc, #484]	; (8003034 <HAL_GPIO_Init+0x2b4>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d013      	beq.n	8002e7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e52:	e02c      	b.n	8002eae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	623b      	str	r3, [r7, #32]
          break;
 8002e5a:	e029      	b.n	8002eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	3304      	adds	r3, #4
 8002e62:	623b      	str	r3, [r7, #32]
          break;
 8002e64:	e024      	b.n	8002eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	3308      	adds	r3, #8
 8002e6c:	623b      	str	r3, [r7, #32]
          break;
 8002e6e:	e01f      	b.n	8002eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	330c      	adds	r3, #12
 8002e76:	623b      	str	r3, [r7, #32]
          break;
 8002e78:	e01a      	b.n	8002eb0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d102      	bne.n	8002e88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e82:	2304      	movs	r3, #4
 8002e84:	623b      	str	r3, [r7, #32]
          break;
 8002e86:	e013      	b.n	8002eb0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d105      	bne.n	8002e9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e90:	2308      	movs	r3, #8
 8002e92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69fa      	ldr	r2, [r7, #28]
 8002e98:	611a      	str	r2, [r3, #16]
          break;
 8002e9a:	e009      	b.n	8002eb0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e9c:	2308      	movs	r3, #8
 8002e9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69fa      	ldr	r2, [r7, #28]
 8002ea4:	615a      	str	r2, [r3, #20]
          break;
 8002ea6:	e003      	b.n	8002eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	623b      	str	r3, [r7, #32]
          break;
 8002eac:	e000      	b.n	8002eb0 <HAL_GPIO_Init+0x130>
          break;
 8002eae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	2bff      	cmp	r3, #255	; 0xff
 8002eb4:	d801      	bhi.n	8002eba <HAL_GPIO_Init+0x13a>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	e001      	b.n	8002ebe <HAL_GPIO_Init+0x13e>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	2bff      	cmp	r3, #255	; 0xff
 8002ec4:	d802      	bhi.n	8002ecc <HAL_GPIO_Init+0x14c>
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	e002      	b.n	8002ed2 <HAL_GPIO_Init+0x152>
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	3b08      	subs	r3, #8
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	210f      	movs	r1, #15
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	401a      	ands	r2, r3
 8002ee4:	6a39      	ldr	r1, [r7, #32]
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eec:	431a      	orrs	r2, r3
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 80b1 	beq.w	8003062 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f00:	4b4d      	ldr	r3, [pc, #308]	; (8003038 <HAL_GPIO_Init+0x2b8>)
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	4a4c      	ldr	r2, [pc, #304]	; (8003038 <HAL_GPIO_Init+0x2b8>)
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	6193      	str	r3, [r2, #24]
 8002f0c:	4b4a      	ldr	r3, [pc, #296]	; (8003038 <HAL_GPIO_Init+0x2b8>)
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f18:	4a48      	ldr	r2, [pc, #288]	; (800303c <HAL_GPIO_Init+0x2bc>)
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	089b      	lsrs	r3, r3, #2
 8002f1e:	3302      	adds	r3, #2
 8002f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	f003 0303 	and.w	r3, r3, #3
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	220f      	movs	r2, #15
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a40      	ldr	r2, [pc, #256]	; (8003040 <HAL_GPIO_Init+0x2c0>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d013      	beq.n	8002f6c <HAL_GPIO_Init+0x1ec>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a3f      	ldr	r2, [pc, #252]	; (8003044 <HAL_GPIO_Init+0x2c4>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d00d      	beq.n	8002f68 <HAL_GPIO_Init+0x1e8>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a3e      	ldr	r2, [pc, #248]	; (8003048 <HAL_GPIO_Init+0x2c8>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d007      	beq.n	8002f64 <HAL_GPIO_Init+0x1e4>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a3d      	ldr	r2, [pc, #244]	; (800304c <HAL_GPIO_Init+0x2cc>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d101      	bne.n	8002f60 <HAL_GPIO_Init+0x1e0>
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e006      	b.n	8002f6e <HAL_GPIO_Init+0x1ee>
 8002f60:	2304      	movs	r3, #4
 8002f62:	e004      	b.n	8002f6e <HAL_GPIO_Init+0x1ee>
 8002f64:	2302      	movs	r3, #2
 8002f66:	e002      	b.n	8002f6e <HAL_GPIO_Init+0x1ee>
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e000      	b.n	8002f6e <HAL_GPIO_Init+0x1ee>
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f70:	f002 0203 	and.w	r2, r2, #3
 8002f74:	0092      	lsls	r2, r2, #2
 8002f76:	4093      	lsls	r3, r2
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f7e:	492f      	ldr	r1, [pc, #188]	; (800303c <HAL_GPIO_Init+0x2bc>)
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	089b      	lsrs	r3, r3, #2
 8002f84:	3302      	adds	r3, #2
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d006      	beq.n	8002fa6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f98:	4b2d      	ldr	r3, [pc, #180]	; (8003050 <HAL_GPIO_Init+0x2d0>)
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	492c      	ldr	r1, [pc, #176]	; (8003050 <HAL_GPIO_Init+0x2d0>)
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	600b      	str	r3, [r1, #0]
 8002fa4:	e006      	b.n	8002fb4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002fa6:	4b2a      	ldr	r3, [pc, #168]	; (8003050 <HAL_GPIO_Init+0x2d0>)
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	43db      	mvns	r3, r3
 8002fae:	4928      	ldr	r1, [pc, #160]	; (8003050 <HAL_GPIO_Init+0x2d0>)
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d006      	beq.n	8002fce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002fc0:	4b23      	ldr	r3, [pc, #140]	; (8003050 <HAL_GPIO_Init+0x2d0>)
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	4922      	ldr	r1, [pc, #136]	; (8003050 <HAL_GPIO_Init+0x2d0>)
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	604b      	str	r3, [r1, #4]
 8002fcc:	e006      	b.n	8002fdc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002fce:	4b20      	ldr	r3, [pc, #128]	; (8003050 <HAL_GPIO_Init+0x2d0>)
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	491e      	ldr	r1, [pc, #120]	; (8003050 <HAL_GPIO_Init+0x2d0>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d006      	beq.n	8002ff6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fe8:	4b19      	ldr	r3, [pc, #100]	; (8003050 <HAL_GPIO_Init+0x2d0>)
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	4918      	ldr	r1, [pc, #96]	; (8003050 <HAL_GPIO_Init+0x2d0>)
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	608b      	str	r3, [r1, #8]
 8002ff4:	e006      	b.n	8003004 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ff6:	4b16      	ldr	r3, [pc, #88]	; (8003050 <HAL_GPIO_Init+0x2d0>)
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	4914      	ldr	r1, [pc, #80]	; (8003050 <HAL_GPIO_Init+0x2d0>)
 8003000:	4013      	ands	r3, r2
 8003002:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d021      	beq.n	8003054 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003010:	4b0f      	ldr	r3, [pc, #60]	; (8003050 <HAL_GPIO_Init+0x2d0>)
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	490e      	ldr	r1, [pc, #56]	; (8003050 <HAL_GPIO_Init+0x2d0>)
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	4313      	orrs	r3, r2
 800301a:	60cb      	str	r3, [r1, #12]
 800301c:	e021      	b.n	8003062 <HAL_GPIO_Init+0x2e2>
 800301e:	bf00      	nop
 8003020:	10320000 	.word	0x10320000
 8003024:	10310000 	.word	0x10310000
 8003028:	10220000 	.word	0x10220000
 800302c:	10210000 	.word	0x10210000
 8003030:	10120000 	.word	0x10120000
 8003034:	10110000 	.word	0x10110000
 8003038:	40021000 	.word	0x40021000
 800303c:	40010000 	.word	0x40010000
 8003040:	40010800 	.word	0x40010800
 8003044:	40010c00 	.word	0x40010c00
 8003048:	40011000 	.word	0x40011000
 800304c:	40011400 	.word	0x40011400
 8003050:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003054:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <HAL_GPIO_Init+0x304>)
 8003056:	68da      	ldr	r2, [r3, #12]
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	43db      	mvns	r3, r3
 800305c:	4909      	ldr	r1, [pc, #36]	; (8003084 <HAL_GPIO_Init+0x304>)
 800305e:	4013      	ands	r3, r2
 8003060:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	3301      	adds	r3, #1
 8003066:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	fa22 f303 	lsr.w	r3, r2, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	f47f ae8e 	bne.w	8002d94 <HAL_GPIO_Init+0x14>
  }
}
 8003078:	bf00      	nop
 800307a:	bf00      	nop
 800307c:	372c      	adds	r7, #44	; 0x2c
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr
 8003084:	40010400 	.word	0x40010400

08003088 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	460b      	mov	r3, r1
 8003092:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	887b      	ldrh	r3, [r7, #2]
 800309a:	4013      	ands	r3, r2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d002      	beq.n	80030a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030a0:	2301      	movs	r3, #1
 80030a2:	73fb      	strb	r3, [r7, #15]
 80030a4:	e001      	b.n	80030aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030a6:	2300      	movs	r3, #0
 80030a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr

080030b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	460b      	mov	r3, r1
 80030c0:	807b      	strh	r3, [r7, #2]
 80030c2:	4613      	mov	r3, r2
 80030c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030c6:	787b      	ldrb	r3, [r7, #1]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030cc:	887a      	ldrh	r2, [r7, #2]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80030d2:	e003      	b.n	80030dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030d4:	887b      	ldrh	r3, [r7, #2]
 80030d6:	041a      	lsls	r2, r3, #16
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	611a      	str	r2, [r3, #16]
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr
	...

080030e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e272      	b.n	80035e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 8087 	beq.w	8003216 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003108:	4b92      	ldr	r3, [pc, #584]	; (8003354 <HAL_RCC_OscConfig+0x26c>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f003 030c 	and.w	r3, r3, #12
 8003110:	2b04      	cmp	r3, #4
 8003112:	d00c      	beq.n	800312e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003114:	4b8f      	ldr	r3, [pc, #572]	; (8003354 <HAL_RCC_OscConfig+0x26c>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f003 030c 	and.w	r3, r3, #12
 800311c:	2b08      	cmp	r3, #8
 800311e:	d112      	bne.n	8003146 <HAL_RCC_OscConfig+0x5e>
 8003120:	4b8c      	ldr	r3, [pc, #560]	; (8003354 <HAL_RCC_OscConfig+0x26c>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800312c:	d10b      	bne.n	8003146 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800312e:	4b89      	ldr	r3, [pc, #548]	; (8003354 <HAL_RCC_OscConfig+0x26c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d06c      	beq.n	8003214 <HAL_RCC_OscConfig+0x12c>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d168      	bne.n	8003214 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e24c      	b.n	80035e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800314e:	d106      	bne.n	800315e <HAL_RCC_OscConfig+0x76>
 8003150:	4b80      	ldr	r3, [pc, #512]	; (8003354 <HAL_RCC_OscConfig+0x26c>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a7f      	ldr	r2, [pc, #508]	; (8003354 <HAL_RCC_OscConfig+0x26c>)
 8003156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800315a:	6013      	str	r3, [r2, #0]
 800315c:	e02e      	b.n	80031bc <HAL_RCC_OscConfig+0xd4>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10c      	bne.n	8003180 <HAL_RCC_OscConfig+0x98>
 8003166:	4b7b      	ldr	r3, [pc, #492]	; (8003354 <HAL_RCC_OscConfig+0x26c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a7a      	ldr	r2, [pc, #488]	; (8003354 <HAL_RCC_OscConfig+0x26c>)
 800316c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003170:	6013      	str	r3, [r2, #0]
 8003172:	4b78      	ldr	r3, [pc, #480]	; (8003354 <HAL_RCC_OscConfig+0x26c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a77      	ldr	r2, [pc, #476]	; (8003354 <HAL_RCC_OscConfig+0x26c>)
 8003178:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	e01d      	b.n	80031bc <HAL_RCC_OscConfig+0xd4>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003188:	d10c      	bne.n	80031a4 <HAL_RCC_OscConfig+0xbc>
 800318a:	4b72      	ldr	r3, [pc, #456]	; (8003354 <HAL_RCC_OscConfig+0x26c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a71      	ldr	r2, [pc, #452]	; (8003354 <HAL_RCC_OscConfig+0x26c>)
 8003190:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	4b6f      	ldr	r3, [pc, #444]	; (8003354 <HAL_RCC_OscConfig+0x26c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a6e      	ldr	r2, [pc, #440]	; (8003354 <HAL_RCC_OscConfig+0x26c>)
 800319c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a0:	6013      	str	r3, [r2, #0]
 80031a2:	e00b      	b.n	80031bc <HAL_RCC_OscConfig+0xd4>
 80031a4:	4b6b      	ldr	r3, [pc, #428]	; (8003354 <HAL_RCC_OscConfig+0x26c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a6a      	ldr	r2, [pc, #424]	; (8003354 <HAL_RCC_OscConfig+0x26c>)
 80031aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ae:	6013      	str	r3, [r2, #0]
 80031b0:	4b68      	ldr	r3, [pc, #416]	; (8003354 <HAL_RCC_OscConfig+0x26c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a67      	ldr	r2, [pc, #412]	; (8003354 <HAL_RCC_OscConfig+0x26c>)
 80031b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d013      	beq.n	80031ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c4:	f7ff fab8 	bl	8002738 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031cc:	f7ff fab4 	bl	8002738 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b64      	cmp	r3, #100	; 0x64
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e200      	b.n	80035e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031de:	4b5d      	ldr	r3, [pc, #372]	; (8003354 <HAL_RCC_OscConfig+0x26c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0f0      	beq.n	80031cc <HAL_RCC_OscConfig+0xe4>
 80031ea:	e014      	b.n	8003216 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ec:	f7ff faa4 	bl	8002738 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f4:	f7ff faa0 	bl	8002738 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b64      	cmp	r3, #100	; 0x64
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e1ec      	b.n	80035e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003206:	4b53      	ldr	r3, [pc, #332]	; (8003354 <HAL_RCC_OscConfig+0x26c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f0      	bne.n	80031f4 <HAL_RCC_OscConfig+0x10c>
 8003212:	e000      	b.n	8003216 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003214:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d063      	beq.n	80032ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003222:	4b4c      	ldr	r3, [pc, #304]	; (8003354 <HAL_RCC_OscConfig+0x26c>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f003 030c 	and.w	r3, r3, #12
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00b      	beq.n	8003246 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800322e:	4b49      	ldr	r3, [pc, #292]	; (8003354 <HAL_RCC_OscConfig+0x26c>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f003 030c 	and.w	r3, r3, #12
 8003236:	2b08      	cmp	r3, #8
 8003238:	d11c      	bne.n	8003274 <HAL_RCC_OscConfig+0x18c>
 800323a:	4b46      	ldr	r3, [pc, #280]	; (8003354 <HAL_RCC_OscConfig+0x26c>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d116      	bne.n	8003274 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003246:	4b43      	ldr	r3, [pc, #268]	; (8003354 <HAL_RCC_OscConfig+0x26c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d005      	beq.n	800325e <HAL_RCC_OscConfig+0x176>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d001      	beq.n	800325e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e1c0      	b.n	80035e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800325e:	4b3d      	ldr	r3, [pc, #244]	; (8003354 <HAL_RCC_OscConfig+0x26c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	4939      	ldr	r1, [pc, #228]	; (8003354 <HAL_RCC_OscConfig+0x26c>)
 800326e:	4313      	orrs	r3, r2
 8003270:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003272:	e03a      	b.n	80032ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d020      	beq.n	80032be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800327c:	4b36      	ldr	r3, [pc, #216]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 800327e:	2201      	movs	r2, #1
 8003280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003282:	f7ff fa59 	bl	8002738 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800328a:	f7ff fa55 	bl	8002738 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e1a1      	b.n	80035e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329c:	4b2d      	ldr	r3, [pc, #180]	; (8003354 <HAL_RCC_OscConfig+0x26c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0f0      	beq.n	800328a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a8:	4b2a      	ldr	r3, [pc, #168]	; (8003354 <HAL_RCC_OscConfig+0x26c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	4927      	ldr	r1, [pc, #156]	; (8003354 <HAL_RCC_OscConfig+0x26c>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	600b      	str	r3, [r1, #0]
 80032bc:	e015      	b.n	80032ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032be:	4b26      	ldr	r3, [pc, #152]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c4:	f7ff fa38 	bl	8002738 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032cc:	f7ff fa34 	bl	8002738 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e180      	b.n	80035e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032de:	4b1d      	ldr	r3, [pc, #116]	; (8003354 <HAL_RCC_OscConfig+0x26c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d03a      	beq.n	800336c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d019      	beq.n	8003332 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032fe:	4b17      	ldr	r3, [pc, #92]	; (800335c <HAL_RCC_OscConfig+0x274>)
 8003300:	2201      	movs	r2, #1
 8003302:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003304:	f7ff fa18 	bl	8002738 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800330c:	f7ff fa14 	bl	8002738 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e160      	b.n	80035e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800331e:	4b0d      	ldr	r3, [pc, #52]	; (8003354 <HAL_RCC_OscConfig+0x26c>)
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f0      	beq.n	800330c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800332a:	2001      	movs	r0, #1
 800332c:	f000 fada 	bl	80038e4 <RCC_Delay>
 8003330:	e01c      	b.n	800336c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003332:	4b0a      	ldr	r3, [pc, #40]	; (800335c <HAL_RCC_OscConfig+0x274>)
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003338:	f7ff f9fe 	bl	8002738 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800333e:	e00f      	b.n	8003360 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003340:	f7ff f9fa 	bl	8002738 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d908      	bls.n	8003360 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e146      	b.n	80035e0 <HAL_RCC_OscConfig+0x4f8>
 8003352:	bf00      	nop
 8003354:	40021000 	.word	0x40021000
 8003358:	42420000 	.word	0x42420000
 800335c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003360:	4b92      	ldr	r3, [pc, #584]	; (80035ac <HAL_RCC_OscConfig+0x4c4>)
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1e9      	bne.n	8003340 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 80a6 	beq.w	80034c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800337a:	2300      	movs	r3, #0
 800337c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800337e:	4b8b      	ldr	r3, [pc, #556]	; (80035ac <HAL_RCC_OscConfig+0x4c4>)
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10d      	bne.n	80033a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800338a:	4b88      	ldr	r3, [pc, #544]	; (80035ac <HAL_RCC_OscConfig+0x4c4>)
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	4a87      	ldr	r2, [pc, #540]	; (80035ac <HAL_RCC_OscConfig+0x4c4>)
 8003390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003394:	61d3      	str	r3, [r2, #28]
 8003396:	4b85      	ldr	r3, [pc, #532]	; (80035ac <HAL_RCC_OscConfig+0x4c4>)
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339e:	60bb      	str	r3, [r7, #8]
 80033a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033a2:	2301      	movs	r3, #1
 80033a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a6:	4b82      	ldr	r3, [pc, #520]	; (80035b0 <HAL_RCC_OscConfig+0x4c8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d118      	bne.n	80033e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033b2:	4b7f      	ldr	r3, [pc, #508]	; (80035b0 <HAL_RCC_OscConfig+0x4c8>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a7e      	ldr	r2, [pc, #504]	; (80035b0 <HAL_RCC_OscConfig+0x4c8>)
 80033b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033be:	f7ff f9bb 	bl	8002738 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c6:	f7ff f9b7 	bl	8002738 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b64      	cmp	r3, #100	; 0x64
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e103      	b.n	80035e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d8:	4b75      	ldr	r3, [pc, #468]	; (80035b0 <HAL_RCC_OscConfig+0x4c8>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0f0      	beq.n	80033c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d106      	bne.n	80033fa <HAL_RCC_OscConfig+0x312>
 80033ec:	4b6f      	ldr	r3, [pc, #444]	; (80035ac <HAL_RCC_OscConfig+0x4c4>)
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	4a6e      	ldr	r2, [pc, #440]	; (80035ac <HAL_RCC_OscConfig+0x4c4>)
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	6213      	str	r3, [r2, #32]
 80033f8:	e02d      	b.n	8003456 <HAL_RCC_OscConfig+0x36e>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10c      	bne.n	800341c <HAL_RCC_OscConfig+0x334>
 8003402:	4b6a      	ldr	r3, [pc, #424]	; (80035ac <HAL_RCC_OscConfig+0x4c4>)
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	4a69      	ldr	r2, [pc, #420]	; (80035ac <HAL_RCC_OscConfig+0x4c4>)
 8003408:	f023 0301 	bic.w	r3, r3, #1
 800340c:	6213      	str	r3, [r2, #32]
 800340e:	4b67      	ldr	r3, [pc, #412]	; (80035ac <HAL_RCC_OscConfig+0x4c4>)
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	4a66      	ldr	r2, [pc, #408]	; (80035ac <HAL_RCC_OscConfig+0x4c4>)
 8003414:	f023 0304 	bic.w	r3, r3, #4
 8003418:	6213      	str	r3, [r2, #32]
 800341a:	e01c      	b.n	8003456 <HAL_RCC_OscConfig+0x36e>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	2b05      	cmp	r3, #5
 8003422:	d10c      	bne.n	800343e <HAL_RCC_OscConfig+0x356>
 8003424:	4b61      	ldr	r3, [pc, #388]	; (80035ac <HAL_RCC_OscConfig+0x4c4>)
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	4a60      	ldr	r2, [pc, #384]	; (80035ac <HAL_RCC_OscConfig+0x4c4>)
 800342a:	f043 0304 	orr.w	r3, r3, #4
 800342e:	6213      	str	r3, [r2, #32]
 8003430:	4b5e      	ldr	r3, [pc, #376]	; (80035ac <HAL_RCC_OscConfig+0x4c4>)
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	4a5d      	ldr	r2, [pc, #372]	; (80035ac <HAL_RCC_OscConfig+0x4c4>)
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	6213      	str	r3, [r2, #32]
 800343c:	e00b      	b.n	8003456 <HAL_RCC_OscConfig+0x36e>
 800343e:	4b5b      	ldr	r3, [pc, #364]	; (80035ac <HAL_RCC_OscConfig+0x4c4>)
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	4a5a      	ldr	r2, [pc, #360]	; (80035ac <HAL_RCC_OscConfig+0x4c4>)
 8003444:	f023 0301 	bic.w	r3, r3, #1
 8003448:	6213      	str	r3, [r2, #32]
 800344a:	4b58      	ldr	r3, [pc, #352]	; (80035ac <HAL_RCC_OscConfig+0x4c4>)
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	4a57      	ldr	r2, [pc, #348]	; (80035ac <HAL_RCC_OscConfig+0x4c4>)
 8003450:	f023 0304 	bic.w	r3, r3, #4
 8003454:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d015      	beq.n	800348a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800345e:	f7ff f96b 	bl	8002738 <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003464:	e00a      	b.n	800347c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003466:	f7ff f967 	bl	8002738 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	f241 3288 	movw	r2, #5000	; 0x1388
 8003474:	4293      	cmp	r3, r2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e0b1      	b.n	80035e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800347c:	4b4b      	ldr	r3, [pc, #300]	; (80035ac <HAL_RCC_OscConfig+0x4c4>)
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0ee      	beq.n	8003466 <HAL_RCC_OscConfig+0x37e>
 8003488:	e014      	b.n	80034b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800348a:	f7ff f955 	bl	8002738 <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003490:	e00a      	b.n	80034a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003492:	f7ff f951 	bl	8002738 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e09b      	b.n	80035e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a8:	4b40      	ldr	r3, [pc, #256]	; (80035ac <HAL_RCC_OscConfig+0x4c4>)
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1ee      	bne.n	8003492 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034b4:	7dfb      	ldrb	r3, [r7, #23]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d105      	bne.n	80034c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ba:	4b3c      	ldr	r3, [pc, #240]	; (80035ac <HAL_RCC_OscConfig+0x4c4>)
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	4a3b      	ldr	r2, [pc, #236]	; (80035ac <HAL_RCC_OscConfig+0x4c4>)
 80034c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 8087 	beq.w	80035de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034d0:	4b36      	ldr	r3, [pc, #216]	; (80035ac <HAL_RCC_OscConfig+0x4c4>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f003 030c 	and.w	r3, r3, #12
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d061      	beq.n	80035a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d146      	bne.n	8003572 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e4:	4b33      	ldr	r3, [pc, #204]	; (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ea:	f7ff f925 	bl	8002738 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f2:	f7ff f921 	bl	8002738 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e06d      	b.n	80035e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003504:	4b29      	ldr	r3, [pc, #164]	; (80035ac <HAL_RCC_OscConfig+0x4c4>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1f0      	bne.n	80034f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003518:	d108      	bne.n	800352c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800351a:	4b24      	ldr	r3, [pc, #144]	; (80035ac <HAL_RCC_OscConfig+0x4c4>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	4921      	ldr	r1, [pc, #132]	; (80035ac <HAL_RCC_OscConfig+0x4c4>)
 8003528:	4313      	orrs	r3, r2
 800352a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800352c:	4b1f      	ldr	r3, [pc, #124]	; (80035ac <HAL_RCC_OscConfig+0x4c4>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a19      	ldr	r1, [r3, #32]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	430b      	orrs	r3, r1
 800353e:	491b      	ldr	r1, [pc, #108]	; (80035ac <HAL_RCC_OscConfig+0x4c4>)
 8003540:	4313      	orrs	r3, r2
 8003542:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003544:	4b1b      	ldr	r3, [pc, #108]	; (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 8003546:	2201      	movs	r2, #1
 8003548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354a:	f7ff f8f5 	bl	8002738 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003552:	f7ff f8f1 	bl	8002738 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e03d      	b.n	80035e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003564:	4b11      	ldr	r3, [pc, #68]	; (80035ac <HAL_RCC_OscConfig+0x4c4>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0f0      	beq.n	8003552 <HAL_RCC_OscConfig+0x46a>
 8003570:	e035      	b.n	80035de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003572:	4b10      	ldr	r3, [pc, #64]	; (80035b4 <HAL_RCC_OscConfig+0x4cc>)
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003578:	f7ff f8de 	bl	8002738 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003580:	f7ff f8da 	bl	8002738 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e026      	b.n	80035e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003592:	4b06      	ldr	r3, [pc, #24]	; (80035ac <HAL_RCC_OscConfig+0x4c4>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0x498>
 800359e:	e01e      	b.n	80035de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d107      	bne.n	80035b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e019      	b.n	80035e0 <HAL_RCC_OscConfig+0x4f8>
 80035ac:	40021000 	.word	0x40021000
 80035b0:	40007000 	.word	0x40007000
 80035b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035b8:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <HAL_RCC_OscConfig+0x500>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d106      	bne.n	80035da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d001      	beq.n	80035de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40021000 	.word	0x40021000

080035ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e0d0      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003600:	4b6a      	ldr	r3, [pc, #424]	; (80037ac <HAL_RCC_ClockConfig+0x1c0>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	429a      	cmp	r2, r3
 800360c:	d910      	bls.n	8003630 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360e:	4b67      	ldr	r3, [pc, #412]	; (80037ac <HAL_RCC_ClockConfig+0x1c0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f023 0207 	bic.w	r2, r3, #7
 8003616:	4965      	ldr	r1, [pc, #404]	; (80037ac <HAL_RCC_ClockConfig+0x1c0>)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	4313      	orrs	r3, r2
 800361c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800361e:	4b63      	ldr	r3, [pc, #396]	; (80037ac <HAL_RCC_ClockConfig+0x1c0>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	d001      	beq.n	8003630 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e0b8      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d020      	beq.n	800367e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	d005      	beq.n	8003654 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003648:	4b59      	ldr	r3, [pc, #356]	; (80037b0 <HAL_RCC_ClockConfig+0x1c4>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	4a58      	ldr	r2, [pc, #352]	; (80037b0 <HAL_RCC_ClockConfig+0x1c4>)
 800364e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003652:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0308 	and.w	r3, r3, #8
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003660:	4b53      	ldr	r3, [pc, #332]	; (80037b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	4a52      	ldr	r2, [pc, #328]	; (80037b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003666:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800366a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800366c:	4b50      	ldr	r3, [pc, #320]	; (80037b0 <HAL_RCC_ClockConfig+0x1c4>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	494d      	ldr	r1, [pc, #308]	; (80037b0 <HAL_RCC_ClockConfig+0x1c4>)
 800367a:	4313      	orrs	r3, r2
 800367c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d040      	beq.n	800370c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d107      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003692:	4b47      	ldr	r3, [pc, #284]	; (80037b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d115      	bne.n	80036ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e07f      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d107      	bne.n	80036ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036aa:	4b41      	ldr	r3, [pc, #260]	; (80037b0 <HAL_RCC_ClockConfig+0x1c4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d109      	bne.n	80036ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e073      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ba:	4b3d      	ldr	r3, [pc, #244]	; (80037b0 <HAL_RCC_ClockConfig+0x1c4>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e06b      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ca:	4b39      	ldr	r3, [pc, #228]	; (80037b0 <HAL_RCC_ClockConfig+0x1c4>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f023 0203 	bic.w	r2, r3, #3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	4936      	ldr	r1, [pc, #216]	; (80037b0 <HAL_RCC_ClockConfig+0x1c4>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036dc:	f7ff f82c 	bl	8002738 <HAL_GetTick>
 80036e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e2:	e00a      	b.n	80036fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036e4:	f7ff f828 	bl	8002738 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e053      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fa:	4b2d      	ldr	r3, [pc, #180]	; (80037b0 <HAL_RCC_ClockConfig+0x1c4>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f003 020c 	and.w	r2, r3, #12
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	429a      	cmp	r2, r3
 800370a:	d1eb      	bne.n	80036e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800370c:	4b27      	ldr	r3, [pc, #156]	; (80037ac <HAL_RCC_ClockConfig+0x1c0>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d210      	bcs.n	800373c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371a:	4b24      	ldr	r3, [pc, #144]	; (80037ac <HAL_RCC_ClockConfig+0x1c0>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f023 0207 	bic.w	r2, r3, #7
 8003722:	4922      	ldr	r1, [pc, #136]	; (80037ac <HAL_RCC_ClockConfig+0x1c0>)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	4313      	orrs	r3, r2
 8003728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800372a:	4b20      	ldr	r3, [pc, #128]	; (80037ac <HAL_RCC_ClockConfig+0x1c0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d001      	beq.n	800373c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e032      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d008      	beq.n	800375a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003748:	4b19      	ldr	r3, [pc, #100]	; (80037b0 <HAL_RCC_ClockConfig+0x1c4>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	4916      	ldr	r1, [pc, #88]	; (80037b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003756:	4313      	orrs	r3, r2
 8003758:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d009      	beq.n	800377a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003766:	4b12      	ldr	r3, [pc, #72]	; (80037b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	490e      	ldr	r1, [pc, #56]	; (80037b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003776:	4313      	orrs	r3, r2
 8003778:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800377a:	f000 f821 	bl	80037c0 <HAL_RCC_GetSysClockFreq>
 800377e:	4602      	mov	r2, r0
 8003780:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	091b      	lsrs	r3, r3, #4
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	490a      	ldr	r1, [pc, #40]	; (80037b4 <HAL_RCC_ClockConfig+0x1c8>)
 800378c:	5ccb      	ldrb	r3, [r1, r3]
 800378e:	fa22 f303 	lsr.w	r3, r2, r3
 8003792:	4a09      	ldr	r2, [pc, #36]	; (80037b8 <HAL_RCC_ClockConfig+0x1cc>)
 8003794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003796:	4b09      	ldr	r3, [pc, #36]	; (80037bc <HAL_RCC_ClockConfig+0x1d0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f7fe ff8a 	bl	80026b4 <HAL_InitTick>

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40022000 	.word	0x40022000
 80037b0:	40021000 	.word	0x40021000
 80037b4:	08006230 	.word	0x08006230
 80037b8:	20000000 	.word	0x20000000
 80037bc:	20000004 	.word	0x20000004

080037c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037c0:	b490      	push	{r4, r7}
 80037c2:	b08a      	sub	sp, #40	; 0x28
 80037c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80037c6:	4b29      	ldr	r3, [pc, #164]	; (800386c <HAL_RCC_GetSysClockFreq+0xac>)
 80037c8:	1d3c      	adds	r4, r7, #4
 80037ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80037d0:	f240 2301 	movw	r3, #513	; 0x201
 80037d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037d6:	2300      	movs	r3, #0
 80037d8:	61fb      	str	r3, [r7, #28]
 80037da:	2300      	movs	r3, #0
 80037dc:	61bb      	str	r3, [r7, #24]
 80037de:	2300      	movs	r3, #0
 80037e0:	627b      	str	r3, [r7, #36]	; 0x24
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037ea:	4b21      	ldr	r3, [pc, #132]	; (8003870 <HAL_RCC_GetSysClockFreq+0xb0>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f003 030c 	and.w	r3, r3, #12
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d002      	beq.n	8003800 <HAL_RCC_GetSysClockFreq+0x40>
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d003      	beq.n	8003806 <HAL_RCC_GetSysClockFreq+0x46>
 80037fe:	e02b      	b.n	8003858 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003800:	4b1c      	ldr	r3, [pc, #112]	; (8003874 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003802:	623b      	str	r3, [r7, #32]
      break;
 8003804:	e02b      	b.n	800385e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	0c9b      	lsrs	r3, r3, #18
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	3328      	adds	r3, #40	; 0x28
 8003810:	443b      	add	r3, r7
 8003812:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003816:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d012      	beq.n	8003848 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003822:	4b13      	ldr	r3, [pc, #76]	; (8003870 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	0c5b      	lsrs	r3, r3, #17
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	3328      	adds	r3, #40	; 0x28
 800382e:	443b      	add	r3, r7
 8003830:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003834:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	4a0e      	ldr	r2, [pc, #56]	; (8003874 <HAL_RCC_GetSysClockFreq+0xb4>)
 800383a:	fb03 f202 	mul.w	r2, r3, r2
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	fbb2 f3f3 	udiv	r3, r2, r3
 8003844:	627b      	str	r3, [r7, #36]	; 0x24
 8003846:	e004      	b.n	8003852 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	4a0b      	ldr	r2, [pc, #44]	; (8003878 <HAL_RCC_GetSysClockFreq+0xb8>)
 800384c:	fb02 f303 	mul.w	r3, r2, r3
 8003850:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	623b      	str	r3, [r7, #32]
      break;
 8003856:	e002      	b.n	800385e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003858:	4b08      	ldr	r3, [pc, #32]	; (800387c <HAL_RCC_GetSysClockFreq+0xbc>)
 800385a:	623b      	str	r3, [r7, #32]
      break;
 800385c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800385e:	6a3b      	ldr	r3, [r7, #32]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3728      	adds	r7, #40	; 0x28
 8003864:	46bd      	mov	sp, r7
 8003866:	bc90      	pop	{r4, r7}
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	08006220 	.word	0x08006220
 8003870:	40021000 	.word	0x40021000
 8003874:	00f42400 	.word	0x00f42400
 8003878:	003d0900 	.word	0x003d0900
 800387c:	007a1200 	.word	0x007a1200

08003880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003884:	4b02      	ldr	r3, [pc, #8]	; (8003890 <HAL_RCC_GetHCLKFreq+0x10>)
 8003886:	681b      	ldr	r3, [r3, #0]
}
 8003888:	4618      	mov	r0, r3
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr
 8003890:	20000000 	.word	0x20000000

08003894 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003898:	f7ff fff2 	bl	8003880 <HAL_RCC_GetHCLKFreq>
 800389c:	4602      	mov	r2, r0
 800389e:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	0a1b      	lsrs	r3, r3, #8
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	4903      	ldr	r1, [pc, #12]	; (80038b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038aa:	5ccb      	ldrb	r3, [r1, r3]
 80038ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40021000 	.word	0x40021000
 80038b8:	08006240 	.word	0x08006240

080038bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038c0:	f7ff ffde 	bl	8003880 <HAL_RCC_GetHCLKFreq>
 80038c4:	4602      	mov	r2, r0
 80038c6:	4b05      	ldr	r3, [pc, #20]	; (80038dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	0adb      	lsrs	r3, r3, #11
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	4903      	ldr	r1, [pc, #12]	; (80038e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038d2:	5ccb      	ldrb	r3, [r1, r3]
 80038d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d8:	4618      	mov	r0, r3
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40021000 	.word	0x40021000
 80038e0:	08006240 	.word	0x08006240

080038e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038ec:	4b0a      	ldr	r3, [pc, #40]	; (8003918 <RCC_Delay+0x34>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a0a      	ldr	r2, [pc, #40]	; (800391c <RCC_Delay+0x38>)
 80038f2:	fba2 2303 	umull	r2, r3, r2, r3
 80038f6:	0a5b      	lsrs	r3, r3, #9
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	fb02 f303 	mul.w	r3, r2, r3
 80038fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003900:	bf00      	nop
  }
  while (Delay --);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	1e5a      	subs	r2, r3, #1
 8003906:	60fa      	str	r2, [r7, #12]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1f9      	bne.n	8003900 <RCC_Delay+0x1c>
}
 800390c:	bf00      	nop
 800390e:	bf00      	nop
 8003910:	3714      	adds	r7, #20
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr
 8003918:	20000000 	.word	0x20000000
 800391c:	10624dd3 	.word	0x10624dd3

08003920 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	613b      	str	r3, [r7, #16]
 800392c:	2300      	movs	r3, #0
 800392e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b00      	cmp	r3, #0
 800393a:	d07d      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800393c:	2300      	movs	r3, #0
 800393e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003940:	4b4f      	ldr	r3, [pc, #316]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10d      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800394c:	4b4c      	ldr	r3, [pc, #304]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	4a4b      	ldr	r2, [pc, #300]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003956:	61d3      	str	r3, [r2, #28]
 8003958:	4b49      	ldr	r3, [pc, #292]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800395a:	69db      	ldr	r3, [r3, #28]
 800395c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003964:	2301      	movs	r3, #1
 8003966:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003968:	4b46      	ldr	r3, [pc, #280]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003970:	2b00      	cmp	r3, #0
 8003972:	d118      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003974:	4b43      	ldr	r3, [pc, #268]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a42      	ldr	r2, [pc, #264]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800397a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800397e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003980:	f7fe feda 	bl	8002738 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003986:	e008      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003988:	f7fe fed6 	bl	8002738 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b64      	cmp	r3, #100	; 0x64
 8003994:	d901      	bls.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e06d      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800399a:	4b3a      	ldr	r3, [pc, #232]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0f0      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039a6:	4b36      	ldr	r3, [pc, #216]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d02e      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d027      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039c4:	4b2e      	ldr	r3, [pc, #184]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039ce:	4b2e      	ldr	r3, [pc, #184]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039d0:	2201      	movs	r2, #1
 80039d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039d4:	4b2c      	ldr	r3, [pc, #176]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80039da:	4a29      	ldr	r2, [pc, #164]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d014      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ea:	f7fe fea5 	bl	8002738 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f0:	e00a      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f2:	f7fe fea1 	bl	8002738 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e036      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a08:	4b1d      	ldr	r3, [pc, #116]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d0ee      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a14:	4b1a      	ldr	r3, [pc, #104]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	4917      	ldr	r1, [pc, #92]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a26:	7dfb      	ldrb	r3, [r7, #23]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d105      	bne.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a2c:	4b14      	ldr	r3, [pc, #80]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	4a13      	ldr	r2, [pc, #76]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a36:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d008      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a44:	4b0e      	ldr	r3, [pc, #56]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	490b      	ldr	r1, [pc, #44]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0310 	and.w	r3, r3, #16
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d008      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a62:	4b07      	ldr	r3, [pc, #28]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	4904      	ldr	r1, [pc, #16]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3718      	adds	r7, #24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40021000 	.word	0x40021000
 8003a84:	40007000 	.word	0x40007000
 8003a88:	42420440 	.word	0x42420440

08003a8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e076      	b.n	8003b8c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d108      	bne.n	8003ab8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aae:	d009      	beq.n	8003ac4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	61da      	str	r2, [r3, #28]
 8003ab6:	e005      	b.n	8003ac4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d106      	bne.n	8003ae4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7fe fbf6 	bl	80022d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003afa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b16:	431a      	orrs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b48:	ea42 0103 	orr.w	r1, r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b50:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	0c1a      	lsrs	r2, r3, #16
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f002 0204 	and.w	r2, r2, #4
 8003b6a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	69da      	ldr	r2, [r3, #28]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b7a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b088      	sub	sp, #32
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d101      	bne.n	8003bb6 <HAL_SPI_Transmit+0x22>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	e126      	b.n	8003e04 <HAL_SPI_Transmit+0x270>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bbe:	f7fe fdbb 	bl	8002738 <HAL_GetTick>
 8003bc2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003bc4:	88fb      	ldrh	r3, [r7, #6]
 8003bc6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d002      	beq.n	8003bda <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003bd8:	e10b      	b.n	8003df2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <HAL_SPI_Transmit+0x52>
 8003be0:	88fb      	ldrh	r3, [r7, #6]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d102      	bne.n	8003bec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003bea:	e102      	b.n	8003df2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2203      	movs	r2, #3
 8003bf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	88fa      	ldrh	r2, [r7, #6]
 8003c04:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	88fa      	ldrh	r2, [r7, #6]
 8003c0a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c32:	d10f      	bne.n	8003c54 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c42:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c52:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5e:	2b40      	cmp	r3, #64	; 0x40
 8003c60:	d007      	beq.n	8003c72 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c7a:	d14b      	bne.n	8003d14 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d002      	beq.n	8003c8a <HAL_SPI_Transmit+0xf6>
 8003c84:	8afb      	ldrh	r3, [r7, #22]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d13e      	bne.n	8003d08 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	881a      	ldrh	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9a:	1c9a      	adds	r2, r3, #2
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003cae:	e02b      	b.n	8003d08 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d112      	bne.n	8003ce4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	881a      	ldrh	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cce:	1c9a      	adds	r2, r3, #2
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ce2:	e011      	b.n	8003d08 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ce4:	f7fe fd28 	bl	8002738 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d803      	bhi.n	8003cfc <HAL_SPI_Transmit+0x168>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfa:	d102      	bne.n	8003d02 <HAL_SPI_Transmit+0x16e>
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d102      	bne.n	8003d08 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d06:	e074      	b.n	8003df2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1ce      	bne.n	8003cb0 <HAL_SPI_Transmit+0x11c>
 8003d12:	e04c      	b.n	8003dae <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <HAL_SPI_Transmit+0x18e>
 8003d1c:	8afb      	ldrh	r3, [r7, #22]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d140      	bne.n	8003da4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	330c      	adds	r3, #12
 8003d2c:	7812      	ldrb	r2, [r2, #0]
 8003d2e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d48:	e02c      	b.n	8003da4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d113      	bne.n	8003d80 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	330c      	adds	r3, #12
 8003d62:	7812      	ldrb	r2, [r2, #0]
 8003d64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	3b01      	subs	r3, #1
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d7e:	e011      	b.n	8003da4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d80:	f7fe fcda 	bl	8002738 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d803      	bhi.n	8003d98 <HAL_SPI_Transmit+0x204>
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d96:	d102      	bne.n	8003d9e <HAL_SPI_Transmit+0x20a>
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d102      	bne.n	8003da4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003da2:	e026      	b.n	8003df2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1cd      	bne.n	8003d4a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	6839      	ldr	r1, [r7, #0]
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f000 fbb8 	bl	8004528 <SPI_EndRxTxTransaction>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10a      	bne.n	8003de2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dcc:	2300      	movs	r3, #0
 8003dce:	613b      	str	r3, [r7, #16]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	613b      	str	r3, [r7, #16]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	613b      	str	r3, [r7, #16]
 8003de0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d002      	beq.n	8003df0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	77fb      	strb	r3, [r7, #31]
 8003dee:	e000      	b.n	8003df2 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003df0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e02:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3720      	adds	r7, #32
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af02      	add	r7, sp, #8
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	603b      	str	r3, [r7, #0]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e28:	d112      	bne.n	8003e50 <HAL_SPI_Receive+0x44>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10e      	bne.n	8003e50 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2204      	movs	r2, #4
 8003e36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003e3a:	88fa      	ldrh	r2, [r7, #6]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	4613      	mov	r3, r2
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	68b9      	ldr	r1, [r7, #8]
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 f8f1 	bl	800402e <HAL_SPI_TransmitReceive>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	e0ea      	b.n	8004026 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d101      	bne.n	8003e5e <HAL_SPI_Receive+0x52>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e0e3      	b.n	8004026 <HAL_SPI_Receive+0x21a>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e66:	f7fe fc67 	bl	8002738 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d002      	beq.n	8003e7e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003e78:	2302      	movs	r3, #2
 8003e7a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e7c:	e0ca      	b.n	8004014 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <HAL_SPI_Receive+0x7e>
 8003e84:	88fb      	ldrh	r3, [r7, #6]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d102      	bne.n	8003e90 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e8e:	e0c1      	b.n	8004014 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2204      	movs	r2, #4
 8003e94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	88fa      	ldrh	r2, [r7, #6]
 8003ea8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	88fa      	ldrh	r2, [r7, #6]
 8003eae:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ed6:	d10f      	bne.n	8003ef8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ee6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ef6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f02:	2b40      	cmp	r3, #64	; 0x40
 8003f04:	d007      	beq.n	8003f16 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f14:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d162      	bne.n	8003fe4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003f1e:	e02e      	b.n	8003f7e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d115      	bne.n	8003f5a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f103 020c 	add.w	r2, r3, #12
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3a:	7812      	ldrb	r2, [r2, #0]
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f44:	1c5a      	adds	r2, r3, #1
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f58:	e011      	b.n	8003f7e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f5a:	f7fe fbed 	bl	8002738 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d803      	bhi.n	8003f72 <HAL_SPI_Receive+0x166>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f70:	d102      	bne.n	8003f78 <HAL_SPI_Receive+0x16c>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d102      	bne.n	8003f7e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003f7c:	e04a      	b.n	8004014 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1cb      	bne.n	8003f20 <HAL_SPI_Receive+0x114>
 8003f88:	e031      	b.n	8003fee <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d113      	bne.n	8003fc0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa2:	b292      	uxth	r2, r2
 8003fa4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003faa:	1c9a      	adds	r2, r3, #2
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fbe:	e011      	b.n	8003fe4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fc0:	f7fe fbba 	bl	8002738 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d803      	bhi.n	8003fd8 <HAL_SPI_Receive+0x1cc>
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd6:	d102      	bne.n	8003fde <HAL_SPI_Receive+0x1d2>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d102      	bne.n	8003fe4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003fe2:	e017      	b.n	8004014 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1cd      	bne.n	8003f8a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	6839      	ldr	r1, [r7, #0]
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f000 fa46 	bl	8004484 <SPI_EndRxTransaction>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d002      	beq.n	8004004 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2220      	movs	r2, #32
 8004002:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004008:	2b00      	cmp	r3, #0
 800400a:	d002      	beq.n	8004012 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	75fb      	strb	r3, [r7, #23]
 8004010:	e000      	b.n	8004014 <HAL_SPI_Receive+0x208>
  }

error :
 8004012:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004024:	7dfb      	ldrb	r3, [r7, #23]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b08c      	sub	sp, #48	; 0x30
 8004032:	af00      	add	r7, sp, #0
 8004034:	60f8      	str	r0, [r7, #12]
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	607a      	str	r2, [r7, #4]
 800403a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800403c:	2301      	movs	r3, #1
 800403e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004040:	2300      	movs	r3, #0
 8004042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800404c:	2b01      	cmp	r3, #1
 800404e:	d101      	bne.n	8004054 <HAL_SPI_TransmitReceive+0x26>
 8004050:	2302      	movs	r3, #2
 8004052:	e18a      	b.n	800436a <HAL_SPI_TransmitReceive+0x33c>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800405c:	f7fe fb6c 	bl	8002738 <HAL_GetTick>
 8004060:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004068:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004072:	887b      	ldrh	r3, [r7, #2]
 8004074:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004076:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800407a:	2b01      	cmp	r3, #1
 800407c:	d00f      	beq.n	800409e <HAL_SPI_TransmitReceive+0x70>
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004084:	d107      	bne.n	8004096 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d103      	bne.n	8004096 <HAL_SPI_TransmitReceive+0x68>
 800408e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004092:	2b04      	cmp	r3, #4
 8004094:	d003      	beq.n	800409e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004096:	2302      	movs	r3, #2
 8004098:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800409c:	e15b      	b.n	8004356 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d005      	beq.n	80040b0 <HAL_SPI_TransmitReceive+0x82>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <HAL_SPI_TransmitReceive+0x82>
 80040aa:	887b      	ldrh	r3, [r7, #2]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d103      	bne.n	80040b8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80040b6:	e14e      	b.n	8004356 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b04      	cmp	r3, #4
 80040c2:	d003      	beq.n	80040cc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2205      	movs	r2, #5
 80040c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	887a      	ldrh	r2, [r7, #2]
 80040dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	887a      	ldrh	r2, [r7, #2]
 80040e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	887a      	ldrh	r2, [r7, #2]
 80040ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	887a      	ldrh	r2, [r7, #2]
 80040f4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410c:	2b40      	cmp	r3, #64	; 0x40
 800410e:	d007      	beq.n	8004120 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800411e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004128:	d178      	bne.n	800421c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d002      	beq.n	8004138 <HAL_SPI_TransmitReceive+0x10a>
 8004132:	8b7b      	ldrh	r3, [r7, #26]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d166      	bne.n	8004206 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413c:	881a      	ldrh	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004148:	1c9a      	adds	r2, r3, #2
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004152:	b29b      	uxth	r3, r3
 8004154:	3b01      	subs	r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800415c:	e053      	b.n	8004206 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b02      	cmp	r3, #2
 800416a:	d11b      	bne.n	80041a4 <HAL_SPI_TransmitReceive+0x176>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004170:	b29b      	uxth	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d016      	beq.n	80041a4 <HAL_SPI_TransmitReceive+0x176>
 8004176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004178:	2b01      	cmp	r3, #1
 800417a:	d113      	bne.n	80041a4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004180:	881a      	ldrh	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418c:	1c9a      	adds	r2, r3, #2
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004196:	b29b      	uxth	r3, r3
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d119      	bne.n	80041e6 <HAL_SPI_TransmitReceive+0x1b8>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d014      	beq.n	80041e6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c6:	b292      	uxth	r2, r2
 80041c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ce:	1c9a      	adds	r2, r3, #2
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041d8:	b29b      	uxth	r3, r3
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041e2:	2301      	movs	r3, #1
 80041e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80041e6:	f7fe faa7 	bl	8002738 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d807      	bhi.n	8004206 <HAL_SPI_TransmitReceive+0x1d8>
 80041f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fc:	d003      	beq.n	8004206 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004204:	e0a7      	b.n	8004356 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800420a:	b29b      	uxth	r3, r3
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1a6      	bne.n	800415e <HAL_SPI_TransmitReceive+0x130>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004214:	b29b      	uxth	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1a1      	bne.n	800415e <HAL_SPI_TransmitReceive+0x130>
 800421a:	e07c      	b.n	8004316 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <HAL_SPI_TransmitReceive+0x1fc>
 8004224:	8b7b      	ldrh	r3, [r7, #26]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d16b      	bne.n	8004302 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	330c      	adds	r3, #12
 8004234:	7812      	ldrb	r2, [r2, #0]
 8004236:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004246:	b29b      	uxth	r3, r3
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004250:	e057      	b.n	8004302 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b02      	cmp	r3, #2
 800425e:	d11c      	bne.n	800429a <HAL_SPI_TransmitReceive+0x26c>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004264:	b29b      	uxth	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d017      	beq.n	800429a <HAL_SPI_TransmitReceive+0x26c>
 800426a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426c:	2b01      	cmp	r3, #1
 800426e:	d114      	bne.n	800429a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	330c      	adds	r3, #12
 800427a:	7812      	ldrb	r2, [r2, #0]
 800427c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800428c:	b29b      	uxth	r3, r3
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004296:	2300      	movs	r3, #0
 8004298:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d119      	bne.n	80042dc <HAL_SPI_TransmitReceive+0x2ae>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d014      	beq.n	80042dc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68da      	ldr	r2, [r3, #12]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042bc:	b2d2      	uxtb	r2, r2
 80042be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c4:	1c5a      	adds	r2, r3, #1
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042d8:	2301      	movs	r3, #1
 80042da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80042dc:	f7fe fa2c 	bl	8002738 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d803      	bhi.n	80042f4 <HAL_SPI_TransmitReceive+0x2c6>
 80042ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f2:	d102      	bne.n	80042fa <HAL_SPI_TransmitReceive+0x2cc>
 80042f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d103      	bne.n	8004302 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004300:	e029      	b.n	8004356 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004306:	b29b      	uxth	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1a2      	bne.n	8004252 <HAL_SPI_TransmitReceive+0x224>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004310:	b29b      	uxth	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d19d      	bne.n	8004252 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004318:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 f904 	bl	8004528 <SPI_EndRxTxTransaction>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d006      	beq.n	8004334 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2220      	movs	r2, #32
 8004330:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004332:	e010      	b.n	8004356 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10b      	bne.n	8004354 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800433c:	2300      	movs	r3, #0
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	617b      	str	r3, [r7, #20]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	e000      	b.n	8004356 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004354:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004366:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800436a:	4618      	mov	r0, r3
 800436c:	3730      	adds	r7, #48	; 0x30
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
	...

08004374 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	603b      	str	r3, [r7, #0]
 8004380:	4613      	mov	r3, r2
 8004382:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004384:	f7fe f9d8 	bl	8002738 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438c:	1a9b      	subs	r3, r3, r2
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	4413      	add	r3, r2
 8004392:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004394:	f7fe f9d0 	bl	8002738 <HAL_GetTick>
 8004398:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800439a:	4b39      	ldr	r3, [pc, #228]	; (8004480 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	015b      	lsls	r3, r3, #5
 80043a0:	0d1b      	lsrs	r3, r3, #20
 80043a2:	69fa      	ldr	r2, [r7, #28]
 80043a4:	fb02 f303 	mul.w	r3, r2, r3
 80043a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043aa:	e054      	b.n	8004456 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b2:	d050      	beq.n	8004456 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043b4:	f7fe f9c0 	bl	8002738 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	69fa      	ldr	r2, [r7, #28]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d902      	bls.n	80043ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d13d      	bne.n	8004446 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043e2:	d111      	bne.n	8004408 <SPI_WaitFlagStateUntilTimeout+0x94>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ec:	d004      	beq.n	80043f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043f6:	d107      	bne.n	8004408 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004406:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004410:	d10f      	bne.n	8004432 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004430:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e017      	b.n	8004476 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	3b01      	subs	r3, #1
 8004454:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	4013      	ands	r3, r2
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	429a      	cmp	r2, r3
 8004464:	bf0c      	ite	eq
 8004466:	2301      	moveq	r3, #1
 8004468:	2300      	movne	r3, #0
 800446a:	b2db      	uxtb	r3, r3
 800446c:	461a      	mov	r2, r3
 800446e:	79fb      	ldrb	r3, [r7, #7]
 8004470:	429a      	cmp	r2, r3
 8004472:	d19b      	bne.n	80043ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3720      	adds	r7, #32
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	20000000 	.word	0x20000000

08004484 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af02      	add	r7, sp, #8
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004498:	d111      	bne.n	80044be <SPI_EndRxTransaction+0x3a>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044a2:	d004      	beq.n	80044ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ac:	d107      	bne.n	80044be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044bc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044c6:	d117      	bne.n	80044f8 <SPI_EndRxTransaction+0x74>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d0:	d112      	bne.n	80044f8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	2200      	movs	r2, #0
 80044da:	2101      	movs	r1, #1
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f7ff ff49 	bl	8004374 <SPI_WaitFlagStateUntilTimeout>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d01a      	beq.n	800451e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ec:	f043 0220 	orr.w	r2, r3, #32
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e013      	b.n	8004520 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2200      	movs	r2, #0
 8004500:	2180      	movs	r1, #128	; 0x80
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f7ff ff36 	bl	8004374 <SPI_WaitFlagStateUntilTimeout>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d007      	beq.n	800451e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004512:	f043 0220 	orr.w	r2, r3, #32
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e000      	b.n	8004520 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af02      	add	r7, sp, #8
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	2200      	movs	r2, #0
 800453c:	2180      	movs	r1, #128	; 0x80
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f7ff ff18 	bl	8004374 <SPI_WaitFlagStateUntilTimeout>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d007      	beq.n	800455a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454e:	f043 0220 	orr.w	r2, r3, #32
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e000      	b.n	800455c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e041      	b.n	80045fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d106      	bne.n	8004590 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fd fefa 	bl	8002384 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2202      	movs	r2, #2
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	3304      	adds	r3, #4
 80045a0:	4619      	mov	r1, r3
 80045a2:	4610      	mov	r0, r2
 80045a4:	f000 fb0e 	bl	8004bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b082      	sub	sp, #8
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e041      	b.n	8004698 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b00      	cmp	r3, #0
 800461e:	d106      	bne.n	800462e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f839 	bl	80046a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2202      	movs	r2, #2
 8004632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3304      	adds	r3, #4
 800463e:	4619      	mov	r1, r3
 8004640:	4610      	mov	r0, r2
 8004642:	f000 fabf 	bl	8004bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3708      	adds	r7, #8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bc80      	pop	{r7}
 80046b0:	4770      	bx	lr
	...

080046b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d109      	bne.n	80046d8 <HAL_TIM_PWM_Start+0x24>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	bf14      	ite	ne
 80046d0:	2301      	movne	r3, #1
 80046d2:	2300      	moveq	r3, #0
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	e022      	b.n	800471e <HAL_TIM_PWM_Start+0x6a>
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d109      	bne.n	80046f2 <HAL_TIM_PWM_Start+0x3e>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	bf14      	ite	ne
 80046ea:	2301      	movne	r3, #1
 80046ec:	2300      	moveq	r3, #0
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	e015      	b.n	800471e <HAL_TIM_PWM_Start+0x6a>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d109      	bne.n	800470c <HAL_TIM_PWM_Start+0x58>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b01      	cmp	r3, #1
 8004702:	bf14      	ite	ne
 8004704:	2301      	movne	r3, #1
 8004706:	2300      	moveq	r3, #0
 8004708:	b2db      	uxtb	r3, r3
 800470a:	e008      	b.n	800471e <HAL_TIM_PWM_Start+0x6a>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b01      	cmp	r3, #1
 8004716:	bf14      	ite	ne
 8004718:	2301      	movne	r3, #1
 800471a:	2300      	moveq	r3, #0
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e05e      	b.n	80047e4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d104      	bne.n	8004736 <HAL_TIM_PWM_Start+0x82>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004734:	e013      	b.n	800475e <HAL_TIM_PWM_Start+0xaa>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b04      	cmp	r3, #4
 800473a:	d104      	bne.n	8004746 <HAL_TIM_PWM_Start+0x92>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004744:	e00b      	b.n	800475e <HAL_TIM_PWM_Start+0xaa>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b08      	cmp	r3, #8
 800474a:	d104      	bne.n	8004756 <HAL_TIM_PWM_Start+0xa2>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2202      	movs	r2, #2
 8004750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004754:	e003      	b.n	800475e <HAL_TIM_PWM_Start+0xaa>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2202      	movs	r2, #2
 800475a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2201      	movs	r2, #1
 8004764:	6839      	ldr	r1, [r7, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f000 fcac 	bl	80050c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a1e      	ldr	r2, [pc, #120]	; (80047ec <HAL_TIM_PWM_Start+0x138>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d107      	bne.n	8004786 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004784:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a18      	ldr	r2, [pc, #96]	; (80047ec <HAL_TIM_PWM_Start+0x138>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d00e      	beq.n	80047ae <HAL_TIM_PWM_Start+0xfa>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004798:	d009      	beq.n	80047ae <HAL_TIM_PWM_Start+0xfa>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a14      	ldr	r2, [pc, #80]	; (80047f0 <HAL_TIM_PWM_Start+0x13c>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d004      	beq.n	80047ae <HAL_TIM_PWM_Start+0xfa>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a12      	ldr	r2, [pc, #72]	; (80047f4 <HAL_TIM_PWM_Start+0x140>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d111      	bne.n	80047d2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2b06      	cmp	r3, #6
 80047be:	d010      	beq.n	80047e2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f042 0201 	orr.w	r2, r2, #1
 80047ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d0:	e007      	b.n	80047e2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f042 0201 	orr.w	r2, r2, #1
 80047e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	40012c00 	.word	0x40012c00
 80047f0:	40000400 	.word	0x40000400
 80047f4:	40000800 	.word	0x40000800

080047f8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2200      	movs	r2, #0
 8004808:	6839      	ldr	r1, [r7, #0]
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fc5a 	bl	80050c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a29      	ldr	r2, [pc, #164]	; (80048bc <HAL_TIM_PWM_Stop+0xc4>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d117      	bne.n	800484a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6a1a      	ldr	r2, [r3, #32]
 8004820:	f241 1311 	movw	r3, #4369	; 0x1111
 8004824:	4013      	ands	r3, r2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10f      	bne.n	800484a <HAL_TIM_PWM_Stop+0x52>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6a1a      	ldr	r2, [r3, #32]
 8004830:	f240 4344 	movw	r3, #1092	; 0x444
 8004834:	4013      	ands	r3, r2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d107      	bne.n	800484a <HAL_TIM_PWM_Stop+0x52>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004848:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6a1a      	ldr	r2, [r3, #32]
 8004850:	f241 1311 	movw	r3, #4369	; 0x1111
 8004854:	4013      	ands	r3, r2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10f      	bne.n	800487a <HAL_TIM_PWM_Stop+0x82>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6a1a      	ldr	r2, [r3, #32]
 8004860:	f240 4344 	movw	r3, #1092	; 0x444
 8004864:	4013      	ands	r3, r2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d107      	bne.n	800487a <HAL_TIM_PWM_Stop+0x82>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 0201 	bic.w	r2, r2, #1
 8004878:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d104      	bne.n	800488a <HAL_TIM_PWM_Stop+0x92>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004888:	e013      	b.n	80048b2 <HAL_TIM_PWM_Stop+0xba>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b04      	cmp	r3, #4
 800488e:	d104      	bne.n	800489a <HAL_TIM_PWM_Stop+0xa2>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004898:	e00b      	b.n	80048b2 <HAL_TIM_PWM_Stop+0xba>
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	2b08      	cmp	r3, #8
 800489e:	d104      	bne.n	80048aa <HAL_TIM_PWM_Stop+0xb2>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048a8:	e003      	b.n	80048b2 <HAL_TIM_PWM_Stop+0xba>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40012c00 	.word	0x40012c00

080048c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d101      	bne.n	80048da <HAL_TIM_PWM_ConfigChannel+0x1a>
 80048d6:	2302      	movs	r3, #2
 80048d8:	e0ac      	b.n	8004a34 <HAL_TIM_PWM_ConfigChannel+0x174>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b0c      	cmp	r3, #12
 80048e6:	f200 809f 	bhi.w	8004a28 <HAL_TIM_PWM_ConfigChannel+0x168>
 80048ea:	a201      	add	r2, pc, #4	; (adr r2, 80048f0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80048ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f0:	08004925 	.word	0x08004925
 80048f4:	08004a29 	.word	0x08004a29
 80048f8:	08004a29 	.word	0x08004a29
 80048fc:	08004a29 	.word	0x08004a29
 8004900:	08004965 	.word	0x08004965
 8004904:	08004a29 	.word	0x08004a29
 8004908:	08004a29 	.word	0x08004a29
 800490c:	08004a29 	.word	0x08004a29
 8004910:	080049a7 	.word	0x080049a7
 8004914:	08004a29 	.word	0x08004a29
 8004918:	08004a29 	.word	0x08004a29
 800491c:	08004a29 	.word	0x08004a29
 8004920:	080049e7 	.word	0x080049e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68b9      	ldr	r1, [r7, #8]
 800492a:	4618      	mov	r0, r3
 800492c:	f000 f9ac 	bl	8004c88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	699a      	ldr	r2, [r3, #24]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f042 0208 	orr.w	r2, r2, #8
 800493e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699a      	ldr	r2, [r3, #24]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 0204 	bic.w	r2, r2, #4
 800494e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6999      	ldr	r1, [r3, #24]
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	691a      	ldr	r2, [r3, #16]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	619a      	str	r2, [r3, #24]
      break;
 8004962:	e062      	b.n	8004a2a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68b9      	ldr	r1, [r7, #8]
 800496a:	4618      	mov	r0, r3
 800496c:	f000 f9f2 	bl	8004d54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	699a      	ldr	r2, [r3, #24]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800497e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	699a      	ldr	r2, [r3, #24]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800498e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6999      	ldr	r1, [r3, #24]
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	021a      	lsls	r2, r3, #8
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	619a      	str	r2, [r3, #24]
      break;
 80049a4:	e041      	b.n	8004a2a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68b9      	ldr	r1, [r7, #8]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 fa3b 	bl	8004e28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	69da      	ldr	r2, [r3, #28]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0208 	orr.w	r2, r2, #8
 80049c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	69da      	ldr	r2, [r3, #28]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 0204 	bic.w	r2, r2, #4
 80049d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	69d9      	ldr	r1, [r3, #28]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	691a      	ldr	r2, [r3, #16]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	61da      	str	r2, [r3, #28]
      break;
 80049e4:	e021      	b.n	8004a2a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68b9      	ldr	r1, [r7, #8]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f000 fa85 	bl	8004efc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	69da      	ldr	r2, [r3, #28]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	69da      	ldr	r2, [r3, #28]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	69d9      	ldr	r1, [r3, #28]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	021a      	lsls	r2, r3, #8
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	61da      	str	r2, [r3, #28]
      break;
 8004a26:	e000      	b.n	8004a2a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004a28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d101      	bne.n	8004a54 <HAL_TIM_ConfigClockSource+0x18>
 8004a50:	2302      	movs	r3, #2
 8004a52:	e0b3      	b.n	8004bbc <HAL_TIM_ConfigClockSource+0x180>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a7a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a8c:	d03e      	beq.n	8004b0c <HAL_TIM_ConfigClockSource+0xd0>
 8004a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a92:	f200 8087 	bhi.w	8004ba4 <HAL_TIM_ConfigClockSource+0x168>
 8004a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a9a:	f000 8085 	beq.w	8004ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8004a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa2:	d87f      	bhi.n	8004ba4 <HAL_TIM_ConfigClockSource+0x168>
 8004aa4:	2b70      	cmp	r3, #112	; 0x70
 8004aa6:	d01a      	beq.n	8004ade <HAL_TIM_ConfigClockSource+0xa2>
 8004aa8:	2b70      	cmp	r3, #112	; 0x70
 8004aaa:	d87b      	bhi.n	8004ba4 <HAL_TIM_ConfigClockSource+0x168>
 8004aac:	2b60      	cmp	r3, #96	; 0x60
 8004aae:	d050      	beq.n	8004b52 <HAL_TIM_ConfigClockSource+0x116>
 8004ab0:	2b60      	cmp	r3, #96	; 0x60
 8004ab2:	d877      	bhi.n	8004ba4 <HAL_TIM_ConfigClockSource+0x168>
 8004ab4:	2b50      	cmp	r3, #80	; 0x50
 8004ab6:	d03c      	beq.n	8004b32 <HAL_TIM_ConfigClockSource+0xf6>
 8004ab8:	2b50      	cmp	r3, #80	; 0x50
 8004aba:	d873      	bhi.n	8004ba4 <HAL_TIM_ConfigClockSource+0x168>
 8004abc:	2b40      	cmp	r3, #64	; 0x40
 8004abe:	d058      	beq.n	8004b72 <HAL_TIM_ConfigClockSource+0x136>
 8004ac0:	2b40      	cmp	r3, #64	; 0x40
 8004ac2:	d86f      	bhi.n	8004ba4 <HAL_TIM_ConfigClockSource+0x168>
 8004ac4:	2b30      	cmp	r3, #48	; 0x30
 8004ac6:	d064      	beq.n	8004b92 <HAL_TIM_ConfigClockSource+0x156>
 8004ac8:	2b30      	cmp	r3, #48	; 0x30
 8004aca:	d86b      	bhi.n	8004ba4 <HAL_TIM_ConfigClockSource+0x168>
 8004acc:	2b20      	cmp	r3, #32
 8004ace:	d060      	beq.n	8004b92 <HAL_TIM_ConfigClockSource+0x156>
 8004ad0:	2b20      	cmp	r3, #32
 8004ad2:	d867      	bhi.n	8004ba4 <HAL_TIM_ConfigClockSource+0x168>
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d05c      	beq.n	8004b92 <HAL_TIM_ConfigClockSource+0x156>
 8004ad8:	2b10      	cmp	r3, #16
 8004ada:	d05a      	beq.n	8004b92 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004adc:	e062      	b.n	8004ba4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6818      	ldr	r0, [r3, #0]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	6899      	ldr	r1, [r3, #8]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	f000 faca 	bl	8005086 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b00:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	609a      	str	r2, [r3, #8]
      break;
 8004b0a:	e04e      	b.n	8004baa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6818      	ldr	r0, [r3, #0]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	6899      	ldr	r1, [r3, #8]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f000 fab3 	bl	8005086 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689a      	ldr	r2, [r3, #8]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b2e:	609a      	str	r2, [r3, #8]
      break;
 8004b30:	e03b      	b.n	8004baa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6818      	ldr	r0, [r3, #0]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	6859      	ldr	r1, [r3, #4]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	f000 fa2a 	bl	8004f98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2150      	movs	r1, #80	; 0x50
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 fa81 	bl	8005052 <TIM_ITRx_SetConfig>
      break;
 8004b50:	e02b      	b.n	8004baa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6818      	ldr	r0, [r3, #0]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	6859      	ldr	r1, [r3, #4]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	f000 fa48 	bl	8004ff4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2160      	movs	r1, #96	; 0x60
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 fa71 	bl	8005052 <TIM_ITRx_SetConfig>
      break;
 8004b70:	e01b      	b.n	8004baa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6818      	ldr	r0, [r3, #0]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	6859      	ldr	r1, [r3, #4]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	461a      	mov	r2, r3
 8004b80:	f000 fa0a 	bl	8004f98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2140      	movs	r1, #64	; 0x40
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 fa61 	bl	8005052 <TIM_ITRx_SetConfig>
      break;
 8004b90:	e00b      	b.n	8004baa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	4610      	mov	r0, r2
 8004b9e:	f000 fa58 	bl	8005052 <TIM_ITRx_SetConfig>
        break;
 8004ba2:	e002      	b.n	8004baa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ba4:	bf00      	nop
 8004ba6:	e000      	b.n	8004baa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ba8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a29      	ldr	r2, [pc, #164]	; (8004c7c <TIM_Base_SetConfig+0xb8>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d00b      	beq.n	8004bf4 <TIM_Base_SetConfig+0x30>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be2:	d007      	beq.n	8004bf4 <TIM_Base_SetConfig+0x30>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a26      	ldr	r2, [pc, #152]	; (8004c80 <TIM_Base_SetConfig+0xbc>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d003      	beq.n	8004bf4 <TIM_Base_SetConfig+0x30>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a25      	ldr	r2, [pc, #148]	; (8004c84 <TIM_Base_SetConfig+0xc0>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d108      	bne.n	8004c06 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a1c      	ldr	r2, [pc, #112]	; (8004c7c <TIM_Base_SetConfig+0xb8>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00b      	beq.n	8004c26 <TIM_Base_SetConfig+0x62>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c14:	d007      	beq.n	8004c26 <TIM_Base_SetConfig+0x62>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a19      	ldr	r2, [pc, #100]	; (8004c80 <TIM_Base_SetConfig+0xbc>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d003      	beq.n	8004c26 <TIM_Base_SetConfig+0x62>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a18      	ldr	r2, [pc, #96]	; (8004c84 <TIM_Base_SetConfig+0xc0>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d108      	bne.n	8004c38 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	689a      	ldr	r2, [r3, #8]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a07      	ldr	r2, [pc, #28]	; (8004c7c <TIM_Base_SetConfig+0xb8>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d103      	bne.n	8004c6c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	691a      	ldr	r2, [r3, #16]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	615a      	str	r2, [r3, #20]
}
 8004c72:	bf00      	nop
 8004c74:	3714      	adds	r7, #20
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bc80      	pop	{r7}
 8004c7a:	4770      	bx	lr
 8004c7c:	40012c00 	.word	0x40012c00
 8004c80:	40000400 	.word	0x40000400
 8004c84:	40000800 	.word	0x40000800

08004c88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	f023 0201 	bic.w	r2, r3, #1
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f023 0303 	bic.w	r3, r3, #3
 8004cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f023 0302 	bic.w	r3, r3, #2
 8004cd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a1c      	ldr	r2, [pc, #112]	; (8004d50 <TIM_OC1_SetConfig+0xc8>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d10c      	bne.n	8004cfe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f023 0308 	bic.w	r3, r3, #8
 8004cea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f023 0304 	bic.w	r3, r3, #4
 8004cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a13      	ldr	r2, [pc, #76]	; (8004d50 <TIM_OC1_SetConfig+0xc8>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d111      	bne.n	8004d2a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	621a      	str	r2, [r3, #32]
}
 8004d44:	bf00      	nop
 8004d46:	371c      	adds	r7, #28
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bc80      	pop	{r7}
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	40012c00 	.word	0x40012c00

08004d54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b087      	sub	sp, #28
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	f023 0210 	bic.w	r2, r3, #16
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	021b      	lsls	r3, r3, #8
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f023 0320 	bic.w	r3, r3, #32
 8004d9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	011b      	lsls	r3, r3, #4
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a1d      	ldr	r2, [pc, #116]	; (8004e24 <TIM_OC2_SetConfig+0xd0>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d10d      	bne.n	8004dd0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	011b      	lsls	r3, r3, #4
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a14      	ldr	r2, [pc, #80]	; (8004e24 <TIM_OC2_SetConfig+0xd0>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d113      	bne.n	8004e00 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004de6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	621a      	str	r2, [r3, #32]
}
 8004e1a:	bf00      	nop
 8004e1c:	371c      	adds	r7, #28
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bc80      	pop	{r7}
 8004e22:	4770      	bx	lr
 8004e24:	40012c00 	.word	0x40012c00

08004e28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f023 0303 	bic.w	r3, r3, #3
 8004e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	021b      	lsls	r3, r3, #8
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a1d      	ldr	r2, [pc, #116]	; (8004ef8 <TIM_OC3_SetConfig+0xd0>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d10d      	bne.n	8004ea2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	021b      	lsls	r3, r3, #8
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ea0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a14      	ldr	r2, [pc, #80]	; (8004ef8 <TIM_OC3_SetConfig+0xd0>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d113      	bne.n	8004ed2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004eb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	011b      	lsls	r3, r3, #4
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	011b      	lsls	r3, r3, #4
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685a      	ldr	r2, [r3, #4]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	621a      	str	r2, [r3, #32]
}
 8004eec:	bf00      	nop
 8004eee:	371c      	adds	r7, #28
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bc80      	pop	{r7}
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	40012c00 	.word	0x40012c00

08004efc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b087      	sub	sp, #28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	021b      	lsls	r3, r3, #8
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	031b      	lsls	r3, r3, #12
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a0f      	ldr	r2, [pc, #60]	; (8004f94 <TIM_OC4_SetConfig+0x98>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d109      	bne.n	8004f70 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	019b      	lsls	r3, r3, #6
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	621a      	str	r2, [r3, #32]
}
 8004f8a:	bf00      	nop
 8004f8c:	371c      	adds	r7, #28
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bc80      	pop	{r7}
 8004f92:	4770      	bx	lr
 8004f94:	40012c00 	.word	0x40012c00

08004f98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	f023 0201 	bic.w	r2, r3, #1
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	011b      	lsls	r3, r3, #4
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f023 030a 	bic.w	r3, r3, #10
 8004fd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	621a      	str	r2, [r3, #32]
}
 8004fea:	bf00      	nop
 8004fec:	371c      	adds	r7, #28
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bc80      	pop	{r7}
 8004ff2:	4770      	bx	lr

08004ff4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	f023 0210 	bic.w	r2, r3, #16
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800501e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	031b      	lsls	r3, r3, #12
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	4313      	orrs	r3, r2
 8005028:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005030:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	011b      	lsls	r3, r3, #4
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	4313      	orrs	r3, r2
 800503a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	621a      	str	r2, [r3, #32]
}
 8005048:	bf00      	nop
 800504a:	371c      	adds	r7, #28
 800504c:	46bd      	mov	sp, r7
 800504e:	bc80      	pop	{r7}
 8005050:	4770      	bx	lr

08005052 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005052:	b480      	push	{r7}
 8005054:	b085      	sub	sp, #20
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
 800505a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005068:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4313      	orrs	r3, r2
 8005070:	f043 0307 	orr.w	r3, r3, #7
 8005074:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	609a      	str	r2, [r3, #8]
}
 800507c:	bf00      	nop
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	bc80      	pop	{r7}
 8005084:	4770      	bx	lr

08005086 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005086:	b480      	push	{r7}
 8005088:	b087      	sub	sp, #28
 800508a:	af00      	add	r7, sp, #0
 800508c:	60f8      	str	r0, [r7, #12]
 800508e:	60b9      	str	r1, [r7, #8]
 8005090:	607a      	str	r2, [r7, #4]
 8005092:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	021a      	lsls	r2, r3, #8
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	431a      	orrs	r2, r3
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	609a      	str	r2, [r3, #8]
}
 80050ba:	bf00      	nop
 80050bc:	371c      	adds	r7, #28
 80050be:	46bd      	mov	sp, r7
 80050c0:	bc80      	pop	{r7}
 80050c2:	4770      	bx	lr

080050c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b087      	sub	sp, #28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	f003 031f 	and.w	r3, r3, #31
 80050d6:	2201      	movs	r2, #1
 80050d8:	fa02 f303 	lsl.w	r3, r2, r3
 80050dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6a1a      	ldr	r2, [r3, #32]
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	43db      	mvns	r3, r3
 80050e6:	401a      	ands	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6a1a      	ldr	r2, [r3, #32]
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	f003 031f 	and.w	r3, r3, #31
 80050f6:	6879      	ldr	r1, [r7, #4]
 80050f8:	fa01 f303 	lsl.w	r3, r1, r3
 80050fc:	431a      	orrs	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	621a      	str	r2, [r3, #32]
}
 8005102:	bf00      	nop
 8005104:	371c      	adds	r7, #28
 8005106:	46bd      	mov	sp, r7
 8005108:	bc80      	pop	{r7}
 800510a:	4770      	bx	lr

0800510c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800511c:	2b01      	cmp	r3, #1
 800511e:	d101      	bne.n	8005124 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005120:	2302      	movs	r3, #2
 8005122:	e046      	b.n	80051b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800514a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	4313      	orrs	r3, r2
 8005154:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a16      	ldr	r2, [pc, #88]	; (80051bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d00e      	beq.n	8005186 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005170:	d009      	beq.n	8005186 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a12      	ldr	r2, [pc, #72]	; (80051c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d004      	beq.n	8005186 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a10      	ldr	r2, [pc, #64]	; (80051c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d10c      	bne.n	80051a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800518c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	68ba      	ldr	r2, [r7, #8]
 8005194:	4313      	orrs	r3, r2
 8005196:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bc80      	pop	{r7}
 80051ba:	4770      	bx	lr
 80051bc:	40012c00 	.word	0x40012c00
 80051c0:	40000400 	.word	0x40000400
 80051c4:	40000800 	.word	0x40000800

080051c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80051d2:	2300      	movs	r3, #0
 80051d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d101      	bne.n	80051e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80051e0:	2302      	movs	r3, #2
 80051e2:	e03d      	b.n	8005260 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	4313      	orrs	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	4313      	orrs	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4313      	orrs	r3, r2
 8005222:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	4313      	orrs	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	4313      	orrs	r3, r2
 800523e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	4313      	orrs	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3714      	adds	r7, #20
 8005264:	46bd      	mov	sp, r7
 8005266:	bc80      	pop	{r7}
 8005268:	4770      	bx	lr

0800526a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b082      	sub	sp, #8
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d101      	bne.n	800527c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e03f      	b.n	80052fc <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b00      	cmp	r3, #0
 8005286:	d106      	bne.n	8005296 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f7fd f8c9 	bl	8002428 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2224      	movs	r2, #36	; 0x24
 800529a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68da      	ldr	r2, [r3, #12]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052ac:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f904 	bl	80054bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	691a      	ldr	r2, [r3, #16]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052c2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	695a      	ldr	r2, [r3, #20]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052d2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68da      	ldr	r2, [r3, #12]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052e2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2220      	movs	r2, #32
 80052ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2220      	movs	r2, #32
 80052f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3708      	adds	r7, #8
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b08a      	sub	sp, #40	; 0x28
 8005308:	af02      	add	r7, sp, #8
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	603b      	str	r3, [r7, #0]
 8005310:	4613      	mov	r3, r2
 8005312:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005314:	2300      	movs	r3, #0
 8005316:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b20      	cmp	r3, #32
 8005322:	d17c      	bne.n	800541e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <HAL_UART_Transmit+0x2c>
 800532a:	88fb      	ldrh	r3, [r7, #6]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e075      	b.n	8005420 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800533a:	2b01      	cmp	r3, #1
 800533c:	d101      	bne.n	8005342 <HAL_UART_Transmit+0x3e>
 800533e:	2302      	movs	r3, #2
 8005340:	e06e      	b.n	8005420 <HAL_UART_Transmit+0x11c>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2221      	movs	r2, #33	; 0x21
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005358:	f7fd f9ee 	bl	8002738 <HAL_GetTick>
 800535c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	88fa      	ldrh	r2, [r7, #6]
 8005362:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	88fa      	ldrh	r2, [r7, #6]
 8005368:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005372:	d108      	bne.n	8005386 <HAL_UART_Transmit+0x82>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d104      	bne.n	8005386 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800537c:	2300      	movs	r3, #0
 800537e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	61bb      	str	r3, [r7, #24]
 8005384:	e003      	b.n	800538e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800538a:	2300      	movs	r3, #0
 800538c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005396:	e02a      	b.n	80053ee <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	2200      	movs	r2, #0
 80053a0:	2180      	movs	r1, #128	; 0x80
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f000 f840 	bl	8005428 <UART_WaitOnFlagUntilTimeout>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e036      	b.n	8005420 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d10b      	bne.n	80053d0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	881b      	ldrh	r3, [r3, #0]
 80053bc:	461a      	mov	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053c6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	3302      	adds	r3, #2
 80053cc:	61bb      	str	r3, [r7, #24]
 80053ce:	e007      	b.n	80053e0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	781a      	ldrb	r2, [r3, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	3301      	adds	r3, #1
 80053de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	3b01      	subs	r3, #1
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1cf      	bne.n	8005398 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	9300      	str	r3, [sp, #0]
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	2200      	movs	r2, #0
 8005400:	2140      	movs	r1, #64	; 0x40
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f000 f810 	bl	8005428 <UART_WaitOnFlagUntilTimeout>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e006      	b.n	8005420 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2220      	movs	r2, #32
 8005416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800541a:	2300      	movs	r3, #0
 800541c:	e000      	b.n	8005420 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800541e:	2302      	movs	r3, #2
  }
}
 8005420:	4618      	mov	r0, r3
 8005422:	3720      	adds	r7, #32
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	603b      	str	r3, [r7, #0]
 8005434:	4613      	mov	r3, r2
 8005436:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005438:	e02c      	b.n	8005494 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005440:	d028      	beq.n	8005494 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d007      	beq.n	8005458 <UART_WaitOnFlagUntilTimeout+0x30>
 8005448:	f7fd f976 	bl	8002738 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	69ba      	ldr	r2, [r7, #24]
 8005454:	429a      	cmp	r2, r3
 8005456:	d21d      	bcs.n	8005494 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68da      	ldr	r2, [r3, #12]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005466:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	695a      	ldr	r2, [r3, #20]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f022 0201 	bic.w	r2, r2, #1
 8005476:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2220      	movs	r2, #32
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2220      	movs	r2, #32
 8005484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e00f      	b.n	80054b4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	4013      	ands	r3, r2
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	bf0c      	ite	eq
 80054a4:	2301      	moveq	r3, #1
 80054a6:	2300      	movne	r3, #0
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	461a      	mov	r2, r3
 80054ac:	79fb      	ldrb	r3, [r7, #7]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d0c3      	beq.n	800543a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	689a      	ldr	r2, [r3, #8]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	431a      	orrs	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80054f6:	f023 030c 	bic.w	r3, r3, #12
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	6812      	ldr	r2, [r2, #0]
 80054fe:	68b9      	ldr	r1, [r7, #8]
 8005500:	430b      	orrs	r3, r1
 8005502:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	699a      	ldr	r2, [r3, #24]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a2c      	ldr	r2, [pc, #176]	; (80055d0 <UART_SetConfig+0x114>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d103      	bne.n	800552c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005524:	f7fe f9ca 	bl	80038bc <HAL_RCC_GetPCLK2Freq>
 8005528:	60f8      	str	r0, [r7, #12]
 800552a:	e002      	b.n	8005532 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800552c:	f7fe f9b2 	bl	8003894 <HAL_RCC_GetPCLK1Freq>
 8005530:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	4613      	mov	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	009a      	lsls	r2, r3, #2
 800553c:	441a      	add	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	fbb2 f3f3 	udiv	r3, r2, r3
 8005548:	4a22      	ldr	r2, [pc, #136]	; (80055d4 <UART_SetConfig+0x118>)
 800554a:	fba2 2303 	umull	r2, r3, r2, r3
 800554e:	095b      	lsrs	r3, r3, #5
 8005550:	0119      	lsls	r1, r3, #4
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	4613      	mov	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	009a      	lsls	r2, r3, #2
 800555c:	441a      	add	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	fbb2 f2f3 	udiv	r2, r2, r3
 8005568:	4b1a      	ldr	r3, [pc, #104]	; (80055d4 <UART_SetConfig+0x118>)
 800556a:	fba3 0302 	umull	r0, r3, r3, r2
 800556e:	095b      	lsrs	r3, r3, #5
 8005570:	2064      	movs	r0, #100	; 0x64
 8005572:	fb00 f303 	mul.w	r3, r0, r3
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	011b      	lsls	r3, r3, #4
 800557a:	3332      	adds	r3, #50	; 0x32
 800557c:	4a15      	ldr	r2, [pc, #84]	; (80055d4 <UART_SetConfig+0x118>)
 800557e:	fba2 2303 	umull	r2, r3, r2, r3
 8005582:	095b      	lsrs	r3, r3, #5
 8005584:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005588:	4419      	add	r1, r3
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	4613      	mov	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4413      	add	r3, r2
 8005592:	009a      	lsls	r2, r3, #2
 8005594:	441a      	add	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	fbb2 f2f3 	udiv	r2, r2, r3
 80055a0:	4b0c      	ldr	r3, [pc, #48]	; (80055d4 <UART_SetConfig+0x118>)
 80055a2:	fba3 0302 	umull	r0, r3, r3, r2
 80055a6:	095b      	lsrs	r3, r3, #5
 80055a8:	2064      	movs	r0, #100	; 0x64
 80055aa:	fb00 f303 	mul.w	r3, r0, r3
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	3332      	adds	r3, #50	; 0x32
 80055b4:	4a07      	ldr	r2, [pc, #28]	; (80055d4 <UART_SetConfig+0x118>)
 80055b6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ba:	095b      	lsrs	r3, r3, #5
 80055bc:	f003 020f 	and.w	r2, r3, #15
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	440a      	add	r2, r1
 80055c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80055c8:	bf00      	nop
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	40013800 	.word	0x40013800
 80055d4:	51eb851f 	.word	0x51eb851f

080055d8 <_ZN11MC3479Class12setSerialSPIEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:



// Set the MC3479's SPI object
bool MC3479Class::setSerialSPI(SPI_HandleTypeDef * spi,GPIO_TypeDef * csn_GPIO, uint16_t csn_PIN )
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
 80055e4:	807b      	strh	r3, [r7, #2]
	this->_SPI1 = spi;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	601a      	str	r2, [r3, #0]
	this->_CSN_GPIO = csn_GPIO;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	609a      	str	r2, [r3, #8]
	this->_CSN_PIN = csn_PIN;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	887a      	ldrh	r2, [r7, #2]
 80055f6:	819a      	strh	r2, [r3, #12]
	return 1; // Return Success
 80055f8:	2301      	movs	r3, #1
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	bc80      	pop	{r7}
 8005602:	4770      	bx	lr

08005604 <_ZN11MC3479Class16SPI_readRegisterEhPh>:

// Read from a register using SPI
bool MC3479Class::SPI_readRegister(uint8_t reg,  uint8_t* data)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b086      	sub	sp, #24
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	460b      	mov	r3, r1
 800560e:	607a      	str	r2, [r7, #4]
 8005610:	72fb      	strb	r3, [r7, #11]

	uint8_t spiBytes[2];
	spiBytes[0] = SPIread_REG | reg;
 8005612:	7afb      	ldrb	r3, [r7, #11]
 8005614:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005618:	b2db      	uxtb	r3, r3
 800561a:	753b      	strb	r3, [r7, #20]
	spiBytes[1] = SPIread_BYTE2;
 800561c:	2300      	movs	r3, #0
 800561e:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_RESET);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6898      	ldr	r0, [r3, #8]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	899b      	ldrh	r3, [r3, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	4619      	mov	r1, r3
 800562c:	f7fd fd43 	bl	80030b6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_SPI1, &spiBytes[0], sizeof(spiBytes), 10);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6818      	ldr	r0, [r3, #0]
 8005634:	f107 0114 	add.w	r1, r7, #20
 8005638:	230a      	movs	r3, #10
 800563a:	2202      	movs	r2, #2
 800563c:	f7fe faaa 	bl	8003b94 <HAL_SPI_Transmit>
	HAL_SPI_Receive(this->_SPI1, data, REG_BYTES_LEN, 10);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6818      	ldr	r0, [r3, #0]
 8005644:	230a      	movs	r3, #10
 8005646:	2201      	movs	r2, #1
 8005648:	6879      	ldr	r1, [r7, #4]
 800564a:	f7fe fbdf 	bl	8003e0c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_SET);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6898      	ldr	r0, [r3, #8]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	899b      	ldrh	r3, [r3, #12]
 8005656:	2201      	movs	r2, #1
 8005658:	4619      	mov	r1, r3
 800565a:	f7fd fd2c 	bl	80030b6 <HAL_GPIO_WritePin>
	return 1;
 800565e:	2301      	movs	r3, #1
}
 8005660:	4618      	mov	r0, r3
 8005662:	3718      	adds	r7, #24
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <_ZN11MC3479Class17SPI_writeRegisterEhh>:

// Write to a register using SPI
uint8_t MC3479Class::SPI_writeRegister(uint8_t reg, uint8_t data)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	460b      	mov	r3, r1
 8005672:	70fb      	strb	r3, [r7, #3]
 8005674:	4613      	mov	r3, r2
 8005676:	70bb      	strb	r3, [r7, #2]
	// Write data to reg:
	uint8_t spiBytes[2];
	spiBytes[0] = SPIwrite_REG | reg;
 8005678:	78fb      	ldrb	r3, [r7, #3]
 800567a:	733b      	strb	r3, [r7, #12]
	spiBytes[1] = data;
 800567c:	78bb      	ldrb	r3, [r7, #2]
 800567e:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_RESET);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6898      	ldr	r0, [r3, #8]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	899b      	ldrh	r3, [r3, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	4619      	mov	r1, r3
 800568c:	f7fd fd13 	bl	80030b6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_SPI1, &spiBytes[0], sizeof(spiBytes), 10);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6818      	ldr	r0, [r3, #0]
 8005694:	f107 010c 	add.w	r1, r7, #12
 8005698:	230a      	movs	r3, #10
 800569a:	2202      	movs	r2, #2
 800569c:	f7fe fa7a 	bl	8003b94 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_SET);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6898      	ldr	r0, [r3, #8]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	899b      	ldrh	r3, [r3, #12]
 80056a8:	2201      	movs	r2, #1
 80056aa:	4619      	mov	r1, r3
 80056ac:	f7fd fd03 	bl	80030b6 <HAL_GPIO_WritePin>

	// Read back the register and return the bytes:
	uint8_t regReadBack = 0;
 80056b0:	2300      	movs	r3, #0
 80056b2:	72fb      	strb	r3, [r7, #11]
	MC3479Class::SPI_readRegister(reg, &regReadBack);
 80056b4:	f107 020b 	add.w	r2, r7, #11
 80056b8:	78fb      	ldrb	r3, [r7, #3]
 80056ba:	4619      	mov	r1, r3
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7ff ffa1 	bl	8005604 <_ZN11MC3479Class16SPI_readRegisterEhPh>
	return regReadBack;
 80056c2:	7afb      	ldrb	r3, [r7, #11]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <_ZN11MC3479Class21burstSPI_readRegisterEhPhh>:

// Read from a register using SPI
bool MC3479Class::burstSPI_readRegister(uint8_t reg, uint8_t* data, uint8_t reg_count)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b086      	sub	sp, #24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	607a      	str	r2, [r7, #4]
 80056d6:	461a      	mov	r2, r3
 80056d8:	460b      	mov	r3, r1
 80056da:	72fb      	strb	r3, [r7, #11]
 80056dc:	4613      	mov	r3, r2
 80056de:	72bb      	strb	r3, [r7, #10]
	uint8_t spiBytes[2];
	spiBytes[0] = SPIread_REG | reg;
 80056e0:	7afb      	ldrb	r3, [r7, #11]
 80056e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	753b      	strb	r3, [r7, #20]
	spiBytes[1] = SPIread_BYTE2;
 80056ea:	2300      	movs	r3, #0
 80056ec:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_RESET);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6898      	ldr	r0, [r3, #8]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	899b      	ldrh	r3, [r3, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	4619      	mov	r1, r3
 80056fa:	f7fd fcdc 	bl	80030b6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_SPI1, spiBytes, sizeof(spiBytes), 10);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6818      	ldr	r0, [r3, #0]
 8005702:	f107 0114 	add.w	r1, r7, #20
 8005706:	230a      	movs	r3, #10
 8005708:	2202      	movs	r2, #2
 800570a:	f7fe fa43 	bl	8003b94 <HAL_SPI_Transmit>

	for (uint8_t i=0; i<reg_count; i++)
 800570e:	2300      	movs	r3, #0
 8005710:	75fb      	strb	r3, [r7, #23]
 8005712:	7dfa      	ldrb	r2, [r7, #23]
 8005714:	7abb      	ldrb	r3, [r7, #10]
 8005716:	429a      	cmp	r2, r3
 8005718:	d20c      	bcs.n	8005734 <_ZN11MC3479Class21burstSPI_readRegisterEhPhh+0x68>
	{
		//TODO: Validate that data[0] will be Xdata LSB
		HAL_SPI_Receive(this->_SPI1, &data[i], REG_BYTES_LEN, 10);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6818      	ldr	r0, [r3, #0]
 800571e:	7dfb      	ldrb	r3, [r7, #23]
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	18d1      	adds	r1, r2, r3
 8005724:	230a      	movs	r3, #10
 8005726:	2201      	movs	r2, #1
 8005728:	f7fe fb70 	bl	8003e0c <HAL_SPI_Receive>
	for (uint8_t i=0; i<reg_count; i++)
 800572c:	7dfb      	ldrb	r3, [r7, #23]
 800572e:	3301      	adds	r3, #1
 8005730:	75fb      	strb	r3, [r7, #23]
 8005732:	e7ee      	b.n	8005712 <_ZN11MC3479Class21burstSPI_readRegisterEhPhh+0x46>
	}
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_SET);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6898      	ldr	r0, [r3, #8]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	899b      	ldrh	r3, [r3, #12]
 800573c:	2201      	movs	r2, #1
 800573e:	4619      	mov	r1, r3
 8005740:	f7fd fcb9 	bl	80030b6 <HAL_GPIO_WritePin>
	return 1;
 8005744:	2301      	movs	r3, #1

}
 8005746:	4618      	mov	r0, r3
 8005748:	3718      	adds	r7, #24
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <_ZN11MC3479Class19configAccelerometerEv>:
	return 1;
}
#endif

// Perform the initial MC3479 hard-coded configuration
void MC3479Class::configAccelerometer(){
 800574e:	b580      	push	{r7, lr}
 8005750:	b084      	sub	sp, #16
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]

#ifdef _SPI_COM_ENABLED
		//Configuration using SPI:

		// Register 0x06 (interrupt enable)
		data = 0xFF & ACQ_INT_EN; //only activates interrupts after each sample
 8005756:	2380      	movs	r3, #128	; 0x80
 8005758:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_INTR_CTRL, data);
 800575a:	7bfb      	ldrb	r3, [r7, #15]
 800575c:	461a      	mov	r2, r3
 800575e:	2106      	movs	r1, #6
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f7ff ff81 	bl	8005668 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x07 (MODE)
		data = 0xFF & WAKE; // clocks running, X,Y,Z axis sampled @ data rate
 8005766:	2301      	movs	r3, #1
 8005768:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_MODE, data);
 800576a:	7bfb      	ldrb	r3, [r7, #15]
 800576c:	461a      	mov	r2, r3
 800576e:	2107      	movs	r1, #7
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f7ff ff79 	bl	8005668 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x08 (Sample  Rate)
		data = 0xFF & RATE7_2000Hz; // sample x,y,z @ 100Hz
 8005776:	230f      	movs	r3, #15
 8005778:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_SR, data);
 800577a:	7bfb      	ldrb	r3, [r7, #15]
 800577c:	461a      	mov	r2, r3
 800577e:	2108      	movs	r1, #8
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7ff ff71 	bl	8005668 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x09 (Motion Control)
		data = 0xFF & 0x00; //No motion detection enabled Z-axis positive through top of package
 8005786:	2300      	movs	r3, #0
 8005788:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_MOTION_CTRL, data);
 800578a:	7bfb      	ldrb	r3, [r7, #15]
 800578c:	461a      	mov	r2, r3
 800578e:	2109      	movs	r1, #9
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f7ff ff69 	bl	8005668 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x20 (Range Select Control)
		data = 0xFF & 0x00; // No resolution range change, no LPF
 8005796:	2300      	movs	r3, #0
 8005798:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_RANGE, data);
 800579a:	7bfb      	ldrb	r3, [r7, #15]
 800579c:	461a      	mov	r2, r3
 800579e:	2120      	movs	r1, #32
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f7ff ff61 	bl	8005668 <_ZN11MC3479Class17SPI_writeRegisterEhh>
//		MC3479Class::SPI_readRegister(MC3479_ZGAIN, &data);
//		data = data & 0xFF; //no GAIN
//		MC3479Class::SPI_writeRegister(MC3479_ZGAIN, data);

		// RegisteO 0x2D (FIFO Control)
		data = 0XFF & FIFO_TH_INT_EN & FIFO_FULL_INT_EN; // FIFO TH/Full IRQ set on INTN2 pin.
 80057a6:	2300      	movs	r3, #0
 80057a8:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_FIFO_CTRL, data);
 80057aa:	7bfb      	ldrb	r3, [r7, #15]
 80057ac:	461a      	mov	r2, r3
 80057ae:	212d      	movs	r1, #45	; 0x2d
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f7ff ff59 	bl	8005668 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x2E (FIFO Threshold)
		data = 0xFF & 0x10; //FIFO IRQ threshold set to 50%
 80057b6:	2310      	movs	r3, #16
 80057b8:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_FIFO_TH, data);
 80057ba:	7bfb      	ldrb	r3, [r7, #15]
 80057bc:	461a      	mov	r2, r3
 80057be:	212e      	movs	r1, #46	; 0x2e
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f7ff ff51 	bl	8005668 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x30 (FIFO Control 2, Sample Rate 2)
		//Burst-read cycle that includes XOUT[15:0], YOUT[15:0],
		//ZOUT[15:0], annd NOTTTT: STATUS[7:0], and INTR_STATUS[7:0]:
		data = 0xFF & 0x00;
 80057c6:	2300      	movs	r3, #0
 80057c8:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_FIFO_CTRL2_SR2, data);
 80057ca:	7bfb      	ldrb	r3, [r7, #15]
 80057cc:	461a      	mov	r2, r3
 80057ce:	2130      	movs	r1, #48	; 0x30
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f7ff ff49 	bl	8005668 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x31 (Communication Control)
		data = 0xFF & 0x00; //0x14 interrupts are cleared simultaneously, 4bit SPI, default Interrupt pins
 80057d6:	2300      	movs	r3, #0
 80057d8:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_COMM_CTRL, data);
 80057da:	7bfb      	ldrb	r3, [r7, #15]
 80057dc:	461a      	mov	r2, r3
 80057de:	2131      	movs	r1, #49	; 0x31
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f7ff ff41 	bl	8005668 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x33 (GPIO Control)
		data = 0xFF & GPIO1_INTN1_IPP & GPIO2_INTN2_IPP; // interrupt pins are push-pull, active low
 80057e6:	2300      	movs	r3, #0
 80057e8:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_GPIO_CTRL, data);
 80057ea:	7bfb      	ldrb	r3, [r7, #15]
 80057ec:	461a      	mov	r2, r3
 80057ee:	2133      	movs	r1, #51	; 0x33
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f7ff ff39 	bl	8005668 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x40 (Tilt/Flip threshold LSB)
		data = 0xFF & 0x0F; // 15/255 Tilt/Flip Threshold LSB
 80057f6:	230f      	movs	r3, #15
 80057f8:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_TF_THRESH_LSB, data);
 80057fa:	7bfb      	ldrb	r3, [r7, #15]
 80057fc:	461a      	mov	r2, r3
 80057fe:	2140      	movs	r1, #64	; 0x40
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f7ff ff31 	bl	8005668 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x41 (Tilt/Flip threshold MSB)
		data = 0xFF & 0x00; // 0/255 Tilt/Flip Threshold MSB
 8005806:	2300      	movs	r3, #0
 8005808:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_TF_THRESH_MSB, data);
 800580a:	7bfb      	ldrb	r3, [r7, #15]
 800580c:	461a      	mov	r2, r3
 800580e:	2141      	movs	r1, #65	; 0x41
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f7ff ff29 	bl	8005668 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x42 (Tilt/Flip De-bounce)
		data = 0xFF & 0x0F; // Tilt/Flip de-bounce duration to 15/255 before triggering IRQ
 8005816:	230f      	movs	r3, #15
 8005818:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_TF_DB, data);
 800581a:	7bfb      	ldrb	r3, [r7, #15]
 800581c:	461a      	mov	r2, r3
 800581e:	2142      	movs	r1, #66	; 0x42
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7ff ff21 	bl	8005668 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x43 (AnyMotion Threshold LSB)
		data = 0xFF & 0x0F; // 15/255 AnyMotionThreshold LSB
 8005826:	230f      	movs	r3, #15
 8005828:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_AM_THRESH_LSB, data);
 800582a:	7bfb      	ldrb	r3, [r7, #15]
 800582c:	461a      	mov	r2, r3
 800582e:	2143      	movs	r1, #67	; 0x43
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f7ff ff19 	bl	8005668 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x44 (AnyMotion Threshold MSB)
		data = 0xFF & 0x00; // 0/255 AnyMotionThreshold MSB
 8005836:	2300      	movs	r3, #0
 8005838:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_AM_THRESH_MSB, data);
 800583a:	7bfb      	ldrb	r3, [r7, #15]
 800583c:	461a      	mov	r2, r3
 800583e:	2144      	movs	r1, #68	; 0x44
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7ff ff11 	bl	8005668 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x45 (AnyMotion De-bounce)
		data = 0xFF & 0x0F; // AnyMotion de-bounce duration to 15/255 before triggering IRQ
 8005846:	230f      	movs	r3, #15
 8005848:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_AM_DB, data);
 800584a:	7bfb      	ldrb	r3, [r7, #15]
 800584c:	461a      	mov	r2, r3
 800584e:	2145      	movs	r1, #69	; 0x45
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f7ff ff09 	bl	8005668 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x46 (Shake Threshold LSB)
		data = 0xFF & 0x0F; // 15/255 Shake Threshold LSB
 8005856:	230f      	movs	r3, #15
 8005858:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_SHK_THRESH_LSB, data);
 800585a:	7bfb      	ldrb	r3, [r7, #15]
 800585c:	461a      	mov	r2, r3
 800585e:	2146      	movs	r1, #70	; 0x46
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f7ff ff01 	bl	8005668 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x47 (Shake Threshold MSB)
		data = 0xFF & 0x00; // 0/255 Shake Threshold MSB
 8005866:	2300      	movs	r3, #0
 8005868:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_SHK_THRESH_MSB, data);
 800586a:	7bfb      	ldrb	r3, [r7, #15]
 800586c:	461a      	mov	r2, r3
 800586e:	2147      	movs	r1, #71	; 0x47
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f7ff fef9 	bl	8005668 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x48 (Peak-to-Peak Duration LSB)
		data = 0xFF & 0x00; // Minimum duration to trigger a shake interrupt - unused???
 8005876:	2300      	movs	r3, #0
 8005878:	73fb      	strb	r3, [r7, #15]
		//TODO: are we using p2p or shake counter thresholds for interrupts??
		MC3479Class::SPI_writeRegister(MC3479_PK_P2P_DUR_THRESH_LSB, data);
 800587a:	7bfb      	ldrb	r3, [r7, #15]
 800587c:	461a      	mov	r2, r3
 800587e:	2148      	movs	r1, #72	; 0x48
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f7ff fef1 	bl	8005668 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x49 (Shake/Peak-to-Peak Duration MSB)
		data = 0xFF & 0x00; // Minimum duration to trigger a shake interrupt - unused???
 8005886:	2300      	movs	r3, #0
 8005888:	73fb      	strb	r3, [r7, #15]
		//TODO: are we using p2p or shake counter thresholds for interrupts??
		MC3479Class::SPI_writeRegister(MC3479_PK_P2P_DUR_THRESH_MSB, data);
 800588a:	7bfb      	ldrb	r3, [r7, #15]
 800588c:	461a      	mov	r2, r3
 800588e:	2149      	movs	r1, #73	; 0x49
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f7ff fee9 	bl	8005668 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x4A (Timer control)
		data = 0xFF & 0x00; //Tilt-35 latch disabled,tilt-35 angle detection duration = 1.6s (default)
 8005896:	2300      	movs	r3, #0
 8005898:	73fb      	strb	r3, [r7, #15]
		//TODO: if Tilt35 duration is too large for our control system, can we ignore configuration?
		MC3479Class::SPI_writeRegister(MC3479_TIMER_CTRL, data);
 800589a:	7bfb      	ldrb	r3, [r7, #15]
 800589c:	461a      	mov	r2, r3
 800589e:	214a      	movs	r1, #74	; 0x4a
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f7ff fee1 	bl	8005668 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x4B (Read Count Register)
		data = 0xFF & 0x06; // default 6 reads when register 0x30 bit 7(FIFO_BURST) is enabled
 80058a6:	2306      	movs	r3, #6
 80058a8:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_RD_CNT, data);
 80058aa:	7bfb      	ldrb	r3, [r7, #15]
 80058ac:	461a      	mov	r2, r3
 80058ae:	214b      	movs	r1, #75	; 0x4b
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7ff fed9 	bl	8005668 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x4B (Read Count Register)

#endif /* _SPI_COM_ENABLED */

	return;
 80058b6:	bf00      	nop
}
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <_ZN11MC3479Class6getXYZEPhS0_S0_>:
		uint8_t data = 0xFF & rate; // sample x,y,z @ 100Hz
		return MC3479Class::SPI_writeRegister(MC3479_SR, data);
}

bool MC3479Class::getXYZ(uint8_t* xData, uint8_t* yData, uint8_t* zData)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b086      	sub	sp, #24
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	60f8      	str	r0, [r7, #12]
 80058c6:	60b9      	str	r1, [r7, #8]
 80058c8:	607a      	str	r2, [r7, #4]
 80058ca:	603b      	str	r3, [r7, #0]
	uint8_t Buffer[8];
	MC3479Class::burstSPI_readRegister(MC3479_XOUT_EX_L, &Buffer[0], 6);
 80058cc:	f107 0210 	add.w	r2, r7, #16
 80058d0:	2306      	movs	r3, #6
 80058d2:	210d      	movs	r1, #13
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f7ff fef9 	bl	80056cc <_ZN11MC3479Class21burstSPI_readRegisterEhPhh>
	xData[0] = Buffer[0];
 80058da:	7c3a      	ldrb	r2, [r7, #16]
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	701a      	strb	r2, [r3, #0]
	xData[1] = Buffer[1];
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	3301      	adds	r3, #1
 80058e4:	7c7a      	ldrb	r2, [r7, #17]
 80058e6:	701a      	strb	r2, [r3, #0]
	yData[0] = Buffer[2];
 80058e8:	7cba      	ldrb	r2, [r7, #18]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	701a      	strb	r2, [r3, #0]
	yData[1] = Buffer[3];
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	3301      	adds	r3, #1
 80058f2:	7cfa      	ldrb	r2, [r7, #19]
 80058f4:	701a      	strb	r2, [r3, #0]
	zData[0] = Buffer[4];
 80058f6:	7d3a      	ldrb	r2, [r7, #20]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	701a      	strb	r2, [r3, #0]
	zData[1] = Buffer[5];
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	3301      	adds	r3, #1
 8005900:	7d7a      	ldrb	r2, [r7, #21]
 8005902:	701a      	strb	r2, [r3, #0]
	return 1;
 8005904:	2301      	movs	r3, #1
}
 8005906:	4618      	mov	r0, r3
 8005908:	3718      	adds	r7, #24
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <_ZN12MP6543HClass23x_configMotorControllerEtP17TIM_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>:
bool MP6543HClass::x_configMotorController(uint16_t xPwmChannel, TIM_HandleTypeDef * pwmTimer,
		GPIO_TypeDef* xDir, uint16_t xDirPin,
			GPIO_TypeDef* xBrake, uint16_t xBrakePin,
				GPIO_TypeDef* xSleep, uint16_t xSleepPin,
					GPIO_TypeDef* xFault, uint16_t xFaultPin)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b084      	sub	sp, #16
 8005912:	af00      	add	r7, sp, #0
 8005914:	60f8      	str	r0, [r7, #12]
 8005916:	607a      	str	r2, [r7, #4]
 8005918:	603b      	str	r3, [r7, #0]
 800591a:	460b      	mov	r3, r1
 800591c:	817b      	strh	r3, [r7, #10]
	this->_x_PWM_CHANNEL = xPwmChannel;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	897a      	ldrh	r2, [r7, #10]
 8005922:	829a      	strh	r2, [r3, #20]
	this->_x_PWM_TIMER = pwmTimer;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	611a      	str	r2, [r3, #16]
	this->_x_DIR_GPIO = xDir;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	683a      	ldr	r2, [r7, #0]
 800592e:	601a      	str	r2, [r3, #0]
	this->_x_DIR_PIN = xDirPin;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	8b3a      	ldrh	r2, [r7, #24]
 8005934:	82da      	strh	r2, [r3, #22]
	HAL_GPIO_WritePin(_x_DIR_GPIO, _x_DIR_PIN, GPIO_PIN_SET);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6818      	ldr	r0, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	8adb      	ldrh	r3, [r3, #22]
 800593e:	2201      	movs	r2, #1
 8005940:	4619      	mov	r1, r3
 8005942:	f7fd fbb8 	bl	80030b6 <HAL_GPIO_WritePin>
	this->_x_nBRAKE_GPIO = xBrake;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	69fa      	ldr	r2, [r7, #28]
 800594a:	605a      	str	r2, [r3, #4]
	this->_x_nBRAKE_PIN = xBrakePin;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8c3a      	ldrh	r2, [r7, #32]
 8005950:	831a      	strh	r2, [r3, #24]
	HAL_GPIO_WritePin(_x_nBRAKE_GPIO, _x_nBRAKE_PIN, GPIO_PIN_SET);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6858      	ldr	r0, [r3, #4]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8b1b      	ldrh	r3, [r3, #24]
 800595a:	2201      	movs	r2, #1
 800595c:	4619      	mov	r1, r3
 800595e:	f7fd fbaa 	bl	80030b6 <HAL_GPIO_WritePin>
	this->_x_nSLEEP_GPIO = xSleep;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005966:	609a      	str	r2, [r3, #8]
	this->_x_nSLEEP_PIN = xSleepPin;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800596c:	835a      	strh	r2, [r3, #26]
	HAL_GPIO_WritePin(_x_nSLEEP_GPIO, _x_nSLEEP_PIN, GPIO_PIN_SET);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6898      	ldr	r0, [r3, #8]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8b5b      	ldrh	r3, [r3, #26]
 8005976:	2201      	movs	r2, #1
 8005978:	4619      	mov	r1, r3
 800597a:	f7fd fb9c 	bl	80030b6 <HAL_GPIO_WritePin>
	this->_x_nFAULT_GPIO = xFault;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005982:	60da      	str	r2, [r3, #12]
	this->_x_nFAULT_PIN = xFaultPin;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005988:	839a      	strh	r2, [r3, #28]

	return 1;
 800598a:	2301      	movs	r3, #1
}
 800598c:	4618      	mov	r0, r3
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <_ZN12MP6543HClass13x_setMotorDirEb>:
	HAL_GPIO_WritePin(_x_nSLEEP_GPIO, _x_nSLEEP_PIN, GPIO_PIN_SET);
	HAL_Delay(1500);
	return 1;
}
bool MP6543HClass::x_setMotorDir(bool forward_polarity)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	460b      	mov	r3, r1
 800599e:	70fb      	strb	r3, [r7, #3]
	if (forward_polarity){
 80059a0:	78fb      	ldrb	r3, [r7, #3]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d008      	beq.n	80059b8 <_ZN12MP6543HClass13x_setMotorDirEb+0x24>
		HAL_GPIO_WritePin(_x_DIR_GPIO, _x_DIR_PIN, GPIO_PIN_SET);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6818      	ldr	r0, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	8adb      	ldrh	r3, [r3, #22]
 80059ae:	2201      	movs	r2, #1
 80059b0:	4619      	mov	r1, r3
 80059b2:	f7fd fb80 	bl	80030b6 <HAL_GPIO_WritePin>
 80059b6:	e007      	b.n	80059c8 <_ZN12MP6543HClass13x_setMotorDirEb+0x34>
	}
	else{
		HAL_GPIO_WritePin(_x_DIR_GPIO, _x_DIR_PIN, GPIO_PIN_RESET);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6818      	ldr	r0, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	8adb      	ldrh	r3, [r3, #22]
 80059c0:	2200      	movs	r2, #0
 80059c2:	4619      	mov	r1, r3
 80059c4:	f7fd fb77 	bl	80030b6 <HAL_GPIO_WritePin>
	}
	return 1;
 80059c8:	2301      	movs	r3, #1
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <_ZN12MP6543HClass12x_motorBrakeEb>:

bool MP6543HClass::x_motorBrake(bool want_brake)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b082      	sub	sp, #8
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
 80059da:	460b      	mov	r3, r1
 80059dc:	70fb      	strb	r3, [r7, #3]
	if (want_brake){
 80059de:	78fb      	ldrb	r3, [r7, #3]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d008      	beq.n	80059f6 <_ZN12MP6543HClass12x_motorBrakeEb+0x24>
		HAL_GPIO_WritePin(_x_nBRAKE_GPIO, _x_nBRAKE_PIN, GPIO_PIN_RESET);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6858      	ldr	r0, [r3, #4]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	8b1b      	ldrh	r3, [r3, #24]
 80059ec:	2200      	movs	r2, #0
 80059ee:	4619      	mov	r1, r3
 80059f0:	f7fd fb61 	bl	80030b6 <HAL_GPIO_WritePin>
 80059f4:	e007      	b.n	8005a06 <_ZN12MP6543HClass12x_motorBrakeEb+0x34>
	}else{
		HAL_GPIO_WritePin(_x_nBRAKE_GPIO, _x_nBRAKE_PIN, GPIO_PIN_SET);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6858      	ldr	r0, [r3, #4]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	8b1b      	ldrh	r3, [r3, #24]
 80059fe:	2201      	movs	r2, #1
 8005a00:	4619      	mov	r1, r3
 8005a02:	f7fd fb58 	bl	80030b6 <HAL_GPIO_WritePin>
	}
	return 1;
 8005a06:	2301      	movs	r3, #1
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <_ZN12MP6543HClass12x_motorFaultEv>:
	MP6543H.y_motorBrake(true);
	return 1;
}

bool MP6543HClass::x_motorFault()
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
	return !HAL_GPIO_ReadPin(_x_nFAULT_GPIO, _x_nFAULT_PIN);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68da      	ldr	r2, [r3, #12]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	8b9b      	ldrh	r3, [r3, #28]
 8005a20:	4619      	mov	r1, r3
 8005a22:	4610      	mov	r0, r2
 8005a24:	f7fd fb30 	bl	8003088 <HAL_GPIO_ReadPin>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	bf0c      	ite	eq
 8005a2e:	2301      	moveq	r3, #1
 8005a30:	2300      	movne	r3, #0
 8005a32:	b2db      	uxtb	r3, r3
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3708      	adds	r7, #8
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <_ZN12MP6543HClass23y_configMotorControllerEtP17TIM_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>:
bool MP6543HClass::y_configMotorController(uint16_t yPwmChannel, TIM_HandleTypeDef * pwmTimer,
		GPIO_TypeDef* yDir, uint16_t yDirPin,
			GPIO_TypeDef* yBrake, uint16_t yBrakePin,
				GPIO_TypeDef* ySleep, uint16_t ySleepPin,
					GPIO_TypeDef* yFault, uint16_t yFaultPin)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	607a      	str	r2, [r7, #4]
 8005a46:	603b      	str	r3, [r7, #0]
 8005a48:	460b      	mov	r3, r1
 8005a4a:	817b      	strh	r3, [r7, #10]
	this->_y_PWM_CHANNEL = yPwmChannel;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	897a      	ldrh	r2, [r7, #10]
 8005a50:	869a      	strh	r2, [r3, #52]	; 0x34
	this->_y_PWM_TIMER = pwmTimer;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	631a      	str	r2, [r3, #48]	; 0x30
	this->_y_DIR_GPIO = yDir;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	621a      	str	r2, [r3, #32]
	this->_y_DIR_PIN = yDirPin;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	8b3a      	ldrh	r2, [r7, #24]
 8005a62:	86da      	strh	r2, [r3, #54]	; 0x36
	HAL_GPIO_WritePin(_y_DIR_GPIO, _y_DIR_PIN, GPIO_PIN_SET);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6a18      	ldr	r0, [r3, #32]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	4619      	mov	r1, r3
 8005a70:	f7fd fb21 	bl	80030b6 <HAL_GPIO_WritePin>
	this->_y_nBRAKE_GPIO = yBrake;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	69fa      	ldr	r2, [r7, #28]
 8005a78:	625a      	str	r2, [r3, #36]	; 0x24
	this->_y_nBRAKE_PIN = yBrakePin;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	8c3a      	ldrh	r2, [r7, #32]
 8005a7e:	871a      	strh	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(_y_nBRAKE_GPIO, _y_nBRAKE_PIN, GPIO_PIN_SET);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005a88:	2201      	movs	r2, #1
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	f7fd fb13 	bl	80030b6 <HAL_GPIO_WritePin>
	this->_y_nSLEEP_GPIO = ySleep;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a94:	629a      	str	r2, [r3, #40]	; 0x28
	this->_y_nSLEEP_PIN = ySleepPin;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005a9a:	875a      	strh	r2, [r3, #58]	; 0x3a
	HAL_GPIO_WritePin(_y_nSLEEP_GPIO, _y_nSLEEP_PIN, GPIO_PIN_SET);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	f7fd fb05 	bl	80030b6 <HAL_GPIO_WritePin>
	this->_y_nFAULT_GPIO = yFault;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ab0:	62da      	str	r2, [r3, #44]	; 0x2c
	this->_y_nFAULT_PIN = yFaultPin;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005ab6:	879a      	strh	r2, [r3, #60]	; 0x3c

	return 1;
 8005ab8:	2301      	movs	r3, #1
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <_ZN12MP6543HClass12y_motorBrakeEb>:
	return 1;
}


bool MP6543HClass::y_motorBrake(bool want_brake)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b082      	sub	sp, #8
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
 8005aca:	460b      	mov	r3, r1
 8005acc:	70fb      	strb	r3, [r7, #3]
	if (want_brake){
 8005ace:	78fb      	ldrb	r3, [r7, #3]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d008      	beq.n	8005ae6 <_ZN12MP6543HClass12y_motorBrakeEb+0x24>
		HAL_GPIO_WritePin(_y_nBRAKE_GPIO, _y_nBRAKE_PIN, GPIO_PIN_RESET);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005adc:	2200      	movs	r2, #0
 8005ade:	4619      	mov	r1, r3
 8005ae0:	f7fd fae9 	bl	80030b6 <HAL_GPIO_WritePin>
 8005ae4:	e007      	b.n	8005af6 <_ZN12MP6543HClass12y_motorBrakeEb+0x34>
	}else{
		HAL_GPIO_WritePin(_y_nBRAKE_GPIO, _y_nBRAKE_PIN, GPIO_PIN_SET);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005aee:	2201      	movs	r2, #1
 8005af0:	4619      	mov	r1, r3
 8005af2:	f7fd fae0 	bl	80030b6 <HAL_GPIO_WritePin>
	}
	return 1;
 8005af6:	2301      	movs	r3, #1
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3708      	adds	r7, #8
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <_ZN12MP6543HClass12y_motorFaultEv>:
	MP6543H.y_motorBrake(true);
	return 1;
}

bool MP6543HClass::y_motorFault()
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
	return !HAL_GPIO_ReadPin(_y_nFAULT_GPIO, _y_nFAULT_PIN);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005b10:	4619      	mov	r1, r3
 8005b12:	4610      	mov	r0, r2
 8005b14:	f7fd fab8 	bl	8003088 <HAL_GPIO_ReadPin>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	bf0c      	ite	eq
 8005b1e:	2301      	moveq	r3, #1
 8005b20:	2300      	movne	r3, #0
 8005b22:	b2db      	uxtb	r3, r3
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3708      	adds	r7, #8
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <_ZdlPvj>:
 8005b2c:	f000 b817 	b.w	8005b5e <_ZdlPv>

08005b30 <_Znwj>:
 8005b30:	2801      	cmp	r0, #1
 8005b32:	bf38      	it	cc
 8005b34:	2001      	movcc	r0, #1
 8005b36:	b510      	push	{r4, lr}
 8005b38:	4604      	mov	r4, r0
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	f000 f9da 	bl	8005ef4 <malloc>
 8005b40:	b930      	cbnz	r0, 8005b50 <_Znwj+0x20>
 8005b42:	f000 f80f 	bl	8005b64 <_ZSt15get_new_handlerv>
 8005b46:	b908      	cbnz	r0, 8005b4c <_Znwj+0x1c>
 8005b48:	f000 f9a3 	bl	8005e92 <abort>
 8005b4c:	4780      	blx	r0
 8005b4e:	e7f4      	b.n	8005b3a <_Znwj+0xa>
 8005b50:	bd10      	pop	{r4, pc}

08005b52 <_ZSt17__throw_bad_allocv>:
 8005b52:	b508      	push	{r3, lr}
 8005b54:	f000 f99d 	bl	8005e92 <abort>

08005b58 <_ZSt20__throw_length_errorPKc>:
 8005b58:	b508      	push	{r3, lr}
 8005b5a:	f000 f99a 	bl	8005e92 <abort>

08005b5e <_ZdlPv>:
 8005b5e:	f000 b9d1 	b.w	8005f04 <free>
	...

08005b64 <_ZSt15get_new_handlerv>:
 8005b64:	4b02      	ldr	r3, [pc, #8]	; (8005b70 <_ZSt15get_new_handlerv+0xc>)
 8005b66:	6818      	ldr	r0, [r3, #0]
 8005b68:	f3bf 8f5b 	dmb	ish
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	200002a4 	.word	0x200002a4
 8005b74:	00000000 	.word	0x00000000

08005b78 <atan>:
 8005b78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b7c:	4bb6      	ldr	r3, [pc, #728]	; (8005e58 <atan+0x2e0>)
 8005b7e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005b82:	429e      	cmp	r6, r3
 8005b84:	4604      	mov	r4, r0
 8005b86:	460d      	mov	r5, r1
 8005b88:	468b      	mov	fp, r1
 8005b8a:	dd17      	ble.n	8005bbc <atan+0x44>
 8005b8c:	4bb3      	ldr	r3, [pc, #716]	; (8005e5c <atan+0x2e4>)
 8005b8e:	429e      	cmp	r6, r3
 8005b90:	dc01      	bgt.n	8005b96 <atan+0x1e>
 8005b92:	d109      	bne.n	8005ba8 <atan+0x30>
 8005b94:	b140      	cbz	r0, 8005ba8 <atan+0x30>
 8005b96:	4622      	mov	r2, r4
 8005b98:	462b      	mov	r3, r5
 8005b9a:	4620      	mov	r0, r4
 8005b9c:	4629      	mov	r1, r5
 8005b9e:	f7fa fadd 	bl	800015c <__adddf3>
 8005ba2:	4604      	mov	r4, r0
 8005ba4:	460d      	mov	r5, r1
 8005ba6:	e005      	b.n	8005bb4 <atan+0x3c>
 8005ba8:	f1bb 0f00 	cmp.w	fp, #0
 8005bac:	4cac      	ldr	r4, [pc, #688]	; (8005e60 <atan+0x2e8>)
 8005bae:	f300 8121 	bgt.w	8005df4 <atan+0x27c>
 8005bb2:	4dac      	ldr	r5, [pc, #688]	; (8005e64 <atan+0x2ec>)
 8005bb4:	4620      	mov	r0, r4
 8005bb6:	4629      	mov	r1, r5
 8005bb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bbc:	4baa      	ldr	r3, [pc, #680]	; (8005e68 <atan+0x2f0>)
 8005bbe:	429e      	cmp	r6, r3
 8005bc0:	dc11      	bgt.n	8005be6 <atan+0x6e>
 8005bc2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005bc6:	429e      	cmp	r6, r3
 8005bc8:	dc0a      	bgt.n	8005be0 <atan+0x68>
 8005bca:	a38b      	add	r3, pc, #556	; (adr r3, 8005df8 <atan+0x280>)
 8005bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd0:	f7fa fac4 	bl	800015c <__adddf3>
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	4ba5      	ldr	r3, [pc, #660]	; (8005e6c <atan+0x2f4>)
 8005bd8:	f7fa ff06 	bl	80009e8 <__aeabi_dcmpgt>
 8005bdc:	2800      	cmp	r0, #0
 8005bde:	d1e9      	bne.n	8005bb4 <atan+0x3c>
 8005be0:	f04f 3aff 	mov.w	sl, #4294967295
 8005be4:	e027      	b.n	8005c36 <atan+0xbe>
 8005be6:	f000 f951 	bl	8005e8c <fabs>
 8005bea:	4ba1      	ldr	r3, [pc, #644]	; (8005e70 <atan+0x2f8>)
 8005bec:	4604      	mov	r4, r0
 8005bee:	429e      	cmp	r6, r3
 8005bf0:	460d      	mov	r5, r1
 8005bf2:	f300 80b8 	bgt.w	8005d66 <atan+0x1ee>
 8005bf6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8005bfa:	429e      	cmp	r6, r3
 8005bfc:	f300 809c 	bgt.w	8005d38 <atan+0x1c0>
 8005c00:	4602      	mov	r2, r0
 8005c02:	460b      	mov	r3, r1
 8005c04:	f7fa faaa 	bl	800015c <__adddf3>
 8005c08:	2200      	movs	r2, #0
 8005c0a:	4b98      	ldr	r3, [pc, #608]	; (8005e6c <atan+0x2f4>)
 8005c0c:	f7fa faa4 	bl	8000158 <__aeabi_dsub>
 8005c10:	2200      	movs	r2, #0
 8005c12:	4606      	mov	r6, r0
 8005c14:	460f      	mov	r7, r1
 8005c16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c1a:	4620      	mov	r0, r4
 8005c1c:	4629      	mov	r1, r5
 8005c1e:	f7fa fa9d 	bl	800015c <__adddf3>
 8005c22:	4602      	mov	r2, r0
 8005c24:	460b      	mov	r3, r1
 8005c26:	4630      	mov	r0, r6
 8005c28:	4639      	mov	r1, r7
 8005c2a:	f7fa fd77 	bl	800071c <__aeabi_ddiv>
 8005c2e:	f04f 0a00 	mov.w	sl, #0
 8005c32:	4604      	mov	r4, r0
 8005c34:	460d      	mov	r5, r1
 8005c36:	4622      	mov	r2, r4
 8005c38:	462b      	mov	r3, r5
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	4629      	mov	r1, r5
 8005c3e:	f7fa fc43 	bl	80004c8 <__aeabi_dmul>
 8005c42:	4602      	mov	r2, r0
 8005c44:	460b      	mov	r3, r1
 8005c46:	4680      	mov	r8, r0
 8005c48:	4689      	mov	r9, r1
 8005c4a:	f7fa fc3d 	bl	80004c8 <__aeabi_dmul>
 8005c4e:	a36c      	add	r3, pc, #432	; (adr r3, 8005e00 <atan+0x288>)
 8005c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c54:	4606      	mov	r6, r0
 8005c56:	460f      	mov	r7, r1
 8005c58:	f7fa fc36 	bl	80004c8 <__aeabi_dmul>
 8005c5c:	a36a      	add	r3, pc, #424	; (adr r3, 8005e08 <atan+0x290>)
 8005c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c62:	f7fa fa7b 	bl	800015c <__adddf3>
 8005c66:	4632      	mov	r2, r6
 8005c68:	463b      	mov	r3, r7
 8005c6a:	f7fa fc2d 	bl	80004c8 <__aeabi_dmul>
 8005c6e:	a368      	add	r3, pc, #416	; (adr r3, 8005e10 <atan+0x298>)
 8005c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c74:	f7fa fa72 	bl	800015c <__adddf3>
 8005c78:	4632      	mov	r2, r6
 8005c7a:	463b      	mov	r3, r7
 8005c7c:	f7fa fc24 	bl	80004c8 <__aeabi_dmul>
 8005c80:	a365      	add	r3, pc, #404	; (adr r3, 8005e18 <atan+0x2a0>)
 8005c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c86:	f7fa fa69 	bl	800015c <__adddf3>
 8005c8a:	4632      	mov	r2, r6
 8005c8c:	463b      	mov	r3, r7
 8005c8e:	f7fa fc1b 	bl	80004c8 <__aeabi_dmul>
 8005c92:	a363      	add	r3, pc, #396	; (adr r3, 8005e20 <atan+0x2a8>)
 8005c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c98:	f7fa fa60 	bl	800015c <__adddf3>
 8005c9c:	4632      	mov	r2, r6
 8005c9e:	463b      	mov	r3, r7
 8005ca0:	f7fa fc12 	bl	80004c8 <__aeabi_dmul>
 8005ca4:	a360      	add	r3, pc, #384	; (adr r3, 8005e28 <atan+0x2b0>)
 8005ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005caa:	f7fa fa57 	bl	800015c <__adddf3>
 8005cae:	4642      	mov	r2, r8
 8005cb0:	464b      	mov	r3, r9
 8005cb2:	f7fa fc09 	bl	80004c8 <__aeabi_dmul>
 8005cb6:	a35e      	add	r3, pc, #376	; (adr r3, 8005e30 <atan+0x2b8>)
 8005cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cbc:	4680      	mov	r8, r0
 8005cbe:	4689      	mov	r9, r1
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	4639      	mov	r1, r7
 8005cc4:	f7fa fc00 	bl	80004c8 <__aeabi_dmul>
 8005cc8:	a35b      	add	r3, pc, #364	; (adr r3, 8005e38 <atan+0x2c0>)
 8005cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cce:	f7fa fa43 	bl	8000158 <__aeabi_dsub>
 8005cd2:	4632      	mov	r2, r6
 8005cd4:	463b      	mov	r3, r7
 8005cd6:	f7fa fbf7 	bl	80004c8 <__aeabi_dmul>
 8005cda:	a359      	add	r3, pc, #356	; (adr r3, 8005e40 <atan+0x2c8>)
 8005cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce0:	f7fa fa3a 	bl	8000158 <__aeabi_dsub>
 8005ce4:	4632      	mov	r2, r6
 8005ce6:	463b      	mov	r3, r7
 8005ce8:	f7fa fbee 	bl	80004c8 <__aeabi_dmul>
 8005cec:	a356      	add	r3, pc, #344	; (adr r3, 8005e48 <atan+0x2d0>)
 8005cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf2:	f7fa fa31 	bl	8000158 <__aeabi_dsub>
 8005cf6:	4632      	mov	r2, r6
 8005cf8:	463b      	mov	r3, r7
 8005cfa:	f7fa fbe5 	bl	80004c8 <__aeabi_dmul>
 8005cfe:	a354      	add	r3, pc, #336	; (adr r3, 8005e50 <atan+0x2d8>)
 8005d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d04:	f7fa fa28 	bl	8000158 <__aeabi_dsub>
 8005d08:	4632      	mov	r2, r6
 8005d0a:	463b      	mov	r3, r7
 8005d0c:	f7fa fbdc 	bl	80004c8 <__aeabi_dmul>
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	4640      	mov	r0, r8
 8005d16:	4649      	mov	r1, r9
 8005d18:	f7fa fa20 	bl	800015c <__adddf3>
 8005d1c:	4622      	mov	r2, r4
 8005d1e:	462b      	mov	r3, r5
 8005d20:	f7fa fbd2 	bl	80004c8 <__aeabi_dmul>
 8005d24:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005d28:	4602      	mov	r2, r0
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	d144      	bne.n	8005db8 <atan+0x240>
 8005d2e:	4620      	mov	r0, r4
 8005d30:	4629      	mov	r1, r5
 8005d32:	f7fa fa11 	bl	8000158 <__aeabi_dsub>
 8005d36:	e734      	b.n	8005ba2 <atan+0x2a>
 8005d38:	2200      	movs	r2, #0
 8005d3a:	4b4c      	ldr	r3, [pc, #304]	; (8005e6c <atan+0x2f4>)
 8005d3c:	f7fa fa0c 	bl	8000158 <__aeabi_dsub>
 8005d40:	2200      	movs	r2, #0
 8005d42:	4606      	mov	r6, r0
 8005d44:	460f      	mov	r7, r1
 8005d46:	4620      	mov	r0, r4
 8005d48:	4629      	mov	r1, r5
 8005d4a:	4b48      	ldr	r3, [pc, #288]	; (8005e6c <atan+0x2f4>)
 8005d4c:	f7fa fa06 	bl	800015c <__adddf3>
 8005d50:	4602      	mov	r2, r0
 8005d52:	460b      	mov	r3, r1
 8005d54:	4630      	mov	r0, r6
 8005d56:	4639      	mov	r1, r7
 8005d58:	f7fa fce0 	bl	800071c <__aeabi_ddiv>
 8005d5c:	f04f 0a01 	mov.w	sl, #1
 8005d60:	4604      	mov	r4, r0
 8005d62:	460d      	mov	r5, r1
 8005d64:	e767      	b.n	8005c36 <atan+0xbe>
 8005d66:	4b43      	ldr	r3, [pc, #268]	; (8005e74 <atan+0x2fc>)
 8005d68:	429e      	cmp	r6, r3
 8005d6a:	da1a      	bge.n	8005da2 <atan+0x22a>
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	4b42      	ldr	r3, [pc, #264]	; (8005e78 <atan+0x300>)
 8005d70:	f7fa f9f2 	bl	8000158 <__aeabi_dsub>
 8005d74:	2200      	movs	r2, #0
 8005d76:	4606      	mov	r6, r0
 8005d78:	460f      	mov	r7, r1
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	4629      	mov	r1, r5
 8005d7e:	4b3e      	ldr	r3, [pc, #248]	; (8005e78 <atan+0x300>)
 8005d80:	f7fa fba2 	bl	80004c8 <__aeabi_dmul>
 8005d84:	2200      	movs	r2, #0
 8005d86:	4b39      	ldr	r3, [pc, #228]	; (8005e6c <atan+0x2f4>)
 8005d88:	f7fa f9e8 	bl	800015c <__adddf3>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	460b      	mov	r3, r1
 8005d90:	4630      	mov	r0, r6
 8005d92:	4639      	mov	r1, r7
 8005d94:	f7fa fcc2 	bl	800071c <__aeabi_ddiv>
 8005d98:	f04f 0a02 	mov.w	sl, #2
 8005d9c:	4604      	mov	r4, r0
 8005d9e:	460d      	mov	r5, r1
 8005da0:	e749      	b.n	8005c36 <atan+0xbe>
 8005da2:	4602      	mov	r2, r0
 8005da4:	460b      	mov	r3, r1
 8005da6:	2000      	movs	r0, #0
 8005da8:	4934      	ldr	r1, [pc, #208]	; (8005e7c <atan+0x304>)
 8005daa:	f7fa fcb7 	bl	800071c <__aeabi_ddiv>
 8005dae:	f04f 0a03 	mov.w	sl, #3
 8005db2:	4604      	mov	r4, r0
 8005db4:	460d      	mov	r5, r1
 8005db6:	e73e      	b.n	8005c36 <atan+0xbe>
 8005db8:	4b31      	ldr	r3, [pc, #196]	; (8005e80 <atan+0x308>)
 8005dba:	4e32      	ldr	r6, [pc, #200]	; (8005e84 <atan+0x30c>)
 8005dbc:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8005dc0:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8005dc4:	e9da 2300 	ldrd	r2, r3, [sl]
 8005dc8:	f7fa f9c6 	bl	8000158 <__aeabi_dsub>
 8005dcc:	4622      	mov	r2, r4
 8005dce:	462b      	mov	r3, r5
 8005dd0:	f7fa f9c2 	bl	8000158 <__aeabi_dsub>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005ddc:	f7fa f9bc 	bl	8000158 <__aeabi_dsub>
 8005de0:	f1bb 0f00 	cmp.w	fp, #0
 8005de4:	4604      	mov	r4, r0
 8005de6:	460d      	mov	r5, r1
 8005de8:	f6bf aee4 	bge.w	8005bb4 <atan+0x3c>
 8005dec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005df0:	461d      	mov	r5, r3
 8005df2:	e6df      	b.n	8005bb4 <atan+0x3c>
 8005df4:	4d24      	ldr	r5, [pc, #144]	; (8005e88 <atan+0x310>)
 8005df6:	e6dd      	b.n	8005bb4 <atan+0x3c>
 8005df8:	8800759c 	.word	0x8800759c
 8005dfc:	7e37e43c 	.word	0x7e37e43c
 8005e00:	e322da11 	.word	0xe322da11
 8005e04:	3f90ad3a 	.word	0x3f90ad3a
 8005e08:	24760deb 	.word	0x24760deb
 8005e0c:	3fa97b4b 	.word	0x3fa97b4b
 8005e10:	a0d03d51 	.word	0xa0d03d51
 8005e14:	3fb10d66 	.word	0x3fb10d66
 8005e18:	c54c206e 	.word	0xc54c206e
 8005e1c:	3fb745cd 	.word	0x3fb745cd
 8005e20:	920083ff 	.word	0x920083ff
 8005e24:	3fc24924 	.word	0x3fc24924
 8005e28:	5555550d 	.word	0x5555550d
 8005e2c:	3fd55555 	.word	0x3fd55555
 8005e30:	2c6a6c2f 	.word	0x2c6a6c2f
 8005e34:	bfa2b444 	.word	0xbfa2b444
 8005e38:	52defd9a 	.word	0x52defd9a
 8005e3c:	3fadde2d 	.word	0x3fadde2d
 8005e40:	af749a6d 	.word	0xaf749a6d
 8005e44:	3fb3b0f2 	.word	0x3fb3b0f2
 8005e48:	fe231671 	.word	0xfe231671
 8005e4c:	3fbc71c6 	.word	0x3fbc71c6
 8005e50:	9998ebc4 	.word	0x9998ebc4
 8005e54:	3fc99999 	.word	0x3fc99999
 8005e58:	440fffff 	.word	0x440fffff
 8005e5c:	7ff00000 	.word	0x7ff00000
 8005e60:	54442d18 	.word	0x54442d18
 8005e64:	bff921fb 	.word	0xbff921fb
 8005e68:	3fdbffff 	.word	0x3fdbffff
 8005e6c:	3ff00000 	.word	0x3ff00000
 8005e70:	3ff2ffff 	.word	0x3ff2ffff
 8005e74:	40038000 	.word	0x40038000
 8005e78:	3ff80000 	.word	0x3ff80000
 8005e7c:	bff00000 	.word	0xbff00000
 8005e80:	08006268 	.word	0x08006268
 8005e84:	08006248 	.word	0x08006248
 8005e88:	3ff921fb 	.word	0x3ff921fb

08005e8c <fabs>:
 8005e8c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005e90:	4770      	bx	lr

08005e92 <abort>:
 8005e92:	2006      	movs	r0, #6
 8005e94:	b508      	push	{r3, lr}
 8005e96:	f000 f973 	bl	8006180 <raise>
 8005e9a:	2001      	movs	r0, #1
 8005e9c:	f7fc fb88 	bl	80025b0 <_exit>

08005ea0 <__errno>:
 8005ea0:	4b01      	ldr	r3, [pc, #4]	; (8005ea8 <__errno+0x8>)
 8005ea2:	6818      	ldr	r0, [r3, #0]
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	2000000c 	.word	0x2000000c

08005eac <__libc_init_array>:
 8005eac:	b570      	push	{r4, r5, r6, lr}
 8005eae:	2600      	movs	r6, #0
 8005eb0:	4d0c      	ldr	r5, [pc, #48]	; (8005ee4 <__libc_init_array+0x38>)
 8005eb2:	4c0d      	ldr	r4, [pc, #52]	; (8005ee8 <__libc_init_array+0x3c>)
 8005eb4:	1b64      	subs	r4, r4, r5
 8005eb6:	10a4      	asrs	r4, r4, #2
 8005eb8:	42a6      	cmp	r6, r4
 8005eba:	d109      	bne.n	8005ed0 <__libc_init_array+0x24>
 8005ebc:	f000 f98a 	bl	80061d4 <_init>
 8005ec0:	2600      	movs	r6, #0
 8005ec2:	4d0a      	ldr	r5, [pc, #40]	; (8005eec <__libc_init_array+0x40>)
 8005ec4:	4c0a      	ldr	r4, [pc, #40]	; (8005ef0 <__libc_init_array+0x44>)
 8005ec6:	1b64      	subs	r4, r4, r5
 8005ec8:	10a4      	asrs	r4, r4, #2
 8005eca:	42a6      	cmp	r6, r4
 8005ecc:	d105      	bne.n	8005eda <__libc_init_array+0x2e>
 8005ece:	bd70      	pop	{r4, r5, r6, pc}
 8005ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ed4:	4798      	blx	r3
 8005ed6:	3601      	adds	r6, #1
 8005ed8:	e7ee      	b.n	8005eb8 <__libc_init_array+0xc>
 8005eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ede:	4798      	blx	r3
 8005ee0:	3601      	adds	r6, #1
 8005ee2:	e7f2      	b.n	8005eca <__libc_init_array+0x1e>
 8005ee4:	08006288 	.word	0x08006288
 8005ee8:	08006288 	.word	0x08006288
 8005eec:	08006288 	.word	0x08006288
 8005ef0:	08006290 	.word	0x08006290

08005ef4 <malloc>:
 8005ef4:	4b02      	ldr	r3, [pc, #8]	; (8005f00 <malloc+0xc>)
 8005ef6:	4601      	mov	r1, r0
 8005ef8:	6818      	ldr	r0, [r3, #0]
 8005efa:	f000 b895 	b.w	8006028 <_malloc_r>
 8005efe:	bf00      	nop
 8005f00:	2000000c 	.word	0x2000000c

08005f04 <free>:
 8005f04:	4b02      	ldr	r3, [pc, #8]	; (8005f10 <free+0xc>)
 8005f06:	4601      	mov	r1, r0
 8005f08:	6818      	ldr	r0, [r3, #0]
 8005f0a:	f000 b825 	b.w	8005f58 <_free_r>
 8005f0e:	bf00      	nop
 8005f10:	2000000c 	.word	0x2000000c

08005f14 <memmove>:
 8005f14:	4288      	cmp	r0, r1
 8005f16:	b510      	push	{r4, lr}
 8005f18:	eb01 0402 	add.w	r4, r1, r2
 8005f1c:	d902      	bls.n	8005f24 <memmove+0x10>
 8005f1e:	4284      	cmp	r4, r0
 8005f20:	4623      	mov	r3, r4
 8005f22:	d807      	bhi.n	8005f34 <memmove+0x20>
 8005f24:	1e43      	subs	r3, r0, #1
 8005f26:	42a1      	cmp	r1, r4
 8005f28:	d008      	beq.n	8005f3c <memmove+0x28>
 8005f2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f32:	e7f8      	b.n	8005f26 <memmove+0x12>
 8005f34:	4601      	mov	r1, r0
 8005f36:	4402      	add	r2, r0
 8005f38:	428a      	cmp	r2, r1
 8005f3a:	d100      	bne.n	8005f3e <memmove+0x2a>
 8005f3c:	bd10      	pop	{r4, pc}
 8005f3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f46:	e7f7      	b.n	8005f38 <memmove+0x24>

08005f48 <memset>:
 8005f48:	4603      	mov	r3, r0
 8005f4a:	4402      	add	r2, r0
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d100      	bne.n	8005f52 <memset+0xa>
 8005f50:	4770      	bx	lr
 8005f52:	f803 1b01 	strb.w	r1, [r3], #1
 8005f56:	e7f9      	b.n	8005f4c <memset+0x4>

08005f58 <_free_r>:
 8005f58:	b538      	push	{r3, r4, r5, lr}
 8005f5a:	4605      	mov	r5, r0
 8005f5c:	2900      	cmp	r1, #0
 8005f5e:	d040      	beq.n	8005fe2 <_free_r+0x8a>
 8005f60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f64:	1f0c      	subs	r4, r1, #4
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	bfb8      	it	lt
 8005f6a:	18e4      	addlt	r4, r4, r3
 8005f6c:	f000 f924 	bl	80061b8 <__malloc_lock>
 8005f70:	4a1c      	ldr	r2, [pc, #112]	; (8005fe4 <_free_r+0x8c>)
 8005f72:	6813      	ldr	r3, [r2, #0]
 8005f74:	b933      	cbnz	r3, 8005f84 <_free_r+0x2c>
 8005f76:	6063      	str	r3, [r4, #4]
 8005f78:	6014      	str	r4, [r2, #0]
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f80:	f000 b920 	b.w	80061c4 <__malloc_unlock>
 8005f84:	42a3      	cmp	r3, r4
 8005f86:	d908      	bls.n	8005f9a <_free_r+0x42>
 8005f88:	6820      	ldr	r0, [r4, #0]
 8005f8a:	1821      	adds	r1, r4, r0
 8005f8c:	428b      	cmp	r3, r1
 8005f8e:	bf01      	itttt	eq
 8005f90:	6819      	ldreq	r1, [r3, #0]
 8005f92:	685b      	ldreq	r3, [r3, #4]
 8005f94:	1809      	addeq	r1, r1, r0
 8005f96:	6021      	streq	r1, [r4, #0]
 8005f98:	e7ed      	b.n	8005f76 <_free_r+0x1e>
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	b10b      	cbz	r3, 8005fa4 <_free_r+0x4c>
 8005fa0:	42a3      	cmp	r3, r4
 8005fa2:	d9fa      	bls.n	8005f9a <_free_r+0x42>
 8005fa4:	6811      	ldr	r1, [r2, #0]
 8005fa6:	1850      	adds	r0, r2, r1
 8005fa8:	42a0      	cmp	r0, r4
 8005faa:	d10b      	bne.n	8005fc4 <_free_r+0x6c>
 8005fac:	6820      	ldr	r0, [r4, #0]
 8005fae:	4401      	add	r1, r0
 8005fb0:	1850      	adds	r0, r2, r1
 8005fb2:	4283      	cmp	r3, r0
 8005fb4:	6011      	str	r1, [r2, #0]
 8005fb6:	d1e0      	bne.n	8005f7a <_free_r+0x22>
 8005fb8:	6818      	ldr	r0, [r3, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	4401      	add	r1, r0
 8005fbe:	6011      	str	r1, [r2, #0]
 8005fc0:	6053      	str	r3, [r2, #4]
 8005fc2:	e7da      	b.n	8005f7a <_free_r+0x22>
 8005fc4:	d902      	bls.n	8005fcc <_free_r+0x74>
 8005fc6:	230c      	movs	r3, #12
 8005fc8:	602b      	str	r3, [r5, #0]
 8005fca:	e7d6      	b.n	8005f7a <_free_r+0x22>
 8005fcc:	6820      	ldr	r0, [r4, #0]
 8005fce:	1821      	adds	r1, r4, r0
 8005fd0:	428b      	cmp	r3, r1
 8005fd2:	bf01      	itttt	eq
 8005fd4:	6819      	ldreq	r1, [r3, #0]
 8005fd6:	685b      	ldreq	r3, [r3, #4]
 8005fd8:	1809      	addeq	r1, r1, r0
 8005fda:	6021      	streq	r1, [r4, #0]
 8005fdc:	6063      	str	r3, [r4, #4]
 8005fde:	6054      	str	r4, [r2, #4]
 8005fe0:	e7cb      	b.n	8005f7a <_free_r+0x22>
 8005fe2:	bd38      	pop	{r3, r4, r5, pc}
 8005fe4:	200002a8 	.word	0x200002a8

08005fe8 <sbrk_aligned>:
 8005fe8:	b570      	push	{r4, r5, r6, lr}
 8005fea:	4e0e      	ldr	r6, [pc, #56]	; (8006024 <sbrk_aligned+0x3c>)
 8005fec:	460c      	mov	r4, r1
 8005fee:	6831      	ldr	r1, [r6, #0]
 8005ff0:	4605      	mov	r5, r0
 8005ff2:	b911      	cbnz	r1, 8005ffa <sbrk_aligned+0x12>
 8005ff4:	f000 f88c 	bl	8006110 <_sbrk_r>
 8005ff8:	6030      	str	r0, [r6, #0]
 8005ffa:	4621      	mov	r1, r4
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	f000 f887 	bl	8006110 <_sbrk_r>
 8006002:	1c43      	adds	r3, r0, #1
 8006004:	d00a      	beq.n	800601c <sbrk_aligned+0x34>
 8006006:	1cc4      	adds	r4, r0, #3
 8006008:	f024 0403 	bic.w	r4, r4, #3
 800600c:	42a0      	cmp	r0, r4
 800600e:	d007      	beq.n	8006020 <sbrk_aligned+0x38>
 8006010:	1a21      	subs	r1, r4, r0
 8006012:	4628      	mov	r0, r5
 8006014:	f000 f87c 	bl	8006110 <_sbrk_r>
 8006018:	3001      	adds	r0, #1
 800601a:	d101      	bne.n	8006020 <sbrk_aligned+0x38>
 800601c:	f04f 34ff 	mov.w	r4, #4294967295
 8006020:	4620      	mov	r0, r4
 8006022:	bd70      	pop	{r4, r5, r6, pc}
 8006024:	200002ac 	.word	0x200002ac

08006028 <_malloc_r>:
 8006028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800602c:	1ccd      	adds	r5, r1, #3
 800602e:	f025 0503 	bic.w	r5, r5, #3
 8006032:	3508      	adds	r5, #8
 8006034:	2d0c      	cmp	r5, #12
 8006036:	bf38      	it	cc
 8006038:	250c      	movcc	r5, #12
 800603a:	2d00      	cmp	r5, #0
 800603c:	4607      	mov	r7, r0
 800603e:	db01      	blt.n	8006044 <_malloc_r+0x1c>
 8006040:	42a9      	cmp	r1, r5
 8006042:	d905      	bls.n	8006050 <_malloc_r+0x28>
 8006044:	230c      	movs	r3, #12
 8006046:	2600      	movs	r6, #0
 8006048:	603b      	str	r3, [r7, #0]
 800604a:	4630      	mov	r0, r6
 800604c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006050:	4e2e      	ldr	r6, [pc, #184]	; (800610c <_malloc_r+0xe4>)
 8006052:	f000 f8b1 	bl	80061b8 <__malloc_lock>
 8006056:	6833      	ldr	r3, [r6, #0]
 8006058:	461c      	mov	r4, r3
 800605a:	bb34      	cbnz	r4, 80060aa <_malloc_r+0x82>
 800605c:	4629      	mov	r1, r5
 800605e:	4638      	mov	r0, r7
 8006060:	f7ff ffc2 	bl	8005fe8 <sbrk_aligned>
 8006064:	1c43      	adds	r3, r0, #1
 8006066:	4604      	mov	r4, r0
 8006068:	d14d      	bne.n	8006106 <_malloc_r+0xde>
 800606a:	6834      	ldr	r4, [r6, #0]
 800606c:	4626      	mov	r6, r4
 800606e:	2e00      	cmp	r6, #0
 8006070:	d140      	bne.n	80060f4 <_malloc_r+0xcc>
 8006072:	6823      	ldr	r3, [r4, #0]
 8006074:	4631      	mov	r1, r6
 8006076:	4638      	mov	r0, r7
 8006078:	eb04 0803 	add.w	r8, r4, r3
 800607c:	f000 f848 	bl	8006110 <_sbrk_r>
 8006080:	4580      	cmp	r8, r0
 8006082:	d13a      	bne.n	80060fa <_malloc_r+0xd2>
 8006084:	6821      	ldr	r1, [r4, #0]
 8006086:	3503      	adds	r5, #3
 8006088:	1a6d      	subs	r5, r5, r1
 800608a:	f025 0503 	bic.w	r5, r5, #3
 800608e:	3508      	adds	r5, #8
 8006090:	2d0c      	cmp	r5, #12
 8006092:	bf38      	it	cc
 8006094:	250c      	movcc	r5, #12
 8006096:	4638      	mov	r0, r7
 8006098:	4629      	mov	r1, r5
 800609a:	f7ff ffa5 	bl	8005fe8 <sbrk_aligned>
 800609e:	3001      	adds	r0, #1
 80060a0:	d02b      	beq.n	80060fa <_malloc_r+0xd2>
 80060a2:	6823      	ldr	r3, [r4, #0]
 80060a4:	442b      	add	r3, r5
 80060a6:	6023      	str	r3, [r4, #0]
 80060a8:	e00e      	b.n	80060c8 <_malloc_r+0xa0>
 80060aa:	6822      	ldr	r2, [r4, #0]
 80060ac:	1b52      	subs	r2, r2, r5
 80060ae:	d41e      	bmi.n	80060ee <_malloc_r+0xc6>
 80060b0:	2a0b      	cmp	r2, #11
 80060b2:	d916      	bls.n	80060e2 <_malloc_r+0xba>
 80060b4:	1961      	adds	r1, r4, r5
 80060b6:	42a3      	cmp	r3, r4
 80060b8:	6025      	str	r5, [r4, #0]
 80060ba:	bf18      	it	ne
 80060bc:	6059      	strne	r1, [r3, #4]
 80060be:	6863      	ldr	r3, [r4, #4]
 80060c0:	bf08      	it	eq
 80060c2:	6031      	streq	r1, [r6, #0]
 80060c4:	5162      	str	r2, [r4, r5]
 80060c6:	604b      	str	r3, [r1, #4]
 80060c8:	4638      	mov	r0, r7
 80060ca:	f104 060b 	add.w	r6, r4, #11
 80060ce:	f000 f879 	bl	80061c4 <__malloc_unlock>
 80060d2:	f026 0607 	bic.w	r6, r6, #7
 80060d6:	1d23      	adds	r3, r4, #4
 80060d8:	1af2      	subs	r2, r6, r3
 80060da:	d0b6      	beq.n	800604a <_malloc_r+0x22>
 80060dc:	1b9b      	subs	r3, r3, r6
 80060de:	50a3      	str	r3, [r4, r2]
 80060e0:	e7b3      	b.n	800604a <_malloc_r+0x22>
 80060e2:	6862      	ldr	r2, [r4, #4]
 80060e4:	42a3      	cmp	r3, r4
 80060e6:	bf0c      	ite	eq
 80060e8:	6032      	streq	r2, [r6, #0]
 80060ea:	605a      	strne	r2, [r3, #4]
 80060ec:	e7ec      	b.n	80060c8 <_malloc_r+0xa0>
 80060ee:	4623      	mov	r3, r4
 80060f0:	6864      	ldr	r4, [r4, #4]
 80060f2:	e7b2      	b.n	800605a <_malloc_r+0x32>
 80060f4:	4634      	mov	r4, r6
 80060f6:	6876      	ldr	r6, [r6, #4]
 80060f8:	e7b9      	b.n	800606e <_malloc_r+0x46>
 80060fa:	230c      	movs	r3, #12
 80060fc:	4638      	mov	r0, r7
 80060fe:	603b      	str	r3, [r7, #0]
 8006100:	f000 f860 	bl	80061c4 <__malloc_unlock>
 8006104:	e7a1      	b.n	800604a <_malloc_r+0x22>
 8006106:	6025      	str	r5, [r4, #0]
 8006108:	e7de      	b.n	80060c8 <_malloc_r+0xa0>
 800610a:	bf00      	nop
 800610c:	200002a8 	.word	0x200002a8

08006110 <_sbrk_r>:
 8006110:	b538      	push	{r3, r4, r5, lr}
 8006112:	2300      	movs	r3, #0
 8006114:	4d05      	ldr	r5, [pc, #20]	; (800612c <_sbrk_r+0x1c>)
 8006116:	4604      	mov	r4, r0
 8006118:	4608      	mov	r0, r1
 800611a:	602b      	str	r3, [r5, #0]
 800611c:	f7fc fa52 	bl	80025c4 <_sbrk>
 8006120:	1c43      	adds	r3, r0, #1
 8006122:	d102      	bne.n	800612a <_sbrk_r+0x1a>
 8006124:	682b      	ldr	r3, [r5, #0]
 8006126:	b103      	cbz	r3, 800612a <_sbrk_r+0x1a>
 8006128:	6023      	str	r3, [r4, #0]
 800612a:	bd38      	pop	{r3, r4, r5, pc}
 800612c:	200002b0 	.word	0x200002b0

08006130 <_raise_r>:
 8006130:	291f      	cmp	r1, #31
 8006132:	b538      	push	{r3, r4, r5, lr}
 8006134:	4604      	mov	r4, r0
 8006136:	460d      	mov	r5, r1
 8006138:	d904      	bls.n	8006144 <_raise_r+0x14>
 800613a:	2316      	movs	r3, #22
 800613c:	6003      	str	r3, [r0, #0]
 800613e:	f04f 30ff 	mov.w	r0, #4294967295
 8006142:	bd38      	pop	{r3, r4, r5, pc}
 8006144:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006146:	b112      	cbz	r2, 800614e <_raise_r+0x1e>
 8006148:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800614c:	b94b      	cbnz	r3, 8006162 <_raise_r+0x32>
 800614e:	4620      	mov	r0, r4
 8006150:	f000 f830 	bl	80061b4 <_getpid_r>
 8006154:	462a      	mov	r2, r5
 8006156:	4601      	mov	r1, r0
 8006158:	4620      	mov	r0, r4
 800615a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800615e:	f000 b817 	b.w	8006190 <_kill_r>
 8006162:	2b01      	cmp	r3, #1
 8006164:	d00a      	beq.n	800617c <_raise_r+0x4c>
 8006166:	1c59      	adds	r1, r3, #1
 8006168:	d103      	bne.n	8006172 <_raise_r+0x42>
 800616a:	2316      	movs	r3, #22
 800616c:	6003      	str	r3, [r0, #0]
 800616e:	2001      	movs	r0, #1
 8006170:	e7e7      	b.n	8006142 <_raise_r+0x12>
 8006172:	2400      	movs	r4, #0
 8006174:	4628      	mov	r0, r5
 8006176:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800617a:	4798      	blx	r3
 800617c:	2000      	movs	r0, #0
 800617e:	e7e0      	b.n	8006142 <_raise_r+0x12>

08006180 <raise>:
 8006180:	4b02      	ldr	r3, [pc, #8]	; (800618c <raise+0xc>)
 8006182:	4601      	mov	r1, r0
 8006184:	6818      	ldr	r0, [r3, #0]
 8006186:	f7ff bfd3 	b.w	8006130 <_raise_r>
 800618a:	bf00      	nop
 800618c:	2000000c 	.word	0x2000000c

08006190 <_kill_r>:
 8006190:	b538      	push	{r3, r4, r5, lr}
 8006192:	2300      	movs	r3, #0
 8006194:	4d06      	ldr	r5, [pc, #24]	; (80061b0 <_kill_r+0x20>)
 8006196:	4604      	mov	r4, r0
 8006198:	4608      	mov	r0, r1
 800619a:	4611      	mov	r1, r2
 800619c:	602b      	str	r3, [r5, #0]
 800619e:	f7fc f9f7 	bl	8002590 <_kill>
 80061a2:	1c43      	adds	r3, r0, #1
 80061a4:	d102      	bne.n	80061ac <_kill_r+0x1c>
 80061a6:	682b      	ldr	r3, [r5, #0]
 80061a8:	b103      	cbz	r3, 80061ac <_kill_r+0x1c>
 80061aa:	6023      	str	r3, [r4, #0]
 80061ac:	bd38      	pop	{r3, r4, r5, pc}
 80061ae:	bf00      	nop
 80061b0:	200002b0 	.word	0x200002b0

080061b4 <_getpid_r>:
 80061b4:	f7fc b9e5 	b.w	8002582 <_getpid>

080061b8 <__malloc_lock>:
 80061b8:	4801      	ldr	r0, [pc, #4]	; (80061c0 <__malloc_lock+0x8>)
 80061ba:	f000 b809 	b.w	80061d0 <__retarget_lock_acquire_recursive>
 80061be:	bf00      	nop
 80061c0:	200002b4 	.word	0x200002b4

080061c4 <__malloc_unlock>:
 80061c4:	4801      	ldr	r0, [pc, #4]	; (80061cc <__malloc_unlock+0x8>)
 80061c6:	f000 b804 	b.w	80061d2 <__retarget_lock_release_recursive>
 80061ca:	bf00      	nop
 80061cc:	200002b4 	.word	0x200002b4

080061d0 <__retarget_lock_acquire_recursive>:
 80061d0:	4770      	bx	lr

080061d2 <__retarget_lock_release_recursive>:
 80061d2:	4770      	bx	lr

080061d4 <_init>:
 80061d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061d6:	bf00      	nop
 80061d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061da:	bc08      	pop	{r3}
 80061dc:	469e      	mov	lr, r3
 80061de:	4770      	bx	lr

080061e0 <_fini>:
 80061e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061e2:	bf00      	nop
 80061e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061e6:	bc08      	pop	{r3}
 80061e8:	469e      	mov	lr, r3
 80061ea:	4770      	bx	lr


Active Stabalizing Mug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fc0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080040cc  080040cc  000140cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040f4  080040f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080040f4  080040f4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040f4  080040f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040f4  080040f4  000140f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040f8  080040f8  000140f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080040fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  2000000c  08004108  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08004108  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108a0  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002285  00000000  00000000  000308d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  00032b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e0  00000000  00000000  00033cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0c3  00000000  00000000  00034dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012e08  00000000  00000000  0004ee93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090919  00000000  00000000  00061c9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f25b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b54  00000000  00000000  000f2604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080040b4 	.word	0x080040b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080040b4 	.word	0x080040b4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fe61 	bl	8000e18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f831 	bl	80001bc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 faf9 	bl	8000750 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 800015e:	f000 f88d 	bl	800027c <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 8000162:	f000 f8d3 	bl	800030c <_ZL12MX_ADC2_Initv>
  MX_SPI1_Init();
 8000166:	f000 f94d 	bl	8000404 <_ZL12MX_SPI1_Initv>
  MX_TIM1_Init();
 800016a:	f000 f987 	bl	800047c <_ZL12MX_TIM1_Initv>
  MX_USART1_UART_Init();
 800016e:	f000 fa65 	bl	800063c <_ZL19MX_USART1_UART_Initv>
  MX_USART2_UART_Init();
 8000172:	f000 fa91 	bl	8000698 <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 8000176:	f000 fabd 	bl	80006f4 <_ZL19MX_USART3_UART_Initv>
  MX_I2C1_Init();
 800017a:	f000 f90f 	bl	800039c <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */

  //Configure Accelerometer using PA4 for CSn, in SPI mode
  MC3479.setSerialSPI(&hspi1, GPIOA, GPIO_PIN_4);
 800017e:	2310      	movs	r3, #16
 8000180:	4a09      	ldr	r2, [pc, #36]	; (80001a8 <main+0x5c>)
 8000182:	490a      	ldr	r1, [pc, #40]	; (80001ac <main+0x60>)
 8000184:	480a      	ldr	r0, [pc, #40]	; (80001b0 <main+0x64>)
 8000186:	f003 fdb1 	bl	8003cec <_ZN11MC3479Class12setSerialSPIEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
  MC3479.configAccelerometer();
 800018a:	4809      	ldr	r0, [pc, #36]	; (80001b0 <main+0x64>)
 800018c:	f003 fe32 	bl	8003df4 <_ZN11MC3479Class19configAccelerometerEv>


  //TIMER1 was set to 255 bits per period, at 8MHz, this is ~ 31kHz
  //We can set the PWM duty cycle% from 0-255 bits of each cycle where n/255 * 100% = PWM duty cycle
  int16_t CH1_PWM_SPEED = 0; //PWM Value from 0 to 255
 8000190:	2300      	movs	r3, #0
 8000192:	80fb      	strh	r3, [r7, #6]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000194:	2100      	movs	r1, #0
 8000196:	4807      	ldr	r0, [pc, #28]	; (80001b4 <main+0x68>)
 8000198:	f003 fb5c 	bl	8003854 <HAL_TIMEx_PWMN_Start>
	  TIM1->CCR1 = CH1_PWM_SPEED;
 800019c:	4a06      	ldr	r2, [pc, #24]	; (80001b8 <main+0x6c>)
 800019e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80001a2:	6353      	str	r3, [r2, #52]	; 0x34
	  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80001a4:	e7f6      	b.n	8000194 <main+0x48>
 80001a6:	bf00      	nop
 80001a8:	40010800 	.word	0x40010800
 80001ac:	200000dc 	.word	0x200000dc
 80001b0:	2000024c 	.word	0x2000024c
 80001b4:	20000134 	.word	0x20000134
 80001b8:	40012c00 	.word	0x40012c00

080001bc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b094      	sub	sp, #80	; 0x50
 80001c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001c6:	2228      	movs	r2, #40	; 0x28
 80001c8:	2100      	movs	r1, #0
 80001ca:	4618      	mov	r0, r3
 80001cc:	f003 ff6a 	bl	80040a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d0:	f107 0314 	add.w	r3, r7, #20
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
 80001de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
 80001e6:	605a      	str	r2, [r3, #4]
 80001e8:	609a      	str	r2, [r3, #8]
 80001ea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ec:	2302      	movs	r3, #2
 80001ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f0:	2301      	movs	r3, #1
 80001f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001f4:	2310      	movs	r3, #16
 80001f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001f8:	2300      	movs	r3, #0
 80001fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000200:	4618      	mov	r0, r3
 8000202:	f001 fc41 	bl	8001a88 <HAL_RCC_OscConfig>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	bf14      	ite	ne
 800020c:	2301      	movne	r3, #1
 800020e:	2300      	moveq	r3, #0
 8000210:	b2db      	uxtb	r3, r3
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <_Z18SystemClock_Configv+0x5e>
  {
    Error_Handler();
 8000216:	f000 fb53 	bl	80008c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800021a:	230f      	movs	r3, #15
 800021c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800021e:	2300      	movs	r3, #0
 8000220:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000222:	2300      	movs	r3, #0
 8000224:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800022e:	f107 0314 	add.w	r3, r7, #20
 8000232:	2100      	movs	r1, #0
 8000234:	4618      	mov	r0, r3
 8000236:	f001 fea9 	bl	8001f8c <HAL_RCC_ClockConfig>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	bf14      	ite	ne
 8000240:	2301      	movne	r3, #1
 8000242:	2300      	moveq	r3, #0
 8000244:	b2db      	uxtb	r3, r3
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <_Z18SystemClock_Configv+0x92>
  {
    Error_Handler();
 800024a:	f000 fb39 	bl	80008c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800024e:	2302      	movs	r3, #2
 8000250:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000252:	2300      	movs	r3, #0
 8000254:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	4618      	mov	r0, r3
 800025a:	f002 f82f 	bl	80022bc <HAL_RCCEx_PeriphCLKConfig>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	bf14      	ite	ne
 8000264:	2301      	movne	r3, #1
 8000266:	2300      	moveq	r3, #0
 8000268:	b2db      	uxtb	r3, r3
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 800026e:	f000 fb27 	bl	80008c0 <Error_Handler>
  }
}
 8000272:	bf00      	nop
 8000274:	3750      	adds	r7, #80	; 0x50
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
	...

0800027c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	605a      	str	r2, [r3, #4]
 800028a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800028c:	4b1d      	ldr	r3, [pc, #116]	; (8000304 <_ZL12MX_ADC1_Initv+0x88>)
 800028e:	4a1e      	ldr	r2, [pc, #120]	; (8000308 <_ZL12MX_ADC1_Initv+0x8c>)
 8000290:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000292:	4b1c      	ldr	r3, [pc, #112]	; (8000304 <_ZL12MX_ADC1_Initv+0x88>)
 8000294:	2200      	movs	r2, #0
 8000296:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000298:	4b1a      	ldr	r3, [pc, #104]	; (8000304 <_ZL12MX_ADC1_Initv+0x88>)
 800029a:	2200      	movs	r2, #0
 800029c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800029e:	4b19      	ldr	r3, [pc, #100]	; (8000304 <_ZL12MX_ADC1_Initv+0x88>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002a4:	4b17      	ldr	r3, [pc, #92]	; (8000304 <_ZL12MX_ADC1_Initv+0x88>)
 80002a6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002ac:	4b15      	ldr	r3, [pc, #84]	; (8000304 <_ZL12MX_ADC1_Initv+0x88>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002b2:	4b14      	ldr	r3, [pc, #80]	; (8000304 <_ZL12MX_ADC1_Initv+0x88>)
 80002b4:	2201      	movs	r2, #1
 80002b6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002b8:	4812      	ldr	r0, [pc, #72]	; (8000304 <_ZL12MX_ADC1_Initv+0x88>)
 80002ba:	f000 fe0f 	bl	8000edc <HAL_ADC_Init>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	bf14      	ite	ne
 80002c4:	2301      	movne	r3, #1
 80002c6:	2300      	moveq	r3, #0
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <_ZL12MX_ADC1_Initv+0x56>
  {
    Error_Handler();
 80002ce:	f000 faf7 	bl	80008c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002d2:	2300      	movs	r3, #0
 80002d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002d6:	2301      	movs	r3, #1
 80002d8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002da:	2300      	movs	r3, #0
 80002dc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4619      	mov	r1, r3
 80002e2:	4808      	ldr	r0, [pc, #32]	; (8000304 <_ZL12MX_ADC1_Initv+0x88>)
 80002e4:	f000 fed2 	bl	800108c <HAL_ADC_ConfigChannel>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	bf14      	ite	ne
 80002ee:	2301      	movne	r3, #1
 80002f0:	2300      	moveq	r3, #0
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <_ZL12MX_ADC1_Initv+0x80>
  {
    Error_Handler();
 80002f8:	f000 fae2 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002fc:	bf00      	nop
 80002fe:	3710      	adds	r7, #16
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	20000028 	.word	0x20000028
 8000308:	40012400 	.word	0x40012400

0800030c <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]
 8000318:	605a      	str	r2, [r3, #4]
 800031a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800031c:	4b1d      	ldr	r3, [pc, #116]	; (8000394 <_ZL12MX_ADC2_Initv+0x88>)
 800031e:	4a1e      	ldr	r2, [pc, #120]	; (8000398 <_ZL12MX_ADC2_Initv+0x8c>)
 8000320:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000322:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <_ZL12MX_ADC2_Initv+0x88>)
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000328:	4b1a      	ldr	r3, [pc, #104]	; (8000394 <_ZL12MX_ADC2_Initv+0x88>)
 800032a:	2200      	movs	r2, #0
 800032c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800032e:	4b19      	ldr	r3, [pc, #100]	; (8000394 <_ZL12MX_ADC2_Initv+0x88>)
 8000330:	2200      	movs	r2, #0
 8000332:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000334:	4b17      	ldr	r3, [pc, #92]	; (8000394 <_ZL12MX_ADC2_Initv+0x88>)
 8000336:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800033a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800033c:	4b15      	ldr	r3, [pc, #84]	; (8000394 <_ZL12MX_ADC2_Initv+0x88>)
 800033e:	2200      	movs	r2, #0
 8000340:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000342:	4b14      	ldr	r3, [pc, #80]	; (8000394 <_ZL12MX_ADC2_Initv+0x88>)
 8000344:	2201      	movs	r2, #1
 8000346:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000348:	4812      	ldr	r0, [pc, #72]	; (8000394 <_ZL12MX_ADC2_Initv+0x88>)
 800034a:	f000 fdc7 	bl	8000edc <HAL_ADC_Init>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	bf14      	ite	ne
 8000354:	2301      	movne	r3, #1
 8000356:	2300      	moveq	r3, #0
 8000358:	b2db      	uxtb	r3, r3
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <_ZL12MX_ADC2_Initv+0x56>
  {
    Error_Handler();
 800035e:	f000 faaf 	bl	80008c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000362:	2301      	movs	r3, #1
 8000364:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000366:	2301      	movs	r3, #1
 8000368:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800036a:	2300      	movs	r3, #0
 800036c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	4619      	mov	r1, r3
 8000372:	4808      	ldr	r0, [pc, #32]	; (8000394 <_ZL12MX_ADC2_Initv+0x88>)
 8000374:	f000 fe8a 	bl	800108c <HAL_ADC_ConfigChannel>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	bf14      	ite	ne
 800037e:	2301      	movne	r3, #1
 8000380:	2300      	moveq	r3, #0
 8000382:	b2db      	uxtb	r3, r3
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <_ZL12MX_ADC2_Initv+0x80>
  {
    Error_Handler();
 8000388:	f000 fa9a 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800038c:	bf00      	nop
 800038e:	3710      	adds	r7, #16
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	20000058 	.word	0x20000058
 8000398:	40012800 	.word	0x40012800

0800039c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003a0:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80003a2:	4a16      	ldr	r2, [pc, #88]	; (80003fc <_ZL12MX_I2C1_Initv+0x60>)
 80003a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80003a6:	4b14      	ldr	r3, [pc, #80]	; (80003f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80003a8:	4a15      	ldr	r2, [pc, #84]	; (8000400 <_ZL12MX_I2C1_Initv+0x64>)
 80003aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003ac:	4b12      	ldr	r3, [pc, #72]	; (80003f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003b8:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80003ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003c0:	4b0d      	ldr	r3, [pc, #52]	; (80003f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003c6:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003cc:	4b0a      	ldr	r3, [pc, #40]	; (80003f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003d2:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003d8:	4807      	ldr	r0, [pc, #28]	; (80003f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80003da:	f001 fa11 	bl	8001800 <HAL_I2C_Init>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	bf14      	ite	ne
 80003e4:	2301      	movne	r3, #1
 80003e6:	2300      	moveq	r3, #0
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80003ee:	f000 fa67 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	20000088 	.word	0x20000088
 80003fc:	40005400 	.word	0x40005400
 8000400:	00061a80 	.word	0x00061a80

08000404 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000408:	4b1a      	ldr	r3, [pc, #104]	; (8000474 <_ZL12MX_SPI1_Initv+0x70>)
 800040a:	4a1b      	ldr	r2, [pc, #108]	; (8000478 <_ZL12MX_SPI1_Initv+0x74>)
 800040c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800040e:	4b19      	ldr	r3, [pc, #100]	; (8000474 <_ZL12MX_SPI1_Initv+0x70>)
 8000410:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000414:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000416:	4b17      	ldr	r3, [pc, #92]	; (8000474 <_ZL12MX_SPI1_Initv+0x70>)
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800041c:	4b15      	ldr	r3, [pc, #84]	; (8000474 <_ZL12MX_SPI1_Initv+0x70>)
 800041e:	2200      	movs	r2, #0
 8000420:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000422:	4b14      	ldr	r3, [pc, #80]	; (8000474 <_ZL12MX_SPI1_Initv+0x70>)
 8000424:	2200      	movs	r2, #0
 8000426:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000428:	4b12      	ldr	r3, [pc, #72]	; (8000474 <_ZL12MX_SPI1_Initv+0x70>)
 800042a:	2200      	movs	r2, #0
 800042c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800042e:	4b11      	ldr	r3, [pc, #68]	; (8000474 <_ZL12MX_SPI1_Initv+0x70>)
 8000430:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000434:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000436:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <_ZL12MX_SPI1_Initv+0x70>)
 8000438:	2200      	movs	r2, #0
 800043a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800043c:	4b0d      	ldr	r3, [pc, #52]	; (8000474 <_ZL12MX_SPI1_Initv+0x70>)
 800043e:	2200      	movs	r2, #0
 8000440:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000442:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <_ZL12MX_SPI1_Initv+0x70>)
 8000444:	2200      	movs	r2, #0
 8000446:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000448:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <_ZL12MX_SPI1_Initv+0x70>)
 800044a:	2200      	movs	r2, #0
 800044c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800044e:	4b09      	ldr	r3, [pc, #36]	; (8000474 <_ZL12MX_SPI1_Initv+0x70>)
 8000450:	220a      	movs	r2, #10
 8000452:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000454:	4807      	ldr	r0, [pc, #28]	; (8000474 <_ZL12MX_SPI1_Initv+0x70>)
 8000456:	f001 ffe7 	bl	8002428 <HAL_SPI_Init>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	bf14      	ite	ne
 8000460:	2301      	movne	r3, #1
 8000462:	2300      	moveq	r3, #0
 8000464:	b2db      	uxtb	r3, r3
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800046a:	f000 fa29 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	200000dc 	.word	0x200000dc
 8000478:	40013000 	.word	0x40013000

0800047c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b096      	sub	sp, #88	; 0x58
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000482:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]
 800048c:	609a      	str	r2, [r3, #8]
 800048e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000490:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
 8000498:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800049a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	60da      	str	r2, [r3, #12]
 80004a8:	611a      	str	r2, [r3, #16]
 80004aa:	615a      	str	r2, [r3, #20]
 80004ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	2220      	movs	r2, #32
 80004b2:	2100      	movs	r1, #0
 80004b4:	4618      	mov	r0, r3
 80004b6:	f003 fdf5 	bl	80040a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004ba:	4b5e      	ldr	r3, [pc, #376]	; (8000634 <_ZL12MX_TIM1_Initv+0x1b8>)
 80004bc:	4a5e      	ldr	r2, [pc, #376]	; (8000638 <_ZL12MX_TIM1_Initv+0x1bc>)
 80004be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004c0:	4b5c      	ldr	r3, [pc, #368]	; (8000634 <_ZL12MX_TIM1_Initv+0x1b8>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c6:	4b5b      	ldr	r3, [pc, #364]	; (8000634 <_ZL12MX_TIM1_Initv+0x1b8>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xff;
 80004cc:	4b59      	ldr	r3, [pc, #356]	; (8000634 <_ZL12MX_TIM1_Initv+0x1b8>)
 80004ce:	22ff      	movs	r2, #255	; 0xff
 80004d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004d2:	4b58      	ldr	r3, [pc, #352]	; (8000634 <_ZL12MX_TIM1_Initv+0x1b8>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004d8:	4b56      	ldr	r3, [pc, #344]	; (8000634 <_ZL12MX_TIM1_Initv+0x1b8>)
 80004da:	2200      	movs	r2, #0
 80004dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004de:	4b55      	ldr	r3, [pc, #340]	; (8000634 <_ZL12MX_TIM1_Initv+0x1b8>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004e4:	4853      	ldr	r0, [pc, #332]	; (8000634 <_ZL12MX_TIM1_Initv+0x1b8>)
 80004e6:	f002 fd0b 	bl	8002f00 <HAL_TIM_Base_Init>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	bf14      	ite	ne
 80004f0:	2301      	movne	r3, #1
 80004f2:	2300      	moveq	r3, #0
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <_ZL12MX_TIM1_Initv+0x82>
  {
    Error_Handler();
 80004fa:	f000 f9e1 	bl	80008c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000502:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000504:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000508:	4619      	mov	r1, r3
 800050a:	484a      	ldr	r0, [pc, #296]	; (8000634 <_ZL12MX_TIM1_Initv+0x1b8>)
 800050c:	f002 fe5e 	bl	80031cc <HAL_TIM_ConfigClockSource>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	bf14      	ite	ne
 8000516:	2301      	movne	r3, #1
 8000518:	2300      	moveq	r3, #0
 800051a:	b2db      	uxtb	r3, r3
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <_ZL12MX_TIM1_Initv+0xa8>
  {
    Error_Handler();
 8000520:	f000 f9ce 	bl	80008c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000524:	4843      	ldr	r0, [pc, #268]	; (8000634 <_ZL12MX_TIM1_Initv+0x1b8>)
 8000526:	f002 fd3a 	bl	8002f9e <HAL_TIM_PWM_Init>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	bf14      	ite	ne
 8000530:	2301      	movne	r3, #1
 8000532:	2300      	moveq	r3, #0
 8000534:	b2db      	uxtb	r3, r3
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <_ZL12MX_TIM1_Initv+0xc2>
  {
    Error_Handler();
 800053a:	f000 f9c1 	bl	80008c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800053e:	2300      	movs	r3, #0
 8000540:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000542:	2300      	movs	r3, #0
 8000544:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000546:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800054a:	4619      	mov	r1, r3
 800054c:	4839      	ldr	r0, [pc, #228]	; (8000634 <_ZL12MX_TIM1_Initv+0x1b8>)
 800054e:	f003 fa1f 	bl	8003990 <HAL_TIMEx_MasterConfigSynchronization>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	bf14      	ite	ne
 8000558:	2301      	movne	r3, #1
 800055a:	2300      	moveq	r3, #0
 800055c:	b2db      	uxtb	r3, r3
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <_ZL12MX_TIM1_Initv+0xea>
  {
    Error_Handler();
 8000562:	f000 f9ad 	bl	80008c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000566:	2360      	movs	r3, #96	; 0x60
 8000568:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800056e:	2300      	movs	r3, #0
 8000570:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000572:	2300      	movs	r3, #0
 8000574:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000576:	2300      	movs	r3, #0
 8000578:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800057a:	2300      	movs	r3, #0
 800057c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800057e:	2300      	movs	r3, #0
 8000580:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000586:	2200      	movs	r2, #0
 8000588:	4619      	mov	r1, r3
 800058a:	482a      	ldr	r0, [pc, #168]	; (8000634 <_ZL12MX_TIM1_Initv+0x1b8>)
 800058c:	f002 fd60 	bl	8003050 <HAL_TIM_PWM_ConfigChannel>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	bf14      	ite	ne
 8000596:	2301      	movne	r3, #1
 8000598:	2300      	moveq	r3, #0
 800059a:	b2db      	uxtb	r3, r3
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <_ZL12MX_TIM1_Initv+0x128>
  {
    Error_Handler();
 80005a0:	f000 f98e 	bl	80008c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005a8:	2204      	movs	r2, #4
 80005aa:	4619      	mov	r1, r3
 80005ac:	4821      	ldr	r0, [pc, #132]	; (8000634 <_ZL12MX_TIM1_Initv+0x1b8>)
 80005ae:	f002 fd4f 	bl	8003050 <HAL_TIM_PWM_ConfigChannel>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	bf14      	ite	ne
 80005b8:	2301      	movne	r3, #1
 80005ba:	2300      	moveq	r3, #0
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <_ZL12MX_TIM1_Initv+0x14a>
  {
    Error_Handler();
 80005c2:	f000 f97d 	bl	80008c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ca:	2208      	movs	r2, #8
 80005cc:	4619      	mov	r1, r3
 80005ce:	4819      	ldr	r0, [pc, #100]	; (8000634 <_ZL12MX_TIM1_Initv+0x1b8>)
 80005d0:	f002 fd3e 	bl	8003050 <HAL_TIM_PWM_ConfigChannel>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	bf14      	ite	ne
 80005da:	2301      	movne	r3, #1
 80005dc:	2300      	moveq	r3, #0
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <_ZL12MX_TIM1_Initv+0x16c>
  {
    Error_Handler();
 80005e4:	f000 f96c 	bl	80008c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005e8:	2300      	movs	r3, #0
 80005ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005f0:	2300      	movs	r3, #0
 80005f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000600:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000602:	2300      	movs	r3, #0
 8000604:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	4619      	mov	r1, r3
 800060a:	480a      	ldr	r0, [pc, #40]	; (8000634 <_ZL12MX_TIM1_Initv+0x1b8>)
 800060c:	f003 fa1e 	bl	8003a4c <HAL_TIMEx_ConfigBreakDeadTime>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	bf14      	ite	ne
 8000616:	2301      	movne	r3, #1
 8000618:	2300      	moveq	r3, #0
 800061a:	b2db      	uxtb	r3, r3
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <_ZL12MX_TIM1_Initv+0x1a8>
  {
    Error_Handler();
 8000620:	f000 f94e 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000624:	4803      	ldr	r0, [pc, #12]	; (8000634 <_ZL12MX_TIM1_Initv+0x1b8>)
 8000626:	f000 faa1 	bl	8000b6c <HAL_TIM_MspPostInit>

}
 800062a:	bf00      	nop
 800062c:	3758      	adds	r7, #88	; 0x58
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000134 	.word	0x20000134
 8000638:	40012c00 	.word	0x40012c00

0800063c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000640:	4b13      	ldr	r3, [pc, #76]	; (8000690 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000642:	4a14      	ldr	r2, [pc, #80]	; (8000694 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000644:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000648:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800064c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000654:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800065a:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <_ZL19MX_USART1_UART_Initv+0x54>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000660:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000662:	220c      	movs	r2, #12
 8000664:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <_ZL19MX_USART1_UART_Initv+0x54>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000672:	4807      	ldr	r0, [pc, #28]	; (8000690 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000674:	f003 fa5f 	bl	8003b36 <HAL_UART_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	bf14      	ite	ne
 800067e:	2301      	movne	r3, #1
 8000680:	2300      	moveq	r3, #0
 8000682:	b2db      	uxtb	r3, r3
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8000688:	f000 f91a 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	2000017c 	.word	0x2000017c
 8000694:	40013800 	.word	0x40013800

08000698 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800069c:	4b13      	ldr	r3, [pc, #76]	; (80006ec <_ZL19MX_USART2_UART_Initv+0x54>)
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <_ZL19MX_USART2_UART_Initv+0x58>)
 80006a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <_ZL19MX_USART2_UART_Initv+0x54>)
 80006a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <_ZL19MX_USART2_UART_Initv+0x54>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b0:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <_ZL19MX_USART2_UART_Initv+0x54>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006b6:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <_ZL19MX_USART2_UART_Initv+0x54>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006bc:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <_ZL19MX_USART2_UART_Initv+0x54>)
 80006be:	220c      	movs	r2, #12
 80006c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c2:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <_ZL19MX_USART2_UART_Initv+0x54>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c8:	4b08      	ldr	r3, [pc, #32]	; (80006ec <_ZL19MX_USART2_UART_Initv+0x54>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ce:	4807      	ldr	r0, [pc, #28]	; (80006ec <_ZL19MX_USART2_UART_Initv+0x54>)
 80006d0:	f003 fa31 	bl	8003b36 <HAL_UART_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	bf14      	ite	ne
 80006da:	2301      	movne	r3, #1
 80006dc:	2300      	moveq	r3, #0
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80006e4:	f000 f8ec 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	200001c0 	.word	0x200001c0
 80006f0:	40004400 	.word	0x40004400

080006f4 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006f8:	4b13      	ldr	r3, [pc, #76]	; (8000748 <_ZL19MX_USART3_UART_Initv+0x54>)
 80006fa:	4a14      	ldr	r2, [pc, #80]	; (800074c <_ZL19MX_USART3_UART_Initv+0x58>)
 80006fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006fe:	4b12      	ldr	r3, [pc, #72]	; (8000748 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000704:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800070c:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <_ZL19MX_USART3_UART_Initv+0x54>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000712:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000718:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <_ZL19MX_USART3_UART_Initv+0x54>)
 800071a:	220c      	movs	r2, #12
 800071c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071e:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000724:	4b08      	ldr	r3, [pc, #32]	; (8000748 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800072a:	4807      	ldr	r0, [pc, #28]	; (8000748 <_ZL19MX_USART3_UART_Initv+0x54>)
 800072c:	f003 fa03 	bl	8003b36 <HAL_UART_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	bf14      	ite	ne
 8000736:	2301      	movne	r3, #1
 8000738:	2300      	moveq	r3, #0
 800073a:	b2db      	uxtb	r3, r3
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8000740:	f000 f8be 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000204 	.word	0x20000204
 800074c:	40004800 	.word	0x40004800

08000750 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	; 0x28
 8000754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000764:	4b50      	ldr	r3, [pc, #320]	; (80008a8 <_ZL12MX_GPIO_Initv+0x158>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a4f      	ldr	r2, [pc, #316]	; (80008a8 <_ZL12MX_GPIO_Initv+0x158>)
 800076a:	f043 0310 	orr.w	r3, r3, #16
 800076e:	6193      	str	r3, [r2, #24]
 8000770:	4b4d      	ldr	r3, [pc, #308]	; (80008a8 <_ZL12MX_GPIO_Initv+0x158>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f003 0310 	and.w	r3, r3, #16
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800077c:	4b4a      	ldr	r3, [pc, #296]	; (80008a8 <_ZL12MX_GPIO_Initv+0x158>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	4a49      	ldr	r2, [pc, #292]	; (80008a8 <_ZL12MX_GPIO_Initv+0x158>)
 8000782:	f043 0320 	orr.w	r3, r3, #32
 8000786:	6193      	str	r3, [r2, #24]
 8000788:	4b47      	ldr	r3, [pc, #284]	; (80008a8 <_ZL12MX_GPIO_Initv+0x158>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	f003 0320 	and.w	r3, r3, #32
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000794:	4b44      	ldr	r3, [pc, #272]	; (80008a8 <_ZL12MX_GPIO_Initv+0x158>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	4a43      	ldr	r2, [pc, #268]	; (80008a8 <_ZL12MX_GPIO_Initv+0x158>)
 800079a:	f043 0304 	orr.w	r3, r3, #4
 800079e:	6193      	str	r3, [r2, #24]
 80007a0:	4b41      	ldr	r3, [pc, #260]	; (80008a8 <_ZL12MX_GPIO_Initv+0x158>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	f003 0304 	and.w	r3, r3, #4
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ac:	4b3e      	ldr	r3, [pc, #248]	; (80008a8 <_ZL12MX_GPIO_Initv+0x158>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a3d      	ldr	r2, [pc, #244]	; (80008a8 <_ZL12MX_GPIO_Initv+0x158>)
 80007b2:	f043 0308 	orr.w	r3, r3, #8
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b3b      	ldr	r3, [pc, #236]	; (80008a8 <_ZL12MX_GPIO_Initv+0x158>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f003 0308 	and.w	r3, r3, #8
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80007ca:	4838      	ldr	r0, [pc, #224]	; (80008ac <_ZL12MX_GPIO_Initv+0x15c>)
 80007cc:	f001 f800 	bl	80017d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2103      	movs	r1, #3
 80007d4:	4836      	ldr	r0, [pc, #216]	; (80008b0 <_ZL12MX_GPIO_Initv+0x160>)
 80007d6:	f000 fffb 	bl	80017d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CSn_Pin|MP6543B_DIR_p4_Pin|MP6543B_nBRAKE_p6_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f641 0110 	movw	r1, #6160	; 0x1810
 80007e0:	4834      	ldr	r0, [pc, #208]	; (80008b4 <_ZL12MX_GPIO_Initv+0x164>)
 80007e2:	f000 fff5 	bl	80017d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|MP6543B_nSLEEP_p24_Pin|MP6543B_OC_ADJ_p17_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 4130 	mov.w	r1, #45056	; 0xb000
 80007ec:	4832      	ldr	r0, [pc, #200]	; (80008b8 <_ZL12MX_GPIO_Initv+0x168>)
 80007ee:	f000 ffef 	bl	80017d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007f2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2302      	movs	r3, #2
 8000802:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	4828      	ldr	r0, [pc, #160]	; (80008ac <_ZL12MX_GPIO_Initv+0x15c>)
 800080c:	f000 fe5c 	bl	80014c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000810:	2303      	movs	r3, #3
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000814:	2301      	movs	r3, #1
 8000816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2302      	movs	r3, #2
 800081e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	4822      	ldr	r0, [pc, #136]	; (80008b0 <_ZL12MX_GPIO_Initv+0x160>)
 8000828:	f000 fe4e 	bl	80014c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CSn_Pin MP6543B_DIR_p4_Pin MP6543B_nBRAKE_p6_Pin */
  GPIO_InitStruct.Pin = SPI1_CSn_Pin|MP6543B_DIR_p4_Pin|MP6543B_nBRAKE_p6_Pin;
 800082c:	f641 0310 	movw	r3, #6160	; 0x1810
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2302      	movs	r3, #2
 800083c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4619      	mov	r1, r3
 8000844:	481b      	ldr	r0, [pc, #108]	; (80008b4 <_ZL12MX_GPIO_Initv+0x164>)
 8000846:	f000 fe3f 	bl	80014c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_INTN2_p11_Pin SPI1_INTN1_p12_Pin PB2 MP6543B_nFAULT_p20_Pin */
  GPIO_InitStruct.Pin = SPI1_INTN2_p11_Pin|SPI1_INTN1_p12_Pin|GPIO_PIN_2|MP6543B_nFAULT_p20_Pin;
 800084a:	f244 0307 	movw	r3, #16391	; 0x4007
 800084e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000850:	2300      	movs	r3, #0
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	4816      	ldr	r0, [pc, #88]	; (80008b8 <_ZL12MX_GPIO_Initv+0x168>)
 8000860:	f000 fe32 	bl	80014c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 MP6543B_nSLEEP_p24_Pin MP6543B_OC_ADJ_p17_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|MP6543B_nSLEEP_p24_Pin|MP6543B_OC_ADJ_p17_Pin;
 8000864:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2302      	movs	r3, #2
 8000874:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	480e      	ldr	r0, [pc, #56]	; (80008b8 <_ZL12MX_GPIO_Initv+0x168>)
 800087e:	f000 fe23 	bl	80014c8 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <_ZL12MX_GPIO_Initv+0x16c>)
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
 8000888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
 8000890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
 8000898:	4a08      	ldr	r2, [pc, #32]	; (80008bc <_ZL12MX_GPIO_Initv+0x16c>)
 800089a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089c:	6053      	str	r3, [r2, #4]

}
 800089e:	bf00      	nop
 80008a0:	3728      	adds	r7, #40	; 0x28
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40021000 	.word	0x40021000
 80008ac:	40011000 	.word	0x40011000
 80008b0:	40011400 	.word	0x40011400
 80008b4:	40010800 	.word	0x40010800
 80008b8:	40010c00 	.word	0x40010c00
 80008bc:	40010000 	.word	0x40010000

080008c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c4:	b672      	cpsid	i
}
 80008c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <Error_Handler+0x8>
	...

080008cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <HAL_MspInit+0x5c>)
 80008d4:	699b      	ldr	r3, [r3, #24]
 80008d6:	4a14      	ldr	r2, [pc, #80]	; (8000928 <HAL_MspInit+0x5c>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6193      	str	r3, [r2, #24]
 80008de:	4b12      	ldr	r3, [pc, #72]	; (8000928 <HAL_MspInit+0x5c>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ea:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <HAL_MspInit+0x5c>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	4a0e      	ldr	r2, [pc, #56]	; (8000928 <HAL_MspInit+0x5c>)
 80008f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f4:	61d3      	str	r3, [r2, #28]
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <HAL_MspInit+0x5c>)
 80008f8:	69db      	ldr	r3, [r3, #28]
 80008fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000902:	4b0a      	ldr	r3, [pc, #40]	; (800092c <HAL_MspInit+0x60>)
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	4a04      	ldr	r2, [pc, #16]	; (800092c <HAL_MspInit+0x60>)
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091e:	bf00      	nop
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr
 8000928:	40021000 	.word	0x40021000
 800092c:	40010000 	.word	0x40010000

08000930 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	; 0x28
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 0318 	add.w	r3, r7, #24
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a28      	ldr	r2, [pc, #160]	; (80009ec <HAL_ADC_MspInit+0xbc>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d122      	bne.n	8000996 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000950:	4b27      	ldr	r3, [pc, #156]	; (80009f0 <HAL_ADC_MspInit+0xc0>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	4a26      	ldr	r2, [pc, #152]	; (80009f0 <HAL_ADC_MspInit+0xc0>)
 8000956:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800095a:	6193      	str	r3, [r2, #24]
 800095c:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <HAL_ADC_MspInit+0xc0>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000964:	617b      	str	r3, [r7, #20]
 8000966:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000968:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <HAL_ADC_MspInit+0xc0>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	4a20      	ldr	r2, [pc, #128]	; (80009f0 <HAL_ADC_MspInit+0xc0>)
 800096e:	f043 0304 	orr.w	r3, r3, #4
 8000972:	6193      	str	r3, [r2, #24]
 8000974:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <HAL_ADC_MspInit+0xc0>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	f003 0304 	and.w	r3, r3, #4
 800097c:	613b      	str	r3, [r7, #16]
 800097e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000980:	2301      	movs	r3, #1
 8000982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000984:	2303      	movs	r3, #3
 8000986:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000988:	f107 0318 	add.w	r3, r7, #24
 800098c:	4619      	mov	r1, r3
 800098e:	4819      	ldr	r0, [pc, #100]	; (80009f4 <HAL_ADC_MspInit+0xc4>)
 8000990:	f000 fd9a 	bl	80014c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000994:	e026      	b.n	80009e4 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a17      	ldr	r2, [pc, #92]	; (80009f8 <HAL_ADC_MspInit+0xc8>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d121      	bne.n	80009e4 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <HAL_ADC_MspInit+0xc0>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <HAL_ADC_MspInit+0xc0>)
 80009a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009aa:	6193      	str	r3, [r2, #24]
 80009ac:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <HAL_ADC_MspInit+0xc0>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b8:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <HAL_ADC_MspInit+0xc0>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a0c      	ldr	r2, [pc, #48]	; (80009f0 <HAL_ADC_MspInit+0xc0>)
 80009be:	f043 0304 	orr.w	r3, r3, #4
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <HAL_ADC_MspInit+0xc0>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f003 0304 	and.w	r3, r3, #4
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d4:	2303      	movs	r3, #3
 80009d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d8:	f107 0318 	add.w	r3, r7, #24
 80009dc:	4619      	mov	r1, r3
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <HAL_ADC_MspInit+0xc4>)
 80009e0:	f000 fd72 	bl	80014c8 <HAL_GPIO_Init>
}
 80009e4:	bf00      	nop
 80009e6:	3728      	adds	r7, #40	; 0x28
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40012400 	.word	0x40012400
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40010800 	.word	0x40010800
 80009f8:	40012800 	.word	0x40012800

080009fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	; 0x28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a1d      	ldr	r2, [pc, #116]	; (8000a8c <HAL_I2C_MspInit+0x90>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d132      	bne.n	8000a82 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <HAL_I2C_MspInit+0x94>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	4a1b      	ldr	r2, [pc, #108]	; (8000a90 <HAL_I2C_MspInit+0x94>)
 8000a22:	f043 0308 	orr.w	r3, r3, #8
 8000a26:	6193      	str	r3, [r2, #24]
 8000a28:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <HAL_I2C_MspInit+0x94>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	f003 0308 	and.w	r3, r3, #8
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a34:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a3a:	2312      	movs	r3, #18
 8000a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	4812      	ldr	r0, [pc, #72]	; (8000a94 <HAL_I2C_MspInit+0x98>)
 8000a4a:	f000 fd3d 	bl	80014c8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <HAL_I2C_MspInit+0x9c>)
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
 8000a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a56:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5e:	f043 0302 	orr.w	r3, r3, #2
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
 8000a64:	4a0c      	ldr	r2, [pc, #48]	; (8000a98 <HAL_I2C_MspInit+0x9c>)
 8000a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a68:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <HAL_I2C_MspInit+0x94>)
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <HAL_I2C_MspInit+0x94>)
 8000a70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a74:	61d3      	str	r3, [r2, #28]
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_I2C_MspInit+0x94>)
 8000a78:	69db      	ldr	r3, [r3, #28]
 8000a7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a82:	bf00      	nop
 8000a84:	3728      	adds	r7, #40	; 0x28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40005400 	.word	0x40005400
 8000a90:	40021000 	.word	0x40021000
 8000a94:	40010c00 	.word	0x40010c00
 8000a98:	40010000 	.word	0x40010000

08000a9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0310 	add.w	r3, r7, #16
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a1b      	ldr	r2, [pc, #108]	; (8000b24 <HAL_SPI_MspInit+0x88>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d12f      	bne.n	8000b1c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000abc:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <HAL_SPI_MspInit+0x8c>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	4a19      	ldr	r2, [pc, #100]	; (8000b28 <HAL_SPI_MspInit+0x8c>)
 8000ac2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ac6:	6193      	str	r3, [r2, #24]
 8000ac8:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <HAL_SPI_MspInit+0x8c>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <HAL_SPI_MspInit+0x8c>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	4a13      	ldr	r2, [pc, #76]	; (8000b28 <HAL_SPI_MspInit+0x8c>)
 8000ada:	f043 0304 	orr.w	r3, r3, #4
 8000ade:	6193      	str	r3, [r2, #24]
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <HAL_SPI_MspInit+0x8c>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	f003 0304 	and.w	r3, r3, #4
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000aec:	23a0      	movs	r3, #160	; 0xa0
 8000aee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000af4:	2303      	movs	r3, #3
 8000af6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af8:	f107 0310 	add.w	r3, r7, #16
 8000afc:	4619      	mov	r1, r3
 8000afe:	480b      	ldr	r0, [pc, #44]	; (8000b2c <HAL_SPI_MspInit+0x90>)
 8000b00:	f000 fce2 	bl	80014c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b04:	2340      	movs	r3, #64	; 0x40
 8000b06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	f107 0310 	add.w	r3, r7, #16
 8000b14:	4619      	mov	r1, r3
 8000b16:	4805      	ldr	r0, [pc, #20]	; (8000b2c <HAL_SPI_MspInit+0x90>)
 8000b18:	f000 fcd6 	bl	80014c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b1c:	bf00      	nop
 8000b1e:	3720      	adds	r7, #32
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40013000 	.word	0x40013000
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	40010800 	.word	0x40010800

08000b30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a09      	ldr	r2, [pc, #36]	; (8000b64 <HAL_TIM_Base_MspInit+0x34>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d10b      	bne.n	8000b5a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_TIM_Base_MspInit+0x38>)
 8000b44:	699b      	ldr	r3, [r3, #24]
 8000b46:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <HAL_TIM_Base_MspInit+0x38>)
 8000b48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b4c:	6193      	str	r3, [r2, #24]
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_TIM_Base_MspInit+0x38>)
 8000b50:	699b      	ldr	r3, [r3, #24]
 8000b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b5a:	bf00      	nop
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr
 8000b64:	40012c00 	.word	0x40012c00
 8000b68:	40021000 	.word	0x40021000

08000b6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <HAL_TIM_MspPostInit+0x5c>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d118      	bne.n	8000bbe <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <HAL_TIM_MspPostInit+0x60>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <HAL_TIM_MspPostInit+0x60>)
 8000b92:	f043 0304 	orr.w	r3, r3, #4
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <HAL_TIM_MspPostInit+0x60>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f003 0304 	and.w	r3, r3, #4
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000ba4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000ba8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 0310 	add.w	r3, r7, #16
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <HAL_TIM_MspPostInit+0x64>)
 8000bba:	f000 fc85 	bl	80014c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000bbe:	bf00      	nop
 8000bc0:	3720      	adds	r7, #32
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40012c00 	.word	0x40012c00
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	40010800 	.word	0x40010800

08000bd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08e      	sub	sp, #56	; 0x38
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a59      	ldr	r2, [pc, #356]	; (8000d54 <HAL_UART_MspInit+0x180>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d13e      	bne.n	8000c72 <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bf4:	4b58      	ldr	r3, [pc, #352]	; (8000d58 <HAL_UART_MspInit+0x184>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a57      	ldr	r2, [pc, #348]	; (8000d58 <HAL_UART_MspInit+0x184>)
 8000bfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b55      	ldr	r3, [pc, #340]	; (8000d58 <HAL_UART_MspInit+0x184>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c08:	623b      	str	r3, [r7, #32]
 8000c0a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0c:	4b52      	ldr	r3, [pc, #328]	; (8000d58 <HAL_UART_MspInit+0x184>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a51      	ldr	r2, [pc, #324]	; (8000d58 <HAL_UART_MspInit+0x184>)
 8000c12:	f043 0308 	orr.w	r3, r3, #8
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b4f      	ldr	r3, [pc, #316]	; (8000d58 <HAL_UART_MspInit+0x184>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f003 0308 	and.w	r3, r3, #8
 8000c20:	61fb      	str	r3, [r7, #28]
 8000c22:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c24:	2340      	movs	r3, #64	; 0x40
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c34:	4619      	mov	r1, r3
 8000c36:	4849      	ldr	r0, [pc, #292]	; (8000d5c <HAL_UART_MspInit+0x188>)
 8000c38:	f000 fc46 	bl	80014c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c3c:	2380      	movs	r3, #128	; 0x80
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4843      	ldr	r0, [pc, #268]	; (8000d5c <HAL_UART_MspInit+0x188>)
 8000c50:	f000 fc3a 	bl	80014c8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000c54:	4b42      	ldr	r3, [pc, #264]	; (8000d60 <HAL_UART_MspInit+0x18c>)
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	637b      	str	r3, [r7, #52]	; 0x34
 8000c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c5c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000c60:	637b      	str	r3, [r7, #52]	; 0x34
 8000c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c64:	f043 0304 	orr.w	r3, r3, #4
 8000c68:	637b      	str	r3, [r7, #52]	; 0x34
 8000c6a:	4a3d      	ldr	r2, [pc, #244]	; (8000d60 <HAL_UART_MspInit+0x18c>)
 8000c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c6e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c70:	e06c      	b.n	8000d4c <HAL_UART_MspInit+0x178>
  else if(huart->Instance==USART2)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a3b      	ldr	r2, [pc, #236]	; (8000d64 <HAL_UART_MspInit+0x190>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d130      	bne.n	8000cde <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c7c:	4b36      	ldr	r3, [pc, #216]	; (8000d58 <HAL_UART_MspInit+0x184>)
 8000c7e:	69db      	ldr	r3, [r3, #28]
 8000c80:	4a35      	ldr	r2, [pc, #212]	; (8000d58 <HAL_UART_MspInit+0x184>)
 8000c82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c86:	61d3      	str	r3, [r2, #28]
 8000c88:	4b33      	ldr	r3, [pc, #204]	; (8000d58 <HAL_UART_MspInit+0x184>)
 8000c8a:	69db      	ldr	r3, [r3, #28]
 8000c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c90:	61bb      	str	r3, [r7, #24]
 8000c92:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c94:	4b30      	ldr	r3, [pc, #192]	; (8000d58 <HAL_UART_MspInit+0x184>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	4a2f      	ldr	r2, [pc, #188]	; (8000d58 <HAL_UART_MspInit+0x184>)
 8000c9a:	f043 0304 	orr.w	r3, r3, #4
 8000c9e:	6193      	str	r3, [r2, #24]
 8000ca0:	4b2d      	ldr	r3, [pc, #180]	; (8000d58 <HAL_UART_MspInit+0x184>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f003 0304 	and.w	r3, r3, #4
 8000ca8:	617b      	str	r3, [r7, #20]
 8000caa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cac:	2304      	movs	r3, #4
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	482a      	ldr	r0, [pc, #168]	; (8000d68 <HAL_UART_MspInit+0x194>)
 8000cc0:	f000 fc02 	bl	80014c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cc4:	2308      	movs	r3, #8
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4824      	ldr	r0, [pc, #144]	; (8000d68 <HAL_UART_MspInit+0x194>)
 8000cd8:	f000 fbf6 	bl	80014c8 <HAL_GPIO_Init>
}
 8000cdc:	e036      	b.n	8000d4c <HAL_UART_MspInit+0x178>
  else if(huart->Instance==USART3)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a22      	ldr	r2, [pc, #136]	; (8000d6c <HAL_UART_MspInit+0x198>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d131      	bne.n	8000d4c <HAL_UART_MspInit+0x178>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ce8:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <HAL_UART_MspInit+0x184>)
 8000cea:	69db      	ldr	r3, [r3, #28]
 8000cec:	4a1a      	ldr	r2, [pc, #104]	; (8000d58 <HAL_UART_MspInit+0x184>)
 8000cee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf2:	61d3      	str	r3, [r2, #28]
 8000cf4:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <HAL_UART_MspInit+0x184>)
 8000cf6:	69db      	ldr	r3, [r3, #28]
 8000cf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d00:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <HAL_UART_MspInit+0x184>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a14      	ldr	r2, [pc, #80]	; (8000d58 <HAL_UART_MspInit+0x184>)
 8000d06:	f043 0308 	orr.w	r3, r3, #8
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_UART_MspInit+0x184>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0308 	and.w	r3, r3, #8
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	480b      	ldr	r0, [pc, #44]	; (8000d5c <HAL_UART_MspInit+0x188>)
 8000d2e:	f000 fbcb 	bl	80014c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d44:	4619      	mov	r1, r3
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <HAL_UART_MspInit+0x188>)
 8000d48:	f000 fbbe 	bl	80014c8 <HAL_GPIO_Init>
}
 8000d4c:	bf00      	nop
 8000d4e:	3738      	adds	r7, #56	; 0x38
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40013800 	.word	0x40013800
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	40010c00 	.word	0x40010c00
 8000d60:	40010000 	.word	0x40010000
 8000d64:	40004400 	.word	0x40004400
 8000d68:	40010800 	.word	0x40010800
 8000d6c:	40004800 	.word	0x40004800

08000d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <NMI_Handler+0x4>

08000d76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <HardFault_Handler+0x4>

08000d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <MemManage_Handler+0x4>

08000d82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <BusFault_Handler+0x4>

08000d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <UsageFault_Handler+0x4>

08000d8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr

08000d9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr

08000da6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr

08000db2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db6:	f000 f875 	bl	8000ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr
	...

08000dcc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dcc:	480c      	ldr	r0, [pc, #48]	; (8000e00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dce:	490d      	ldr	r1, [pc, #52]	; (8000e04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	; (8000e08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd4:	e002      	b.n	8000ddc <LoopCopyDataInit>

08000dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dda:	3304      	adds	r3, #4

08000ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de0:	d3f9      	bcc.n	8000dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de2:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000de4:	4c0a      	ldr	r4, [pc, #40]	; (8000e10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de8:	e001      	b.n	8000dee <LoopFillZerobss>

08000dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dec:	3204      	adds	r2, #4

08000dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df0:	d3fb      	bcc.n	8000dea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000df2:	f7ff ffe4 	bl	8000dbe <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000df6:	f003 f931 	bl	800405c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dfa:	f7ff f9a7 	bl	800014c <main>
  bx lr
 8000dfe:	4770      	bx	lr
  ldr r0, =_sdata
 8000e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e08:	080040fc 	.word	0x080040fc
  ldr r2, =_sbss
 8000e0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e10:	20000260 	.word	0x20000260

08000e14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e14:	e7fe      	b.n	8000e14 <ADC1_2_IRQHandler>
	...

08000e18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <HAL_Init+0x28>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <HAL_Init+0x28>)
 8000e22:	f043 0310 	orr.w	r3, r3, #16
 8000e26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f000 fb19 	bl	8001460 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2e:	200f      	movs	r0, #15
 8000e30:	f000 f808 	bl	8000e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e34:	f7ff fd4a 	bl	80008cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40022000 	.word	0x40022000

08000e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_InitTick+0x54>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <HAL_InitTick+0x58>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 fb23 	bl	80014ae <HAL_SYSTICK_Config>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e00e      	b.n	8000e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b0f      	cmp	r3, #15
 8000e76:	d80a      	bhi.n	8000e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e80:	f000 faf9 	bl	8001476 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e84:	4a06      	ldr	r2, [pc, #24]	; (8000ea0 <HAL_InitTick+0x5c>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e000      	b.n	8000e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	20000004 	.word	0x20000004

08000ea4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <HAL_IncTick+0x1c>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <HAL_IncTick+0x20>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a03      	ldr	r2, [pc, #12]	; (8000ec4 <HAL_IncTick+0x20>)
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	20000248 	.word	0x20000248

08000ec8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ecc:	4b02      	ldr	r3, [pc, #8]	; (8000ed8 <HAL_GetTick+0x10>)
 8000ece:	681b      	ldr	r3, [r3, #0]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	20000248 	.word	0x20000248

08000edc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000eec:	2300      	movs	r3, #0
 8000eee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d101      	bne.n	8000efe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e0be      	b.n	800107c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d109      	bne.n	8000f20 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff fd08 	bl	8000930 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f000 f9ab 	bl	800127c <ADC_ConversionStop_Disable>
 8000f26:	4603      	mov	r3, r0
 8000f28:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2e:	f003 0310 	and.w	r3, r3, #16
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f040 8099 	bne.w	800106a <HAL_ADC_Init+0x18e>
 8000f38:	7dfb      	ldrb	r3, [r7, #23]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f040 8095 	bne.w	800106a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f44:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f48:	f023 0302 	bic.w	r3, r3, #2
 8000f4c:	f043 0202 	orr.w	r2, r3, #2
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f5c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	7b1b      	ldrb	r3, [r3, #12]
 8000f62:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f64:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f74:	d003      	beq.n	8000f7e <HAL_ADC_Init+0xa2>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d102      	bne.n	8000f84 <HAL_ADC_Init+0xa8>
 8000f7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f82:	e000      	b.n	8000f86 <HAL_ADC_Init+0xaa>
 8000f84:	2300      	movs	r3, #0
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	7d1b      	ldrb	r3, [r3, #20]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d119      	bne.n	8000fc8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	7b1b      	ldrb	r3, [r3, #12]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d109      	bne.n	8000fb0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	3b01      	subs	r3, #1
 8000fa2:	035a      	lsls	r2, r3, #13
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	e00b      	b.n	8000fc8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb4:	f043 0220 	orr.w	r2, r3, #32
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc0:	f043 0201 	orr.w	r2, r3, #1
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	4b28      	ldr	r3, [pc, #160]	; (8001084 <HAL_ADC_Init+0x1a8>)
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	6812      	ldr	r2, [r2, #0]
 8000fea:	68b9      	ldr	r1, [r7, #8]
 8000fec:	430b      	orrs	r3, r1
 8000fee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ff8:	d003      	beq.n	8001002 <HAL_ADC_Init+0x126>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d104      	bne.n	800100c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	691b      	ldr	r3, [r3, #16]
 8001006:	3b01      	subs	r3, #1
 8001008:	051b      	lsls	r3, r3, #20
 800100a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001012:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	430a      	orrs	r2, r1
 800101e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	4b18      	ldr	r3, [pc, #96]	; (8001088 <HAL_ADC_Init+0x1ac>)
 8001028:	4013      	ands	r3, r2
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	429a      	cmp	r2, r3
 800102e:	d10b      	bne.n	8001048 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103a:	f023 0303 	bic.w	r3, r3, #3
 800103e:	f043 0201 	orr.w	r2, r3, #1
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001046:	e018      	b.n	800107a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104c:	f023 0312 	bic.w	r3, r3, #18
 8001050:	f043 0210 	orr.w	r2, r3, #16
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105c:	f043 0201 	orr.w	r2, r3, #1
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001068:	e007      	b.n	800107a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106e:	f043 0210 	orr.w	r2, r3, #16
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800107a:	7dfb      	ldrb	r3, [r7, #23]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	ffe1f7fd 	.word	0xffe1f7fd
 8001088:	ff1f0efe 	.word	0xff1f0efe

0800108c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d101      	bne.n	80010ac <HAL_ADC_ConfigChannel+0x20>
 80010a8:	2302      	movs	r3, #2
 80010aa:	e0dc      	b.n	8001266 <HAL_ADC_ConfigChannel+0x1da>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2201      	movs	r2, #1
 80010b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2b06      	cmp	r3, #6
 80010ba:	d81c      	bhi.n	80010f6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685a      	ldr	r2, [r3, #4]
 80010c6:	4613      	mov	r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4413      	add	r3, r2
 80010cc:	3b05      	subs	r3, #5
 80010ce:	221f      	movs	r2, #31
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	4019      	ands	r1, r3
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	4613      	mov	r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4413      	add	r3, r2
 80010e6:	3b05      	subs	r3, #5
 80010e8:	fa00 f203 	lsl.w	r2, r0, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	430a      	orrs	r2, r1
 80010f2:	635a      	str	r2, [r3, #52]	; 0x34
 80010f4:	e03c      	b.n	8001170 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b0c      	cmp	r3, #12
 80010fc:	d81c      	bhi.n	8001138 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685a      	ldr	r2, [r3, #4]
 8001108:	4613      	mov	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	4413      	add	r3, r2
 800110e:	3b23      	subs	r3, #35	; 0x23
 8001110:	221f      	movs	r2, #31
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	4019      	ands	r1, r3
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	6818      	ldr	r0, [r3, #0]
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	4613      	mov	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	4413      	add	r3, r2
 8001128:	3b23      	subs	r3, #35	; 0x23
 800112a:	fa00 f203 	lsl.w	r2, r0, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	430a      	orrs	r2, r1
 8001134:	631a      	str	r2, [r3, #48]	; 0x30
 8001136:	e01b      	b.n	8001170 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	4613      	mov	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	3b41      	subs	r3, #65	; 0x41
 800114a:	221f      	movs	r2, #31
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	4019      	ands	r1, r3
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	6818      	ldr	r0, [r3, #0]
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685a      	ldr	r2, [r3, #4]
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	3b41      	subs	r3, #65	; 0x41
 8001164:	fa00 f203 	lsl.w	r2, r0, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	430a      	orrs	r2, r1
 800116e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b09      	cmp	r3, #9
 8001176:	d91c      	bls.n	80011b2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	68d9      	ldr	r1, [r3, #12]
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	4613      	mov	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	4413      	add	r3, r2
 8001188:	3b1e      	subs	r3, #30
 800118a:	2207      	movs	r2, #7
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	4019      	ands	r1, r3
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	6898      	ldr	r0, [r3, #8]
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4613      	mov	r3, r2
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	4413      	add	r3, r2
 80011a2:	3b1e      	subs	r3, #30
 80011a4:	fa00 f203 	lsl.w	r2, r0, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	430a      	orrs	r2, r1
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	e019      	b.n	80011e6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6919      	ldr	r1, [r3, #16]
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4613      	mov	r3, r2
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	4413      	add	r3, r2
 80011c2:	2207      	movs	r2, #7
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	4019      	ands	r1, r3
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	6898      	ldr	r0, [r3, #8]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4613      	mov	r3, r2
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	4413      	add	r3, r2
 80011da:	fa00 f203 	lsl.w	r2, r0, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	430a      	orrs	r2, r1
 80011e4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b10      	cmp	r3, #16
 80011ec:	d003      	beq.n	80011f6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011f2:	2b11      	cmp	r3, #17
 80011f4:	d132      	bne.n	800125c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a1d      	ldr	r2, [pc, #116]	; (8001270 <HAL_ADC_ConfigChannel+0x1e4>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d125      	bne.n	800124c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d126      	bne.n	800125c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800121c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2b10      	cmp	r3, #16
 8001224:	d11a      	bne.n	800125c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001226:	4b13      	ldr	r3, [pc, #76]	; (8001274 <HAL_ADC_ConfigChannel+0x1e8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a13      	ldr	r2, [pc, #76]	; (8001278 <HAL_ADC_ConfigChannel+0x1ec>)
 800122c:	fba2 2303 	umull	r2, r3, r2, r3
 8001230:	0c9a      	lsrs	r2, r3, #18
 8001232:	4613      	mov	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800123c:	e002      	b.n	8001244 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	3b01      	subs	r3, #1
 8001242:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1f9      	bne.n	800123e <HAL_ADC_ConfigChannel+0x1b2>
 800124a:	e007      	b.n	800125c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001250:	f043 0220 	orr.w	r2, r3, #32
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001264:	7bfb      	ldrb	r3, [r7, #15]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr
 8001270:	40012400 	.word	0x40012400
 8001274:	20000000 	.word	0x20000000
 8001278:	431bde83 	.word	0x431bde83

0800127c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	2b01      	cmp	r3, #1
 8001294:	d12e      	bne.n	80012f4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f022 0201 	bic.w	r2, r2, #1
 80012a4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012a6:	f7ff fe0f 	bl	8000ec8 <HAL_GetTick>
 80012aa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012ac:	e01b      	b.n	80012e6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80012ae:	f7ff fe0b 	bl	8000ec8 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d914      	bls.n	80012e6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d10d      	bne.n	80012e6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ce:	f043 0210 	orr.w	r2, r3, #16
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012da:	f043 0201 	orr.w	r2, r3, #1
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e007      	b.n	80012f6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d0dc      	beq.n	80012ae <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <__NVIC_SetPriorityGrouping+0x44>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800131c:	4013      	ands	r3, r2
 800131e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001328:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800132c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001332:	4a04      	ldr	r2, [pc, #16]	; (8001344 <__NVIC_SetPriorityGrouping+0x44>)
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	60d3      	str	r3, [r2, #12]
}
 8001338:	bf00      	nop
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800134c:	4b04      	ldr	r3, [pc, #16]	; (8001360 <__NVIC_GetPriorityGrouping+0x18>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	0a1b      	lsrs	r3, r3, #8
 8001352:	f003 0307 	and.w	r3, r3, #7
}
 8001356:	4618      	mov	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	6039      	str	r1, [r7, #0]
 800136e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001374:	2b00      	cmp	r3, #0
 8001376:	db0a      	blt.n	800138e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	b2da      	uxtb	r2, r3
 800137c:	490c      	ldr	r1, [pc, #48]	; (80013b0 <__NVIC_SetPriority+0x4c>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	0112      	lsls	r2, r2, #4
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	440b      	add	r3, r1
 8001388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800138c:	e00a      	b.n	80013a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4908      	ldr	r1, [pc, #32]	; (80013b4 <__NVIC_SetPriority+0x50>)
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	3b04      	subs	r3, #4
 800139c:	0112      	lsls	r2, r2, #4
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	440b      	add	r3, r1
 80013a2:	761a      	strb	r2, [r3, #24]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000e100 	.word	0xe000e100
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b089      	sub	sp, #36	; 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f1c3 0307 	rsb	r3, r3, #7
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	bf28      	it	cs
 80013d6:	2304      	movcs	r3, #4
 80013d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3304      	adds	r3, #4
 80013de:	2b06      	cmp	r3, #6
 80013e0:	d902      	bls.n	80013e8 <NVIC_EncodePriority+0x30>
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3b03      	subs	r3, #3
 80013e6:	e000      	b.n	80013ea <NVIC_EncodePriority+0x32>
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	f04f 32ff 	mov.w	r2, #4294967295
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43da      	mvns	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	401a      	ands	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001400:	f04f 31ff 	mov.w	r1, #4294967295
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	43d9      	mvns	r1, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	4313      	orrs	r3, r2
         );
}
 8001412:	4618      	mov	r0, r3
 8001414:	3724      	adds	r7, #36	; 0x24
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800142c:	d301      	bcc.n	8001432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800142e:	2301      	movs	r3, #1
 8001430:	e00f      	b.n	8001452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <SysTick_Config+0x40>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143a:	210f      	movs	r1, #15
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	f7ff ff90 	bl	8001364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <SysTick_Config+0x40>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144a:	4b04      	ldr	r3, [pc, #16]	; (800145c <SysTick_Config+0x40>)
 800144c:	2207      	movs	r2, #7
 800144e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	e000e010 	.word	0xe000e010

08001460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ff49 	bl	8001300 <__NVIC_SetPriorityGrouping>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
 8001482:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001488:	f7ff ff5e 	bl	8001348 <__NVIC_GetPriorityGrouping>
 800148c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	68b9      	ldr	r1, [r7, #8]
 8001492:	6978      	ldr	r0, [r7, #20]
 8001494:	f7ff ff90 	bl	80013b8 <NVIC_EncodePriority>
 8001498:	4602      	mov	r2, r0
 800149a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff5f 	bl	8001364 <__NVIC_SetPriority>
}
 80014a6:	bf00      	nop
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff ffb0 	bl	800141c <SysTick_Config>
 80014bc:	4603      	mov	r3, r0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b08b      	sub	sp, #44	; 0x2c
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014d6:	2300      	movs	r3, #0
 80014d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014da:	e169      	b.n	80017b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014dc:	2201      	movs	r2, #1
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	69fa      	ldr	r2, [r7, #28]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	f040 8158 	bne.w	80017aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	4a9a      	ldr	r2, [pc, #616]	; (8001768 <HAL_GPIO_Init+0x2a0>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d05e      	beq.n	80015c2 <HAL_GPIO_Init+0xfa>
 8001504:	4a98      	ldr	r2, [pc, #608]	; (8001768 <HAL_GPIO_Init+0x2a0>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d875      	bhi.n	80015f6 <HAL_GPIO_Init+0x12e>
 800150a:	4a98      	ldr	r2, [pc, #608]	; (800176c <HAL_GPIO_Init+0x2a4>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d058      	beq.n	80015c2 <HAL_GPIO_Init+0xfa>
 8001510:	4a96      	ldr	r2, [pc, #600]	; (800176c <HAL_GPIO_Init+0x2a4>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d86f      	bhi.n	80015f6 <HAL_GPIO_Init+0x12e>
 8001516:	4a96      	ldr	r2, [pc, #600]	; (8001770 <HAL_GPIO_Init+0x2a8>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d052      	beq.n	80015c2 <HAL_GPIO_Init+0xfa>
 800151c:	4a94      	ldr	r2, [pc, #592]	; (8001770 <HAL_GPIO_Init+0x2a8>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d869      	bhi.n	80015f6 <HAL_GPIO_Init+0x12e>
 8001522:	4a94      	ldr	r2, [pc, #592]	; (8001774 <HAL_GPIO_Init+0x2ac>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d04c      	beq.n	80015c2 <HAL_GPIO_Init+0xfa>
 8001528:	4a92      	ldr	r2, [pc, #584]	; (8001774 <HAL_GPIO_Init+0x2ac>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d863      	bhi.n	80015f6 <HAL_GPIO_Init+0x12e>
 800152e:	4a92      	ldr	r2, [pc, #584]	; (8001778 <HAL_GPIO_Init+0x2b0>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d046      	beq.n	80015c2 <HAL_GPIO_Init+0xfa>
 8001534:	4a90      	ldr	r2, [pc, #576]	; (8001778 <HAL_GPIO_Init+0x2b0>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d85d      	bhi.n	80015f6 <HAL_GPIO_Init+0x12e>
 800153a:	2b12      	cmp	r3, #18
 800153c:	d82a      	bhi.n	8001594 <HAL_GPIO_Init+0xcc>
 800153e:	2b12      	cmp	r3, #18
 8001540:	d859      	bhi.n	80015f6 <HAL_GPIO_Init+0x12e>
 8001542:	a201      	add	r2, pc, #4	; (adr r2, 8001548 <HAL_GPIO_Init+0x80>)
 8001544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001548:	080015c3 	.word	0x080015c3
 800154c:	0800159d 	.word	0x0800159d
 8001550:	080015af 	.word	0x080015af
 8001554:	080015f1 	.word	0x080015f1
 8001558:	080015f7 	.word	0x080015f7
 800155c:	080015f7 	.word	0x080015f7
 8001560:	080015f7 	.word	0x080015f7
 8001564:	080015f7 	.word	0x080015f7
 8001568:	080015f7 	.word	0x080015f7
 800156c:	080015f7 	.word	0x080015f7
 8001570:	080015f7 	.word	0x080015f7
 8001574:	080015f7 	.word	0x080015f7
 8001578:	080015f7 	.word	0x080015f7
 800157c:	080015f7 	.word	0x080015f7
 8001580:	080015f7 	.word	0x080015f7
 8001584:	080015f7 	.word	0x080015f7
 8001588:	080015f7 	.word	0x080015f7
 800158c:	080015a5 	.word	0x080015a5
 8001590:	080015b9 	.word	0x080015b9
 8001594:	4a79      	ldr	r2, [pc, #484]	; (800177c <HAL_GPIO_Init+0x2b4>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d013      	beq.n	80015c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800159a:	e02c      	b.n	80015f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	623b      	str	r3, [r7, #32]
          break;
 80015a2:	e029      	b.n	80015f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	3304      	adds	r3, #4
 80015aa:	623b      	str	r3, [r7, #32]
          break;
 80015ac:	e024      	b.n	80015f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	3308      	adds	r3, #8
 80015b4:	623b      	str	r3, [r7, #32]
          break;
 80015b6:	e01f      	b.n	80015f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	330c      	adds	r3, #12
 80015be:	623b      	str	r3, [r7, #32]
          break;
 80015c0:	e01a      	b.n	80015f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d102      	bne.n	80015d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015ca:	2304      	movs	r3, #4
 80015cc:	623b      	str	r3, [r7, #32]
          break;
 80015ce:	e013      	b.n	80015f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d105      	bne.n	80015e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015d8:	2308      	movs	r3, #8
 80015da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69fa      	ldr	r2, [r7, #28]
 80015e0:	611a      	str	r2, [r3, #16]
          break;
 80015e2:	e009      	b.n	80015f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015e4:	2308      	movs	r3, #8
 80015e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	69fa      	ldr	r2, [r7, #28]
 80015ec:	615a      	str	r2, [r3, #20]
          break;
 80015ee:	e003      	b.n	80015f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015f0:	2300      	movs	r3, #0
 80015f2:	623b      	str	r3, [r7, #32]
          break;
 80015f4:	e000      	b.n	80015f8 <HAL_GPIO_Init+0x130>
          break;
 80015f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	2bff      	cmp	r3, #255	; 0xff
 80015fc:	d801      	bhi.n	8001602 <HAL_GPIO_Init+0x13a>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	e001      	b.n	8001606 <HAL_GPIO_Init+0x13e>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3304      	adds	r3, #4
 8001606:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	2bff      	cmp	r3, #255	; 0xff
 800160c:	d802      	bhi.n	8001614 <HAL_GPIO_Init+0x14c>
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	e002      	b.n	800161a <HAL_GPIO_Init+0x152>
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	3b08      	subs	r3, #8
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	210f      	movs	r1, #15
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	fa01 f303 	lsl.w	r3, r1, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	401a      	ands	r2, r3
 800162c:	6a39      	ldr	r1, [r7, #32]
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	fa01 f303 	lsl.w	r3, r1, r3
 8001634:	431a      	orrs	r2, r3
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 80b1 	beq.w	80017aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001648:	4b4d      	ldr	r3, [pc, #308]	; (8001780 <HAL_GPIO_Init+0x2b8>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	4a4c      	ldr	r2, [pc, #304]	; (8001780 <HAL_GPIO_Init+0x2b8>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	6193      	str	r3, [r2, #24]
 8001654:	4b4a      	ldr	r3, [pc, #296]	; (8001780 <HAL_GPIO_Init+0x2b8>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001660:	4a48      	ldr	r2, [pc, #288]	; (8001784 <HAL_GPIO_Init+0x2bc>)
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	089b      	lsrs	r3, r3, #2
 8001666:	3302      	adds	r3, #2
 8001668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	f003 0303 	and.w	r3, r3, #3
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	220f      	movs	r2, #15
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	4013      	ands	r3, r2
 8001682:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a40      	ldr	r2, [pc, #256]	; (8001788 <HAL_GPIO_Init+0x2c0>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d013      	beq.n	80016b4 <HAL_GPIO_Init+0x1ec>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a3f      	ldr	r2, [pc, #252]	; (800178c <HAL_GPIO_Init+0x2c4>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d00d      	beq.n	80016b0 <HAL_GPIO_Init+0x1e8>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a3e      	ldr	r2, [pc, #248]	; (8001790 <HAL_GPIO_Init+0x2c8>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d007      	beq.n	80016ac <HAL_GPIO_Init+0x1e4>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a3d      	ldr	r2, [pc, #244]	; (8001794 <HAL_GPIO_Init+0x2cc>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d101      	bne.n	80016a8 <HAL_GPIO_Init+0x1e0>
 80016a4:	2303      	movs	r3, #3
 80016a6:	e006      	b.n	80016b6 <HAL_GPIO_Init+0x1ee>
 80016a8:	2304      	movs	r3, #4
 80016aa:	e004      	b.n	80016b6 <HAL_GPIO_Init+0x1ee>
 80016ac:	2302      	movs	r3, #2
 80016ae:	e002      	b.n	80016b6 <HAL_GPIO_Init+0x1ee>
 80016b0:	2301      	movs	r3, #1
 80016b2:	e000      	b.n	80016b6 <HAL_GPIO_Init+0x1ee>
 80016b4:	2300      	movs	r3, #0
 80016b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b8:	f002 0203 	and.w	r2, r2, #3
 80016bc:	0092      	lsls	r2, r2, #2
 80016be:	4093      	lsls	r3, r2
 80016c0:	68fa      	ldr	r2, [r7, #12]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016c6:	492f      	ldr	r1, [pc, #188]	; (8001784 <HAL_GPIO_Init+0x2bc>)
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	089b      	lsrs	r3, r3, #2
 80016cc:	3302      	adds	r3, #2
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d006      	beq.n	80016ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016e0:	4b2d      	ldr	r3, [pc, #180]	; (8001798 <HAL_GPIO_Init+0x2d0>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	492c      	ldr	r1, [pc, #176]	; (8001798 <HAL_GPIO_Init+0x2d0>)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	600b      	str	r3, [r1, #0]
 80016ec:	e006      	b.n	80016fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016ee:	4b2a      	ldr	r3, [pc, #168]	; (8001798 <HAL_GPIO_Init+0x2d0>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	43db      	mvns	r3, r3
 80016f6:	4928      	ldr	r1, [pc, #160]	; (8001798 <HAL_GPIO_Init+0x2d0>)
 80016f8:	4013      	ands	r3, r2
 80016fa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d006      	beq.n	8001716 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001708:	4b23      	ldr	r3, [pc, #140]	; (8001798 <HAL_GPIO_Init+0x2d0>)
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	4922      	ldr	r1, [pc, #136]	; (8001798 <HAL_GPIO_Init+0x2d0>)
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	4313      	orrs	r3, r2
 8001712:	604b      	str	r3, [r1, #4]
 8001714:	e006      	b.n	8001724 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001716:	4b20      	ldr	r3, [pc, #128]	; (8001798 <HAL_GPIO_Init+0x2d0>)
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	43db      	mvns	r3, r3
 800171e:	491e      	ldr	r1, [pc, #120]	; (8001798 <HAL_GPIO_Init+0x2d0>)
 8001720:	4013      	ands	r3, r2
 8001722:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d006      	beq.n	800173e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001730:	4b19      	ldr	r3, [pc, #100]	; (8001798 <HAL_GPIO_Init+0x2d0>)
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	4918      	ldr	r1, [pc, #96]	; (8001798 <HAL_GPIO_Init+0x2d0>)
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	4313      	orrs	r3, r2
 800173a:	608b      	str	r3, [r1, #8]
 800173c:	e006      	b.n	800174c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800173e:	4b16      	ldr	r3, [pc, #88]	; (8001798 <HAL_GPIO_Init+0x2d0>)
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	43db      	mvns	r3, r3
 8001746:	4914      	ldr	r1, [pc, #80]	; (8001798 <HAL_GPIO_Init+0x2d0>)
 8001748:	4013      	ands	r3, r2
 800174a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d021      	beq.n	800179c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001758:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <HAL_GPIO_Init+0x2d0>)
 800175a:	68da      	ldr	r2, [r3, #12]
 800175c:	490e      	ldr	r1, [pc, #56]	; (8001798 <HAL_GPIO_Init+0x2d0>)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	4313      	orrs	r3, r2
 8001762:	60cb      	str	r3, [r1, #12]
 8001764:	e021      	b.n	80017aa <HAL_GPIO_Init+0x2e2>
 8001766:	bf00      	nop
 8001768:	10320000 	.word	0x10320000
 800176c:	10310000 	.word	0x10310000
 8001770:	10220000 	.word	0x10220000
 8001774:	10210000 	.word	0x10210000
 8001778:	10120000 	.word	0x10120000
 800177c:	10110000 	.word	0x10110000
 8001780:	40021000 	.word	0x40021000
 8001784:	40010000 	.word	0x40010000
 8001788:	40010800 	.word	0x40010800
 800178c:	40010c00 	.word	0x40010c00
 8001790:	40011000 	.word	0x40011000
 8001794:	40011400 	.word	0x40011400
 8001798:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800179c:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <HAL_GPIO_Init+0x304>)
 800179e:	68da      	ldr	r2, [r3, #12]
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	43db      	mvns	r3, r3
 80017a4:	4909      	ldr	r1, [pc, #36]	; (80017cc <HAL_GPIO_Init+0x304>)
 80017a6:	4013      	ands	r3, r2
 80017a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	3301      	adds	r3, #1
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	fa22 f303 	lsr.w	r3, r2, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f47f ae8e 	bne.w	80014dc <HAL_GPIO_Init+0x14>
  }
}
 80017c0:	bf00      	nop
 80017c2:	bf00      	nop
 80017c4:	372c      	adds	r7, #44	; 0x2c
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr
 80017cc:	40010400 	.word	0x40010400

080017d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	807b      	strh	r3, [r7, #2]
 80017dc:	4613      	mov	r3, r2
 80017de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017e0:	787b      	ldrb	r3, [r7, #1]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017e6:	887a      	ldrh	r2, [r7, #2]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017ec:	e003      	b.n	80017f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017ee:	887b      	ldrh	r3, [r7, #2]
 80017f0:	041a      	lsls	r2, r3, #16
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	611a      	str	r2, [r3, #16]
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr

08001800 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e12b      	b.n	8001a6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d106      	bne.n	800182c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff f8e8 	bl	80009fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2224      	movs	r2, #36	; 0x24
 8001830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 0201 	bic.w	r2, r2, #1
 8001842:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001852:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001862:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001864:	f000 fce4 	bl	8002230 <HAL_RCC_GetPCLK1Freq>
 8001868:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	4a81      	ldr	r2, [pc, #516]	; (8001a74 <HAL_I2C_Init+0x274>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d807      	bhi.n	8001884 <HAL_I2C_Init+0x84>
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4a80      	ldr	r2, [pc, #512]	; (8001a78 <HAL_I2C_Init+0x278>)
 8001878:	4293      	cmp	r3, r2
 800187a:	bf94      	ite	ls
 800187c:	2301      	movls	r3, #1
 800187e:	2300      	movhi	r3, #0
 8001880:	b2db      	uxtb	r3, r3
 8001882:	e006      	b.n	8001892 <HAL_I2C_Init+0x92>
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4a7d      	ldr	r2, [pc, #500]	; (8001a7c <HAL_I2C_Init+0x27c>)
 8001888:	4293      	cmp	r3, r2
 800188a:	bf94      	ite	ls
 800188c:	2301      	movls	r3, #1
 800188e:	2300      	movhi	r3, #0
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e0e7      	b.n	8001a6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4a78      	ldr	r2, [pc, #480]	; (8001a80 <HAL_I2C_Init+0x280>)
 800189e:	fba2 2303 	umull	r2, r3, r2, r3
 80018a2:	0c9b      	lsrs	r3, r3, #18
 80018a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	68ba      	ldr	r2, [r7, #8]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	4a6a      	ldr	r2, [pc, #424]	; (8001a74 <HAL_I2C_Init+0x274>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d802      	bhi.n	80018d4 <HAL_I2C_Init+0xd4>
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	3301      	adds	r3, #1
 80018d2:	e009      	b.n	80018e8 <HAL_I2C_Init+0xe8>
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018da:	fb02 f303 	mul.w	r3, r2, r3
 80018de:	4a69      	ldr	r2, [pc, #420]	; (8001a84 <HAL_I2C_Init+0x284>)
 80018e0:	fba2 2303 	umull	r2, r3, r2, r3
 80018e4:	099b      	lsrs	r3, r3, #6
 80018e6:	3301      	adds	r3, #1
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	430b      	orrs	r3, r1
 80018ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	495c      	ldr	r1, [pc, #368]	; (8001a74 <HAL_I2C_Init+0x274>)
 8001904:	428b      	cmp	r3, r1
 8001906:	d819      	bhi.n	800193c <HAL_I2C_Init+0x13c>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	1e59      	subs	r1, r3, #1
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	fbb1 f3f3 	udiv	r3, r1, r3
 8001916:	1c59      	adds	r1, r3, #1
 8001918:	f640 73fc 	movw	r3, #4092	; 0xffc
 800191c:	400b      	ands	r3, r1
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00a      	beq.n	8001938 <HAL_I2C_Init+0x138>
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	1e59      	subs	r1, r3, #1
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001930:	3301      	adds	r3, #1
 8001932:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001936:	e051      	b.n	80019dc <HAL_I2C_Init+0x1dc>
 8001938:	2304      	movs	r3, #4
 800193a:	e04f      	b.n	80019dc <HAL_I2C_Init+0x1dc>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d111      	bne.n	8001968 <HAL_I2C_Init+0x168>
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	1e58      	subs	r0, r3, #1
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6859      	ldr	r1, [r3, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	440b      	add	r3, r1
 8001952:	fbb0 f3f3 	udiv	r3, r0, r3
 8001956:	3301      	adds	r3, #1
 8001958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800195c:	2b00      	cmp	r3, #0
 800195e:	bf0c      	ite	eq
 8001960:	2301      	moveq	r3, #1
 8001962:	2300      	movne	r3, #0
 8001964:	b2db      	uxtb	r3, r3
 8001966:	e012      	b.n	800198e <HAL_I2C_Init+0x18e>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	1e58      	subs	r0, r3, #1
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6859      	ldr	r1, [r3, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	0099      	lsls	r1, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	fbb0 f3f3 	udiv	r3, r0, r3
 800197e:	3301      	adds	r3, #1
 8001980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001984:	2b00      	cmp	r3, #0
 8001986:	bf0c      	ite	eq
 8001988:	2301      	moveq	r3, #1
 800198a:	2300      	movne	r3, #0
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_I2C_Init+0x196>
 8001992:	2301      	movs	r3, #1
 8001994:	e022      	b.n	80019dc <HAL_I2C_Init+0x1dc>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10e      	bne.n	80019bc <HAL_I2C_Init+0x1bc>
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	1e58      	subs	r0, r3, #1
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6859      	ldr	r1, [r3, #4]
 80019a6:	460b      	mov	r3, r1
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	440b      	add	r3, r1
 80019ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80019b0:	3301      	adds	r3, #1
 80019b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ba:	e00f      	b.n	80019dc <HAL_I2C_Init+0x1dc>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	1e58      	subs	r0, r3, #1
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6859      	ldr	r1, [r3, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	440b      	add	r3, r1
 80019ca:	0099      	lsls	r1, r3, #2
 80019cc:	440b      	add	r3, r1
 80019ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80019d2:	3301      	adds	r3, #1
 80019d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	6809      	ldr	r1, [r1, #0]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69da      	ldr	r2, [r3, #28]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6911      	ldr	r1, [r2, #16]
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	68d2      	ldr	r2, [r2, #12]
 8001a16:	4311      	orrs	r1, r2
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	430b      	orrs	r3, r1
 8001a1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	695a      	ldr	r2, [r3, #20]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	431a      	orrs	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0201 	orr.w	r2, r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2220      	movs	r2, #32
 8001a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	000186a0 	.word	0x000186a0
 8001a78:	001e847f 	.word	0x001e847f
 8001a7c:	003d08ff 	.word	0x003d08ff
 8001a80:	431bde83 	.word	0x431bde83
 8001a84:	10624dd3 	.word	0x10624dd3

08001a88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e272      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 8087 	beq.w	8001bb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aa8:	4b92      	ldr	r3, [pc, #584]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 030c 	and.w	r3, r3, #12
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	d00c      	beq.n	8001ace <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ab4:	4b8f      	ldr	r3, [pc, #572]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 030c 	and.w	r3, r3, #12
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d112      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x5e>
 8001ac0:	4b8c      	ldr	r3, [pc, #560]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001acc:	d10b      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ace:	4b89      	ldr	r3, [pc, #548]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d06c      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x12c>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d168      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e24c      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aee:	d106      	bne.n	8001afe <HAL_RCC_OscConfig+0x76>
 8001af0:	4b80      	ldr	r3, [pc, #512]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a7f      	ldr	r2, [pc, #508]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001afa:	6013      	str	r3, [r2, #0]
 8001afc:	e02e      	b.n	8001b5c <HAL_RCC_OscConfig+0xd4>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10c      	bne.n	8001b20 <HAL_RCC_OscConfig+0x98>
 8001b06:	4b7b      	ldr	r3, [pc, #492]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a7a      	ldr	r2, [pc, #488]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	4b78      	ldr	r3, [pc, #480]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a77      	ldr	r2, [pc, #476]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	e01d      	b.n	8001b5c <HAL_RCC_OscConfig+0xd4>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b28:	d10c      	bne.n	8001b44 <HAL_RCC_OscConfig+0xbc>
 8001b2a:	4b72      	ldr	r3, [pc, #456]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a71      	ldr	r2, [pc, #452]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	4b6f      	ldr	r3, [pc, #444]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a6e      	ldr	r2, [pc, #440]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	e00b      	b.n	8001b5c <HAL_RCC_OscConfig+0xd4>
 8001b44:	4b6b      	ldr	r3, [pc, #428]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a6a      	ldr	r2, [pc, #424]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	4b68      	ldr	r3, [pc, #416]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a67      	ldr	r2, [pc, #412]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d013      	beq.n	8001b8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7ff f9b0 	bl	8000ec8 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b6c:	f7ff f9ac 	bl	8000ec8 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b64      	cmp	r3, #100	; 0x64
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e200      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7e:	4b5d      	ldr	r3, [pc, #372]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCC_OscConfig+0xe4>
 8001b8a:	e014      	b.n	8001bb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8c:	f7ff f99c 	bl	8000ec8 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b94:	f7ff f998 	bl	8000ec8 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b64      	cmp	r3, #100	; 0x64
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e1ec      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba6:	4b53      	ldr	r3, [pc, #332]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f0      	bne.n	8001b94 <HAL_RCC_OscConfig+0x10c>
 8001bb2:	e000      	b.n	8001bb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d063      	beq.n	8001c8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bc2:	4b4c      	ldr	r3, [pc, #304]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 030c 	and.w	r3, r3, #12
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00b      	beq.n	8001be6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bce:	4b49      	ldr	r3, [pc, #292]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d11c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x18c>
 8001bda:	4b46      	ldr	r3, [pc, #280]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d116      	bne.n	8001c14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be6:	4b43      	ldr	r3, [pc, #268]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d005      	beq.n	8001bfe <HAL_RCC_OscConfig+0x176>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d001      	beq.n	8001bfe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e1c0      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfe:	4b3d      	ldr	r3, [pc, #244]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	4939      	ldr	r1, [pc, #228]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c12:	e03a      	b.n	8001c8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d020      	beq.n	8001c5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c1c:	4b36      	ldr	r3, [pc, #216]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c22:	f7ff f951 	bl	8000ec8 <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c2a:	f7ff f94d 	bl	8000ec8 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e1a1      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3c:	4b2d      	ldr	r3, [pc, #180]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0f0      	beq.n	8001c2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c48:	4b2a      	ldr	r3, [pc, #168]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	4927      	ldr	r1, [pc, #156]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	600b      	str	r3, [r1, #0]
 8001c5c:	e015      	b.n	8001c8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c5e:	4b26      	ldr	r3, [pc, #152]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c64:	f7ff f930 	bl	8000ec8 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c6c:	f7ff f92c 	bl	8000ec8 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e180      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7e:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d03a      	beq.n	8001d0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d019      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c9e:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <HAL_RCC_OscConfig+0x274>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca4:	f7ff f910 	bl	8000ec8 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cac:	f7ff f90c 	bl	8000ec8 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e160      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cbe:	4b0d      	ldr	r3, [pc, #52]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0f0      	beq.n	8001cac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cca:	2001      	movs	r0, #1
 8001ccc:	f000 fad8 	bl	8002280 <RCC_Delay>
 8001cd0:	e01c      	b.n	8001d0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cd2:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <HAL_RCC_OscConfig+0x274>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd8:	f7ff f8f6 	bl	8000ec8 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cde:	e00f      	b.n	8001d00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ce0:	f7ff f8f2 	bl	8000ec8 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d908      	bls.n	8001d00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e146      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
 8001cf2:	bf00      	nop
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	42420000 	.word	0x42420000
 8001cfc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d00:	4b92      	ldr	r3, [pc, #584]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1e9      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 80a6 	beq.w	8001e66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d1e:	4b8b      	ldr	r3, [pc, #556]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10d      	bne.n	8001d46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d2a:	4b88      	ldr	r3, [pc, #544]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	4a87      	ldr	r2, [pc, #540]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d34:	61d3      	str	r3, [r2, #28]
 8001d36:	4b85      	ldr	r3, [pc, #532]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3e:	60bb      	str	r3, [r7, #8]
 8001d40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d42:	2301      	movs	r3, #1
 8001d44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d46:	4b82      	ldr	r3, [pc, #520]	; (8001f50 <HAL_RCC_OscConfig+0x4c8>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d118      	bne.n	8001d84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d52:	4b7f      	ldr	r3, [pc, #508]	; (8001f50 <HAL_RCC_OscConfig+0x4c8>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a7e      	ldr	r2, [pc, #504]	; (8001f50 <HAL_RCC_OscConfig+0x4c8>)
 8001d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d5e:	f7ff f8b3 	bl	8000ec8 <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d66:	f7ff f8af 	bl	8000ec8 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b64      	cmp	r3, #100	; 0x64
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e103      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d78:	4b75      	ldr	r3, [pc, #468]	; (8001f50 <HAL_RCC_OscConfig+0x4c8>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0f0      	beq.n	8001d66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d106      	bne.n	8001d9a <HAL_RCC_OscConfig+0x312>
 8001d8c:	4b6f      	ldr	r3, [pc, #444]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	4a6e      	ldr	r2, [pc, #440]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	6213      	str	r3, [r2, #32]
 8001d98:	e02d      	b.n	8001df6 <HAL_RCC_OscConfig+0x36e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10c      	bne.n	8001dbc <HAL_RCC_OscConfig+0x334>
 8001da2:	4b6a      	ldr	r3, [pc, #424]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	4a69      	ldr	r2, [pc, #420]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001da8:	f023 0301 	bic.w	r3, r3, #1
 8001dac:	6213      	str	r3, [r2, #32]
 8001dae:	4b67      	ldr	r3, [pc, #412]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	4a66      	ldr	r2, [pc, #408]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001db4:	f023 0304 	bic.w	r3, r3, #4
 8001db8:	6213      	str	r3, [r2, #32]
 8001dba:	e01c      	b.n	8001df6 <HAL_RCC_OscConfig+0x36e>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	2b05      	cmp	r3, #5
 8001dc2:	d10c      	bne.n	8001dde <HAL_RCC_OscConfig+0x356>
 8001dc4:	4b61      	ldr	r3, [pc, #388]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	4a60      	ldr	r2, [pc, #384]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001dca:	f043 0304 	orr.w	r3, r3, #4
 8001dce:	6213      	str	r3, [r2, #32]
 8001dd0:	4b5e      	ldr	r3, [pc, #376]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	4a5d      	ldr	r2, [pc, #372]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	6213      	str	r3, [r2, #32]
 8001ddc:	e00b      	b.n	8001df6 <HAL_RCC_OscConfig+0x36e>
 8001dde:	4b5b      	ldr	r3, [pc, #364]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	4a5a      	ldr	r2, [pc, #360]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	f023 0301 	bic.w	r3, r3, #1
 8001de8:	6213      	str	r3, [r2, #32]
 8001dea:	4b58      	ldr	r3, [pc, #352]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	4a57      	ldr	r2, [pc, #348]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001df0:	f023 0304 	bic.w	r3, r3, #4
 8001df4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d015      	beq.n	8001e2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfe:	f7ff f863 	bl	8000ec8 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e04:	e00a      	b.n	8001e1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e06:	f7ff f85f 	bl	8000ec8 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e0b1      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e1c:	4b4b      	ldr	r3, [pc, #300]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0ee      	beq.n	8001e06 <HAL_RCC_OscConfig+0x37e>
 8001e28:	e014      	b.n	8001e54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2a:	f7ff f84d 	bl	8000ec8 <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e30:	e00a      	b.n	8001e48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e32:	f7ff f849 	bl	8000ec8 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e09b      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e48:	4b40      	ldr	r3, [pc, #256]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1ee      	bne.n	8001e32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e54:	7dfb      	ldrb	r3, [r7, #23]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d105      	bne.n	8001e66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e5a:	4b3c      	ldr	r3, [pc, #240]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	4a3b      	ldr	r2, [pc, #236]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001e60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 8087 	beq.w	8001f7e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e70:	4b36      	ldr	r3, [pc, #216]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 030c 	and.w	r3, r3, #12
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d061      	beq.n	8001f40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d146      	bne.n	8001f12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e84:	4b33      	ldr	r3, [pc, #204]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8a:	f7ff f81d 	bl	8000ec8 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e92:	f7ff f819 	bl	8000ec8 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e06d      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea4:	4b29      	ldr	r3, [pc, #164]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1f0      	bne.n	8001e92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb8:	d108      	bne.n	8001ecc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001eba:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	4921      	ldr	r1, [pc, #132]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ecc:	4b1f      	ldr	r3, [pc, #124]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a19      	ldr	r1, [r3, #32]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001edc:	430b      	orrs	r3, r1
 8001ede:	491b      	ldr	r1, [pc, #108]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ee4:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eea:	f7fe ffed 	bl	8000ec8 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef2:	f7fe ffe9 	bl	8000ec8 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e03d      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f04:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0f0      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x46a>
 8001f10:	e035      	b.n	8001f7e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f12:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f18:	f7fe ffd6 	bl	8000ec8 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f20:	f7fe ffd2 	bl	8000ec8 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e026      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f32:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f0      	bne.n	8001f20 <HAL_RCC_OscConfig+0x498>
 8001f3e:	e01e      	b.n	8001f7e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d107      	bne.n	8001f58 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e019      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40007000 	.word	0x40007000
 8001f54:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f58:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_RCC_OscConfig+0x500>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d106      	bne.n	8001f7a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d001      	beq.n	8001f7e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40021000 	.word	0x40021000

08001f8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e0d0      	b.n	8002142 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fa0:	4b6a      	ldr	r3, [pc, #424]	; (800214c <HAL_RCC_ClockConfig+0x1c0>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d910      	bls.n	8001fd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fae:	4b67      	ldr	r3, [pc, #412]	; (800214c <HAL_RCC_ClockConfig+0x1c0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f023 0207 	bic.w	r2, r3, #7
 8001fb6:	4965      	ldr	r1, [pc, #404]	; (800214c <HAL_RCC_ClockConfig+0x1c0>)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fbe:	4b63      	ldr	r3, [pc, #396]	; (800214c <HAL_RCC_ClockConfig+0x1c0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d001      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e0b8      	b.n	8002142 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d020      	beq.n	800201e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fe8:	4b59      	ldr	r3, [pc, #356]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	4a58      	ldr	r2, [pc, #352]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ff2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0308 	and.w	r3, r3, #8
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d005      	beq.n	800200c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002000:	4b53      	ldr	r3, [pc, #332]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	4a52      	ldr	r2, [pc, #328]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8002006:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800200a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800200c:	4b50      	ldr	r3, [pc, #320]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	494d      	ldr	r1, [pc, #308]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	4313      	orrs	r3, r2
 800201c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d040      	beq.n	80020ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d107      	bne.n	8002042 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002032:	4b47      	ldr	r3, [pc, #284]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d115      	bne.n	800206a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e07f      	b.n	8002142 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b02      	cmp	r3, #2
 8002048:	d107      	bne.n	800205a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800204a:	4b41      	ldr	r3, [pc, #260]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d109      	bne.n	800206a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e073      	b.n	8002142 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205a:	4b3d      	ldr	r3, [pc, #244]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e06b      	b.n	8002142 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800206a:	4b39      	ldr	r3, [pc, #228]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f023 0203 	bic.w	r2, r3, #3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	4936      	ldr	r1, [pc, #216]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8002078:	4313      	orrs	r3, r2
 800207a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800207c:	f7fe ff24 	bl	8000ec8 <HAL_GetTick>
 8002080:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002082:	e00a      	b.n	800209a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002084:	f7fe ff20 	bl	8000ec8 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002092:	4293      	cmp	r3, r2
 8002094:	d901      	bls.n	800209a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e053      	b.n	8002142 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209a:	4b2d      	ldr	r3, [pc, #180]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 020c 	and.w	r2, r3, #12
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d1eb      	bne.n	8002084 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020ac:	4b27      	ldr	r3, [pc, #156]	; (800214c <HAL_RCC_ClockConfig+0x1c0>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d210      	bcs.n	80020dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ba:	4b24      	ldr	r3, [pc, #144]	; (800214c <HAL_RCC_ClockConfig+0x1c0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f023 0207 	bic.w	r2, r3, #7
 80020c2:	4922      	ldr	r1, [pc, #136]	; (800214c <HAL_RCC_ClockConfig+0x1c0>)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ca:	4b20      	ldr	r3, [pc, #128]	; (800214c <HAL_RCC_ClockConfig+0x1c0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d001      	beq.n	80020dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e032      	b.n	8002142 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d008      	beq.n	80020fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020e8:	4b19      	ldr	r3, [pc, #100]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	4916      	ldr	r1, [pc, #88]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b00      	cmp	r3, #0
 8002104:	d009      	beq.n	800211a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002106:	4b12      	ldr	r3, [pc, #72]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	490e      	ldr	r1, [pc, #56]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	4313      	orrs	r3, r2
 8002118:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800211a:	f000 f821 	bl	8002160 <HAL_RCC_GetSysClockFreq>
 800211e:	4602      	mov	r2, r0
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	091b      	lsrs	r3, r3, #4
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	490a      	ldr	r1, [pc, #40]	; (8002154 <HAL_RCC_ClockConfig+0x1c8>)
 800212c:	5ccb      	ldrb	r3, [r1, r3]
 800212e:	fa22 f303 	lsr.w	r3, r2, r3
 8002132:	4a09      	ldr	r2, [pc, #36]	; (8002158 <HAL_RCC_ClockConfig+0x1cc>)
 8002134:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002136:	4b09      	ldr	r3, [pc, #36]	; (800215c <HAL_RCC_ClockConfig+0x1d0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe fe82 	bl	8000e44 <HAL_InitTick>

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40022000 	.word	0x40022000
 8002150:	40021000 	.word	0x40021000
 8002154:	080040dc 	.word	0x080040dc
 8002158:	20000000 	.word	0x20000000
 800215c:	20000004 	.word	0x20000004

08002160 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002160:	b490      	push	{r4, r7}
 8002162:	b08a      	sub	sp, #40	; 0x28
 8002164:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002166:	4b29      	ldr	r3, [pc, #164]	; (800220c <HAL_RCC_GetSysClockFreq+0xac>)
 8002168:	1d3c      	adds	r4, r7, #4
 800216a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800216c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002170:	f240 2301 	movw	r3, #513	; 0x201
 8002174:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002176:	2300      	movs	r3, #0
 8002178:	61fb      	str	r3, [r7, #28]
 800217a:	2300      	movs	r3, #0
 800217c:	61bb      	str	r3, [r7, #24]
 800217e:	2300      	movs	r3, #0
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002186:	2300      	movs	r3, #0
 8002188:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800218a:	4b21      	ldr	r3, [pc, #132]	; (8002210 <HAL_RCC_GetSysClockFreq+0xb0>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f003 030c 	and.w	r3, r3, #12
 8002196:	2b04      	cmp	r3, #4
 8002198:	d002      	beq.n	80021a0 <HAL_RCC_GetSysClockFreq+0x40>
 800219a:	2b08      	cmp	r3, #8
 800219c:	d003      	beq.n	80021a6 <HAL_RCC_GetSysClockFreq+0x46>
 800219e:	e02b      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021a0:	4b1c      	ldr	r3, [pc, #112]	; (8002214 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021a2:	623b      	str	r3, [r7, #32]
      break;
 80021a4:	e02b      	b.n	80021fe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	0c9b      	lsrs	r3, r3, #18
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	3328      	adds	r3, #40	; 0x28
 80021b0:	443b      	add	r3, r7
 80021b2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80021b6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d012      	beq.n	80021e8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021c2:	4b13      	ldr	r3, [pc, #76]	; (8002210 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	0c5b      	lsrs	r3, r3, #17
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	3328      	adds	r3, #40	; 0x28
 80021ce:	443b      	add	r3, r7
 80021d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	4a0e      	ldr	r2, [pc, #56]	; (8002214 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021da:	fb03 f202 	mul.w	r2, r3, r2
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
 80021e6:	e004      	b.n	80021f2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	4a0b      	ldr	r2, [pc, #44]	; (8002218 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021ec:	fb02 f303 	mul.w	r3, r2, r3
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	623b      	str	r3, [r7, #32]
      break;
 80021f6:	e002      	b.n	80021fe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021fa:	623b      	str	r3, [r7, #32]
      break;
 80021fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021fe:	6a3b      	ldr	r3, [r7, #32]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3728      	adds	r7, #40	; 0x28
 8002204:	46bd      	mov	sp, r7
 8002206:	bc90      	pop	{r4, r7}
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	080040cc 	.word	0x080040cc
 8002210:	40021000 	.word	0x40021000
 8002214:	007a1200 	.word	0x007a1200
 8002218:	003d0900 	.word	0x003d0900

0800221c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002220:	4b02      	ldr	r3, [pc, #8]	; (800222c <HAL_RCC_GetHCLKFreq+0x10>)
 8002222:	681b      	ldr	r3, [r3, #0]
}
 8002224:	4618      	mov	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr
 800222c:	20000000 	.word	0x20000000

08002230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002234:	f7ff fff2 	bl	800221c <HAL_RCC_GetHCLKFreq>
 8002238:	4602      	mov	r2, r0
 800223a:	4b05      	ldr	r3, [pc, #20]	; (8002250 <HAL_RCC_GetPCLK1Freq+0x20>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	0a1b      	lsrs	r3, r3, #8
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	4903      	ldr	r1, [pc, #12]	; (8002254 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002246:	5ccb      	ldrb	r3, [r1, r3]
 8002248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800224c:	4618      	mov	r0, r3
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40021000 	.word	0x40021000
 8002254:	080040ec 	.word	0x080040ec

08002258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800225c:	f7ff ffde 	bl	800221c <HAL_RCC_GetHCLKFreq>
 8002260:	4602      	mov	r2, r0
 8002262:	4b05      	ldr	r3, [pc, #20]	; (8002278 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	0adb      	lsrs	r3, r3, #11
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	4903      	ldr	r1, [pc, #12]	; (800227c <HAL_RCC_GetPCLK2Freq+0x24>)
 800226e:	5ccb      	ldrb	r3, [r1, r3]
 8002270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002274:	4618      	mov	r0, r3
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40021000 	.word	0x40021000
 800227c:	080040ec 	.word	0x080040ec

08002280 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002288:	4b0a      	ldr	r3, [pc, #40]	; (80022b4 <RCC_Delay+0x34>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a0a      	ldr	r2, [pc, #40]	; (80022b8 <RCC_Delay+0x38>)
 800228e:	fba2 2303 	umull	r2, r3, r2, r3
 8002292:	0a5b      	lsrs	r3, r3, #9
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	fb02 f303 	mul.w	r3, r2, r3
 800229a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800229c:	bf00      	nop
  }
  while (Delay --);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	1e5a      	subs	r2, r3, #1
 80022a2:	60fa      	str	r2, [r7, #12]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1f9      	bne.n	800229c <RCC_Delay+0x1c>
}
 80022a8:	bf00      	nop
 80022aa:	bf00      	nop
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr
 80022b4:	20000000 	.word	0x20000000
 80022b8:	10624dd3 	.word	0x10624dd3

080022bc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d07d      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80022d8:	2300      	movs	r3, #0
 80022da:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022dc:	4b4f      	ldr	r3, [pc, #316]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10d      	bne.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e8:	4b4c      	ldr	r3, [pc, #304]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	4a4b      	ldr	r2, [pc, #300]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f2:	61d3      	str	r3, [r2, #28]
 80022f4:	4b49      	ldr	r3, [pc, #292]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002300:	2301      	movs	r3, #1
 8002302:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002304:	4b46      	ldr	r3, [pc, #280]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230c:	2b00      	cmp	r3, #0
 800230e:	d118      	bne.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002310:	4b43      	ldr	r3, [pc, #268]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a42      	ldr	r2, [pc, #264]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800231a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800231c:	f7fe fdd4 	bl	8000ec8 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002322:	e008      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002324:	f7fe fdd0 	bl	8000ec8 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b64      	cmp	r3, #100	; 0x64
 8002330:	d901      	bls.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e06d      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002336:	4b3a      	ldr	r3, [pc, #232]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002342:	4b36      	ldr	r3, [pc, #216]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800234a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d02e      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	429a      	cmp	r2, r3
 800235e:	d027      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002360:	4b2e      	ldr	r3, [pc, #184]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002368:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800236a:	4b2e      	ldr	r3, [pc, #184]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800236c:	2201      	movs	r2, #1
 800236e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002370:	4b2c      	ldr	r3, [pc, #176]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002376:	4a29      	ldr	r2, [pc, #164]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d014      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002386:	f7fe fd9f 	bl	8000ec8 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800238c:	e00a      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238e:	f7fe fd9b 	bl	8000ec8 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	f241 3288 	movw	r2, #5000	; 0x1388
 800239c:	4293      	cmp	r3, r2
 800239e:	d901      	bls.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e036      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a4:	4b1d      	ldr	r3, [pc, #116]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0ee      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023b0:	4b1a      	ldr	r3, [pc, #104]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	4917      	ldr	r1, [pc, #92]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023c2:	7dfb      	ldrb	r3, [r7, #23]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d105      	bne.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c8:	4b14      	ldr	r3, [pc, #80]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	4a13      	ldr	r2, [pc, #76]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d008      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023e0:	4b0e      	ldr	r3, [pc, #56]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	490b      	ldr	r1, [pc, #44]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0310 	and.w	r3, r3, #16
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d008      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023fe:	4b07      	ldr	r3, [pc, #28]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	4904      	ldr	r1, [pc, #16]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800240c:	4313      	orrs	r3, r2
 800240e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40021000 	.word	0x40021000
 8002420:	40007000 	.word	0x40007000
 8002424:	42420440 	.word	0x42420440

08002428 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e076      	b.n	8002528 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	2b00      	cmp	r3, #0
 8002440:	d108      	bne.n	8002454 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800244a:	d009      	beq.n	8002460 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	61da      	str	r2, [r3, #28]
 8002452:	e005      	b.n	8002460 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d106      	bne.n	8002480 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7fe fb0e 	bl	8000a9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2202      	movs	r2, #2
 8002484:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002496:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80024a8:	431a      	orrs	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	431a      	orrs	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024d0:	431a      	orrs	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e4:	ea42 0103 	orr.w	r1, r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	0c1a      	lsrs	r2, r3, #16
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f002 0204 	and.w	r2, r2, #4
 8002506:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	69da      	ldr	r2, [r3, #28]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002516:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b088      	sub	sp, #32
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	4613      	mov	r3, r2
 800253e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_SPI_Transmit+0x22>
 800254e:	2302      	movs	r3, #2
 8002550:	e126      	b.n	80027a0 <HAL_SPI_Transmit+0x270>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800255a:	f7fe fcb5 	bl	8000ec8 <HAL_GetTick>
 800255e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002560:	88fb      	ldrh	r3, [r7, #6]
 8002562:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b01      	cmp	r3, #1
 800256e:	d002      	beq.n	8002576 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002570:	2302      	movs	r3, #2
 8002572:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002574:	e10b      	b.n	800278e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d002      	beq.n	8002582 <HAL_SPI_Transmit+0x52>
 800257c:	88fb      	ldrh	r3, [r7, #6]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d102      	bne.n	8002588 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002586:	e102      	b.n	800278e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2203      	movs	r2, #3
 800258c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	88fa      	ldrh	r2, [r7, #6]
 80025a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	88fa      	ldrh	r2, [r7, #6]
 80025a6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025ce:	d10f      	bne.n	80025f0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fa:	2b40      	cmp	r3, #64	; 0x40
 80025fc:	d007      	beq.n	800260e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800260c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002616:	d14b      	bne.n	80026b0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d002      	beq.n	8002626 <HAL_SPI_Transmit+0xf6>
 8002620:	8afb      	ldrh	r3, [r7, #22]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d13e      	bne.n	80026a4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	881a      	ldrh	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	1c9a      	adds	r2, r3, #2
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002640:	b29b      	uxth	r3, r3
 8002642:	3b01      	subs	r3, #1
 8002644:	b29a      	uxth	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800264a:	e02b      	b.n	80026a4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b02      	cmp	r3, #2
 8002658:	d112      	bne.n	8002680 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	881a      	ldrh	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	1c9a      	adds	r2, r3, #2
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002674:	b29b      	uxth	r3, r3
 8002676:	3b01      	subs	r3, #1
 8002678:	b29a      	uxth	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	86da      	strh	r2, [r3, #54]	; 0x36
 800267e:	e011      	b.n	80026a4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002680:	f7fe fc22 	bl	8000ec8 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d803      	bhi.n	8002698 <HAL_SPI_Transmit+0x168>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002696:	d102      	bne.n	800269e <HAL_SPI_Transmit+0x16e>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d102      	bne.n	80026a4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80026a2:	e074      	b.n	800278e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1ce      	bne.n	800264c <HAL_SPI_Transmit+0x11c>
 80026ae:	e04c      	b.n	800274a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <HAL_SPI_Transmit+0x18e>
 80026b8:	8afb      	ldrh	r3, [r7, #22]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d140      	bne.n	8002740 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	330c      	adds	r3, #12
 80026c8:	7812      	ldrb	r2, [r2, #0]
 80026ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026da:	b29b      	uxth	r3, r3
 80026dc:	3b01      	subs	r3, #1
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80026e4:	e02c      	b.n	8002740 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d113      	bne.n	800271c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	330c      	adds	r3, #12
 80026fe:	7812      	ldrb	r2, [r2, #0]
 8002700:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002710:	b29b      	uxth	r3, r3
 8002712:	3b01      	subs	r3, #1
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	86da      	strh	r2, [r3, #54]	; 0x36
 800271a:	e011      	b.n	8002740 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800271c:	f7fe fbd4 	bl	8000ec8 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d803      	bhi.n	8002734 <HAL_SPI_Transmit+0x204>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002732:	d102      	bne.n	800273a <HAL_SPI_Transmit+0x20a>
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d102      	bne.n	8002740 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800273e:	e026      	b.n	800278e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002744:	b29b      	uxth	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1cd      	bne.n	80026e6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	6839      	ldr	r1, [r7, #0]
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 fbb8 	bl	8002ec4 <SPI_EndRxTxTransaction>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d002      	beq.n	8002760 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2220      	movs	r2, #32
 800275e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10a      	bne.n	800277e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002768:	2300      	movs	r3, #0
 800276a:	613b      	str	r3, [r7, #16]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002782:	2b00      	cmp	r3, #0
 8002784:	d002      	beq.n	800278c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	77fb      	strb	r3, [r7, #31]
 800278a:	e000      	b.n	800278e <HAL_SPI_Transmit+0x25e>
  }

error:
 800278c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800279e:	7ffb      	ldrb	r3, [r7, #31]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3720      	adds	r7, #32
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af02      	add	r7, sp, #8
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	603b      	str	r3, [r7, #0]
 80027b4:	4613      	mov	r3, r2
 80027b6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027c4:	d112      	bne.n	80027ec <HAL_SPI_Receive+0x44>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10e      	bne.n	80027ec <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2204      	movs	r2, #4
 80027d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80027d6:	88fa      	ldrh	r2, [r7, #6]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	4613      	mov	r3, r2
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	68b9      	ldr	r1, [r7, #8]
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 f8f1 	bl	80029ca <HAL_SPI_TransmitReceive>
 80027e8:	4603      	mov	r3, r0
 80027ea:	e0ea      	b.n	80029c2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d101      	bne.n	80027fa <HAL_SPI_Receive+0x52>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e0e3      	b.n	80029c2 <HAL_SPI_Receive+0x21a>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002802:	f7fe fb61 	bl	8000ec8 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b01      	cmp	r3, #1
 8002812:	d002      	beq.n	800281a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002814:	2302      	movs	r3, #2
 8002816:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002818:	e0ca      	b.n	80029b0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d002      	beq.n	8002826 <HAL_SPI_Receive+0x7e>
 8002820:	88fb      	ldrh	r3, [r7, #6]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d102      	bne.n	800282c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	75fb      	strb	r3, [r7, #23]
    goto error;
 800282a:	e0c1      	b.n	80029b0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2204      	movs	r2, #4
 8002830:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	88fa      	ldrh	r2, [r7, #6]
 8002844:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	88fa      	ldrh	r2, [r7, #6]
 800284a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002872:	d10f      	bne.n	8002894 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002882:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002892:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289e:	2b40      	cmp	r3, #64	; 0x40
 80028a0:	d007      	beq.n	80028b2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028b0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d162      	bne.n	8002980 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80028ba:	e02e      	b.n	800291a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d115      	bne.n	80028f6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f103 020c 	add.w	r2, r3, #12
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d6:	7812      	ldrb	r2, [r2, #0]
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028f4:	e011      	b.n	800291a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028f6:	f7fe fae7 	bl	8000ec8 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d803      	bhi.n	800290e <HAL_SPI_Receive+0x166>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290c:	d102      	bne.n	8002914 <HAL_SPI_Receive+0x16c>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d102      	bne.n	800291a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002918:	e04a      	b.n	80029b0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800291e:	b29b      	uxth	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1cb      	bne.n	80028bc <HAL_SPI_Receive+0x114>
 8002924:	e031      	b.n	800298a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b01      	cmp	r3, #1
 8002932:	d113      	bne.n	800295c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68da      	ldr	r2, [r3, #12]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293e:	b292      	uxth	r2, r2
 8002940:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002946:	1c9a      	adds	r2, r3, #2
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002950:	b29b      	uxth	r3, r3
 8002952:	3b01      	subs	r3, #1
 8002954:	b29a      	uxth	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	87da      	strh	r2, [r3, #62]	; 0x3e
 800295a:	e011      	b.n	8002980 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800295c:	f7fe fab4 	bl	8000ec8 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d803      	bhi.n	8002974 <HAL_SPI_Receive+0x1cc>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002972:	d102      	bne.n	800297a <HAL_SPI_Receive+0x1d2>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d102      	bne.n	8002980 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800297e:	e017      	b.n	80029b0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002984:	b29b      	uxth	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1cd      	bne.n	8002926 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	6839      	ldr	r1, [r7, #0]
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 fa46 	bl	8002e20 <SPI_EndRxTransaction>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d002      	beq.n	80029a0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2220      	movs	r2, #32
 800299e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d002      	beq.n	80029ae <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	75fb      	strb	r3, [r7, #23]
 80029ac:	e000      	b.n	80029b0 <HAL_SPI_Receive+0x208>
  }

error :
 80029ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b08c      	sub	sp, #48	; 0x30
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	60f8      	str	r0, [r7, #12]
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80029d8:	2301      	movs	r3, #1
 80029da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80029dc:	2300      	movs	r3, #0
 80029de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_SPI_TransmitReceive+0x26>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e18a      	b.n	8002d06 <HAL_SPI_TransmitReceive+0x33c>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029f8:	f7fe fa66 	bl	8000ec8 <HAL_GetTick>
 80029fc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002a0e:	887b      	ldrh	r3, [r7, #2]
 8002a10:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d00f      	beq.n	8002a3a <HAL_SPI_TransmitReceive+0x70>
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a20:	d107      	bne.n	8002a32 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d103      	bne.n	8002a32 <HAL_SPI_TransmitReceive+0x68>
 8002a2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d003      	beq.n	8002a3a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002a32:	2302      	movs	r3, #2
 8002a34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a38:	e15b      	b.n	8002cf2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_SPI_TransmitReceive+0x82>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d002      	beq.n	8002a4c <HAL_SPI_TransmitReceive+0x82>
 8002a46:	887b      	ldrh	r3, [r7, #2]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d103      	bne.n	8002a54 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a52:	e14e      	b.n	8002cf2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d003      	beq.n	8002a68 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2205      	movs	r2, #5
 8002a64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	887a      	ldrh	r2, [r7, #2]
 8002a78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	887a      	ldrh	r2, [r7, #2]
 8002a7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	887a      	ldrh	r2, [r7, #2]
 8002a8a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	887a      	ldrh	r2, [r7, #2]
 8002a90:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa8:	2b40      	cmp	r3, #64	; 0x40
 8002aaa:	d007      	beq.n	8002abc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ac4:	d178      	bne.n	8002bb8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d002      	beq.n	8002ad4 <HAL_SPI_TransmitReceive+0x10a>
 8002ace:	8b7b      	ldrh	r3, [r7, #26]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d166      	bne.n	8002ba2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad8:	881a      	ldrh	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae4:	1c9a      	adds	r2, r3, #2
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002af8:	e053      	b.n	8002ba2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d11b      	bne.n	8002b40 <HAL_SPI_TransmitReceive+0x176>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d016      	beq.n	8002b40 <HAL_SPI_TransmitReceive+0x176>
 8002b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d113      	bne.n	8002b40 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1c:	881a      	ldrh	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b28:	1c9a      	adds	r2, r3, #2
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d119      	bne.n	8002b82 <HAL_SPI_TransmitReceive+0x1b8>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d014      	beq.n	8002b82 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b62:	b292      	uxth	r2, r2
 8002b64:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6a:	1c9a      	adds	r2, r3, #2
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	3b01      	subs	r3, #1
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b82:	f7fe f9a1 	bl	8000ec8 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d807      	bhi.n	8002ba2 <HAL_SPI_TransmitReceive+0x1d8>
 8002b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b98:	d003      	beq.n	8002ba2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002ba0:	e0a7      	b.n	8002cf2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1a6      	bne.n	8002afa <HAL_SPI_TransmitReceive+0x130>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1a1      	bne.n	8002afa <HAL_SPI_TransmitReceive+0x130>
 8002bb6:	e07c      	b.n	8002cb2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d002      	beq.n	8002bc6 <HAL_SPI_TransmitReceive+0x1fc>
 8002bc0:	8b7b      	ldrh	r3, [r7, #26]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d16b      	bne.n	8002c9e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	330c      	adds	r3, #12
 8002bd0:	7812      	ldrb	r2, [r2, #0]
 8002bd2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	3b01      	subs	r3, #1
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bec:	e057      	b.n	8002c9e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d11c      	bne.n	8002c36 <HAL_SPI_TransmitReceive+0x26c>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d017      	beq.n	8002c36 <HAL_SPI_TransmitReceive+0x26c>
 8002c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d114      	bne.n	8002c36 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	330c      	adds	r3, #12
 8002c16:	7812      	ldrb	r2, [r2, #0]
 8002c18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d119      	bne.n	8002c78 <HAL_SPI_TransmitReceive+0x2ae>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d014      	beq.n	8002c78 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c74:	2301      	movs	r3, #1
 8002c76:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c78:	f7fe f926 	bl	8000ec8 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d803      	bhi.n	8002c90 <HAL_SPI_TransmitReceive+0x2c6>
 8002c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8e:	d102      	bne.n	8002c96 <HAL_SPI_TransmitReceive+0x2cc>
 8002c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d103      	bne.n	8002c9e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002c9c:	e029      	b.n	8002cf2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1a2      	bne.n	8002bee <HAL_SPI_TransmitReceive+0x224>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d19d      	bne.n	8002bee <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 f904 	bl	8002ec4 <SPI_EndRxTxTransaction>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d006      	beq.n	8002cd0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002cce:	e010      	b.n	8002cf2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10b      	bne.n	8002cf0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	e000      	b.n	8002cf2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002cf0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3730      	adds	r7, #48	; 0x30
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b088      	sub	sp, #32
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	603b      	str	r3, [r7, #0]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d20:	f7fe f8d2 	bl	8000ec8 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d28:	1a9b      	subs	r3, r3, r2
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d30:	f7fe f8ca 	bl	8000ec8 <HAL_GetTick>
 8002d34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d36:	4b39      	ldr	r3, [pc, #228]	; (8002e1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	015b      	lsls	r3, r3, #5
 8002d3c:	0d1b      	lsrs	r3, r3, #20
 8002d3e:	69fa      	ldr	r2, [r7, #28]
 8002d40:	fb02 f303 	mul.w	r3, r2, r3
 8002d44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d46:	e054      	b.n	8002df2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4e:	d050      	beq.n	8002df2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d50:	f7fe f8ba 	bl	8000ec8 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	69fa      	ldr	r2, [r7, #28]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d902      	bls.n	8002d66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d13d      	bne.n	8002de2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d7e:	d111      	bne.n	8002da4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d88:	d004      	beq.n	8002d94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d92:	d107      	bne.n	8002da4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002da2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dac:	d10f      	bne.n	8002dce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dcc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e017      	b.n	8002e12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	bf0c      	ite	eq
 8002e02:	2301      	moveq	r3, #1
 8002e04:	2300      	movne	r3, #0
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d19b      	bne.n	8002d48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3720      	adds	r7, #32
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20000000 	.word	0x20000000

08002e20 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e34:	d111      	bne.n	8002e5a <SPI_EndRxTransaction+0x3a>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e3e:	d004      	beq.n	8002e4a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e48:	d107      	bne.n	8002e5a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e58:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e62:	d117      	bne.n	8002e94 <SPI_EndRxTransaction+0x74>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e6c:	d112      	bne.n	8002e94 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2200      	movs	r2, #0
 8002e76:	2101      	movs	r1, #1
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f7ff ff49 	bl	8002d10 <SPI_WaitFlagStateUntilTimeout>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d01a      	beq.n	8002eba <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e88:	f043 0220 	orr.w	r2, r3, #32
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e013      	b.n	8002ebc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	2180      	movs	r1, #128	; 0x80
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f7ff ff36 	bl	8002d10 <SPI_WaitFlagStateUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d007      	beq.n	8002eba <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eae:	f043 0220 	orr.w	r2, r3, #32
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e000      	b.n	8002ebc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	2180      	movs	r1, #128	; 0x80
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f7ff ff18 	bl	8002d10 <SPI_WaitFlagStateUntilTimeout>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d007      	beq.n	8002ef6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eea:	f043 0220 	orr.w	r2, r3, #32
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e000      	b.n	8002ef8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e041      	b.n	8002f96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fd fe02 	bl	8000b30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4610      	mov	r0, r2
 8002f40:	f000 fa08 	bl	8003354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e041      	b.n	8003034 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d106      	bne.n	8002fca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f839 	bl	800303c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2202      	movs	r2, #2
 8002fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4610      	mov	r0, r2
 8002fde:	f000 f9b9 	bl	8003354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	bc80      	pop	{r7}
 800304c:	4770      	bx	lr
	...

08003050 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003062:	2b01      	cmp	r3, #1
 8003064:	d101      	bne.n	800306a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003066:	2302      	movs	r3, #2
 8003068:	e0ac      	b.n	80031c4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b0c      	cmp	r3, #12
 8003076:	f200 809f 	bhi.w	80031b8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800307a:	a201      	add	r2, pc, #4	; (adr r2, 8003080 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800307c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003080:	080030b5 	.word	0x080030b5
 8003084:	080031b9 	.word	0x080031b9
 8003088:	080031b9 	.word	0x080031b9
 800308c:	080031b9 	.word	0x080031b9
 8003090:	080030f5 	.word	0x080030f5
 8003094:	080031b9 	.word	0x080031b9
 8003098:	080031b9 	.word	0x080031b9
 800309c:	080031b9 	.word	0x080031b9
 80030a0:	08003137 	.word	0x08003137
 80030a4:	080031b9 	.word	0x080031b9
 80030a8:	080031b9 	.word	0x080031b9
 80030ac:	080031b9 	.word	0x080031b9
 80030b0:	08003177 	.word	0x08003177
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68b9      	ldr	r1, [r7, #8]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 f9ac 	bl	8003418 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	699a      	ldr	r2, [r3, #24]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0208 	orr.w	r2, r2, #8
 80030ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699a      	ldr	r2, [r3, #24]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0204 	bic.w	r2, r2, #4
 80030de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6999      	ldr	r1, [r3, #24]
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	691a      	ldr	r2, [r3, #16]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	619a      	str	r2, [r3, #24]
      break;
 80030f2:	e062      	b.n	80031ba <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68b9      	ldr	r1, [r7, #8]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 f9f2 	bl	80034e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699a      	ldr	r2, [r3, #24]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800310e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699a      	ldr	r2, [r3, #24]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800311e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6999      	ldr	r1, [r3, #24]
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	021a      	lsls	r2, r3, #8
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	619a      	str	r2, [r3, #24]
      break;
 8003134:	e041      	b.n	80031ba <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68b9      	ldr	r1, [r7, #8]
 800313c:	4618      	mov	r0, r3
 800313e:	f000 fa3b 	bl	80035b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	69da      	ldr	r2, [r3, #28]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f042 0208 	orr.w	r2, r2, #8
 8003150:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69da      	ldr	r2, [r3, #28]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0204 	bic.w	r2, r2, #4
 8003160:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	69d9      	ldr	r1, [r3, #28]
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	691a      	ldr	r2, [r3, #16]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	61da      	str	r2, [r3, #28]
      break;
 8003174:	e021      	b.n	80031ba <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68b9      	ldr	r1, [r7, #8]
 800317c:	4618      	mov	r0, r3
 800317e:	f000 fa85 	bl	800368c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	69da      	ldr	r2, [r3, #28]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003190:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	69da      	ldr	r2, [r3, #28]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	69d9      	ldr	r1, [r3, #28]
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	021a      	lsls	r2, r3, #8
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	61da      	str	r2, [r3, #28]
      break;
 80031b6:	e000      	b.n	80031ba <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80031b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_TIM_ConfigClockSource+0x18>
 80031e0:	2302      	movs	r3, #2
 80031e2:	e0b3      	b.n	800334c <HAL_TIM_ConfigClockSource+0x180>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003202:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800320a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800321c:	d03e      	beq.n	800329c <HAL_TIM_ConfigClockSource+0xd0>
 800321e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003222:	f200 8087 	bhi.w	8003334 <HAL_TIM_ConfigClockSource+0x168>
 8003226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800322a:	f000 8085 	beq.w	8003338 <HAL_TIM_ConfigClockSource+0x16c>
 800322e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003232:	d87f      	bhi.n	8003334 <HAL_TIM_ConfigClockSource+0x168>
 8003234:	2b70      	cmp	r3, #112	; 0x70
 8003236:	d01a      	beq.n	800326e <HAL_TIM_ConfigClockSource+0xa2>
 8003238:	2b70      	cmp	r3, #112	; 0x70
 800323a:	d87b      	bhi.n	8003334 <HAL_TIM_ConfigClockSource+0x168>
 800323c:	2b60      	cmp	r3, #96	; 0x60
 800323e:	d050      	beq.n	80032e2 <HAL_TIM_ConfigClockSource+0x116>
 8003240:	2b60      	cmp	r3, #96	; 0x60
 8003242:	d877      	bhi.n	8003334 <HAL_TIM_ConfigClockSource+0x168>
 8003244:	2b50      	cmp	r3, #80	; 0x50
 8003246:	d03c      	beq.n	80032c2 <HAL_TIM_ConfigClockSource+0xf6>
 8003248:	2b50      	cmp	r3, #80	; 0x50
 800324a:	d873      	bhi.n	8003334 <HAL_TIM_ConfigClockSource+0x168>
 800324c:	2b40      	cmp	r3, #64	; 0x40
 800324e:	d058      	beq.n	8003302 <HAL_TIM_ConfigClockSource+0x136>
 8003250:	2b40      	cmp	r3, #64	; 0x40
 8003252:	d86f      	bhi.n	8003334 <HAL_TIM_ConfigClockSource+0x168>
 8003254:	2b30      	cmp	r3, #48	; 0x30
 8003256:	d064      	beq.n	8003322 <HAL_TIM_ConfigClockSource+0x156>
 8003258:	2b30      	cmp	r3, #48	; 0x30
 800325a:	d86b      	bhi.n	8003334 <HAL_TIM_ConfigClockSource+0x168>
 800325c:	2b20      	cmp	r3, #32
 800325e:	d060      	beq.n	8003322 <HAL_TIM_ConfigClockSource+0x156>
 8003260:	2b20      	cmp	r3, #32
 8003262:	d867      	bhi.n	8003334 <HAL_TIM_ConfigClockSource+0x168>
 8003264:	2b00      	cmp	r3, #0
 8003266:	d05c      	beq.n	8003322 <HAL_TIM_ConfigClockSource+0x156>
 8003268:	2b10      	cmp	r3, #16
 800326a:	d05a      	beq.n	8003322 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800326c:	e062      	b.n	8003334 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6818      	ldr	r0, [r3, #0]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	6899      	ldr	r1, [r3, #8]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f000 faca 	bl	8003816 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003290:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	609a      	str	r2, [r3, #8]
      break;
 800329a:	e04e      	b.n	800333a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6818      	ldr	r0, [r3, #0]
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	6899      	ldr	r1, [r3, #8]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f000 fab3 	bl	8003816 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032be:	609a      	str	r2, [r3, #8]
      break;
 80032c0:	e03b      	b.n	800333a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6818      	ldr	r0, [r3, #0]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	6859      	ldr	r1, [r3, #4]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	461a      	mov	r2, r3
 80032d0:	f000 fa2a 	bl	8003728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2150      	movs	r1, #80	; 0x50
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 fa81 	bl	80037e2 <TIM_ITRx_SetConfig>
      break;
 80032e0:	e02b      	b.n	800333a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6818      	ldr	r0, [r3, #0]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	6859      	ldr	r1, [r3, #4]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	461a      	mov	r2, r3
 80032f0:	f000 fa48 	bl	8003784 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2160      	movs	r1, #96	; 0x60
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fa71 	bl	80037e2 <TIM_ITRx_SetConfig>
      break;
 8003300:	e01b      	b.n	800333a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6818      	ldr	r0, [r3, #0]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	6859      	ldr	r1, [r3, #4]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	461a      	mov	r2, r3
 8003310:	f000 fa0a 	bl	8003728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2140      	movs	r1, #64	; 0x40
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fa61 	bl	80037e2 <TIM_ITRx_SetConfig>
      break;
 8003320:	e00b      	b.n	800333a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4619      	mov	r1, r3
 800332c:	4610      	mov	r0, r2
 800332e:	f000 fa58 	bl	80037e2 <TIM_ITRx_SetConfig>
        break;
 8003332:	e002      	b.n	800333a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003334:	bf00      	nop
 8003336:	e000      	b.n	800333a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003338:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a29      	ldr	r2, [pc, #164]	; (800340c <TIM_Base_SetConfig+0xb8>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d00b      	beq.n	8003384 <TIM_Base_SetConfig+0x30>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003372:	d007      	beq.n	8003384 <TIM_Base_SetConfig+0x30>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a26      	ldr	r2, [pc, #152]	; (8003410 <TIM_Base_SetConfig+0xbc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d003      	beq.n	8003384 <TIM_Base_SetConfig+0x30>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a25      	ldr	r2, [pc, #148]	; (8003414 <TIM_Base_SetConfig+0xc0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d108      	bne.n	8003396 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	4313      	orrs	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a1c      	ldr	r2, [pc, #112]	; (800340c <TIM_Base_SetConfig+0xb8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d00b      	beq.n	80033b6 <TIM_Base_SetConfig+0x62>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a4:	d007      	beq.n	80033b6 <TIM_Base_SetConfig+0x62>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a19      	ldr	r2, [pc, #100]	; (8003410 <TIM_Base_SetConfig+0xbc>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d003      	beq.n	80033b6 <TIM_Base_SetConfig+0x62>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a18      	ldr	r2, [pc, #96]	; (8003414 <TIM_Base_SetConfig+0xc0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d108      	bne.n	80033c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a07      	ldr	r2, [pc, #28]	; (800340c <TIM_Base_SetConfig+0xb8>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d103      	bne.n	80033fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	691a      	ldr	r2, [r3, #16]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	615a      	str	r2, [r3, #20]
}
 8003402:	bf00      	nop
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr
 800340c:	40012c00 	.word	0x40012c00
 8003410:	40000400 	.word	0x40000400
 8003414:	40000800 	.word	0x40000800

08003418 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	f023 0201 	bic.w	r2, r3, #1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f023 0303 	bic.w	r3, r3, #3
 800344e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	4313      	orrs	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f023 0302 	bic.w	r3, r3, #2
 8003460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	4313      	orrs	r3, r2
 800346a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a1c      	ldr	r2, [pc, #112]	; (80034e0 <TIM_OC1_SetConfig+0xc8>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d10c      	bne.n	800348e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f023 0308 	bic.w	r3, r3, #8
 800347a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	4313      	orrs	r3, r2
 8003484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f023 0304 	bic.w	r3, r3, #4
 800348c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a13      	ldr	r2, [pc, #76]	; (80034e0 <TIM_OC1_SetConfig+0xc8>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d111      	bne.n	80034ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800349c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	621a      	str	r2, [r3, #32]
}
 80034d4:	bf00      	nop
 80034d6:	371c      	adds	r7, #28
 80034d8:	46bd      	mov	sp, r7
 80034da:	bc80      	pop	{r7}
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	40012c00 	.word	0x40012c00

080034e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	f023 0210 	bic.w	r2, r3, #16
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800351a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	021b      	lsls	r3, r3, #8
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	4313      	orrs	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f023 0320 	bic.w	r3, r3, #32
 800352e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	4313      	orrs	r3, r2
 800353a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a1d      	ldr	r2, [pc, #116]	; (80035b4 <TIM_OC2_SetConfig+0xd0>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d10d      	bne.n	8003560 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800354a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	4313      	orrs	r3, r2
 8003556:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800355e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a14      	ldr	r2, [pc, #80]	; (80035b4 <TIM_OC2_SetConfig+0xd0>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d113      	bne.n	8003590 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800356e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003576:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	4313      	orrs	r3, r2
 8003582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	621a      	str	r2, [r3, #32]
}
 80035aa:	bf00      	nop
 80035ac:	371c      	adds	r7, #28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr
 80035b4:	40012c00 	.word	0x40012c00

080035b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f023 0303 	bic.w	r3, r3, #3
 80035ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003600:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	021b      	lsls	r3, r3, #8
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	4313      	orrs	r3, r2
 800360c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a1d      	ldr	r2, [pc, #116]	; (8003688 <TIM_OC3_SetConfig+0xd0>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d10d      	bne.n	8003632 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800361c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	021b      	lsls	r3, r3, #8
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	4313      	orrs	r3, r2
 8003628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003630:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a14      	ldr	r2, [pc, #80]	; (8003688 <TIM_OC3_SetConfig+0xd0>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d113      	bne.n	8003662 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	4313      	orrs	r3, r2
 8003654:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	4313      	orrs	r3, r2
 8003660:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	621a      	str	r2, [r3, #32]
}
 800367c:	bf00      	nop
 800367e:	371c      	adds	r7, #28
 8003680:	46bd      	mov	sp, r7
 8003682:	bc80      	pop	{r7}
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	40012c00 	.word	0x40012c00

0800368c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800368c:	b480      	push	{r7}
 800368e:	b087      	sub	sp, #28
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	021b      	lsls	r3, r3, #8
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	031b      	lsls	r3, r3, #12
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a0f      	ldr	r2, [pc, #60]	; (8003724 <TIM_OC4_SetConfig+0x98>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d109      	bne.n	8003700 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	019b      	lsls	r3, r3, #6
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	621a      	str	r2, [r3, #32]
}
 800371a:	bf00      	nop
 800371c:	371c      	adds	r7, #28
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr
 8003724:	40012c00 	.word	0x40012c00

08003728 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003728:	b480      	push	{r7}
 800372a:	b087      	sub	sp, #28
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	f023 0201 	bic.w	r2, r3, #1
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003752:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	4313      	orrs	r3, r2
 800375c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f023 030a 	bic.w	r3, r3, #10
 8003764:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4313      	orrs	r3, r2
 800376c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	621a      	str	r2, [r3, #32]
}
 800377a:	bf00      	nop
 800377c:	371c      	adds	r7, #28
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr

08003784 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003784:	b480      	push	{r7}
 8003786:	b087      	sub	sp, #28
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	f023 0210 	bic.w	r2, r3, #16
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	031b      	lsls	r3, r3, #12
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	621a      	str	r2, [r3, #32]
}
 80037d8:	bf00      	nop
 80037da:	371c      	adds	r7, #28
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr

080037e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b085      	sub	sp, #20
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4313      	orrs	r3, r2
 8003800:	f043 0307 	orr.w	r3, r3, #7
 8003804:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	609a      	str	r2, [r3, #8]
}
 800380c:	bf00      	nop
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr

08003816 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003816:	b480      	push	{r7}
 8003818:	b087      	sub	sp, #28
 800381a:	af00      	add	r7, sp, #0
 800381c:	60f8      	str	r0, [r7, #12]
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	607a      	str	r2, [r7, #4]
 8003822:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003830:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	021a      	lsls	r2, r3, #8
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	431a      	orrs	r2, r3
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	4313      	orrs	r3, r2
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	609a      	str	r2, [r3, #8]
}
 800384a:	bf00      	nop
 800384c:	371c      	adds	r7, #28
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr

08003854 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d109      	bne.n	8003878 <HAL_TIMEx_PWMN_Start+0x24>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b01      	cmp	r3, #1
 800386e:	bf14      	ite	ne
 8003870:	2301      	movne	r3, #1
 8003872:	2300      	moveq	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	e022      	b.n	80038be <HAL_TIMEx_PWMN_Start+0x6a>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	2b04      	cmp	r3, #4
 800387c:	d109      	bne.n	8003892 <HAL_TIMEx_PWMN_Start+0x3e>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b01      	cmp	r3, #1
 8003888:	bf14      	ite	ne
 800388a:	2301      	movne	r3, #1
 800388c:	2300      	moveq	r3, #0
 800388e:	b2db      	uxtb	r3, r3
 8003890:	e015      	b.n	80038be <HAL_TIMEx_PWMN_Start+0x6a>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b08      	cmp	r3, #8
 8003896:	d109      	bne.n	80038ac <HAL_TIMEx_PWMN_Start+0x58>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	bf14      	ite	ne
 80038a4:	2301      	movne	r3, #1
 80038a6:	2300      	moveq	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	e008      	b.n	80038be <HAL_TIMEx_PWMN_Start+0x6a>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	bf14      	ite	ne
 80038b8:	2301      	movne	r3, #1
 80038ba:	2300      	moveq	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e059      	b.n	800397a <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d104      	bne.n	80038d6 <HAL_TIMEx_PWMN_Start+0x82>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038d4:	e013      	b.n	80038fe <HAL_TIMEx_PWMN_Start+0xaa>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b04      	cmp	r3, #4
 80038da:	d104      	bne.n	80038e6 <HAL_TIMEx_PWMN_Start+0x92>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2202      	movs	r2, #2
 80038e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038e4:	e00b      	b.n	80038fe <HAL_TIMEx_PWMN_Start+0xaa>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d104      	bne.n	80038f6 <HAL_TIMEx_PWMN_Start+0xa2>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038f4:	e003      	b.n	80038fe <HAL_TIMEx_PWMN_Start+0xaa>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2202      	movs	r2, #2
 80038fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2204      	movs	r2, #4
 8003904:	6839      	ldr	r1, [r7, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f000 f8f1 	bl	8003aee <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800391a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a18      	ldr	r2, [pc, #96]	; (8003984 <HAL_TIMEx_PWMN_Start+0x130>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d00e      	beq.n	8003944 <HAL_TIMEx_PWMN_Start+0xf0>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800392e:	d009      	beq.n	8003944 <HAL_TIMEx_PWMN_Start+0xf0>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a14      	ldr	r2, [pc, #80]	; (8003988 <HAL_TIMEx_PWMN_Start+0x134>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d004      	beq.n	8003944 <HAL_TIMEx_PWMN_Start+0xf0>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a13      	ldr	r2, [pc, #76]	; (800398c <HAL_TIMEx_PWMN_Start+0x138>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d111      	bne.n	8003968 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2b06      	cmp	r3, #6
 8003954:	d010      	beq.n	8003978 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 0201 	orr.w	r2, r2, #1
 8003964:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003966:	e007      	b.n	8003978 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0201 	orr.w	r2, r2, #1
 8003976:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40012c00 	.word	0x40012c00
 8003988:	40000400 	.word	0x40000400
 800398c:	40000800 	.word	0x40000800

08003990 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039a4:	2302      	movs	r3, #2
 80039a6:	e046      	b.n	8003a36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a16      	ldr	r2, [pc, #88]	; (8003a40 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d00e      	beq.n	8003a0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f4:	d009      	beq.n	8003a0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a12      	ldr	r2, [pc, #72]	; (8003a44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d004      	beq.n	8003a0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a10      	ldr	r2, [pc, #64]	; (8003a48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d10c      	bne.n	8003a24 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3714      	adds	r7, #20
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	4770      	bx	lr
 8003a40:	40012c00 	.word	0x40012c00
 8003a44:	40000400 	.word	0x40000400
 8003a48:	40000800 	.word	0x40000800

08003a4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e03d      	b.n	8003ae4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3714      	adds	r7, #20
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bc80      	pop	{r7}
 8003aec:	4770      	bx	lr

08003aee <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b087      	sub	sp, #28
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f003 031f 	and.w	r3, r3, #31
 8003b00:	2204      	movs	r2, #4
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a1a      	ldr	r2, [r3, #32]
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	401a      	ands	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6a1a      	ldr	r2, [r3, #32]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f003 031f 	and.w	r3, r3, #31
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	fa01 f303 	lsl.w	r3, r1, r3
 8003b26:	431a      	orrs	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	621a      	str	r2, [r3, #32]
}
 8003b2c:	bf00      	nop
 8003b2e:	371c      	adds	r7, #28
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bc80      	pop	{r7}
 8003b34:	4770      	bx	lr

08003b36 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b082      	sub	sp, #8
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e03f      	b.n	8003bc8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d106      	bne.n	8003b62 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7fd f839 	bl	8000bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2224      	movs	r2, #36	; 0x24
 8003b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68da      	ldr	r2, [r3, #12]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b78:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f828 	bl	8003bd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691a      	ldr	r2, [r3, #16]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b8e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695a      	ldr	r2, [r3, #20]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b9e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68da      	ldr	r2, [r3, #12]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689a      	ldr	r2, [r3, #8]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003c0a:	f023 030c 	bic.w	r3, r3, #12
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6812      	ldr	r2, [r2, #0]
 8003c12:	68b9      	ldr	r1, [r7, #8]
 8003c14:	430b      	orrs	r3, r1
 8003c16:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	699a      	ldr	r2, [r3, #24]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a2c      	ldr	r2, [pc, #176]	; (8003ce4 <UART_SetConfig+0x114>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d103      	bne.n	8003c40 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c38:	f7fe fb0e 	bl	8002258 <HAL_RCC_GetPCLK2Freq>
 8003c3c:	60f8      	str	r0, [r7, #12]
 8003c3e:	e002      	b.n	8003c46 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c40:	f7fe faf6 	bl	8002230 <HAL_RCC_GetPCLK1Freq>
 8003c44:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	009a      	lsls	r2, r3, #2
 8003c50:	441a      	add	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5c:	4a22      	ldr	r2, [pc, #136]	; (8003ce8 <UART_SetConfig+0x118>)
 8003c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	0119      	lsls	r1, r3, #4
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	009a      	lsls	r2, r3, #2
 8003c70:	441a      	add	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ce8 <UART_SetConfig+0x118>)
 8003c7e:	fba3 0302 	umull	r0, r3, r3, r2
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	2064      	movs	r0, #100	; 0x64
 8003c86:	fb00 f303 	mul.w	r3, r0, r3
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	3332      	adds	r3, #50	; 0x32
 8003c90:	4a15      	ldr	r2, [pc, #84]	; (8003ce8 <UART_SetConfig+0x118>)
 8003c92:	fba2 2303 	umull	r2, r3, r2, r3
 8003c96:	095b      	lsrs	r3, r3, #5
 8003c98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c9c:	4419      	add	r1, r3
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4413      	add	r3, r2
 8003ca6:	009a      	lsls	r2, r3, #2
 8003ca8:	441a      	add	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ce8 <UART_SetConfig+0x118>)
 8003cb6:	fba3 0302 	umull	r0, r3, r3, r2
 8003cba:	095b      	lsrs	r3, r3, #5
 8003cbc:	2064      	movs	r0, #100	; 0x64
 8003cbe:	fb00 f303 	mul.w	r3, r0, r3
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	3332      	adds	r3, #50	; 0x32
 8003cc8:	4a07      	ldr	r2, [pc, #28]	; (8003ce8 <UART_SetConfig+0x118>)
 8003cca:	fba2 2303 	umull	r2, r3, r2, r3
 8003cce:	095b      	lsrs	r3, r3, #5
 8003cd0:	f003 020f 	and.w	r2, r3, #15
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	440a      	add	r2, r1
 8003cda:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003cdc:	bf00      	nop
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40013800 	.word	0x40013800
 8003ce8:	51eb851f 	.word	0x51eb851f

08003cec <_ZN11MC3479Class12setSerialSPIEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:
	return 1; // Return Success
}

// Set the MC3479's SPI object
bool MC3479Class::setSerialSPI(SPI_HandleTypeDef * spi,GPIO_TypeDef * csn_GPIO, uint16_t csn_PIN )
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
 8003cf8:	807b      	strh	r3, [r7, #2]
	this->_SPI1 = spi;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	601a      	str	r2, [r3, #0]
	this->_CSN_GPIO = csn_GPIO;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	609a      	str	r2, [r3, #8]
	this->_CSN_PIN = csn_PIN;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	887a      	ldrh	r2, [r7, #2]
 8003d0a:	819a      	strh	r2, [r3, #12]
	return 1; // Return Success
 8003d0c:	2301      	movs	r3, #1
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bc80      	pop	{r7}
 8003d16:	4770      	bx	lr

08003d18 <_ZN11MC3479Class16SPI_readRegisterEhPh>:

// Read from a register using SPI
bool MC3479Class::SPI_readRegister(uint8_t reg,  uint8_t* data)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	460b      	mov	r3, r1
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	72fb      	strb	r3, [r7, #11]

	uint8_t spiBytes[2];
	spiBytes[0] = SPIread_REG && reg;
 8003d26:	7afb      	ldrb	r3, [r7, #11]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	bf14      	ite	ne
 8003d2c:	2301      	movne	r3, #1
 8003d2e:	2300      	moveq	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	753b      	strb	r3, [r7, #20]
	spiBytes[1] = SPIread_BYTE2;
 8003d34:	2300      	movs	r3, #0
 8003d36:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_RESET);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6898      	ldr	r0, [r3, #8]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	899b      	ldrh	r3, [r3, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	4619      	mov	r1, r3
 8003d44:	f7fd fd44 	bl	80017d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_SPI1, spiBytes, sizeof(spiBytes), 10);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6818      	ldr	r0, [r3, #0]
 8003d4c:	f107 0114 	add.w	r1, r7, #20
 8003d50:	230a      	movs	r3, #10
 8003d52:	2202      	movs	r2, #2
 8003d54:	f7fe fbec 	bl	8002530 <HAL_SPI_Transmit>
	HAL_SPI_Receive(_SPI1, data, REG_BYTES_LEN, 10);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6818      	ldr	r0, [r3, #0]
 8003d5c:	230a      	movs	r3, #10
 8003d5e:	2201      	movs	r2, #1
 8003d60:	6879      	ldr	r1, [r7, #4]
 8003d62:	f7fe fd21 	bl	80027a8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_SET);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6898      	ldr	r0, [r3, #8]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	899b      	ldrh	r3, [r3, #12]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	4619      	mov	r1, r3
 8003d72:	f7fd fd2d 	bl	80017d0 <HAL_GPIO_WritePin>
	return 1;
 8003d76:	2301      	movs	r3, #1
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <_ZN11MC3479Class17SPI_writeRegisterEhh>:

// Write to a register using SPI
uint8_t MC3479Class::SPI_writeRegister(uint8_t reg, uint8_t data)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	70fb      	strb	r3, [r7, #3]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	70bb      	strb	r3, [r7, #2]
	// Write data to reg:
	uint8_t spiBytes[2];
	spiBytes[0] = SPIwrite_REG && reg;
 8003d90:	78fb      	ldrb	r3, [r7, #3]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	bf14      	ite	ne
 8003d96:	2301      	movne	r3, #1
 8003d98:	2300      	moveq	r3, #0
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	733b      	strb	r3, [r7, #12]
	spiBytes[1] = data;
 8003d9e:	78bb      	ldrb	r3, [r7, #2]
 8003da0:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_RESET);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6898      	ldr	r0, [r3, #8]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	899b      	ldrh	r3, [r3, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	4619      	mov	r1, r3
 8003dae:	f7fd fd0f 	bl	80017d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_SPI1, spiBytes, sizeof(spiBytes), 10);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6818      	ldr	r0, [r3, #0]
 8003db6:	f107 010c 	add.w	r1, r7, #12
 8003dba:	230a      	movs	r3, #10
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	f7fe fbb7 	bl	8002530 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_SET);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6898      	ldr	r0, [r3, #8]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	899b      	ldrh	r3, [r3, #12]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	4619      	mov	r1, r3
 8003dce:	f7fd fcff 	bl	80017d0 <HAL_GPIO_WritePin>

	// Read back the register and return the bytes:
	uint8_t regReadBack = 0;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	72fb      	strb	r3, [r7, #11]
	MC3479.SPI_readRegister(reg, &regReadBack);
 8003dd6:	f107 020b 	add.w	r2, r7, #11
 8003dda:	78fb      	ldrb	r3, [r7, #3]
 8003ddc:	4619      	mov	r1, r3
 8003dde:	4804      	ldr	r0, [pc, #16]	; (8003df0 <_ZN11MC3479Class17SPI_writeRegisterEhh+0x70>)
 8003de0:	f7ff ff9a 	bl	8003d18 <_ZN11MC3479Class16SPI_readRegisterEhPh>
	return regReadBack;
 8003de4:	7afb      	ldrb	r3, [r7, #11]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	2000024c 	.word	0x2000024c

08003df4 <_ZN11MC3479Class19configAccelerometerEv>:
	return 1;
}


// Perform the initial MC3479 hard-coded configuration
void MC3479Class::configAccelerometer(){
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
	uint8_t data;
	if (&_SPI1 != NULL){
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 8128 	beq.w	8004054 <_ZN11MC3479Class19configAccelerometerEv+0x260>
		//Configuration using SPI:

		// Register 0x06 (interrupt enable)
		data = 0xFF & ACQ_INT_EN; //only activates interrupts after each sample
 8003e04:	2380      	movs	r3, #128	; 0x80
 8003e06:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_INTR_CTRL, data);
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	2106      	movs	r1, #6
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7ff ffb6 	bl	8003d80 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x07 (MODE)
		data = 0xFF & WAKE; // clocks running, X,Y,Z axis sampled @ data rate
 8003e14:	2301      	movs	r3, #1
 8003e16:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_MODE, data);
 8003e18:	7bfb      	ldrb	r3, [r7, #15]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	2107      	movs	r1, #7
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7ff ffae 	bl	8003d80 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x08 (Sample  Rate)
		data = 0xFF & RATE1_100Hz; // sample x,y,z @ 100Hz
 8003e24:	2309      	movs	r3, #9
 8003e26:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_SR, data);
 8003e28:	7bfb      	ldrb	r3, [r7, #15]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	2108      	movs	r1, #8
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7ff ffa6 	bl	8003d80 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x09 (Motion Control)
		data = 0xFF & 0x00; //No motion detection enabled Z-axis positive through top of package
 8003e34:	2300      	movs	r3, #0
 8003e36:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_MOTION_CTRL, data);
 8003e38:	7bfb      	ldrb	r3, [r7, #15]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	2109      	movs	r1, #9
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7ff ff9e 	bl	8003d80 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x20 (Range Select Control)
		data = 0xFF & 0x00; // No resolution range change, no LPF
 8003e44:	2300      	movs	r3, #0
 8003e46:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_RANGE, data);
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	2120      	movs	r1, #32
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7ff ff96 	bl	8003d80 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x21 (X-offset lSB)
		MC3479Class::SPI_readRegister(MC3479_XOFFL, &data);
 8003e54:	f107 030f 	add.w	r3, r7, #15
 8003e58:	461a      	mov	r2, r3
 8003e5a:	2121      	movs	r1, #33	; 0x21
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7ff ff5b 	bl	8003d18 <_ZN11MC3479Class16SPI_readRegisterEhPh>
		data = data & 0xFF; //no offset
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
 8003e64:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_XOFFL, data);
 8003e66:	7bfb      	ldrb	r3, [r7, #15]
 8003e68:	461a      	mov	r2, r3
 8003e6a:	2121      	movs	r1, #33	; 0x21
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7ff ff87 	bl	8003d80 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x22 (X-offset MSB)
		MC3479Class::SPI_readRegister(MC3479_XOFFH, &data);
 8003e72:	f107 030f 	add.w	r3, r7, #15
 8003e76:	461a      	mov	r2, r3
 8003e78:	2122      	movs	r1, #34	; 0x22
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7ff ff4c 	bl	8003d18 <_ZN11MC3479Class16SPI_readRegisterEhPh>
		data = data & 0xFF; //no offset
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
 8003e82:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_XOFFH, data);
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
 8003e86:	461a      	mov	r2, r3
 8003e88:	2122      	movs	r1, #34	; 0x22
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7ff ff78 	bl	8003d80 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x23 (Y-offset LSB)
		MC3479Class::SPI_readRegister(MC3479_YOFFL, &data);
 8003e90:	f107 030f 	add.w	r3, r7, #15
 8003e94:	461a      	mov	r2, r3
 8003e96:	2123      	movs	r1, #35	; 0x23
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f7ff ff3d 	bl	8003d18 <_ZN11MC3479Class16SPI_readRegisterEhPh>
		data = data & 0xFF; //no offset
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ea0:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_YOFFL, data);
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	2123      	movs	r1, #35	; 0x23
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f7ff ff69 	bl	8003d80 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x24 (Y-offset MSB)
		MC3479Class::SPI_readRegister(MC3479_YOFFH, &data);
 8003eae:	f107 030f 	add.w	r3, r7, #15
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	2124      	movs	r1, #36	; 0x24
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7ff ff2e 	bl	8003d18 <_ZN11MC3479Class16SPI_readRegisterEhPh>
		data = data & 0xFF; //no offset
 8003ebc:	7bfb      	ldrb	r3, [r7, #15]
 8003ebe:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_YOFFH, data);
 8003ec0:	7bfb      	ldrb	r3, [r7, #15]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	2124      	movs	r1, #36	; 0x24
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7ff ff5a 	bl	8003d80 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x25 (Z-offset LSB)
		MC3479Class::SPI_readRegister(MC3479_ZOFFL, &data);
 8003ecc:	f107 030f 	add.w	r3, r7, #15
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	2125      	movs	r1, #37	; 0x25
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7ff ff1f 	bl	8003d18 <_ZN11MC3479Class16SPI_readRegisterEhPh>
		data = data & 0xFF; //no offset
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
 8003edc:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_ZOFFL, data);
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	2125      	movs	r1, #37	; 0x25
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7ff ff4b 	bl	8003d80 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x26 (Z-offset MSB)
		MC3479Class::SPI_readRegister(MC3479_ZOFFH, &data);
 8003eea:	f107 030f 	add.w	r3, r7, #15
 8003eee:	461a      	mov	r2, r3
 8003ef0:	2126      	movs	r1, #38	; 0x26
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7ff ff10 	bl	8003d18 <_ZN11MC3479Class16SPI_readRegisterEhPh>
		data = data & 0xFF; //no offset
 8003ef8:	7bfb      	ldrb	r3, [r7, #15]
 8003efa:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_ZOFFH, data);
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
 8003efe:	461a      	mov	r2, r3
 8003f00:	2126      	movs	r1, #38	; 0x26
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7ff ff3c 	bl	8003d80 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x27 (X Gain)
		MC3479Class::SPI_readRegister(MC3479_XGAIN, &data);
 8003f08:	f107 030f 	add.w	r3, r7, #15
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	2127      	movs	r1, #39	; 0x27
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff ff01 	bl	8003d18 <_ZN11MC3479Class16SPI_readRegisterEhPh>
		data = data & 0xFF; //no GAIN
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
 8003f18:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_XGAIN, data);
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	2127      	movs	r1, #39	; 0x27
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7ff ff2d 	bl	8003d80 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x28 (Y Gain)
		MC3479Class::SPI_readRegister(MC3479_YGAIN, &data);
 8003f26:	f107 030f 	add.w	r3, r7, #15
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	2128      	movs	r1, #40	; 0x28
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7ff fef2 	bl	8003d18 <_ZN11MC3479Class16SPI_readRegisterEhPh>
		data = data & 0xFF; //no GAIN
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
 8003f36:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_YGAIN, data);
 8003f38:	7bfb      	ldrb	r3, [r7, #15]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	2128      	movs	r1, #40	; 0x28
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7ff ff1e 	bl	8003d80 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x29 (Z Gain)
		MC3479Class::SPI_readRegister(MC3479_ZGAIN, &data);
 8003f44:	f107 030f 	add.w	r3, r7, #15
 8003f48:	461a      	mov	r2, r3
 8003f4a:	2129      	movs	r1, #41	; 0x29
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7ff fee3 	bl	8003d18 <_ZN11MC3479Class16SPI_readRegisterEhPh>
		data = data & 0xFF; //no GAIN
 8003f52:	7bfb      	ldrb	r3, [r7, #15]
 8003f54:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_ZGAIN, data);
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	2129      	movs	r1, #41	; 0x29
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff ff0f 	bl	8003d80 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// RegisteO 0x2D (FIFO Control)
		data = 0XFF & FIFO_TH_INT_EN & FIFO_FULL_INT_EN; // FIFO TH/Full IRQ set on INTN2 pin.
 8003f62:	2300      	movs	r3, #0
 8003f64:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_FIFO_CTRL, data);
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	212d      	movs	r1, #45	; 0x2d
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f7ff ff07 	bl	8003d80 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x2E (FIFO Threshold)
		data = 0xFF & 0x10; //FIFO IRQ threshold set to 50%
 8003f72:	2310      	movs	r3, #16
 8003f74:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_FIFO_TH, data);
 8003f76:	7bfb      	ldrb	r3, [r7, #15]
 8003f78:	461a      	mov	r2, r3
 8003f7a:	212e      	movs	r1, #46	; 0x2e
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7ff feff 	bl	8003d80 <_ZN11MC3479Class17SPI_writeRegisterEhh>
		// Register 0x30 (FIFO Control 2, Sample Rate 2)
		// Controls burst mode
		// TODO: Do we need burst read with SPI??

		// Register 0x31 (Communication Control)
		data = 0xFF & 0x00; //0x14 interrupts are cleared simultaneously, 4bit SPI, default Interrupt pins
 8003f82:	2300      	movs	r3, #0
 8003f84:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_COMM_CTRL, data);
 8003f86:	7bfb      	ldrb	r3, [r7, #15]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	2131      	movs	r1, #49	; 0x31
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f7ff fef7 	bl	8003d80 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x33 (GPIO Control)
		data = 0xFF & GPIO1_INTN1_IPP & GPIO2_INTN2_IPP; // interrupt pins are push-pull, active low
 8003f92:	2300      	movs	r3, #0
 8003f94:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_GPIO_CTRL, data);
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	2133      	movs	r1, #51	; 0x33
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7ff feef 	bl	8003d80 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x40 (Tilt/Flip threshold LSB)
		data = 0xFF & 0x0F; // 15/255 Tilt/Flip Threshold LSB
 8003fa2:	230f      	movs	r3, #15
 8003fa4:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_TF_THRESH_LSB, data);
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	2140      	movs	r1, #64	; 0x40
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7ff fee7 	bl	8003d80 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x41 (Tilt/Flip threshold MSB)
		data = 0xFF & 0x00; // 0/255 Tilt/Flip Threshold MSB
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_TF_THRESH_MSB, data);
 8003fb6:	7bfb      	ldrb	r3, [r7, #15]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	2141      	movs	r1, #65	; 0x41
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f7ff fedf 	bl	8003d80 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x42 (Tilt/Flip De-bounce)
		data = 0xFF & 0x0F; // Tilt/Flip de-bounce duration to 15/255 before triggering IRQ
 8003fc2:	230f      	movs	r3, #15
 8003fc4:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_TF_DB, data);
 8003fc6:	7bfb      	ldrb	r3, [r7, #15]
 8003fc8:	461a      	mov	r2, r3
 8003fca:	2142      	movs	r1, #66	; 0x42
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7ff fed7 	bl	8003d80 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x43 (AnyMotion Threshold LSB)
		data = 0xFF & 0x0F; // 15/255 AnyMotionThreshold LSB
 8003fd2:	230f      	movs	r3, #15
 8003fd4:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_AM_THRESH_LSB, data);
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	2143      	movs	r1, #67	; 0x43
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f7ff fecf 	bl	8003d80 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x44 (AnyMotion Threshold MSB)
		data = 0xFF & 0x00; // 0/255 AnyMotionThreshold MSB
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_AM_THRESH_MSB, data);
 8003fe6:	7bfb      	ldrb	r3, [r7, #15]
 8003fe8:	461a      	mov	r2, r3
 8003fea:	2144      	movs	r1, #68	; 0x44
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7ff fec7 	bl	8003d80 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x45 (AnyMotion De-bounce)
		data = 0xFF & 0x0F; // AnyMotion de-bounce duration to 15/255 before triggering IRQ
 8003ff2:	230f      	movs	r3, #15
 8003ff4:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_AM_DB, data);
 8003ff6:	7bfb      	ldrb	r3, [r7, #15]
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	2145      	movs	r1, #69	; 0x45
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f7ff febf 	bl	8003d80 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x46 (Shake Threshold LSB)
		data = 0xFF & 0x0F; // 15/255 Shake Threshold LSB
 8004002:	230f      	movs	r3, #15
 8004004:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_SHK_THRESH_LSB, data);
 8004006:	7bfb      	ldrb	r3, [r7, #15]
 8004008:	461a      	mov	r2, r3
 800400a:	2146      	movs	r1, #70	; 0x46
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7ff feb7 	bl	8003d80 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x47 (Shake Threshold MSB)
		data = 0xFF & 0x00; // 0/255 Shake Threshold MSB
 8004012:	2300      	movs	r3, #0
 8004014:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_SHK_THRESH_MSB, data);
 8004016:	7bfb      	ldrb	r3, [r7, #15]
 8004018:	461a      	mov	r2, r3
 800401a:	2147      	movs	r1, #71	; 0x47
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f7ff feaf 	bl	8003d80 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x48 (Peak-to-Peak Duration LSB)
		data = 0xFF & 0x00; // Minimum duration to trigger a shake interrupt - unused???
 8004022:	2300      	movs	r3, #0
 8004024:	73fb      	strb	r3, [r7, #15]
		//TODO: are we using p2p or shake counter thresholds for interrupts??
		MC3479Class::SPI_writeRegister(MC3479_PK_P2P_DUR_THRESH_LSB, data);
 8004026:	7bfb      	ldrb	r3, [r7, #15]
 8004028:	461a      	mov	r2, r3
 800402a:	2148      	movs	r1, #72	; 0x48
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7ff fea7 	bl	8003d80 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x49 (Shake/Peak-to-Peak Duration MSB)
		data = 0xFF & 0x00; // Minimum duration to trigger a shake interrupt - unused???
 8004032:	2300      	movs	r3, #0
 8004034:	73fb      	strb	r3, [r7, #15]
		//TODO: are we using p2p or shake counter thresholds for interrupts??
		MC3479Class::SPI_writeRegister(MC3479_PK_P2P_DUR_THRESH_MSB, data);
 8004036:	7bfb      	ldrb	r3, [r7, #15]
 8004038:	461a      	mov	r2, r3
 800403a:	2149      	movs	r1, #73	; 0x49
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f7ff fe9f 	bl	8003d80 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x4A (Timer control)
		data = 0xFF & 0x00; //Tilt-35 latch disabled,tilt-35 angle detection duration = 1.6s (default)
 8004042:	2300      	movs	r3, #0
 8004044:	73fb      	strb	r3, [r7, #15]
		//TODO: if Tilt35 duration is too large for our control system, can we ignore configuration?
		MC3479Class::SPI_writeRegister(MC3479_TIMER_CTRL, data);
 8004046:	7bfb      	ldrb	r3, [r7, #15]
 8004048:	461a      	mov	r2, r3
 800404a:	214a      	movs	r1, #74	; 0x4a
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7ff fe97 	bl	8003d80 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x4B (Read Count Register)


	}
	return;
 8004052:	bf00      	nop
 8004054:	bf00      	nop
}
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <__libc_init_array>:
 800405c:	b570      	push	{r4, r5, r6, lr}
 800405e:	2600      	movs	r6, #0
 8004060:	4d0c      	ldr	r5, [pc, #48]	; (8004094 <__libc_init_array+0x38>)
 8004062:	4c0d      	ldr	r4, [pc, #52]	; (8004098 <__libc_init_array+0x3c>)
 8004064:	1b64      	subs	r4, r4, r5
 8004066:	10a4      	asrs	r4, r4, #2
 8004068:	42a6      	cmp	r6, r4
 800406a:	d109      	bne.n	8004080 <__libc_init_array+0x24>
 800406c:	f000 f822 	bl	80040b4 <_init>
 8004070:	2600      	movs	r6, #0
 8004072:	4d0a      	ldr	r5, [pc, #40]	; (800409c <__libc_init_array+0x40>)
 8004074:	4c0a      	ldr	r4, [pc, #40]	; (80040a0 <__libc_init_array+0x44>)
 8004076:	1b64      	subs	r4, r4, r5
 8004078:	10a4      	asrs	r4, r4, #2
 800407a:	42a6      	cmp	r6, r4
 800407c:	d105      	bne.n	800408a <__libc_init_array+0x2e>
 800407e:	bd70      	pop	{r4, r5, r6, pc}
 8004080:	f855 3b04 	ldr.w	r3, [r5], #4
 8004084:	4798      	blx	r3
 8004086:	3601      	adds	r6, #1
 8004088:	e7ee      	b.n	8004068 <__libc_init_array+0xc>
 800408a:	f855 3b04 	ldr.w	r3, [r5], #4
 800408e:	4798      	blx	r3
 8004090:	3601      	adds	r6, #1
 8004092:	e7f2      	b.n	800407a <__libc_init_array+0x1e>
 8004094:	080040f4 	.word	0x080040f4
 8004098:	080040f4 	.word	0x080040f4
 800409c:	080040f4 	.word	0x080040f4
 80040a0:	080040f8 	.word	0x080040f8

080040a4 <memset>:
 80040a4:	4603      	mov	r3, r0
 80040a6:	4402      	add	r2, r0
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d100      	bne.n	80040ae <memset+0xa>
 80040ac:	4770      	bx	lr
 80040ae:	f803 1b01 	strb.w	r1, [r3], #1
 80040b2:	e7f9      	b.n	80040a8 <memset+0x4>

080040b4 <_init>:
 80040b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b6:	bf00      	nop
 80040b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ba:	bc08      	pop	{r3}
 80040bc:	469e      	mov	lr, r3
 80040be:	4770      	bx	lr

080040c0 <_fini>:
 80040c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040c2:	bf00      	nop
 80040c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040c6:	bc08      	pop	{r3}
 80040c8:	469e      	mov	lr, r3
 80040ca:	4770      	bx	lr


Active Stabalizing Mug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069e0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08006af0  08006af0  00016af0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c58  08006c58  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006c58  08006c58  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c58  08006c58  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08006c58  08006c58  00016c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08006c64  08006c64  00016c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  20000070  08006cdc  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  08006cdc  000203d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae0a  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000361e  00000000  00000000  0003aea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  0003e4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001210  00000000  00000000  0003f7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d405  00000000  00000000  00040a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e24  00000000  00000000  0005de05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bd50  00000000  00000000  00071c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010d979  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058bc  00000000  00000000  0010d9cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08006ad8 	.word	0x08006ad8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08006ad8 	.word	0x08006ad8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <_ZN13AS5048A_ClassC1Ev>:
//#define AS5048A_R_MAG 	(uint16_t) 0x7FFE
//#define AS5048A_R_ERROR	(uint16_t) 0x8001
#define AS5048A_SPI_TIMEOUT 10 //ms


class AS5048A_Class{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2200      	movs	r2, #0
 8000a98:	731a      	strb	r2, [r3, #12]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	735a      	strb	r2, [r3, #13]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a08      	ldr	r2, [pc, #32]	; (8000ac4 <_ZN13AS5048A_ClassC1Ev+0x38>)
 8000aa4:	8812      	ldrh	r2, [r2, #0]
 8000aa6:	81da      	strh	r2, [r3, #14]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a07      	ldr	r2, [pc, #28]	; (8000ac8 <_ZN13AS5048A_ClassC1Ev+0x3c>)
 8000aac:	8812      	ldrh	r2, [r2, #0]
 8000aae:	821a      	strh	r2, [r3, #16]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a06      	ldr	r2, [pc, #24]	; (8000acc <_ZN13AS5048A_ClassC1Ev+0x40>)
 8000ab4:	8812      	ldrh	r2, [r2, #0]
 8000ab6:	825a      	strh	r2, [r3, #18]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4618      	mov	r0, r3
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr
 8000ac4:	08006af0 	.word	0x08006af0
 8000ac8:	08006af4 	.word	0x08006af4
 8000acc:	08006af8 	.word	0x08006af8

08000ad0 <_ZN13AS5048A_Class8SPI_InitEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:

#include "AS5048A.h"

AS5048A_Class AS5048A;

bool AS5048A_Class::SPI_Init(SPI_HandleTypeDef* spi, GPIO_TypeDef* csn_gpio,uint16_t csn_pin){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
 8000adc:	807b      	strh	r3, [r7, #2]
	this->_SPI2 = spi;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	68ba      	ldr	r2, [r7, #8]
 8000ae2:	601a      	str	r2, [r3, #0]
	this->_CSN_GPIO = csn_gpio;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	605a      	str	r2, [r3, #4]
	this->_CSN_PIN = csn_pin;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	887a      	ldrh	r2, [r7, #2]
 8000aee:	811a      	strh	r2, [r3, #8]
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_SET);
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	6858      	ldr	r0, [r3, #4]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	891b      	ldrh	r3, [r3, #8]
 8000af8:	2201      	movs	r2, #1
 8000afa:	4619      	mov	r1, r3
 8000afc:	f002 ff41 	bl	8003982 <HAL_GPIO_WritePin>
	return 1;
 8000b00:	2301      	movs	r3, #1
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <_Z41__static_initialization_and_destruction_0ii>:
uint16_t AS5048A_Class::readError(){
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_RESET);
	HAL_SPI_Transmit(this->_SPI2, &this->ERROR[0], sizeof(this->ERROR), AS5048A_SPI_TIMEOUT);
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_SET);
	return AS5048A.Transcieve_Nop() & 0x3FFF; //removes error/parity
}
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d107      	bne.n	8000b2c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d102      	bne.n	8000b2c <_Z41__static_initialization_and_destruction_0ii+0x20>
AS5048A_Class AS5048A;
 8000b26:	4803      	ldr	r0, [pc, #12]	; (8000b34 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000b28:	f7ff ffb0 	bl	8000a8c <_ZN13AS5048A_ClassC1Ev>
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	2000008c 	.word	0x2000008c

08000b38 <_GLOBAL__sub_I_AS5048A>:
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b40:	2001      	movs	r0, #1
 8000b42:	f7ff ffe3 	bl	8000b0c <_Z41__static_initialization_and_destruction_0ii>
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	4618      	mov	r0, r3
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr

08000b5e <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8000b5e:	b480      	push	{r7}
 8000b60:	b083      	sub	sp, #12
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b6c:	d205      	bcs.n	8000b7a <_ZSt16__deque_buf_sizej+0x1c>
 8000b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b78:	e000      	b.n	8000b7c <_ZSt16__deque_buf_sizej+0x1e>
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr

08000b86 <_ZNSt5queueIsSt5dequeIsSaIsEEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f000 f8e6 	bl	8000d62 <_ZNSt5dequeIsSaIsEED1Ev>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <_ZN12ControlClassC1Ev>:
#include <queue>

using namespace std;


class ControlClass{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	220a      	movs	r2, #10
 8000bac:	701a      	strb	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	805a      	strh	r2, [r3, #2]
 8000bb4:	6879      	ldr	r1, [r7, #4]
 8000bb6:	a310      	add	r3, pc, #64	; (adr r3, 8000bf8 <_ZN12ControlClassC1Ev+0x58>)
 8000bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bbc:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3310      	adds	r3, #16
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3324      	adds	r3, #36	; 0x24
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 f8b0 	bl	8000d3a <_ZNSt5queueIsSt5dequeIsSaIsEEEC1IS2_vEEv>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a08      	ldr	r2, [pc, #32]	; (8000c00 <_ZN12ControlClassC1Ev+0x60>)
 8000bde:	334c      	adds	r3, #76	; 0x4c
 8000be0:	4611      	mov	r1, r2
 8000be2:	22b4      	movs	r2, #180	; 0xb4
 8000be4:	4618      	mov	r0, r3
 8000be6:	f005 fe09 	bl	80067fc <memcpy>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4618      	mov	r0, r3
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	f3af 8000 	nop.w
 8000bf8:	b05cc3e8 	.word	0xb05cc3e8
 8000bfc:	404ca5dd 	.word	0x404ca5dd
 8000c00:	08006afc 	.word	0x08006afc

08000c04 <_ZN12ControlClass11lookupAngleEss>:
#include "controlSystem.h"

ControlClass ControlSystem;

int16_t ControlClass::lookupAngle(int16_t z_acc, int16_t axis_acc)
{
 8000c04:	b5b0      	push	{r4, r5, r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	807b      	strh	r3, [r7, #2]
 8000c10:	4613      	mov	r3, r2
 8000c12:	803b      	strh	r3, [r7, #0]


	// Check for divide by 0 at +/- 90 degrees
	if (z_acc == 0){
 8000c14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d108      	bne.n	8000c2e <_ZN12ControlClass11lookupAngleEss+0x2a>
		return (axis_acc < 0) ? (int16_t) -90 : (int16_t) 90;
 8000c1c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	da02      	bge.n	8000c2a <_ZN12ControlClass11lookupAngleEss+0x26>
 8000c24:	f06f 0359 	mvn.w	r3, #89	; 0x59
 8000c28:	e028      	b.n	8000c7c <_ZN12ControlClass11lookupAngleEss+0x78>
 8000c2a:	235a      	movs	r3, #90	; 0x5a
 8000c2c:	e026      	b.n	8000c7c <_ZN12ControlClass11lookupAngleEss+0x78>
	}
	// Mug needs to remain between -90 and +90 degrees otherwise this method needs to be updated.
	// It can be argued that we have massively failed if the mug reaches +/- 90 degrees tho, haha.
	double theta = atan((double)axis_acc/(double)z_acc)*this->RADS_TO_DEGREES;
 8000c2e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fbde 	bl	80003f4 <__aeabi_i2d>
 8000c38:	4604      	mov	r4, r0
 8000c3a:	460d      	mov	r5, r1
 8000c3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fbd7 	bl	80003f4 <__aeabi_i2d>
 8000c46:	4602      	mov	r2, r0
 8000c48:	460b      	mov	r3, r1
 8000c4a:	4620      	mov	r0, r4
 8000c4c:	4629      	mov	r1, r5
 8000c4e:	f7ff fd65 	bl	800071c <__aeabi_ddiv>
 8000c52:	4602      	mov	r2, r0
 8000c54:	460b      	mov	r3, r1
 8000c56:	4610      	mov	r0, r2
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f005 fc01 	bl	8006460 <atan>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000c64:	f7ff fc30 	bl	80004c8 <__aeabi_dmul>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// Return integer value of theta (rounded closer to 0)
	return (int16_t)theta;
 8000c70:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c74:	f7ff fec2 	bl	80009fc <__aeabi_d2iz>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	b21b      	sxth	r3, r3

}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bdb0      	pop	{r4, r5, r7, pc}

08000c84 <_ZN12ControlClass14normalizeThetaEhhhh>:


int16_t ControlClass::normalizeTheta(uint8_t data0, uint8_t data1, uint8_t z0, uint8_t z1)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	4608      	mov	r0, r1
 8000c8e:	4611      	mov	r1, r2
 8000c90:	461a      	mov	r2, r3
 8000c92:	4603      	mov	r3, r0
 8000c94:	70fb      	strb	r3, [r7, #3]
 8000c96:	460b      	mov	r3, r1
 8000c98:	70bb      	strb	r3, [r7, #2]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	707b      	strb	r3, [r7, #1]
	int16_t z_acc = (z1 << 8) | (z0 & 0x00FF);
 8000c9e:	7e3b      	ldrb	r3, [r7, #24]
 8000ca0:	021b      	lsls	r3, r3, #8
 8000ca2:	b21a      	sxth	r2, r3
 8000ca4:	787b      	ldrb	r3, [r7, #1]
 8000ca6:	b21b      	sxth	r3, r3
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	81fb      	strh	r3, [r7, #14]
	int16_t axis_acc = (data1 << 8) | (data0 & 0x00FF);
 8000cac:	78bb      	ldrb	r3, [r7, #2]
 8000cae:	021b      	lsls	r3, r3, #8
 8000cb0:	b21a      	sxth	r2, r3
 8000cb2:	78fb      	ldrb	r3, [r7, #3]
 8000cb4:	b21b      	sxth	r3, r3
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	81bb      	strh	r3, [r7, #12]
	//TODO: need to split this into x and y components and update x and y queues seperately. Also calculate current average and return.


	return lookupAngle(z_acc, axis_acc);
 8000cba:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000cbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f7ff ff9d 	bl	8000c04 <_ZN12ControlClass11lookupAngleEss>
 8000cca:	4603      	mov	r3, r0
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <_ZN12ControlClass17initControlSystemEsa>:

// TODO: Do we need to keep nominal/allowable angles here? should this just be an initialization function?
bool ControlClass::initControlSystem(int16_t x_nominal, int8_t x_allowable)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	807b      	strh	r3, [r7, #2]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	707b      	strb	r3, [r7, #1]

	//TODO: implement x and y angle updates/averages
	for (int i = 0; i < 10; i++){
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	2b09      	cmp	r3, #9
 8000cec:	dc0d      	bgt.n	8000d0a <_ZN12ControlClass17initControlSystemEsa+0x36>
		this->x_previousAngles.push(0);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3324      	adds	r3, #36	; 0x24
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	817a      	strh	r2, [r7, #10]
 8000cf6:	f107 020a 	add.w	r2, r7, #10
 8000cfa:	4611      	mov	r1, r2
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 f855 	bl	8000dac <_ZNSt5queueIsSt5dequeIsSaIsEEE4pushEOs>
	for (int i = 0; i < 10; i++){
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	3301      	adds	r3, #1
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	e7ee      	b.n	8000ce8 <_ZN12ControlClass17initControlSystemEsa+0x14>
//		this->y_previousAngles.push(0);
	}


	this->x_nominalAngle = x_nominal;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	887a      	ldrh	r2, [r7, #2]
 8000d0e:	805a      	strh	r2, [r3, #2]
	this->x_allowableAngle = x_allowable;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	787a      	ldrb	r2, [r7, #1]
 8000d14:	701a      	strb	r2, [r3, #0]

	return 1;
 8000d16:	2301      	movs	r3, #1
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <_ZNSt5dequeIsSaIsEEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f85c 	bl	8000de8 <_ZNSt11_Deque_baseIsSaIsEEC1Ev>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <_ZNSt5queueIsSt5dequeIsSaIsEEEC1IS2_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
	: c() { }
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4618      	mov	r0, r3
 8000d46:	2328      	movs	r3, #40	; 0x28
 8000d48:	461a      	mov	r2, r3
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	f005 fd7e 	bl	800684c <memset>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff ffe4 	bl	8000d20 <_ZNSt5dequeIsSaIsEEC1Ev>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <_ZNSt5dequeIsSaIsEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b08a      	sub	sp, #40	; 0x28
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8000d6a:	f107 0308 	add.w	r3, r7, #8
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 f86c 	bl	8000e4e <_ZNSt5dequeIsSaIsEE5beginEv>
 8000d76:	f107 0318 	add.w	r3, r7, #24
 8000d7a:	6879      	ldr	r1, [r7, #4]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 f875 	bl	8000e6c <_ZNSt5dequeIsSaIsEE3endEv>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 f880 	bl	8000e8a <_ZNSt11_Deque_baseIsSaIsEE19_M_get_Tp_allocatorEv>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	f107 0218 	add.w	r2, r7, #24
 8000d90:	f107 0108 	add.w	r1, r7, #8
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f000 f89d 	bl	8000ed4 <_ZNSt5dequeIsSaIsEE15_M_destroy_dataESt15_Deque_iteratorIsRsPsES5_RKS0_>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 f834 	bl	8000e0a <_ZNSt11_Deque_baseIsSaIsEED1Ev>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4618      	mov	r0, r3
 8000da6:	3728      	adds	r7, #40	; 0x28
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <_ZNSt5queueIsSt5dequeIsSaIsEEE4pushEOs>:
      push(const value_type& __x)
      { c.push_back(__x); }

#if __cplusplus >= 201103L
      void
      push(value_type&& __x)
 8000dac:	b590      	push	{r4, r7, lr}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
      { c.push_back(std::move(__x)); }
 8000db6:	687c      	ldr	r4, [r7, #4]
 8000db8:	6838      	ldr	r0, [r7, #0]
 8000dba:	f000 f897 	bl	8000eec <_ZSt4moveIRsEONSt16remove_referenceIT_E4typeEOS2_>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4620      	mov	r0, r4
 8000dc4:	f000 f89c 	bl	8000f00 <_ZNSt5dequeIsSaIsEE9push_backEOs>
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd90      	pop	{r4, r7, pc}

08000dd0 <_ZNSt11_Deque_baseIsSaIsEE11_Deque_implD1Ev>:
      struct _Deque_impl
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f000 f8b2 	bl	8000f42 <_ZNSaIsED1Ev>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4618      	mov	r0, r3
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <_ZNSt11_Deque_baseIsSaIsEEC1Ev>:
      _Deque_base()
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f895 	bl	8000f22 <_ZNSt11_Deque_baseIsSaIsEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8000df8:	2100      	movs	r1, #0
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f000 f8ad 	bl	8000f5a <_ZNSt11_Deque_baseIsSaIsEE17_M_initialize_mapEj>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <_ZNSt11_Deque_baseIsSaIsEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d010      	beq.n	8000e3c <_ZNSt11_Deque_baseIsSaIsEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8000e22:	3304      	adds	r3, #4
 8000e24:	461a      	mov	r2, r3
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f000 f8fa 	bl	8001020 <_ZNSt11_Deque_baseIsSaIsEE16_M_destroy_nodesEPPsS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6819      	ldr	r1, [r3, #0]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	461a      	mov	r2, r3
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f000 f90c 	bl	8001054 <_ZNSt11_Deque_baseIsSaIsEE17_M_deallocate_mapEPPsj>
    }
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff ffc6 	bl	8000dd0 <_ZNSt11_Deque_baseIsSaIsEE11_Deque_implD1Ev>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <_ZNSt5dequeIsSaIsEE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
 8000e56:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	3308      	adds	r3, #8
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f000 f81d 	bl	8000e9e <_ZNSt15_Deque_iteratorIsRsPsEC1ERKS2_>
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <_ZNSt5dequeIsSaIsEE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	3318      	adds	r3, #24
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f000 f80e 	bl	8000e9e <_ZNSt15_Deque_iteratorIsRsPsEC1ERKS2_>
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <_ZNSt11_Deque_baseIsSaIsEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4618      	mov	r0, r3
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr

08000e9e <_ZNSt15_Deque_iteratorIsRsPsEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8000e9e:	b480      	push	{r7}
 8000ea0:	b083      	sub	sp, #12
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
 8000ea6:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	689a      	ldr	r2, [r3, #8]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	68da      	ldr	r2, [r3, #12]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	60da      	str	r2, [r3, #12]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr

08000ed4 <_ZNSt5dequeIsSaIsEE15_M_destroy_dataESt15_Deque_iteratorIsRsPsES5_RKS0_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 8000ed4:	b480      	push	{r7}
 8000ed6:	b08d      	sub	sp, #52	; 0x34
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
 8000ee0:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 8000ee2:	bf00      	nop
 8000ee4:	3734      	adds	r7, #52	; 0x34
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr

08000eec <_ZSt4moveIRsEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr

08000f00 <_ZNSt5dequeIsSaIsEE9push_backEOs>:
      push_back(value_type&& __x)
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8000f0a:	6838      	ldr	r0, [r7, #0]
 8000f0c:	f7ff ffee 	bl	8000eec <_ZSt4moveIRsEONSt16remove_referenceIT_E4typeEOS2_>
 8000f10:	4603      	mov	r3, r0
 8000f12:	4619      	mov	r1, r3
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f000 f8b9 	bl	800108c <_ZNSt5dequeIsSaIsEE12emplace_backIJsEEEvDpOT_>
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <_ZNSt11_Deque_baseIsSaIsEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f000 f8d8 	bl	80010e0 <_ZNSaIsEC1Ev>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f8e0 	bl	80010f8 <_ZNSt11_Deque_baseIsSaIsEE16_Deque_impl_dataC1Ev>
	{ }
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <_ZNSaIsED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f000 f8ed 	bl	800112a <_ZN9__gnu_cxx13new_allocatorIsED1Ev>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <_ZNSt11_Deque_baseIsSaIsEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8000f5a:	b590      	push	{r4, r7, lr}
 8000f5c:	b089      	sub	sp, #36	; 0x24
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8000f64:	2002      	movs	r0, #2
 8000f66:	f7ff fdfa 	bl	8000b5e <_ZSt16__deque_buf_sizej>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f72:	3301      	adds	r3, #1
 8000f74:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8000f76:	2308      	movs	r3, #8
 8000f78:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3302      	adds	r3, #2
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	f107 0210 	add.w	r2, r7, #16
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	4611      	mov	r1, r2
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f8d7 	bl	800113e <_ZSt3maxIjERKT_S2_S2_>
 8000f90:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 f8e0 	bl	8001164 <_ZNSt11_Deque_baseIsSaIsEE15_M_allocate_mapEj>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6859      	ldr	r1, [r3, #4]
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	1acb      	subs	r3, r1, r3
 8000fb6:	085b      	lsrs	r3, r3, #1
 8000fb8:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8000fba:	4413      	add	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	69b9      	ldr	r1, [r7, #24]
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f000 f8e6 	bl	800119e <_ZNSt11_Deque_baseIsSaIsEE15_M_create_nodesEPPsS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3308      	adds	r3, #8
 8000fd6:	69b9      	ldr	r1, [r7, #24]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 f8fa 	bl	80011d2 <_ZNSt15_Deque_iteratorIsRsPsE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f103 0218 	add.w	r2, r3, #24
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	3b04      	subs	r3, #4
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4610      	mov	r0, r2
 8000fec:	f000 f8f1 	bl	80011d2 <_ZNSt15_Deque_iteratorIsRsPsE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68da      	ldr	r2, [r3, #12]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8000ffc:	2002      	movs	r0, #2
 8000ffe:	f7ff fdae 	bl	8000b5e <_ZSt16__deque_buf_sizej>
 8001002:	4602      	mov	r2, r0
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	fbb3 f1f2 	udiv	r1, r3, r2
 800100a:	fb01 f202 	mul.w	r2, r1, r2
 800100e:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	619a      	str	r2, [r3, #24]
    }
 8001018:	bf00      	nop
 800101a:	3724      	adds	r7, #36	; 0x24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd90      	pop	{r4, r7, pc}

08001020 <_ZNSt11_Deque_baseIsSaIsEE16_M_destroy_nodesEPPsS3_>:
    _Deque_base<_Tp, _Alloc>::
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	697a      	ldr	r2, [r7, #20]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	429a      	cmp	r2, r3
 8001036:	d209      	bcs.n	800104c <_ZNSt11_Deque_baseIsSaIsEE16_M_destroy_nodesEPPsS3_+0x2c>
	_M_deallocate_node(*__n);
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4619      	mov	r1, r3
 800103e:	68f8      	ldr	r0, [r7, #12]
 8001040:	f000 f8e0 	bl	8001204 <_ZNSt11_Deque_baseIsSaIsEE18_M_deallocate_nodeEPs>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	3304      	adds	r3, #4
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	e7f1      	b.n	8001030 <_ZNSt11_Deque_baseIsSaIsEE16_M_destroy_nodesEPPsS3_+0x10>
    }
 800104c:	bf00      	nop
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <_ZNSt11_Deque_baseIsSaIsEE17_M_deallocate_mapEPPsj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	68f9      	ldr	r1, [r7, #12]
 8001066:	4618      	mov	r0, r3
 8001068:	f000 f8df 	bl	800122a <_ZNKSt11_Deque_baseIsSaIsEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	68b9      	ldr	r1, [r7, #8]
 8001074:	4618      	mov	r0, r3
 8001076:	f000 f8f5 	bl	8001264 <_ZNSt16allocator_traitsISaIPsEE10deallocateERS1_PS0_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	4618      	mov	r0, r3
 8001080:	f000 f8e4 	bl	800124c <_ZNSaIPsED1Ev>
      }
 8001084:	bf00      	nop
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <_ZNSt5dequeIsSaIsEE12emplace_backIJsEEEvDpOT_>:
#if __cplusplus > 201402L
      typename deque<_Tp, _Alloc>::reference
#else
      void
#endif
      deque<_Tp, _Alloc>::
 800108c:	b5b0      	push	{r4, r5, r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish._M_cur
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6a1b      	ldr	r3, [r3, #32]
 800109e:	3b02      	subs	r3, #2
	if (this->_M_impl._M_finish._M_cur
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d011      	beq.n	80010c8 <_ZNSt5dequeIsSaIsEE12emplace_backIJsEEEvDpOT_+0x3c>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 80010a4:	687c      	ldr	r4, [r7, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	699d      	ldr	r5, [r3, #24]
 80010aa:	6838      	ldr	r0, [r7, #0]
 80010ac:	f000 f8e9 	bl	8001282 <_ZSt7forwardIsEOT_RNSt16remove_referenceIS0_E4typeE>
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	4629      	mov	r1, r5
 80010b6:	4620      	mov	r0, r4
 80010b8:	f000 f8ed 	bl	8001296 <_ZNSt16allocator_traitsISaIsEE9constructIsJsEEEvRS0_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish._M_cur;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	1c9a      	adds	r2, r3, #2
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	619a      	str	r2, [r3, #24]
	else
	  _M_push_back_aux(std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 80010c6:	e007      	b.n	80010d8 <_ZNSt5dequeIsSaIsEE12emplace_backIJsEEEvDpOT_+0x4c>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 80010c8:	6838      	ldr	r0, [r7, #0]
 80010ca:	f000 f8da 	bl	8001282 <_ZSt7forwardIsEOT_RNSt16remove_referenceIS0_E4typeE>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4619      	mov	r1, r3
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f000 f8f2 	bl	80012bc <_ZNSt5dequeIsSaIsEE16_M_push_back_auxIJsEEEvDpOT_>
      }
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bdb0      	pop	{r4, r5, r7, pc}

080010e0 <_ZNSaIsEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f000 f92b 	bl	8001344 <_ZN9__gnu_cxx13new_allocatorIsEC1Ev>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4618      	mov	r0, r3
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <_ZNSt11_Deque_baseIsSaIsEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3308      	adds	r3, #8
 8001110:	4618      	mov	r0, r3
 8001112:	f000 f921 	bl	8001358 <_ZNSt15_Deque_iteratorIsRsPsEC1Ev>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3318      	adds	r3, #24
 800111a:	4618      	mov	r0, r3
 800111c:	f000 f91c 	bl	8001358 <_ZNSt15_Deque_iteratorIsRsPsEC1Ev>
	{ }
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <_ZN9__gnu_cxx13new_allocatorIsED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4618      	mov	r0, r3
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr

0800113e <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
 8001146:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	429a      	cmp	r2, r3
 8001152:	d201      	bcs.n	8001158 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	e000      	b.n	800115a <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8001158:	687b      	ldr	r3, [r7, #4]
    }
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr

08001164 <_ZNSt11_Deque_baseIsSaIsEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	4618      	mov	r0, r3
 8001176:	f000 f858 	bl	800122a <_ZNKSt11_Deque_baseIsSaIsEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	6839      	ldr	r1, [r7, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f000 f8ff 	bl	8001384 <_ZNSt16allocator_traitsISaIPsEE8allocateERS1_j>
 8001186:	4604      	mov	r4, r0
 8001188:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800118a:	f107 030c 	add.w	r3, r7, #12
 800118e:	4618      	mov	r0, r3
 8001190:	f000 f85c 	bl	800124c <_ZNSaIPsED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8001194:	4623      	mov	r3, r4
      }
 8001196:	4618      	mov	r0, r3
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	bd90      	pop	{r4, r7, pc}

0800119e <_ZNSt11_Deque_baseIsSaIsEE15_M_create_nodesEPPsS3_>:
    _Deque_base<_Tp, _Alloc>::
 800119e:	b580      	push	{r7, lr}
 80011a0:	b086      	sub	sp, #24
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	60f8      	str	r0, [r7, #12]
 80011a6:	60b9      	str	r1, [r7, #8]
 80011a8:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	617b      	str	r3, [r7, #20]
 80011ae:	697a      	ldr	r2, [r7, #20]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d209      	bcs.n	80011ca <_ZNSt11_Deque_baseIsSaIsEE15_M_create_nodesEPPsS3_+0x2c>
	    *__cur = this->_M_allocate_node();
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	f000 f8f3 	bl	80013a2 <_ZNSt11_Deque_baseIsSaIsEE16_M_allocate_nodeEv>
 80011bc:	4602      	mov	r2, r0
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	3304      	adds	r3, #4
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	e7f1      	b.n	80011ae <_ZNSt11_Deque_baseIsSaIsEE15_M_create_nodesEPPsS3_+0x10>
    }
 80011ca:	bf00      	nop
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <_ZNSt15_Deque_iteratorIsRsPsE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 80011d2:	b590      	push	{r4, r7, lr}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685c      	ldr	r4, [r3, #4]
 80011ee:	f000 f8ea 	bl	80013c6 <_ZNSt15_Deque_iteratorIsRsPsE14_S_buffer_sizeEv>
 80011f2:	4603      	mov	r3, r0
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	18e2      	adds	r2, r4, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	609a      	str	r2, [r3, #8]
      }
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	bd90      	pop	{r4, r7, pc}

08001204 <_ZNSt11_Deque_baseIsSaIsEE18_M_deallocate_nodeEPs>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8001204:	b590      	push	{r4, r7, lr}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 800120e:	687c      	ldr	r4, [r7, #4]
 8001210:	2002      	movs	r0, #2
 8001212:	f7ff fca4 	bl	8000b5e <_ZSt16__deque_buf_sizej>
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	6839      	ldr	r1, [r7, #0]
 800121c:	4620      	mov	r0, r4
 800121e:	f000 f8da 	bl	80013d6 <_ZNSt16allocator_traitsISaIsEE10deallocateERS0_Psj>
      }
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	bd90      	pop	{r4, r7, pc}

0800122a <_ZNKSt11_Deque_baseIsSaIsEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8001234:	6838      	ldr	r0, [r7, #0]
 8001236:	f000 f8dd 	bl	80013f4 <_ZNKSt11_Deque_baseIsSaIsEE19_M_get_Tp_allocatorEv>
 800123a:	4603      	mov	r3, r0
 800123c:	4619      	mov	r1, r3
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 f8e2 	bl	8001408 <_ZNSaIPsEC1IsEERKSaIT_E>
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <_ZNSaIPsED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 f8e4 	bl	8001422 <_ZN9__gnu_cxx13new_allocatorIPsED1Ev>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <_ZNSt16allocator_traitsISaIPsEE10deallocateERS1_PS0_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	68b9      	ldr	r1, [r7, #8]
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	f000 f8de 	bl	8001436 <_ZN9__gnu_cxx13new_allocatorIPsE10deallocateEPS1_j>
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <_ZSt7forwardIsEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4618      	mov	r0, r3
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr

08001296 <_ZNSt16allocator_traitsISaIsEE9constructIsJsEEEvRS0_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8001296:	b580      	push	{r7, lr}
 8001298:	b084      	sub	sp, #16
 800129a:	af00      	add	r7, sp, #0
 800129c:	60f8      	str	r0, [r7, #12]
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	607a      	str	r2, [r7, #4]
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffed 	bl	8001282 <_ZSt7forwardIsEOT_RNSt16remove_referenceIS0_E4typeE>
 80012a8:	4603      	mov	r3, r0
 80012aa:	461a      	mov	r2, r3
 80012ac:	68b9      	ldr	r1, [r7, #8]
 80012ae:	68f8      	ldr	r0, [r7, #12]
 80012b0:	f000 f8d1 	bl	8001456 <_ZN9__gnu_cxx13new_allocatorIsE9constructIsJsEEEvPT_DpOT0_>
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
 80012b4:	bf00      	nop
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <_ZNSt5dequeIsSaIsEE16_M_push_back_auxIJsEEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 80012bc:	b5b0      	push	{r4, r5, r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f000 f8dd 	bl	8001486 <_ZNKSt5dequeIsSaIsEE4sizeEv>
 80012cc:	4604      	mov	r4, r0
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 f8eb 	bl	80014aa <_ZNKSt5dequeIsSaIsEE8max_sizeEv>
 80012d4:	4603      	mov	r3, r0
 80012d6:	429c      	cmp	r4, r3
 80012d8:	bf0c      	ite	eq
 80012da:	2301      	moveq	r3, #1
 80012dc:	2300      	movne	r3, #0
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d002      	beq.n	80012ea <_ZNSt5dequeIsSaIsEE16_M_push_back_auxIJsEEEvDpOT_+0x2e>
	  __throw_length_error(
 80012e4:	4816      	ldr	r0, [pc, #88]	; (8001340 <_ZNSt5dequeIsSaIsEE16_M_push_back_auxIJsEEEvDpOT_+0x84>)
 80012e6:	f005 f8ab 	bl	8006440 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 80012ea:	2101      	movs	r1, #1
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 f8ed 	bl	80014cc <_ZNSt5dequeIsSaIsEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f8:	1d1c      	adds	r4, r3, #4
 80012fa:	4610      	mov	r0, r2
 80012fc:	f000 f851 	bl	80013a2 <_ZNSt11_Deque_baseIsSaIsEE16_M_allocate_nodeEv>
 8001300:	4603      	mov	r3, r0
 8001302:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 8001304:	687c      	ldr	r4, [r7, #4]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	699d      	ldr	r5, [r3, #24]
 800130a:	6838      	ldr	r0, [r7, #0]
 800130c:	f7ff ffb9 	bl	8001282 <_ZSt7forwardIsEOT_RNSt16remove_referenceIS0_E4typeE>
 8001310:	4603      	mov	r3, r0
 8001312:	461a      	mov	r2, r3
 8001314:	4629      	mov	r1, r5
 8001316:	4620      	mov	r0, r4
 8001318:	f7ff ffbd 	bl	8001296 <_ZNSt16allocator_traitsISaIsEE9constructIsJsEEEvRS0_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f103 0218 	add.w	r2, r3, #24
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001326:	3304      	adds	r3, #4
 8001328:	4619      	mov	r1, r3
 800132a:	4610      	mov	r0, r2
 800132c:	f7ff ff51 	bl	80011d2 <_ZNSt15_Deque_iteratorIsRsPsE11_M_set_nodeEPS1_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69da      	ldr	r2, [r3, #28]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bdb0      	pop	{r4, r5, r7, pc}
 8001340:	08006bb0 	.word	0x08006bb0

08001344 <_ZN9__gnu_cxx13new_allocatorIsEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr

08001358 <_ZNSt15_Deque_iteratorIsRsPsEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr

08001384 <_ZNSt16allocator_traitsISaIPsEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800138e:	2200      	movs	r2, #0
 8001390:	6839      	ldr	r1, [r7, #0]
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 f8b5 	bl	8001502 <_ZN9__gnu_cxx13new_allocatorIPsE8allocateEjPKv>
 8001398:	4603      	mov	r3, r0
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <_ZNSt11_Deque_baseIsSaIsEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 80013a2:	b590      	push	{r4, r7, lr}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 80013aa:	687c      	ldr	r4, [r7, #4]
 80013ac:	2002      	movs	r0, #2
 80013ae:	f7ff fbd6 	bl	8000b5e <_ZSt16__deque_buf_sizej>
 80013b2:	4603      	mov	r3, r0
 80013b4:	4619      	mov	r1, r3
 80013b6:	4620      	mov	r0, r4
 80013b8:	f000 f8c1 	bl	800153e <_ZNSt16allocator_traitsISaIsEE8allocateERS0_j>
 80013bc:	4603      	mov	r3, r0
      }
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd90      	pop	{r4, r7, pc}

080013c6 <_ZNSt15_Deque_iteratorIsRsPsE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80013c6:	b580      	push	{r7, lr}
 80013c8:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80013ca:	2002      	movs	r0, #2
 80013cc:	f7ff fbc7 	bl	8000b5e <_ZSt16__deque_buf_sizej>
 80013d0:	4603      	mov	r3, r0
 80013d2:	4618      	mov	r0, r3
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <_ZNSt16allocator_traitsISaIsEE10deallocateERS0_Psj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b084      	sub	sp, #16
 80013da:	af00      	add	r7, sp, #0
 80013dc:	60f8      	str	r0, [r7, #12]
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	68b9      	ldr	r1, [r7, #8]
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	f000 f8b8 	bl	800155c <_ZN9__gnu_cxx13new_allocatorIsE10deallocateEPsj>
 80013ec:	bf00      	nop
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <_ZNKSt11_Deque_baseIsSaIsEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <_ZNSaIPsEC1IsEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 f8b2 	bl	800157c <_ZN9__gnu_cxx13new_allocatorIPsEC1Ev>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <_ZN9__gnu_cxx13new_allocatorIPsED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4618      	mov	r0, r3
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr

08001436 <_ZN9__gnu_cxx13new_allocatorIPsE10deallocateEPS1_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
 8001436:	b580      	push	{r7, lr}
 8001438:	b084      	sub	sp, #16
 800143a:	af00      	add	r7, sp, #0
 800143c:	60f8      	str	r0, [r7, #12]
 800143e:	60b9      	str	r1, [r7, #8]
 8001440:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4619      	mov	r1, r3
 8001448:	68b8      	ldr	r0, [r7, #8]
 800144a:	f004 ffe3 	bl	8006414 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <_ZN9__gnu_cxx13new_allocatorIsE9constructIsJsEEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8001456:	b590      	push	{r4, r7, lr}
 8001458:	b085      	sub	sp, #20
 800145a:	af00      	add	r7, sp, #0
 800145c:	60f8      	str	r0, [r7, #12]
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff ff0d 	bl	8001282 <_ZSt7forwardIsEOT_RNSt16remove_referenceIS0_E4typeE>
 8001468:	4603      	mov	r3, r0
 800146a:	f9b3 4000 	ldrsh.w	r4, [r3]
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	4619      	mov	r1, r3
 8001472:	2002      	movs	r0, #2
 8001474:	f7ff fb68 	bl	8000b48 <_ZnwjPv>
 8001478:	4603      	mov	r3, r0
 800147a:	4622      	mov	r2, r4
 800147c:	801a      	strh	r2, [r3, #0]
 800147e:	bf00      	nop
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	bd90      	pop	{r4, r7, pc}

08001486 <_ZNKSt5dequeIsSaIsEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f103 0218 	add.w	r2, r3, #24
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3308      	adds	r3, #8
 8001498:	4619      	mov	r1, r3
 800149a:	4610      	mov	r0, r2
 800149c:	f000 f878 	bl	8001590 <_ZStmiRKSt15_Deque_iteratorIsRsPsES4_>
 80014a0:	4603      	mov	r3, r0
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <_ZNKSt5dequeIsSaIsEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff9d 	bl	80013f4 <_ZNKSt11_Deque_baseIsSaIsEE19_M_get_Tp_allocatorEv>
 80014ba:	4603      	mov	r3, r0
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 f88b 	bl	80015d8 <_ZNSt5dequeIsSaIsEE11_S_max_sizeERKS0_>
 80014c2:	4603      	mov	r3, r0
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <_ZNSt5dequeIsSaIsEE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	1c5a      	adds	r2, r3, #1
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	6809      	ldr	r1, [r1, #0]
 80014e6:	1a41      	subs	r1, r0, r1
 80014e8:	1089      	asrs	r1, r1, #2
 80014ea:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d904      	bls.n	80014fa <_ZNSt5dequeIsSaIsEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 80014f0:	2200      	movs	r2, #0
 80014f2:	6839      	ldr	r1, [r7, #0]
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 f889 	bl	800160c <_ZNSt5dequeIsSaIsEE17_M_reallocate_mapEjb>
      }
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <_ZN9__gnu_cxx13new_allocatorIPsE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001502:	b580      	push	{r7, lr}
 8001504:	b084      	sub	sp, #16
 8001506:	af00      	add	r7, sp, #0
 8001508:	60f8      	str	r0, [r7, #12]
 800150a:	60b9      	str	r1, [r7, #8]
 800150c:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f000 f916 	bl	8001740 <_ZNK9__gnu_cxx13new_allocatorIPsE11_M_max_sizeEv>
 8001514:	4602      	mov	r2, r0
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	4293      	cmp	r3, r2
 800151a:	bf8c      	ite	hi
 800151c:	2301      	movhi	r3, #1
 800151e:	2300      	movls	r3, #0
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <_ZN9__gnu_cxx13new_allocatorIPsE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8001526:	f004 ff88 	bl	800643a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4618      	mov	r0, r3
 8001530:	f004 ff72 	bl	8006418 <_Znwj>
 8001534:	4603      	mov	r3, r0
      }
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <_ZNSt16allocator_traitsISaIsEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
 8001546:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001548:	2200      	movs	r2, #0
 800154a:	6839      	ldr	r1, [r7, #0]
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 f902 	bl	8001756 <_ZN9__gnu_cxx13new_allocatorIsE8allocateEjPKv>
 8001552:	4603      	mov	r3, r0
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <_ZN9__gnu_cxx13new_allocatorIsE10deallocateEPsj>:
      deallocate(_Tp* __p, size_type __t)
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	4619      	mov	r1, r3
 800156e:	68b8      	ldr	r0, [r7, #8]
 8001570:	f004 ff50 	bl	8006414 <_ZdlPvj>
      }
 8001574:	bf00      	nop
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <_ZN9__gnu_cxx13new_allocatorIPsEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4618      	mov	r0, r3
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr

08001590 <_ZStmiRKSt15_Deque_iteratorIsRsPsES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 800159a:	f7ff ff14 	bl	80013c6 <_ZNSt15_Deque_iteratorIsRsPsE14_S_buffer_sizeEv>
 800159e:	4603      	mov	r3, r0
 80015a0:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68da      	ldr	r2, [r3, #12]
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	109b      	asrs	r3, r3, #2
 80015ae:	3b01      	subs	r3, #1
 80015b0:	fb01 f303 	mul.w	r3, r1, r3
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6811      	ldr	r1, [r2, #0]
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	6852      	ldr	r2, [r2, #4]
 80015bc:	1a8a      	subs	r2, r1, r2
 80015be:	1052      	asrs	r2, r2, #1
 80015c0:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	6891      	ldr	r1, [r2, #8]
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	6812      	ldr	r2, [r2, #0]
 80015ca:	1a8a      	subs	r2, r1, r2
 80015cc:	1052      	asrs	r2, r2, #1
 80015ce:	4413      	add	r3, r2
      }
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <_ZNSt5dequeIsSaIsEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 80015e0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80015e4:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 f8d3 	bl	8001792 <_ZNSt16allocator_traitsISaIsEE8max_sizeERKS0_>
 80015ec:	4603      	mov	r3, r0
 80015ee:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80015f0:	f107 0208 	add.w	r2, r7, #8
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	4611      	mov	r1, r2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 f8d5 	bl	80017aa <_ZSt3minIjERKT_S2_S2_>
 8001600:	4603      	mov	r3, r0
 8001602:	681b      	ldr	r3, [r3, #0]
      }
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <_ZNSt5dequeIsSaIsEE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 800160c:	b590      	push	{r4, r7, lr}
 800160e:	b08b      	sub	sp, #44	; 0x2c
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	4613      	mov	r3, r2
 8001618:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	109b      	asrs	r3, r3, #2
 8001626:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8001628:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	6a3a      	ldr	r2, [r7, #32]
 800162e:	4413      	add	r3, r2
 8001630:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	429a      	cmp	r2, r3
 800163c:	d92d      	bls.n	800169a <_ZNSt5dequeIsSaIsEE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	1acb      	subs	r3, r1, r3
 800164a:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800164c:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d002      	beq.n	800165a <_ZNSt5dequeIsSaIsEE17_M_reallocate_mapEjb+0x4e>
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	e000      	b.n	800165c <_ZNSt5dequeIsSaIsEE17_M_reallocate_mapEjb+0x50>
 800165a:	2300      	movs	r3, #0
 800165c:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800165e:	4413      	add	r3, r2
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001668:	429a      	cmp	r2, r3
 800166a:	d209      	bcs.n	8001680 <_ZNSt5dequeIsSaIsEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8001674:	3304      	adds	r3, #4
 8001676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001678:	4619      	mov	r1, r3
 800167a:	f000 f8a9 	bl	80017d0 <_ZSt4copyIPPsS1_ET0_T_S3_S2_>
 800167e:	e048      	b.n	8001712 <_ZNSt5dequeIsSaIsEE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8001688:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 800168a:	6a3b      	ldr	r3, [r7, #32]
 800168c:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800168e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001690:	4413      	add	r3, r2
 8001692:	461a      	mov	r2, r3
 8001694:	f000 f8b4 	bl	8001800 <_ZSt13copy_backwardIPPsS1_ET0_T_S3_S2_>
 8001698:	e03b      	b.n	8001712 <_ZNSt5dequeIsSaIsEE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	3304      	adds	r3, #4
 80016a2:	f107 0208 	add.w	r2, r7, #8
 80016a6:	4611      	mov	r1, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fd48 	bl	800113e <_ZSt3maxIjERKT_S2_S2_>
 80016ae:	4603      	mov	r3, r0
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 80016b4:	3302      	adds	r3, #2
 80016b6:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	69b9      	ldr	r1, [r7, #24]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fd51 	bl	8001164 <_ZNSt11_Deque_baseIsSaIsEE15_M_allocate_mapEj>
 80016c2:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	085b      	lsrs	r3, r3, #1
 80016cc:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d002      	beq.n	80016da <_ZNSt5dequeIsSaIsEE17_M_reallocate_mapEjb+0xce>
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	e000      	b.n	80016dc <_ZNSt5dequeIsSaIsEE17_M_reallocate_mapEjb+0xd0>
 80016da:	2300      	movs	r3, #0
 80016dc:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	4413      	add	r3, r2
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80016ec:	3304      	adds	r3, #4
 80016ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f0:	4619      	mov	r1, r3
 80016f2:	f000 f86d 	bl	80017d0 <_ZSt4copyIPPsS1_ET0_T_S3_S2_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6819      	ldr	r1, [r3, #0]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	461a      	mov	r2, r3
 8001702:	f7ff fca7 	bl	8001054 <_ZNSt11_Deque_baseIsSaIsEE17_M_deallocate_mapEPPsj>

	  this->_M_impl._M_map = __new_map;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	697a      	ldr	r2, [r7, #20]
 800170a:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	3308      	adds	r3, #8
 8001716:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fd5a 	bl	80011d2 <_ZNSt15_Deque_iteratorIsRsPsE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f103 0018 	add.w	r0, r3, #24
 8001724:	6a3b      	ldr	r3, [r7, #32]
 8001726:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800172a:	3b01      	subs	r3, #1
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001730:	4413      	add	r3, r2
 8001732:	4619      	mov	r1, r3
 8001734:	f7ff fd4d 	bl	80011d2 <_ZNSt15_Deque_iteratorIsRsPsE11_M_set_nodeEPS1_>
    }
 8001738:	bf00      	nop
 800173a:	372c      	adds	r7, #44	; 0x2c
 800173c:	46bd      	mov	sp, r7
 800173e:	bd90      	pop	{r4, r7, pc}

08001740 <_ZNK9__gnu_cxx13new_allocatorIPsE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001748:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800174c:	4618      	mov	r0, r3
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr

08001756 <_ZN9__gnu_cxx13new_allocatorIsE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001756:	b580      	push	{r7, lr}
 8001758:	b084      	sub	sp, #16
 800175a:	af00      	add	r7, sp, #0
 800175c:	60f8      	str	r0, [r7, #12]
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f000 f864 	bl	8001830 <_ZNK9__gnu_cxx13new_allocatorIsE11_M_max_sizeEv>
 8001768:	4602      	mov	r2, r0
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	4293      	cmp	r3, r2
 800176e:	bf8c      	ite	hi
 8001770:	2301      	movhi	r3, #1
 8001772:	2300      	movls	r3, #0
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <_ZN9__gnu_cxx13new_allocatorIsE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800177a:	f004 fe5e 	bl	800643a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	4618      	mov	r0, r3
 8001784:	f004 fe48 	bl	8006418 <_Znwj>
 8001788:	4603      	mov	r3, r0
      }
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <_ZNSt16allocator_traitsISaIsEE8max_sizeERKS0_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static _GLIBCXX20_CONSTEXPR size_type
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus <= 201703L
	return __a.max_size();
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 f853 	bl	8001846 <_ZNK9__gnu_cxx13new_allocatorIsE8max_sizeEv>
 80017a0:	4603      	mov	r3, r0
#else
	return size_t(-1) / sizeof(value_type);
#endif
      }
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d201      	bcs.n	80017c4 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	e000      	b.n	80017c6 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80017c4:	687b      	ldr	r3, [r7, #4]
    }
 80017c6:	4618      	mov	r0, r3
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <_ZSt4copyIPPsS1_ET0_T_S3_S2_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80017d0:	b590      	push	{r4, r7, lr}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f000 f83e 	bl	800185e <_ZSt12__miter_baseIPPsET_S2_>
 80017e2:	4604      	mov	r4, r0
 80017e4:	68b8      	ldr	r0, [r7, #8]
 80017e6:	f000 f83a 	bl	800185e <_ZSt12__miter_baseIPPsET_S2_>
 80017ea:	4603      	mov	r3, r0
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	4619      	mov	r1, r3
 80017f0:	4620      	mov	r0, r4
 80017f2:	f000 f83e 	bl	8001872 <_ZSt13__copy_move_aILb0EPPsS1_ET1_T0_S3_S2_>
 80017f6:	4603      	mov	r3, r0
    }
 80017f8:	4618      	mov	r0, r3
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd90      	pop	{r4, r7, pc}

08001800 <_ZSt13copy_backwardIPPsS1_ET0_T_S3_S2_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f000 f826 	bl	800185e <_ZSt12__miter_baseIPPsET_S2_>
 8001812:	4604      	mov	r4, r0
 8001814:	68b8      	ldr	r0, [r7, #8]
 8001816:	f000 f822 	bl	800185e <_ZSt12__miter_baseIPPsET_S2_>
 800181a:	4603      	mov	r3, r0
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	4619      	mov	r1, r3
 8001820:	4620      	mov	r0, r4
 8001822:	f000 f849 	bl	80018b8 <_ZSt22__copy_move_backward_aILb0EPPsS1_ET1_T0_S3_S2_>
 8001826:	4603      	mov	r3, r0
    }
 8001828:	4618      	mov	r0, r3
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	bd90      	pop	{r4, r7, pc}

08001830 <_ZNK9__gnu_cxx13new_allocatorIsE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001838:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr

08001846 <_ZNK9__gnu_cxx13new_allocatorIsE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff ffee 	bl	8001830 <_ZNK9__gnu_cxx13new_allocatorIsE11_M_max_sizeEv>
 8001854:	4603      	mov	r3, r0
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <_ZSt12__miter_baseIPPsET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4618      	mov	r0, r3
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr

08001872 <_ZSt13__copy_move_aILb0EPPsS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8001872:	b5b0      	push	{r4, r5, r7, lr}
 8001874:	b084      	sub	sp, #16
 8001876:	af00      	add	r7, sp, #0
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800187e:	68f8      	ldr	r0, [r7, #12]
 8001880:	f000 f83d 	bl	80018fe <_ZSt12__niter_baseIPPsET_S2_>
 8001884:	4604      	mov	r4, r0
 8001886:	68b8      	ldr	r0, [r7, #8]
 8001888:	f000 f839 	bl	80018fe <_ZSt12__niter_baseIPPsET_S2_>
 800188c:	4605      	mov	r5, r0
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4618      	mov	r0, r3
 8001892:	f000 f834 	bl	80018fe <_ZSt12__niter_baseIPPsET_S2_>
 8001896:	4603      	mov	r3, r0
 8001898:	461a      	mov	r2, r3
 800189a:	4629      	mov	r1, r5
 800189c:	4620      	mov	r0, r4
 800189e:	f000 f838 	bl	8001912 <_ZSt14__copy_move_a1ILb0EPPsS1_ET1_T0_S3_S2_>
 80018a2:	4602      	mov	r2, r0
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	4611      	mov	r1, r2
 80018a8:	4618      	mov	r0, r3
 80018aa:	f000 f842 	bl	8001932 <_ZSt12__niter_wrapIPPsET_RKS2_S2_>
 80018ae:	4603      	mov	r3, r0
    }
 80018b0:	4618      	mov	r0, r3
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bdb0      	pop	{r4, r5, r7, pc}

080018b8 <_ZSt22__copy_move_backward_aILb0EPPsS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 80018b8:	b5b0      	push	{r4, r5, r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f000 f81a 	bl	80018fe <_ZSt12__niter_baseIPPsET_S2_>
 80018ca:	4604      	mov	r4, r0
 80018cc:	68b8      	ldr	r0, [r7, #8]
 80018ce:	f000 f816 	bl	80018fe <_ZSt12__niter_baseIPPsET_S2_>
 80018d2:	4605      	mov	r5, r0
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 f811 	bl	80018fe <_ZSt12__niter_baseIPPsET_S2_>
 80018dc:	4603      	mov	r3, r0
 80018de:	461a      	mov	r2, r3
 80018e0:	4629      	mov	r1, r5
 80018e2:	4620      	mov	r0, r4
 80018e4:	f000 f830 	bl	8001948 <_ZSt23__copy_move_backward_a1ILb0EPPsS1_ET1_T0_S3_S2_>
 80018e8:	4602      	mov	r2, r0
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	4611      	mov	r1, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 f81f 	bl	8001932 <_ZSt12__niter_wrapIPPsET_RKS2_S2_>
 80018f4:	4603      	mov	r3, r0
    }
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bdb0      	pop	{r4, r5, r7, pc}

080018fe <_ZSt12__niter_baseIPPsET_S2_>:
    __niter_base(_Iterator __it)
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4618      	mov	r0, r3
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr

08001912 <_ZSt14__copy_move_a1ILb0EPPsS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8001912:	b580      	push	{r7, lr}
 8001914:	b084      	sub	sp, #16
 8001916:	af00      	add	r7, sp, #0
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	68b9      	ldr	r1, [r7, #8]
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	f000 f820 	bl	8001968 <_ZSt14__copy_move_a2ILb0EPPsS1_ET1_T0_S3_S2_>
 8001928:	4603      	mov	r3, r0
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <_ZSt12__niter_wrapIPPsET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	6039      	str	r1, [r7, #0]
    { return __res; }
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr

08001948 <_ZSt23__copy_move_backward_a1ILb0EPPsS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	68b9      	ldr	r1, [r7, #8]
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f000 f815 	bl	8001988 <_ZSt23__copy_move_backward_a2ILb0EPPsS1_ET1_T0_S3_S2_>
 800195e:	4603      	mov	r3, r0
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <_ZSt14__copy_move_a2ILb0EPPsS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	68b9      	ldr	r1, [r7, #8]
 8001978:	68f8      	ldr	r0, [r7, #12]
 800197a:	f000 f815 	bl	80019a8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPsEEPT_PKS4_S7_S5_>
 800197e:	4603      	mov	r3, r0
    }
 8001980:	4618      	mov	r0, r3
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <_ZSt23__copy_move_backward_a2ILb0EPPsS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	68b9      	ldr	r1, [r7, #8]
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f000 f822 	bl	80019e2 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPsEEPT_PKS4_S7_S5_>
 800199e:	4603      	mov	r3, r0
    }
 80019a0:	4618      	mov	r0, r3
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPsEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80019b4:	68ba      	ldr	r2, [r7, #8]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	109b      	asrs	r3, r3, #2
 80019bc:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d006      	beq.n	80019d2 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPsEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	461a      	mov	r2, r3
 80019ca:	68f9      	ldr	r1, [r7, #12]
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f004 ff23 	bl	8006818 <memmove>
	  return __result + _Num;
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	4413      	add	r3, r2
	}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPsEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b086      	sub	sp, #24
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	60f8      	str	r0, [r7, #12]
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80019ee:	68ba      	ldr	r2, [r7, #8]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	109b      	asrs	r3, r3, #2
 80019f6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00a      	beq.n	8001a14 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPsEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	425b      	negs	r3, r3
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	18d0      	adds	r0, r2, r3
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	68f9      	ldr	r1, [r7, #12]
 8001a10:	f004 ff02 	bl	8006818 <memmove>
	  return __result - _Num;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	425b      	negs	r3, r3
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	4413      	add	r3, r2
	}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <_ZN12ControlClassD1Ev>:
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3324      	adds	r3, #36	; 0x24
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff f8a7 	bl	8000b86 <_ZNSt5queueIsSt5dequeIsSaIsEEED1Ev>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <_Z41__static_initialization_and_destruction_0ii>:
	}
	if (delta){
		return (uint8_t)(1 + 70*(delta/45));
	}
	return 0;
}
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d107      	bne.n	8001a64 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d102      	bne.n	8001a64 <_Z41__static_initialization_and_destruction_0ii+0x20>
ControlClass ControlSystem;
 8001a5e:	4809      	ldr	r0, [pc, #36]	; (8001a84 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001a60:	f7ff f89e 	bl	8000ba0 <_ZN12ControlClassC1Ev>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d107      	bne.n	8001a7a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d102      	bne.n	8001a7a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001a74:	4803      	ldr	r0, [pc, #12]	; (8001a84 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001a76:	f7ff ffd6 	bl	8001a26 <_ZN12ControlClassD1Ev>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	200000a0 	.word	0x200000a0

08001a88 <_GLOBAL__sub_I_ControlSystem>:
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a90:	2001      	movs	r0, #1
 8001a92:	f7ff ffd7 	bl	8001a44 <_Z41__static_initialization_and_destruction_0ii>
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <_GLOBAL__sub_D_ControlSystem>:
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f7ff ffcf 	bl	8001a44 <_Z41__static_initialization_and_destruction_0ii>
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aa8:	b590      	push	{r4, r7, lr}
 8001aaa:	b09d      	sub	sp, #116	; 0x74
 8001aac:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aae:	f001 f80b 	bl	8002ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ab2:	f000 fa0b 	bl	8001ecc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ab6:	f000 fcd7 	bl	8002468 <_ZL12MX_GPIO_Initv>
  MX_ADC2_Init();
 8001aba:	f000 faaf 	bl	800201c <_ZL12MX_ADC2_Initv>
  MX_SPI1_Init();
 8001abe:	f000 fb1f 	bl	8002100 <_ZL12MX_SPI1_Initv>
  MX_TIM1_Init();
 8001ac2:	f000 fb95 	bl	80021f0 <_ZL12MX_TIM1_Initv>
  MX_USART2_UART_Init();
 8001ac6:	f000 fc73 	bl	80023b0 <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 8001aca:	f000 fc9f 	bl	800240c <_ZL19MX_USART3_UART_Initv>
  MX_ADC1_Init();
 8001ace:	f000 fa5d 	bl	8001f8c <_ZL12MX_ADC1_Initv>
  MX_SPI2_Init();
 8001ad2:	f000 fb51 	bl	8002178 <_ZL12MX_SPI2_Initv>
// TODO: implement sleep routine
//  int inactivity_counter = 0;
//  bool x_inactive = false;
//  bool y_inactive = false;

  int16_t x_theta = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  int16_t y_theta = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	877b      	strh	r3, [r7, #58]	; 0x3a
  int16_t x_nominal = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	873b      	strh	r3, [r7, #56]	; 0x38
  int8_t allowableAngle = 5;
 8001ae2:	2305      	movs	r3, #5
 8001ae4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  // Initialize phase indicies
 uint8_t phaseAindex = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 uint8_t phaseBindex = phaseAindex + 60;
 8001aee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001af2:	333c      	adds	r3, #60	; 0x3c
 8001af4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 uint8_t phaseCindex = phaseAindex + 120;
 8001af8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001afc:	3378      	adds	r3, #120	; 0x78
 8001afe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //Configure Accelerometer using PA4 for CSn, in SPI mode
  MC3479.setSerialSPI(&hspi1, GPIOA, SPI1_CSn_Pin);
 8001b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b06:	4a46      	ldr	r2, [pc, #280]	; (8001c20 <main+0x178>)
 8001b08:	4946      	ldr	r1, [pc, #280]	; (8001c24 <main+0x17c>)
 8001b0a:	4847      	ldr	r0, [pc, #284]	; (8001c28 <main+0x180>)
 8001b0c:	f004 fa8c 	bl	8006028 <_ZN11MC3479Class12setSerialSPIEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
  MC3479.configAccelerometer();
 8001b10:	4845      	ldr	r0, [pc, #276]	; (8001c28 <main+0x180>)
 8001b12:	f004 fb44 	bl	800619e <_ZN11MC3479Class19configAccelerometerEv>

  //Configure GPIO variables for x-axis
  MP6543H.x_configMotorController(TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, &htim1,
 8001b16:	2304      	movs	r3, #4
 8001b18:	930a      	str	r3, [sp, #40]	; 0x28
 8001b1a:	4b44      	ldr	r3, [pc, #272]	; (8001c2c <main+0x184>)
 8001b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8001b1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b22:	9308      	str	r3, [sp, #32]
 8001b24:	4b3e      	ldr	r3, [pc, #248]	; (8001c20 <main+0x178>)
 8001b26:	9307      	str	r3, [sp, #28]
 8001b28:	2302      	movs	r3, #2
 8001b2a:	9306      	str	r3, [sp, #24]
 8001b2c:	4b3f      	ldr	r3, [pc, #252]	; (8001c2c <main+0x184>)
 8001b2e:	9305      	str	r3, [sp, #20]
 8001b30:	2301      	movs	r3, #1
 8001b32:	9304      	str	r3, [sp, #16]
 8001b34:	4b3d      	ldr	r3, [pc, #244]	; (8001c2c <main+0x184>)
 8001b36:	9303      	str	r3, [sp, #12]
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	9302      	str	r3, [sp, #8]
 8001b3c:	4b38      	ldr	r3, [pc, #224]	; (8001c20 <main+0x178>)
 8001b3e:	9301      	str	r3, [sp, #4]
 8001b40:	4b3b      	ldr	r3, [pc, #236]	; (8001c30 <main+0x188>)
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	2308      	movs	r3, #8
 8001b46:	2204      	movs	r2, #4
 8001b48:	2100      	movs	r1, #0
 8001b4a:	483a      	ldr	r0, [pc, #232]	; (8001c34 <main+0x18c>)
 8001b4c:	f004 fc07 	bl	800635e <_ZN12MP6543HClass23x_configMotorControllerEtttP17TIM_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_tS3_t>
								  	  MP6543H_EN_B_GPIO_Port, MP6543H_EN_B_Pin,
									  	  MP6543H_EN_C_GPIO_Port, MP6543H_EN_C_Pin,
									  	  	  MP6543H_nSLEEP_X_GPIO_Port, MP6543H_nSLEEP_X_Pin,
											  	  MP6543H_nFAULT_X_GPIO_Port, MP6543H_nFAULT_X_Pin);

  ControlSystem.initControlSystem(x_nominal, allowableAngle);
 8001b50:	f997 2037 	ldrsb.w	r2, [r7, #55]	; 0x37
 8001b54:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4837      	ldr	r0, [pc, #220]	; (8001c38 <main+0x190>)
 8001b5c:	f7ff f8ba 	bl	8000cd4 <_ZN12ControlClass17initControlSystemEsa>
  AS5048A.SPI_Init(&hspi2, SPI2_SCn_GPIO_Port, SPI2_SCn_Pin);
 8001b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b64:	4a31      	ldr	r2, [pc, #196]	; (8001c2c <main+0x184>)
 8001b66:	4935      	ldr	r1, [pc, #212]	; (8001c3c <main+0x194>)
 8001b68:	4835      	ldr	r0, [pc, #212]	; (8001c40 <main+0x198>)
 8001b6a:	f7fe ffb1 	bl	8000ad0 <_ZN13AS5048A_Class8SPI_InitEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>

  TIM1->CCR1 = ControlSystem.sineWave[phaseAindex];
 8001b6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001b72:	4a31      	ldr	r2, [pc, #196]	; (8001c38 <main+0x190>)
 8001b74:	4413      	add	r3, r2
 8001b76:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8001b7a:	4b32      	ldr	r3, [pc, #200]	; (8001c44 <main+0x19c>)
 8001b7c:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = ControlSystem.sineWave[phaseBindex];
 8001b7e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001b82:	4a2d      	ldr	r2, [pc, #180]	; (8001c38 <main+0x190>)
 8001b84:	4413      	add	r3, r2
 8001b86:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8001b8a:	4b2e      	ldr	r3, [pc, #184]	; (8001c44 <main+0x19c>)
 8001b8c:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = ControlSystem.sineWave[phaseCindex];
 8001b8e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001b92:	4a29      	ldr	r2, [pc, #164]	; (8001c38 <main+0x190>)
 8001b94:	4413      	add	r3, r2
 8001b96:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8001b9a:	4b2a      	ldr	r3, [pc, #168]	; (8001c44 <main+0x19c>)
 8001b9c:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4823      	ldr	r0, [pc, #140]	; (8001c30 <main+0x188>)
 8001ba2:	f003 faaf 	bl	8005104 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001ba6:	2104      	movs	r1, #4
 8001ba8:	4821      	ldr	r0, [pc, #132]	; (8001c30 <main+0x188>)
 8001baa:	f003 faab 	bl	8005104 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001bae:	2108      	movs	r1, #8
 8001bb0:	481f      	ldr	r0, [pc, #124]	; (8001c30 <main+0x188>)
 8001bb2:	f003 faa7 	bl	8005104 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(MP6543H_EN_A_GPIO_Port, MP6543H_EN_A_Pin, GPIO_PIN_SET);
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	2180      	movs	r1, #128	; 0x80
 8001bba:	4819      	ldr	r0, [pc, #100]	; (8001c20 <main+0x178>)
 8001bbc:	f001 fee1 	bl	8003982 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MP6543H_EN_B_GPIO_Port, MP6543H_EN_B_Pin, GPIO_PIN_SET);
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	4819      	ldr	r0, [pc, #100]	; (8001c2c <main+0x184>)
 8001bc6:	f001 fedc 	bl	8003982 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MP6543H_EN_C_GPIO_Port, MP6543H_EN_C_Pin, GPIO_PIN_SET);
 8001bca:	2201      	movs	r2, #1
 8001bcc:	2102      	movs	r1, #2
 8001bce:	4817      	ldr	r0, [pc, #92]	; (8001c2c <main+0x184>)
 8001bd0:	f001 fed7 	bl	8003982 <HAL_GPIO_WritePin>

  while (1)
  {
	  // Brake if any motor fault or if tilt button is pressed.
	  while(HAL_GPIO_ReadPin(nTILT_BUTTON_GPIO_Port, nTILT_BUTTON_Pin) == 0){
 8001bd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bd8:	4811      	ldr	r0, [pc, #68]	; (8001c20 <main+0x178>)
 8001bda:	f001 febb 	bl	8003954 <HAL_GPIO_ReadPin>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	bf0c      	ite	eq
 8001be4:	2301      	moveq	r3, #1
 8001be6:	2300      	movne	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <main+0x14e>
		  HAL_Delay(1);
 8001bee:	2001      	movs	r0, #1
 8001bf0:	f000 ffcc 	bl	8002b8c <HAL_Delay>
	  while(HAL_GPIO_ReadPin(nTILT_BUTTON_GPIO_Port, nTILT_BUTTON_Pin) == 0){
 8001bf4:	e7ee      	b.n	8001bd4 <main+0x12c>
	  }
	  while(MP6543H.x_motorFault()){
 8001bf6:	480f      	ldr	r0, [pc, #60]	; (8001c34 <main+0x18c>)
 8001bf8:	f004 fbf6 	bl	80063e8 <_ZN12MP6543HClass12x_motorFaultEv>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d024      	beq.n	8001c4c <main+0x1a4>
		  HAL_Delay(1);
 8001c02:	2001      	movs	r0, #1
 8001c04:	f000 ffc2 	bl	8002b8c <HAL_Delay>
#ifdef __OCP_MEASUREMENT_EN
		  //This should allow us to see how long (approximately) we stay in the nFault loop
		  uint8_t fault_current [2] = {0xFF, 0xFF};
 8001c08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c0c:	80bb      	strh	r3, [r7, #4]
		  HAL_UART_Transmit(&huart3, &fault_current[0], sizeof(fault_current), HAL_MAX_DELAY);
 8001c0e:	1d39      	adds	r1, r7, #4
 8001c10:	f04f 33ff 	mov.w	r3, #4294967295
 8001c14:	2202      	movs	r2, #2
 8001c16:	480c      	ldr	r0, [pc, #48]	; (8001c48 <main+0x1a0>)
 8001c18:	f004 f89c 	bl	8005d54 <HAL_UART_Transmit>
	  while(MP6543H.x_motorFault()){
 8001c1c:	e7eb      	b.n	8001bf6 <main+0x14e>
 8001c1e:	bf00      	nop
 8001c20:	40010800 	.word	0x40010800
 8001c24:	20000200 	.word	0x20000200
 8001c28:	20000388 	.word	0x20000388
 8001c2c:	40010c00 	.word	0x40010c00
 8001c30:	200002b0 	.word	0x200002b0
 8001c34:	2000039c 	.word	0x2000039c
 8001c38:	200000a0 	.word	0x200000a0
 8001c3c:	20000258 	.word	0x20000258
 8001c40:	2000008c 	.word	0x2000008c
 8001c44:	40012c00 	.word	0x40012c00
 8001c48:	2000033c 	.word	0x2000033c
	  }

#ifdef __NORMAL_MODE_EN

	  // fetch and normalize theta:
	  MC3479.getXYZ(xData, yData, zData);
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	f107 0218 	add.w	r2, r7, #24
 8001c54:	f107 011c 	add.w	r1, r7, #28
 8001c58:	4893      	ldr	r0, [pc, #588]	; (8001ea8 <main+0x400>)
 8001c5a:	f004 fb58 	bl	800630e <_ZN11MC3479Class6getXYZEPhS0_S0_>
	  x_theta = ControlSystem.normalizeTheta(xData[0], xData[1], zData[0], zData[1]);
 8001c5e:	7f39      	ldrb	r1, [r7, #28]
 8001c60:	7f7a      	ldrb	r2, [r7, #29]
 8001c62:	7d38      	ldrb	r0, [r7, #20]
 8001c64:	7d7b      	ldrb	r3, [r7, #21]
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4890      	ldr	r0, [pc, #576]	; (8001eac <main+0x404>)
 8001c6c:	f7ff f80a 	bl	8000c84 <_ZN12ControlClass14normalizeThetaEhhhh>
 8001c70:	4603      	mov	r3, r0
 8001c72:	87bb      	strh	r3, [r7, #60]	; 0x3c
	  y_theta = ControlSystem.normalizeTheta(yData[0], yData[1], zData[0], zData[1]);
 8001c74:	7e39      	ldrb	r1, [r7, #24]
 8001c76:	7e7a      	ldrb	r2, [r7, #25]
 8001c78:	7d38      	ldrb	r0, [r7, #20]
 8001c7a:	7d7b      	ldrb	r3, [r7, #21]
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	4603      	mov	r3, r0
 8001c80:	488a      	ldr	r0, [pc, #552]	; (8001eac <main+0x404>)
 8001c82:	f7fe ffff 	bl	8000c84 <_ZN12ControlClass14normalizeThetaEhhhh>
 8001c86:	4603      	mov	r3, r0
 8001c88:	877b      	strh	r3, [r7, #58]	; 0x3a

#ifdef __OCP_MEASUREMENT_EN


// Read ADC Channel 4:s
	HAL_ADC_Start(&hadc2);
 8001c8a:	4889      	ldr	r0, [pc, #548]	; (8001eb0 <main+0x408>)
 8001c8c:	f001 f87a 	bl	8002d84 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001c90:	f04f 31ff 	mov.w	r1, #4294967295
 8001c94:	4886      	ldr	r0, [pc, #536]	; (8001eb0 <main+0x408>)
 8001c96:	f001 f94f 	bl	8002f38 <HAL_ADC_PollForConversion>
	uint16_t adc_current = HAL_ADC_GetValue(&hadc2);
 8001c9a:	4885      	ldr	r0, [pc, #532]	; (8001eb0 <main+0x408>)
 8001c9c:	f001 fa52 	bl	8003144 <HAL_ADC_GetValue>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	867b      	strh	r3, [r7, #50]	; 0x32
	uint8_t p4[2] = {(uint8_t)(adc_current & 0x00FF), (uint8_t)(adc_current >> 8)};
 8001ca4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	743b      	strb	r3, [r7, #16]
 8001caa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001cac:	0a1b      	lsrs	r3, r3, #8
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	747b      	strb	r3, [r7, #17]

// Read ADC Channel 5:
	HAL_ADC_Start(&hadc2);
 8001cb4:	487e      	ldr	r0, [pc, #504]	; (8001eb0 <main+0x408>)
 8001cb6:	f001 f865 	bl	8002d84 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001cba:	f04f 31ff 	mov.w	r1, #4294967295
 8001cbe:	487c      	ldr	r0, [pc, #496]	; (8001eb0 <main+0x408>)
 8001cc0:	f001 f93a 	bl	8002f38 <HAL_ADC_PollForConversion>
	adc_current = HAL_ADC_GetValue(&hadc2);
 8001cc4:	487a      	ldr	r0, [pc, #488]	; (8001eb0 <main+0x408>)
 8001cc6:	f001 fa3d 	bl	8003144 <HAL_ADC_GetValue>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	867b      	strh	r3, [r7, #50]	; 0x32
	uint8_t p5[2] = {(uint8_t)(adc_current & 0x00FF), (uint8_t)(adc_current >> 8)};
 8001cce:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	733b      	strb	r3, [r7, #12]
 8001cd4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001cd6:	0a1b      	lsrs	r3, r3, #8
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	737b      	strb	r3, [r7, #13]

// Read ADC Channel 6:
	HAL_ADC_Start(&hadc2);
 8001cde:	4874      	ldr	r0, [pc, #464]	; (8001eb0 <main+0x408>)
 8001ce0:	f001 f850 	bl	8002d84 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce8:	4871      	ldr	r0, [pc, #452]	; (8001eb0 <main+0x408>)
 8001cea:	f001 f925 	bl	8002f38 <HAL_ADC_PollForConversion>
	adc_current = HAL_ADC_GetValue(&hadc2);
 8001cee:	4870      	ldr	r0, [pc, #448]	; (8001eb0 <main+0x408>)
 8001cf0:	f001 fa28 	bl	8003144 <HAL_ADC_GetValue>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	867b      	strh	r3, [r7, #50]	; 0x32
	HAL_ADC_Stop(&hadc2);
 8001cf8:	486d      	ldr	r0, [pc, #436]	; (8001eb0 <main+0x408>)
 8001cfa:	f001 f8f1 	bl	8002ee0 <HAL_ADC_Stop>
	uint8_t p6[2] = {(uint8_t)(adc_current & 0x00FF), (uint8_t)(adc_current >> 8)};
 8001cfe:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	723b      	strb	r3, [r7, #8]
 8001d04:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001d06:	0a1b      	lsrs	r3, r3, #8
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	727b      	strb	r3, [r7, #9]

// Transmit ADC 4,5,6 data:
	HAL_UART_Transmit(&huart3, &p4[0], sizeof(p4), HAL_MAX_DELAY);
 8001d0e:	f107 0110 	add.w	r1, r7, #16
 8001d12:	f04f 33ff 	mov.w	r3, #4294967295
 8001d16:	2202      	movs	r2, #2
 8001d18:	4866      	ldr	r0, [pc, #408]	; (8001eb4 <main+0x40c>)
 8001d1a:	f004 f81b 	bl	8005d54 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, &p5[0], sizeof(p5), HAL_MAX_DELAY);
 8001d1e:	f107 010c 	add.w	r1, r7, #12
 8001d22:	f04f 33ff 	mov.w	r3, #4294967295
 8001d26:	2202      	movs	r2, #2
 8001d28:	4862      	ldr	r0, [pc, #392]	; (8001eb4 <main+0x40c>)
 8001d2a:	f004 f813 	bl	8005d54 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, &p6[0], sizeof(p6), HAL_MAX_DELAY);
 8001d2e:	f107 0108 	add.w	r1, r7, #8
 8001d32:	f04f 33ff 	mov.w	r3, #4294967295
 8001d36:	2202      	movs	r2, #2
 8001d38:	485e      	ldr	r0, [pc, #376]	; (8001eb4 <main+0x40c>)
 8001d3a:	f004 f80b 	bl	8005d54 <HAL_UART_Transmit>
#endif //__DEBUG_EN//

#ifdef __TEST_CODE_EN

	  // Update 3phase PWM values
	  int Kp = (10*((double)x_theta/90));
 8001d3e:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe fb56 	bl	80003f4 <__aeabi_i2d>
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	4b5a      	ldr	r3, [pc, #360]	; (8001eb8 <main+0x410>)
 8001d4e:	f7fe fce5 	bl	800071c <__aeabi_ddiv>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4610      	mov	r0, r2
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	4b57      	ldr	r3, [pc, #348]	; (8001ebc <main+0x414>)
 8001d60:	f7fe fbb2 	bl	80004c8 <__aeabi_dmul>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4610      	mov	r0, r2
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	f7fe fe46 	bl	80009fc <__aeabi_d2iz>
 8001d70:	4603      	mov	r3, r0
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  	  double scalar = 0.3;
 8001d74:	a34a      	add	r3, pc, #296	; (adr r3, 8001ea0 <main+0x3f8>)
 8001d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7a:	e9c7 2308 	strd	r2, r3, [r7, #32]
  	  phaseAindex = (phaseAindex + 180 + Kp) % 180;
 8001d7e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001d82:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 8001d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d88:	4413      	add	r3, r2
 8001d8a:	4a4d      	ldr	r2, [pc, #308]	; (8001ec0 <main+0x418>)
 8001d8c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d90:	441a      	add	r2, r3
 8001d92:	11d1      	asrs	r1, r2, #7
 8001d94:	17da      	asrs	r2, r3, #31
 8001d96:	1a8a      	subs	r2, r1, r2
 8001d98:	21b4      	movs	r1, #180	; 0xb4
 8001d9a:	fb01 f202 	mul.w	r2, r1, r2
 8001d9e:	1a9a      	subs	r2, r3, r2
 8001da0:	4613      	mov	r3, r2
 8001da2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
//	  }
//	  else{
//		  phaseAindex = (phaseAindex + Kp) % 180;
//	  }

  	  phaseBindex = (phaseAindex + 60) % 180;
 8001da6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001daa:	333c      	adds	r3, #60	; 0x3c
 8001dac:	4a44      	ldr	r2, [pc, #272]	; (8001ec0 <main+0x418>)
 8001dae:	fb82 1203 	smull	r1, r2, r2, r3
 8001db2:	441a      	add	r2, r3
 8001db4:	11d1      	asrs	r1, r2, #7
 8001db6:	17da      	asrs	r2, r3, #31
 8001db8:	1a8a      	subs	r2, r1, r2
 8001dba:	21b4      	movs	r1, #180	; 0xb4
 8001dbc:	fb01 f202 	mul.w	r2, r1, r2
 8001dc0:	1a9a      	subs	r2, r3, r2
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  	  phaseCindex = (phaseAindex + 120) % 180;
 8001dc8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001dcc:	3378      	adds	r3, #120	; 0x78
 8001dce:	4a3c      	ldr	r2, [pc, #240]	; (8001ec0 <main+0x418>)
 8001dd0:	fb82 1203 	smull	r1, r2, r2, r3
 8001dd4:	441a      	add	r2, r3
 8001dd6:	11d1      	asrs	r1, r2, #7
 8001dd8:	17da      	asrs	r2, r3, #31
 8001dda:	1a8a      	subs	r2, r1, r2
 8001ddc:	21b4      	movs	r1, #180	; 0xb4
 8001dde:	fb01 f202 	mul.w	r2, r1, r2
 8001de2:	1a9a      	subs	r2, r3, r2
 8001de4:	4613      	mov	r3, r2
 8001de6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

  	  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001dea:	2100      	movs	r1, #0
 8001dec:	4835      	ldr	r0, [pc, #212]	; (8001ec4 <main+0x41c>)
 8001dee:	f003 fa2b 	bl	8005248 <HAL_TIM_PWM_Stop>
  	  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001df2:	2104      	movs	r1, #4
 8001df4:	4833      	ldr	r0, [pc, #204]	; (8001ec4 <main+0x41c>)
 8001df6:	f003 fa27 	bl	8005248 <HAL_TIM_PWM_Stop>
  	  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001dfa:	2108      	movs	r1, #8
 8001dfc:	4831      	ldr	r0, [pc, #196]	; (8001ec4 <main+0x41c>)
 8001dfe:	f003 fa23 	bl	8005248 <HAL_TIM_PWM_Stop>
  	  TIM1->CCR1 = scalar*ControlSystem.sineWave[phaseAindex];
 8001e02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e06:	4a29      	ldr	r2, [pc, #164]	; (8001eac <main+0x404>)
 8001e08:	4413      	add	r3, r2
 8001e0a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe faf0 	bl	80003f4 <__aeabi_i2d>
 8001e14:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e18:	f7fe fb56 	bl	80004c8 <__aeabi_dmul>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4c29      	ldr	r4, [pc, #164]	; (8001ec8 <main+0x420>)
 8001e22:	4610      	mov	r0, r2
 8001e24:	4619      	mov	r1, r3
 8001e26:	f7fe fe11 	bl	8000a4c <__aeabi_d2uiz>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	6363      	str	r3, [r4, #52]	; 0x34
  	  TIM1->CCR2 = scalar*ControlSystem.sineWave[phaseBindex];
 8001e2e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001e32:	4a1e      	ldr	r2, [pc, #120]	; (8001eac <main+0x404>)
 8001e34:	4413      	add	r3, r2
 8001e36:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe fada 	bl	80003f4 <__aeabi_i2d>
 8001e40:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e44:	f7fe fb40 	bl	80004c8 <__aeabi_dmul>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4c1e      	ldr	r4, [pc, #120]	; (8001ec8 <main+0x420>)
 8001e4e:	4610      	mov	r0, r2
 8001e50:	4619      	mov	r1, r3
 8001e52:	f7fe fdfb 	bl	8000a4c <__aeabi_d2uiz>
 8001e56:	4603      	mov	r3, r0
 8001e58:	63a3      	str	r3, [r4, #56]	; 0x38
  	  TIM1->CCR3 = scalar*ControlSystem.sineWave[phaseCindex];
 8001e5a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001e5e:	4a13      	ldr	r2, [pc, #76]	; (8001eac <main+0x404>)
 8001e60:	4413      	add	r3, r2
 8001e62:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe fac4 	bl	80003f4 <__aeabi_i2d>
 8001e6c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e70:	f7fe fb2a 	bl	80004c8 <__aeabi_dmul>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4c13      	ldr	r4, [pc, #76]	; (8001ec8 <main+0x420>)
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f7fe fde5 	bl	8000a4c <__aeabi_d2uiz>
 8001e82:	4603      	mov	r3, r0
 8001e84:	63e3      	str	r3, [r4, #60]	; 0x3c
  	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001e86:	2100      	movs	r1, #0
 8001e88:	480e      	ldr	r0, [pc, #56]	; (8001ec4 <main+0x41c>)
 8001e8a:	f003 f93b 	bl	8005104 <HAL_TIM_PWM_Start>
  	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001e8e:	2104      	movs	r1, #4
 8001e90:	480c      	ldr	r0, [pc, #48]	; (8001ec4 <main+0x41c>)
 8001e92:	f003 f937 	bl	8005104 <HAL_TIM_PWM_Start>
  	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001e96:	2108      	movs	r1, #8
 8001e98:	480a      	ldr	r0, [pc, #40]	; (8001ec4 <main+0x41c>)
 8001e9a:	f003 f933 	bl	8005104 <HAL_TIM_PWM_Start>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001e9e:	e699      	b.n	8001bd4 <main+0x12c>
 8001ea0:	33333333 	.word	0x33333333
 8001ea4:	3fd33333 	.word	0x3fd33333
 8001ea8:	20000388 	.word	0x20000388
 8001eac:	200000a0 	.word	0x200000a0
 8001eb0:	200001d0 	.word	0x200001d0
 8001eb4:	2000033c 	.word	0x2000033c
 8001eb8:	40568000 	.word	0x40568000
 8001ebc:	40240000 	.word	0x40240000
 8001ec0:	b60b60b7 	.word	0xb60b60b7
 8001ec4:	200002b0 	.word	0x200002b0
 8001ec8:	40012c00 	.word	0x40012c00

08001ecc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b094      	sub	sp, #80	; 0x50
 8001ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ed2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ed6:	2228      	movs	r2, #40	; 0x28
 8001ed8:	2100      	movs	r1, #0
 8001eda:	4618      	mov	r0, r3
 8001edc:	f004 fcb6 	bl	800684c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ef0:	1d3b      	adds	r3, r7, #4
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001efc:	2302      	movs	r3, #2
 8001efe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f00:	2301      	movs	r3, #1
 8001f02:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f04:	2310      	movs	r3, #16
 8001f06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f10:	4618      	mov	r0, r3
 8001f12:	f001 fd4f 	bl	80039b4 <HAL_RCC_OscConfig>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	bf14      	ite	ne
 8001f1c:	2301      	movne	r3, #1
 8001f1e:	2300      	moveq	r3, #0
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <_Z18SystemClock_Configv+0x5e>
  {
    Error_Handler();
 8001f26:	f000 fb1b 	bl	8002560 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f2a:	230f      	movs	r3, #15
 8001f2c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f32:	2300      	movs	r3, #0
 8001f34:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f36:	2300      	movs	r3, #0
 8001f38:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f3e:	f107 0314 	add.w	r3, r7, #20
 8001f42:	2100      	movs	r1, #0
 8001f44:	4618      	mov	r0, r3
 8001f46:	f001 ffb7 	bl	8003eb8 <HAL_RCC_ClockConfig>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	bf14      	ite	ne
 8001f50:	2301      	movne	r3, #1
 8001f52:	2300      	moveq	r3, #0
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <_Z18SystemClock_Configv+0x92>
  {
    Error_Handler();
 8001f5a:	f000 fb01 	bl	8002560 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f66:	1d3b      	adds	r3, r7, #4
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f002 f93f 	bl	80041ec <HAL_RCCEx_PeriphCLKConfig>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	bf14      	ite	ne
 8001f74:	2301      	movne	r3, #1
 8001f76:	2300      	moveq	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8001f7e:	f000 faef 	bl	8002560 <Error_Handler>
  }
}
 8001f82:	bf00      	nop
 8001f84:	3750      	adds	r7, #80	; 0x50
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f92:	1d3b      	adds	r3, r7, #4
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f9c:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <_ZL12MX_ADC1_Initv+0x88>)
 8001f9e:	4a1e      	ldr	r2, [pc, #120]	; (8002018 <_ZL12MX_ADC1_Initv+0x8c>)
 8001fa0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001fa2:	4b1c      	ldr	r3, [pc, #112]	; (8002014 <_ZL12MX_ADC1_Initv+0x88>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001fa8:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <_ZL12MX_ADC1_Initv+0x88>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fae:	4b19      	ldr	r3, [pc, #100]	; (8002014 <_ZL12MX_ADC1_Initv+0x88>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fb4:	4b17      	ldr	r3, [pc, #92]	; (8002014 <_ZL12MX_ADC1_Initv+0x88>)
 8001fb6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001fba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fbc:	4b15      	ldr	r3, [pc, #84]	; (8002014 <_ZL12MX_ADC1_Initv+0x88>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001fc2:	4b14      	ldr	r3, [pc, #80]	; (8002014 <_ZL12MX_ADC1_Initv+0x88>)
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fc8:	4812      	ldr	r0, [pc, #72]	; (8002014 <_ZL12MX_ADC1_Initv+0x88>)
 8001fca:	f000 fe03 	bl	8002bd4 <HAL_ADC_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	bf14      	ite	ne
 8001fd4:	2301      	movne	r3, #1
 8001fd6:	2300      	moveq	r3, #0
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <_ZL12MX_ADC1_Initv+0x56>
  {
    Error_Handler();
 8001fde:	f000 fabf 	bl	8002560 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4808      	ldr	r0, [pc, #32]	; (8002014 <_ZL12MX_ADC1_Initv+0x88>)
 8001ff4:	f001 f8b2 	bl	800315c <HAL_ADC_ConfigChannel>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	bf14      	ite	ne
 8001ffe:	2301      	movne	r3, #1
 8002000:	2300      	moveq	r3, #0
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <_ZL12MX_ADC1_Initv+0x80>
  {
    Error_Handler();
 8002008:	f000 faaa 	bl	8002560 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800200c:	bf00      	nop
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	200001a0 	.word	0x200001a0
 8002018:	40012400 	.word	0x40012400

0800201c <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002022:	1d3b      	adds	r3, r7, #4
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800202c:	4b32      	ldr	r3, [pc, #200]	; (80020f8 <_ZL12MX_ADC2_Initv+0xdc>)
 800202e:	4a33      	ldr	r2, [pc, #204]	; (80020fc <_ZL12MX_ADC2_Initv+0xe0>)
 8002030:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002032:	4b31      	ldr	r3, [pc, #196]	; (80020f8 <_ZL12MX_ADC2_Initv+0xdc>)
 8002034:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002038:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800203a:	4b2f      	ldr	r3, [pc, #188]	; (80020f8 <_ZL12MX_ADC2_Initv+0xdc>)
 800203c:	2200      	movs	r2, #0
 800203e:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = ENABLE;
 8002040:	4b2d      	ldr	r3, [pc, #180]	; (80020f8 <_ZL12MX_ADC2_Initv+0xdc>)
 8002042:	2201      	movs	r2, #1
 8002044:	751a      	strb	r2, [r3, #20]
  hadc2.Init.NbrOfDiscConversion = 3;
 8002046:	4b2c      	ldr	r3, [pc, #176]	; (80020f8 <_ZL12MX_ADC2_Initv+0xdc>)
 8002048:	2203      	movs	r2, #3
 800204a:	619a      	str	r2, [r3, #24]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800204c:	4b2a      	ldr	r3, [pc, #168]	; (80020f8 <_ZL12MX_ADC2_Initv+0xdc>)
 800204e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002052:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002054:	4b28      	ldr	r3, [pc, #160]	; (80020f8 <_ZL12MX_ADC2_Initv+0xdc>)
 8002056:	2200      	movs	r2, #0
 8002058:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 3;
 800205a:	4b27      	ldr	r3, [pc, #156]	; (80020f8 <_ZL12MX_ADC2_Initv+0xdc>)
 800205c:	2203      	movs	r2, #3
 800205e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002060:	4825      	ldr	r0, [pc, #148]	; (80020f8 <_ZL12MX_ADC2_Initv+0xdc>)
 8002062:	f000 fdb7 	bl	8002bd4 <HAL_ADC_Init>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	bf14      	ite	ne
 800206c:	2301      	movne	r3, #1
 800206e:	2300      	moveq	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <_ZL12MX_ADC2_Initv+0x5e>
  {
    Error_Handler();
 8002076:	f000 fa73 	bl	8002560 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800207a:	2304      	movs	r3, #4
 800207c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800207e:	2301      	movs	r3, #1
 8002080:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002086:	1d3b      	adds	r3, r7, #4
 8002088:	4619      	mov	r1, r3
 800208a:	481b      	ldr	r0, [pc, #108]	; (80020f8 <_ZL12MX_ADC2_Initv+0xdc>)
 800208c:	f001 f866 	bl	800315c <HAL_ADC_ConfigChannel>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	bf14      	ite	ne
 8002096:	2301      	movne	r3, #1
 8002098:	2300      	moveq	r3, #0
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <_ZL12MX_ADC2_Initv+0x88>
  {
    Error_Handler();
 80020a0:	f000 fa5e 	bl	8002560 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80020a4:	2305      	movs	r3, #5
 80020a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80020a8:	2302      	movs	r3, #2
 80020aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80020ac:	1d3b      	adds	r3, r7, #4
 80020ae:	4619      	mov	r1, r3
 80020b0:	4811      	ldr	r0, [pc, #68]	; (80020f8 <_ZL12MX_ADC2_Initv+0xdc>)
 80020b2:	f001 f853 	bl	800315c <HAL_ADC_ConfigChannel>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	bf14      	ite	ne
 80020bc:	2301      	movne	r3, #1
 80020be:	2300      	moveq	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <_ZL12MX_ADC2_Initv+0xae>
  {
    Error_Handler();
 80020c6:	f000 fa4b 	bl	8002560 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80020ca:	2306      	movs	r3, #6
 80020cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80020ce:	2303      	movs	r3, #3
 80020d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80020d2:	1d3b      	adds	r3, r7, #4
 80020d4:	4619      	mov	r1, r3
 80020d6:	4808      	ldr	r0, [pc, #32]	; (80020f8 <_ZL12MX_ADC2_Initv+0xdc>)
 80020d8:	f001 f840 	bl	800315c <HAL_ADC_ConfigChannel>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	bf14      	ite	ne
 80020e2:	2301      	movne	r3, #1
 80020e4:	2300      	moveq	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <_ZL12MX_ADC2_Initv+0xd4>
  {
    Error_Handler();
 80020ec:	f000 fa38 	bl	8002560 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80020f0:	bf00      	nop
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	200001d0 	.word	0x200001d0
 80020fc:	40012800 	.word	0x40012800

08002100 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002104:	4b1a      	ldr	r3, [pc, #104]	; (8002170 <_ZL12MX_SPI1_Initv+0x70>)
 8002106:	4a1b      	ldr	r2, [pc, #108]	; (8002174 <_ZL12MX_SPI1_Initv+0x74>)
 8002108:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800210a:	4b19      	ldr	r3, [pc, #100]	; (8002170 <_ZL12MX_SPI1_Initv+0x70>)
 800210c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002110:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002112:	4b17      	ldr	r3, [pc, #92]	; (8002170 <_ZL12MX_SPI1_Initv+0x70>)
 8002114:	2200      	movs	r2, #0
 8002116:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002118:	4b15      	ldr	r3, [pc, #84]	; (8002170 <_ZL12MX_SPI1_Initv+0x70>)
 800211a:	2200      	movs	r2, #0
 800211c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800211e:	4b14      	ldr	r3, [pc, #80]	; (8002170 <_ZL12MX_SPI1_Initv+0x70>)
 8002120:	2200      	movs	r2, #0
 8002122:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002124:	4b12      	ldr	r3, [pc, #72]	; (8002170 <_ZL12MX_SPI1_Initv+0x70>)
 8002126:	2200      	movs	r2, #0
 8002128:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800212a:	4b11      	ldr	r3, [pc, #68]	; (8002170 <_ZL12MX_SPI1_Initv+0x70>)
 800212c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002130:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002132:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <_ZL12MX_SPI1_Initv+0x70>)
 8002134:	2200      	movs	r2, #0
 8002136:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002138:	4b0d      	ldr	r3, [pc, #52]	; (8002170 <_ZL12MX_SPI1_Initv+0x70>)
 800213a:	2200      	movs	r2, #0
 800213c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800213e:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <_ZL12MX_SPI1_Initv+0x70>)
 8002140:	2200      	movs	r2, #0
 8002142:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002144:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <_ZL12MX_SPI1_Initv+0x70>)
 8002146:	2200      	movs	r2, #0
 8002148:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800214a:	4b09      	ldr	r3, [pc, #36]	; (8002170 <_ZL12MX_SPI1_Initv+0x70>)
 800214c:	220a      	movs	r2, #10
 800214e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002150:	4807      	ldr	r0, [pc, #28]	; (8002170 <_ZL12MX_SPI1_Initv+0x70>)
 8002152:	f002 f9c3 	bl	80044dc <HAL_SPI_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	bf14      	ite	ne
 800215c:	2301      	movne	r3, #1
 800215e:	2300      	moveq	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8002166:	f000 f9fb 	bl	8002560 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20000200 	.word	0x20000200
 8002174:	40013000 	.word	0x40013000

08002178 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800217c:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <_ZL12MX_SPI2_Initv+0x70>)
 800217e:	4a1b      	ldr	r2, [pc, #108]	; (80021ec <_ZL12MX_SPI2_Initv+0x74>)
 8002180:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002182:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <_ZL12MX_SPI2_Initv+0x70>)
 8002184:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002188:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800218a:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <_ZL12MX_SPI2_Initv+0x70>)
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002190:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <_ZL12MX_SPI2_Initv+0x70>)
 8002192:	2200      	movs	r2, #0
 8002194:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002196:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <_ZL12MX_SPI2_Initv+0x70>)
 8002198:	2200      	movs	r2, #0
 800219a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800219c:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <_ZL12MX_SPI2_Initv+0x70>)
 800219e:	2200      	movs	r2, #0
 80021a0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80021a2:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <_ZL12MX_SPI2_Initv+0x70>)
 80021a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021a8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021aa:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <_ZL12MX_SPI2_Initv+0x70>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021b0:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <_ZL12MX_SPI2_Initv+0x70>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80021b6:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <_ZL12MX_SPI2_Initv+0x70>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021bc:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <_ZL12MX_SPI2_Initv+0x70>)
 80021be:	2200      	movs	r2, #0
 80021c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80021c2:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <_ZL12MX_SPI2_Initv+0x70>)
 80021c4:	220a      	movs	r2, #10
 80021c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80021c8:	4807      	ldr	r0, [pc, #28]	; (80021e8 <_ZL12MX_SPI2_Initv+0x70>)
 80021ca:	f002 f987 	bl	80044dc <HAL_SPI_Init>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	bf14      	ite	ne
 80021d4:	2301      	movne	r3, #1
 80021d6:	2300      	moveq	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 80021de:	f000 f9bf 	bl	8002560 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000258 	.word	0x20000258
 80021ec:	40003800 	.word	0x40003800

080021f0 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b096      	sub	sp, #88	; 0x58
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	605a      	str	r2, [r3, #4]
 8002200:	609a      	str	r2, [r3, #8]
 8002202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002204:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800220e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	605a      	str	r2, [r3, #4]
 8002218:	609a      	str	r2, [r3, #8]
 800221a:	60da      	str	r2, [r3, #12]
 800221c:	611a      	str	r2, [r3, #16]
 800221e:	615a      	str	r2, [r3, #20]
 8002220:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002222:	1d3b      	adds	r3, r7, #4
 8002224:	2220      	movs	r2, #32
 8002226:	2100      	movs	r1, #0
 8002228:	4618      	mov	r0, r3
 800222a:	f004 fb0f 	bl	800684c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800222e:	4b5e      	ldr	r3, [pc, #376]	; (80023a8 <_ZL12MX_TIM1_Initv+0x1b8>)
 8002230:	4a5e      	ldr	r2, [pc, #376]	; (80023ac <_ZL12MX_TIM1_Initv+0x1bc>)
 8002232:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002234:	4b5c      	ldr	r3, [pc, #368]	; (80023a8 <_ZL12MX_TIM1_Initv+0x1b8>)
 8002236:	2200      	movs	r2, #0
 8002238:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223a:	4b5b      	ldr	r3, [pc, #364]	; (80023a8 <_ZL12MX_TIM1_Initv+0x1b8>)
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8002240:	4b59      	ldr	r3, [pc, #356]	; (80023a8 <_ZL12MX_TIM1_Initv+0x1b8>)
 8002242:	22ff      	movs	r2, #255	; 0xff
 8002244:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002246:	4b58      	ldr	r3, [pc, #352]	; (80023a8 <_ZL12MX_TIM1_Initv+0x1b8>)
 8002248:	2200      	movs	r2, #0
 800224a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800224c:	4b56      	ldr	r3, [pc, #344]	; (80023a8 <_ZL12MX_TIM1_Initv+0x1b8>)
 800224e:	2200      	movs	r2, #0
 8002250:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002252:	4b55      	ldr	r3, [pc, #340]	; (80023a8 <_ZL12MX_TIM1_Initv+0x1b8>)
 8002254:	2280      	movs	r2, #128	; 0x80
 8002256:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002258:	4853      	ldr	r0, [pc, #332]	; (80023a8 <_ZL12MX_TIM1_Initv+0x1b8>)
 800225a:	f002 feab 	bl	8004fb4 <HAL_TIM_Base_Init>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	bf14      	ite	ne
 8002264:	2301      	movne	r3, #1
 8002266:	2300      	moveq	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <_ZL12MX_TIM1_Initv+0x82>
  {
    Error_Handler();
 800226e:	f000 f977 	bl	8002560 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002272:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002276:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002278:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800227c:	4619      	mov	r1, r3
 800227e:	484a      	ldr	r0, [pc, #296]	; (80023a8 <_ZL12MX_TIM1_Initv+0x1b8>)
 8002280:	f003 f904 	bl	800548c <HAL_TIM_ConfigClockSource>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	bf14      	ite	ne
 800228a:	2301      	movne	r3, #1
 800228c:	2300      	moveq	r3, #0
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <_ZL12MX_TIM1_Initv+0xa8>
  {
    Error_Handler();
 8002294:	f000 f964 	bl	8002560 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002298:	4843      	ldr	r0, [pc, #268]	; (80023a8 <_ZL12MX_TIM1_Initv+0x1b8>)
 800229a:	f002 feda 	bl	8005052 <HAL_TIM_PWM_Init>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	bf14      	ite	ne
 80022a4:	2301      	movne	r3, #1
 80022a6:	2300      	moveq	r3, #0
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <_ZL12MX_TIM1_Initv+0xc2>
  {
    Error_Handler();
 80022ae:	f000 f957 	bl	8002560 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022b2:	2300      	movs	r3, #0
 80022b4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022b6:	2300      	movs	r3, #0
 80022b8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022be:	4619      	mov	r1, r3
 80022c0:	4839      	ldr	r0, [pc, #228]	; (80023a8 <_ZL12MX_TIM1_Initv+0x1b8>)
 80022c2:	f003 fc4b 	bl	8005b5c <HAL_TIMEx_MasterConfigSynchronization>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	bf14      	ite	ne
 80022cc:	2301      	movne	r3, #1
 80022ce:	2300      	moveq	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <_ZL12MX_TIM1_Initv+0xea>
  {
    Error_Handler();
 80022d6:	f000 f943 	bl	8002560 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022da:	2360      	movs	r3, #96	; 0x60
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022e2:	2300      	movs	r3, #0
 80022e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022e6:	2300      	movs	r3, #0
 80022e8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022ee:	2300      	movs	r3, #0
 80022f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022fa:	2200      	movs	r2, #0
 80022fc:	4619      	mov	r1, r3
 80022fe:	482a      	ldr	r0, [pc, #168]	; (80023a8 <_ZL12MX_TIM1_Initv+0x1b8>)
 8002300:	f003 f806 	bl	8005310 <HAL_TIM_PWM_ConfigChannel>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	bf14      	ite	ne
 800230a:	2301      	movne	r3, #1
 800230c:	2300      	moveq	r3, #0
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <_ZL12MX_TIM1_Initv+0x128>
  {
    Error_Handler();
 8002314:	f000 f924 	bl	8002560 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800231c:	2204      	movs	r2, #4
 800231e:	4619      	mov	r1, r3
 8002320:	4821      	ldr	r0, [pc, #132]	; (80023a8 <_ZL12MX_TIM1_Initv+0x1b8>)
 8002322:	f002 fff5 	bl	8005310 <HAL_TIM_PWM_ConfigChannel>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	bf14      	ite	ne
 800232c:	2301      	movne	r3, #1
 800232e:	2300      	moveq	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <_ZL12MX_TIM1_Initv+0x14a>
  {
    Error_Handler();
 8002336:	f000 f913 	bl	8002560 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800233a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800233e:	2208      	movs	r2, #8
 8002340:	4619      	mov	r1, r3
 8002342:	4819      	ldr	r0, [pc, #100]	; (80023a8 <_ZL12MX_TIM1_Initv+0x1b8>)
 8002344:	f002 ffe4 	bl	8005310 <HAL_TIM_PWM_ConfigChannel>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	bf14      	ite	ne
 800234e:	2301      	movne	r3, #1
 8002350:	2300      	moveq	r3, #0
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <_ZL12MX_TIM1_Initv+0x16c>
  {
    Error_Handler();
 8002358:	f000 f902 	bl	8002560 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800235c:	2300      	movs	r3, #0
 800235e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002360:	2300      	movs	r3, #0
 8002362:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002364:	2300      	movs	r3, #0
 8002366:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002368:	2300      	movs	r3, #0
 800236a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002370:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002374:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002376:	2300      	movs	r3, #0
 8002378:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800237a:	1d3b      	adds	r3, r7, #4
 800237c:	4619      	mov	r1, r3
 800237e:	480a      	ldr	r0, [pc, #40]	; (80023a8 <_ZL12MX_TIM1_Initv+0x1b8>)
 8002380:	f003 fc4a 	bl	8005c18 <HAL_TIMEx_ConfigBreakDeadTime>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	bf14      	ite	ne
 800238a:	2301      	movne	r3, #1
 800238c:	2300      	moveq	r3, #0
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <_ZL12MX_TIM1_Initv+0x1a8>
  {
    Error_Handler();
 8002394:	f000 f8e4 	bl	8002560 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002398:	4803      	ldr	r0, [pc, #12]	; (80023a8 <_ZL12MX_TIM1_Initv+0x1b8>)
 800239a:	f000 fa31 	bl	8002800 <HAL_TIM_MspPostInit>

}
 800239e:	bf00      	nop
 80023a0:	3758      	adds	r7, #88	; 0x58
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	200002b0 	.word	0x200002b0
 80023ac:	40012c00 	.word	0x40012c00

080023b0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023b4:	4b13      	ldr	r3, [pc, #76]	; (8002404 <_ZL19MX_USART2_UART_Initv+0x54>)
 80023b6:	4a14      	ldr	r2, [pc, #80]	; (8002408 <_ZL19MX_USART2_UART_Initv+0x58>)
 80023b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 80023ba:	4b12      	ldr	r3, [pc, #72]	; (8002404 <_ZL19MX_USART2_UART_Initv+0x54>)
 80023bc:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80023c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023c2:	4b10      	ldr	r3, [pc, #64]	; (8002404 <_ZL19MX_USART2_UART_Initv+0x54>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023c8:	4b0e      	ldr	r3, [pc, #56]	; (8002404 <_ZL19MX_USART2_UART_Initv+0x54>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023ce:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <_ZL19MX_USART2_UART_Initv+0x54>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023d4:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <_ZL19MX_USART2_UART_Initv+0x54>)
 80023d6:	220c      	movs	r2, #12
 80023d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023da:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <_ZL19MX_USART2_UART_Initv+0x54>)
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023e0:	4b08      	ldr	r3, [pc, #32]	; (8002404 <_ZL19MX_USART2_UART_Initv+0x54>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023e6:	4807      	ldr	r0, [pc, #28]	; (8002404 <_ZL19MX_USART2_UART_Initv+0x54>)
 80023e8:	f003 fc67 	bl	8005cba <HAL_UART_Init>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	bf14      	ite	ne
 80023f2:	2301      	movne	r3, #1
 80023f4:	2300      	moveq	r3, #0
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80023fc:	f000 f8b0 	bl	8002560 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002400:	bf00      	nop
 8002402:	bd80      	pop	{r7, pc}
 8002404:	200002f8 	.word	0x200002f8
 8002408:	40004400 	.word	0x40004400

0800240c <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002410:	4b13      	ldr	r3, [pc, #76]	; (8002460 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002412:	4a14      	ldr	r2, [pc, #80]	; (8002464 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002414:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8002416:	4b12      	ldr	r3, [pc, #72]	; (8002460 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002418:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 800241c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800241e:	4b10      	ldr	r3, [pc, #64]	; (8002460 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002420:	2200      	movs	r2, #0
 8002422:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002424:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002426:	2200      	movs	r2, #0
 8002428:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800242a:	4b0d      	ldr	r3, [pc, #52]	; (8002460 <_ZL19MX_USART3_UART_Initv+0x54>)
 800242c:	2200      	movs	r2, #0
 800242e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002432:	220c      	movs	r2, #12
 8002434:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002436:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002438:	2200      	movs	r2, #0
 800243a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800243c:	4b08      	ldr	r3, [pc, #32]	; (8002460 <_ZL19MX_USART3_UART_Initv+0x54>)
 800243e:	2200      	movs	r2, #0
 8002440:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002442:	4807      	ldr	r0, [pc, #28]	; (8002460 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002444:	f003 fc39 	bl	8005cba <HAL_UART_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	bf14      	ite	ne
 800244e:	2301      	movne	r3, #1
 8002450:	2300      	moveq	r3, #0
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8002458:	f000 f882 	bl	8002560 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}
 8002460:	2000033c 	.word	0x2000033c
 8002464:	40004800 	.word	0x40004800

08002468 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b088      	sub	sp, #32
 800246c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246e:	f107 0310 	add.w	r3, r7, #16
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	605a      	str	r2, [r3, #4]
 8002478:	609a      	str	r2, [r3, #8]
 800247a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800247c:	4b35      	ldr	r3, [pc, #212]	; (8002554 <_ZL12MX_GPIO_Initv+0xec>)
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	4a34      	ldr	r2, [pc, #208]	; (8002554 <_ZL12MX_GPIO_Initv+0xec>)
 8002482:	f043 0320 	orr.w	r3, r3, #32
 8002486:	6193      	str	r3, [r2, #24]
 8002488:	4b32      	ldr	r3, [pc, #200]	; (8002554 <_ZL12MX_GPIO_Initv+0xec>)
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	f003 0320 	and.w	r3, r3, #32
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002494:	4b2f      	ldr	r3, [pc, #188]	; (8002554 <_ZL12MX_GPIO_Initv+0xec>)
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	4a2e      	ldr	r2, [pc, #184]	; (8002554 <_ZL12MX_GPIO_Initv+0xec>)
 800249a:	f043 0304 	orr.w	r3, r3, #4
 800249e:	6193      	str	r3, [r2, #24]
 80024a0:	4b2c      	ldr	r3, [pc, #176]	; (8002554 <_ZL12MX_GPIO_Initv+0xec>)
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	60bb      	str	r3, [r7, #8]
 80024aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ac:	4b29      	ldr	r3, [pc, #164]	; (8002554 <_ZL12MX_GPIO_Initv+0xec>)
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	4a28      	ldr	r2, [pc, #160]	; (8002554 <_ZL12MX_GPIO_Initv+0xec>)
 80024b2:	f043 0308 	orr.w	r3, r3, #8
 80024b6:	6193      	str	r3, [r2, #24]
 80024b8:	4b26      	ldr	r3, [pc, #152]	; (8002554 <_ZL12MX_GPIO_Initv+0xec>)
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	f003 0308 	and.w	r3, r3, #8
 80024c0:	607b      	str	r3, [r7, #4]
 80024c2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MP6543H_EN_A_Pin|MP6543H_nSLEEP_X_Pin|SPI1_CSn_Pin, GPIO_PIN_RESET);
 80024c4:	2200      	movs	r2, #0
 80024c6:	f648 0180 	movw	r1, #34944	; 0x8880
 80024ca:	4823      	ldr	r0, [pc, #140]	; (8002558 <_ZL12MX_GPIO_Initv+0xf0>)
 80024cc:	f001 fa59 	bl	8003982 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MP6543H_EN_B_Pin|MP6543H_EN_C_Pin|SPI2_SCn_Pin, GPIO_PIN_RESET);
 80024d0:	2200      	movs	r2, #0
 80024d2:	f241 0103 	movw	r1, #4099	; 0x1003
 80024d6:	4821      	ldr	r0, [pc, #132]	; (800255c <_ZL12MX_GPIO_Initv+0xf4>)
 80024d8:	f001 fa53 	bl	8003982 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MP6543H_EN_A_Pin MP6543H_nSLEEP_X_Pin SPI1_CSn_Pin */
  GPIO_InitStruct.Pin = MP6543H_EN_A_Pin|MP6543H_nSLEEP_X_Pin|SPI1_CSn_Pin;
 80024dc:	f648 0380 	movw	r3, #34944	; 0x8880
 80024e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e2:	2301      	movs	r3, #1
 80024e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ea:	2302      	movs	r3, #2
 80024ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ee:	f107 0310 	add.w	r3, r7, #16
 80024f2:	4619      	mov	r1, r3
 80024f4:	4818      	ldr	r0, [pc, #96]	; (8002558 <_ZL12MX_GPIO_Initv+0xf0>)
 80024f6:	f001 f8a9 	bl	800364c <HAL_GPIO_Init>

  /*Configure GPIO pins : MP6543H_EN_B_Pin MP6543H_EN_C_Pin SPI2_SCn_Pin */
  GPIO_InitStruct.Pin = MP6543H_EN_B_Pin|MP6543H_EN_C_Pin|SPI2_SCn_Pin;
 80024fa:	f241 0303 	movw	r3, #4099	; 0x1003
 80024fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002500:	2301      	movs	r3, #1
 8002502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002504:	2300      	movs	r3, #0
 8002506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002508:	2302      	movs	r3, #2
 800250a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800250c:	f107 0310 	add.w	r3, r7, #16
 8002510:	4619      	mov	r1, r3
 8002512:	4812      	ldr	r0, [pc, #72]	; (800255c <_ZL12MX_GPIO_Initv+0xf4>)
 8002514:	f001 f89a 	bl	800364c <HAL_GPIO_Init>

  /*Configure GPIO pins : MP6543H_nFAULT_X_Pin MC3479_INTN1_Pin MC3479_INTN2_Pin */
  GPIO_InitStruct.Pin = MP6543H_nFAULT_X_Pin|MC3479_INTN1_Pin|MC3479_INTN2_Pin;
 8002518:	23c4      	movs	r3, #196	; 0xc4
 800251a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002520:	2301      	movs	r3, #1
 8002522:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002524:	f107 0310 	add.w	r3, r7, #16
 8002528:	4619      	mov	r1, r3
 800252a:	480c      	ldr	r0, [pc, #48]	; (800255c <_ZL12MX_GPIO_Initv+0xf4>)
 800252c:	f001 f88e 	bl	800364c <HAL_GPIO_Init>

  /*Configure GPIO pin : nTILT_BUTTON_Pin */
  GPIO_InitStruct.Pin = nTILT_BUTTON_Pin;
 8002530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002534:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(nTILT_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800253e:	f107 0310 	add.w	r3, r7, #16
 8002542:	4619      	mov	r1, r3
 8002544:	4804      	ldr	r0, [pc, #16]	; (8002558 <_ZL12MX_GPIO_Initv+0xf0>)
 8002546:	f001 f881 	bl	800364c <HAL_GPIO_Init>

}
 800254a:	bf00      	nop
 800254c:	3720      	adds	r7, #32
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40021000 	.word	0x40021000
 8002558:	40010800 	.word	0x40010800
 800255c:	40010c00 	.word	0x40010c00

08002560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002564:	b672      	cpsid	i
}
 8002566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002568:	e7fe      	b.n	8002568 <Error_Handler+0x8>
	...

0800256c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002572:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <HAL_MspInit+0x5c>)
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	4a14      	ldr	r2, [pc, #80]	; (80025c8 <HAL_MspInit+0x5c>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	6193      	str	r3, [r2, #24]
 800257e:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <HAL_MspInit+0x5c>)
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800258a:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <HAL_MspInit+0x5c>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	4a0e      	ldr	r2, [pc, #56]	; (80025c8 <HAL_MspInit+0x5c>)
 8002590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002594:	61d3      	str	r3, [r2, #28]
 8002596:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <HAL_MspInit+0x5c>)
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	607b      	str	r3, [r7, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80025a2:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <HAL_MspInit+0x60>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	4a04      	ldr	r2, [pc, #16]	; (80025cc <HAL_MspInit+0x60>)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025be:	bf00      	nop
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40010000 	.word	0x40010000

080025d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08a      	sub	sp, #40	; 0x28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d8:	f107 0318 	add.w	r3, r7, #24
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a28      	ldr	r2, [pc, #160]	; (800268c <HAL_ADC_MspInit+0xbc>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d122      	bne.n	8002636 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025f0:	4b27      	ldr	r3, [pc, #156]	; (8002690 <HAL_ADC_MspInit+0xc0>)
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	4a26      	ldr	r2, [pc, #152]	; (8002690 <HAL_ADC_MspInit+0xc0>)
 80025f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025fa:	6193      	str	r3, [r2, #24]
 80025fc:	4b24      	ldr	r3, [pc, #144]	; (8002690 <HAL_ADC_MspInit+0xc0>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002608:	4b21      	ldr	r3, [pc, #132]	; (8002690 <HAL_ADC_MspInit+0xc0>)
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	4a20      	ldr	r2, [pc, #128]	; (8002690 <HAL_ADC_MspInit+0xc0>)
 800260e:	f043 0304 	orr.w	r3, r3, #4
 8002612:	6193      	str	r3, [r2, #24]
 8002614:	4b1e      	ldr	r3, [pc, #120]	; (8002690 <HAL_ADC_MspInit+0xc0>)
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	613b      	str	r3, [r7, #16]
 800261e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ENCODER_PWM_IN_Pin;
 8002620:	2302      	movs	r3, #2
 8002622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002624:	2303      	movs	r3, #3
 8002626:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ENCODER_PWM_IN_GPIO_Port, &GPIO_InitStruct);
 8002628:	f107 0318 	add.w	r3, r7, #24
 800262c:	4619      	mov	r1, r3
 800262e:	4819      	ldr	r0, [pc, #100]	; (8002694 <HAL_ADC_MspInit+0xc4>)
 8002630:	f001 f80c 	bl	800364c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002634:	e026      	b.n	8002684 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a17      	ldr	r2, [pc, #92]	; (8002698 <HAL_ADC_MspInit+0xc8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d121      	bne.n	8002684 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002640:	4b13      	ldr	r3, [pc, #76]	; (8002690 <HAL_ADC_MspInit+0xc0>)
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	4a12      	ldr	r2, [pc, #72]	; (8002690 <HAL_ADC_MspInit+0xc0>)
 8002646:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800264a:	6193      	str	r3, [r2, #24]
 800264c:	4b10      	ldr	r3, [pc, #64]	; (8002690 <HAL_ADC_MspInit+0xc0>)
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002658:	4b0d      	ldr	r3, [pc, #52]	; (8002690 <HAL_ADC_MspInit+0xc0>)
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	4a0c      	ldr	r2, [pc, #48]	; (8002690 <HAL_ADC_MspInit+0xc0>)
 800265e:	f043 0304 	orr.w	r3, r3, #4
 8002662:	6193      	str	r3, [r2, #24]
 8002664:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <HAL_ADC_MspInit+0xc0>)
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MP6543H_SOA_X_Pin|MP6543H_SOB_X_Pin|MP6543H_SOC_X_Pin;
 8002670:	2370      	movs	r3, #112	; 0x70
 8002672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002674:	2303      	movs	r3, #3
 8002676:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002678:	f107 0318 	add.w	r3, r7, #24
 800267c:	4619      	mov	r1, r3
 800267e:	4805      	ldr	r0, [pc, #20]	; (8002694 <HAL_ADC_MspInit+0xc4>)
 8002680:	f000 ffe4 	bl	800364c <HAL_GPIO_Init>
}
 8002684:	bf00      	nop
 8002686:	3728      	adds	r7, #40	; 0x28
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40012400 	.word	0x40012400
 8002690:	40021000 	.word	0x40021000
 8002694:	40010800 	.word	0x40010800
 8002698:	40012800 	.word	0x40012800

0800269c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08c      	sub	sp, #48	; 0x30
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a4:	f107 031c 	add.w	r3, r7, #28
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a3e      	ldr	r2, [pc, #248]	; (80027b0 <HAL_SPI_MspInit+0x114>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d13e      	bne.n	800273a <HAL_SPI_MspInit+0x9e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026bc:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <HAL_SPI_MspInit+0x118>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	4a3c      	ldr	r2, [pc, #240]	; (80027b4 <HAL_SPI_MspInit+0x118>)
 80026c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026c6:	6193      	str	r3, [r2, #24]
 80026c8:	4b3a      	ldr	r3, [pc, #232]	; (80027b4 <HAL_SPI_MspInit+0x118>)
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026d0:	61bb      	str	r3, [r7, #24]
 80026d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d4:	4b37      	ldr	r3, [pc, #220]	; (80027b4 <HAL_SPI_MspInit+0x118>)
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	4a36      	ldr	r2, [pc, #216]	; (80027b4 <HAL_SPI_MspInit+0x118>)
 80026da:	f043 0308 	orr.w	r3, r3, #8
 80026de:	6193      	str	r3, [r2, #24]
 80026e0:	4b34      	ldr	r3, [pc, #208]	; (80027b4 <HAL_SPI_MspInit+0x118>)
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80026ec:	2328      	movs	r3, #40	; 0x28
 80026ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f0:	2302      	movs	r3, #2
 80026f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026f4:	2303      	movs	r3, #3
 80026f6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f8:	f107 031c 	add.w	r3, r7, #28
 80026fc:	4619      	mov	r1, r3
 80026fe:	482e      	ldr	r0, [pc, #184]	; (80027b8 <HAL_SPI_MspInit+0x11c>)
 8002700:	f000 ffa4 	bl	800364c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002704:	2310      	movs	r3, #16
 8002706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002708:	2300      	movs	r3, #0
 800270a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800270c:	2301      	movs	r3, #1
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002710:	f107 031c 	add.w	r3, r7, #28
 8002714:	4619      	mov	r1, r3
 8002716:	4828      	ldr	r0, [pc, #160]	; (80027b8 <HAL_SPI_MspInit+0x11c>)
 8002718:	f000 ff98 	bl	800364c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 800271c:	4b27      	ldr	r3, [pc, #156]	; (80027bc <HAL_SPI_MspInit+0x120>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002724:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002728:	62fb      	str	r3, [r7, #44]	; 0x2c
 800272a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002732:	4a22      	ldr	r2, [pc, #136]	; (80027bc <HAL_SPI_MspInit+0x120>)
 8002734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002736:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002738:	e036      	b.n	80027a8 <HAL_SPI_MspInit+0x10c>
  else if(hspi->Instance==SPI2)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a20      	ldr	r2, [pc, #128]	; (80027c0 <HAL_SPI_MspInit+0x124>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d131      	bne.n	80027a8 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002744:	4b1b      	ldr	r3, [pc, #108]	; (80027b4 <HAL_SPI_MspInit+0x118>)
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	4a1a      	ldr	r2, [pc, #104]	; (80027b4 <HAL_SPI_MspInit+0x118>)
 800274a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800274e:	61d3      	str	r3, [r2, #28]
 8002750:	4b18      	ldr	r3, [pc, #96]	; (80027b4 <HAL_SPI_MspInit+0x118>)
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800275c:	4b15      	ldr	r3, [pc, #84]	; (80027b4 <HAL_SPI_MspInit+0x118>)
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	4a14      	ldr	r2, [pc, #80]	; (80027b4 <HAL_SPI_MspInit+0x118>)
 8002762:	f043 0308 	orr.w	r3, r3, #8
 8002766:	6193      	str	r3, [r2, #24]
 8002768:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <HAL_SPI_MspInit+0x118>)
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002774:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277a:	2302      	movs	r3, #2
 800277c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800277e:	2303      	movs	r3, #3
 8002780:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002782:	f107 031c 	add.w	r3, r7, #28
 8002786:	4619      	mov	r1, r3
 8002788:	480b      	ldr	r0, [pc, #44]	; (80027b8 <HAL_SPI_MspInit+0x11c>)
 800278a:	f000 ff5f 	bl	800364c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800278e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002794:	2300      	movs	r3, #0
 8002796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800279c:	f107 031c 	add.w	r3, r7, #28
 80027a0:	4619      	mov	r1, r3
 80027a2:	4805      	ldr	r0, [pc, #20]	; (80027b8 <HAL_SPI_MspInit+0x11c>)
 80027a4:	f000 ff52 	bl	800364c <HAL_GPIO_Init>
}
 80027a8:	bf00      	nop
 80027aa:	3730      	adds	r7, #48	; 0x30
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40013000 	.word	0x40013000
 80027b4:	40021000 	.word	0x40021000
 80027b8:	40010c00 	.word	0x40010c00
 80027bc:	40010000 	.word	0x40010000
 80027c0:	40003800 	.word	0x40003800

080027c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a09      	ldr	r2, [pc, #36]	; (80027f8 <HAL_TIM_Base_MspInit+0x34>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d10b      	bne.n	80027ee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027d6:	4b09      	ldr	r3, [pc, #36]	; (80027fc <HAL_TIM_Base_MspInit+0x38>)
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	4a08      	ldr	r2, [pc, #32]	; (80027fc <HAL_TIM_Base_MspInit+0x38>)
 80027dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027e0:	6193      	str	r3, [r2, #24]
 80027e2:	4b06      	ldr	r3, [pc, #24]	; (80027fc <HAL_TIM_Base_MspInit+0x38>)
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80027ee:	bf00      	nop
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr
 80027f8:	40012c00 	.word	0x40012c00
 80027fc:	40021000 	.word	0x40021000

08002800 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002808:	f107 0310 	add.w	r3, r7, #16
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a10      	ldr	r2, [pc, #64]	; (800285c <HAL_TIM_MspPostInit+0x5c>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d118      	bne.n	8002852 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002820:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <HAL_TIM_MspPostInit+0x60>)
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	4a0e      	ldr	r2, [pc, #56]	; (8002860 <HAL_TIM_MspPostInit+0x60>)
 8002826:	f043 0304 	orr.w	r3, r3, #4
 800282a:	6193      	str	r3, [r2, #24]
 800282c:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <HAL_TIM_MspPostInit+0x60>)
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = MP6543H_PWM_A_Pin|MP6543H_PWM_B_Pin|MP6543H_PWM_C_Pin;
 8002838:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800283c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283e:	2302      	movs	r3, #2
 8002840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002842:	2302      	movs	r3, #2
 8002844:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002846:	f107 0310 	add.w	r3, r7, #16
 800284a:	4619      	mov	r1, r3
 800284c:	4805      	ldr	r0, [pc, #20]	; (8002864 <HAL_TIM_MspPostInit+0x64>)
 800284e:	f000 fefd 	bl	800364c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002852:	bf00      	nop
 8002854:	3720      	adds	r7, #32
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40012c00 	.word	0x40012c00
 8002860:	40021000 	.word	0x40021000
 8002864:	40010800 	.word	0x40010800

08002868 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08a      	sub	sp, #40	; 0x28
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002870:	f107 0318 	add.w	r3, r7, #24
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a37      	ldr	r2, [pc, #220]	; (8002960 <HAL_UART_MspInit+0xf8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d130      	bne.n	80028ea <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002888:	4b36      	ldr	r3, [pc, #216]	; (8002964 <HAL_UART_MspInit+0xfc>)
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	4a35      	ldr	r2, [pc, #212]	; (8002964 <HAL_UART_MspInit+0xfc>)
 800288e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002892:	61d3      	str	r3, [r2, #28]
 8002894:	4b33      	ldr	r3, [pc, #204]	; (8002964 <HAL_UART_MspInit+0xfc>)
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a0:	4b30      	ldr	r3, [pc, #192]	; (8002964 <HAL_UART_MspInit+0xfc>)
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	4a2f      	ldr	r2, [pc, #188]	; (8002964 <HAL_UART_MspInit+0xfc>)
 80028a6:	f043 0304 	orr.w	r3, r3, #4
 80028aa:	6193      	str	r3, [r2, #24]
 80028ac:	4b2d      	ldr	r3, [pc, #180]	; (8002964 <HAL_UART_MspInit+0xfc>)
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80028b8:	2304      	movs	r3, #4
 80028ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028bc:	2302      	movs	r3, #2
 80028be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028c0:	2303      	movs	r3, #3
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c4:	f107 0318 	add.w	r3, r7, #24
 80028c8:	4619      	mov	r1, r3
 80028ca:	4827      	ldr	r0, [pc, #156]	; (8002968 <HAL_UART_MspInit+0x100>)
 80028cc:	f000 febe 	bl	800364c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80028d0:	2308      	movs	r3, #8
 80028d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028d4:	2300      	movs	r3, #0
 80028d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028dc:	f107 0318 	add.w	r3, r7, #24
 80028e0:	4619      	mov	r1, r3
 80028e2:	4821      	ldr	r0, [pc, #132]	; (8002968 <HAL_UART_MspInit+0x100>)
 80028e4:	f000 feb2 	bl	800364c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80028e8:	e036      	b.n	8002958 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a1f      	ldr	r2, [pc, #124]	; (800296c <HAL_UART_MspInit+0x104>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d131      	bne.n	8002958 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80028f4:	4b1b      	ldr	r3, [pc, #108]	; (8002964 <HAL_UART_MspInit+0xfc>)
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	4a1a      	ldr	r2, [pc, #104]	; (8002964 <HAL_UART_MspInit+0xfc>)
 80028fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028fe:	61d3      	str	r3, [r2, #28]
 8002900:	4b18      	ldr	r3, [pc, #96]	; (8002964 <HAL_UART_MspInit+0xfc>)
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800290c:	4b15      	ldr	r3, [pc, #84]	; (8002964 <HAL_UART_MspInit+0xfc>)
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	4a14      	ldr	r2, [pc, #80]	; (8002964 <HAL_UART_MspInit+0xfc>)
 8002912:	f043 0308 	orr.w	r3, r3, #8
 8002916:	6193      	str	r3, [r2, #24]
 8002918:	4b12      	ldr	r3, [pc, #72]	; (8002964 <HAL_UART_MspInit+0xfc>)
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002924:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292a:	2302      	movs	r3, #2
 800292c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800292e:	2303      	movs	r3, #3
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002932:	f107 0318 	add.w	r3, r7, #24
 8002936:	4619      	mov	r1, r3
 8002938:	480d      	ldr	r0, [pc, #52]	; (8002970 <HAL_UART_MspInit+0x108>)
 800293a:	f000 fe87 	bl	800364c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800293e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002944:	2300      	movs	r3, #0
 8002946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800294c:	f107 0318 	add.w	r3, r7, #24
 8002950:	4619      	mov	r1, r3
 8002952:	4807      	ldr	r0, [pc, #28]	; (8002970 <HAL_UART_MspInit+0x108>)
 8002954:	f000 fe7a 	bl	800364c <HAL_GPIO_Init>
}
 8002958:	bf00      	nop
 800295a:	3728      	adds	r7, #40	; 0x28
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40004400 	.word	0x40004400
 8002964:	40021000 	.word	0x40021000
 8002968:	40010800 	.word	0x40010800
 800296c:	40004800 	.word	0x40004800
 8002970:	40010c00 	.word	0x40010c00

08002974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002978:	e7fe      	b.n	8002978 <NMI_Handler+0x4>

0800297a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800297a:	b480      	push	{r7}
 800297c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800297e:	e7fe      	b.n	800297e <HardFault_Handler+0x4>

08002980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002984:	e7fe      	b.n	8002984 <MemManage_Handler+0x4>

08002986 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002986:	b480      	push	{r7}
 8002988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800298a:	e7fe      	b.n	800298a <BusFault_Handler+0x4>

0800298c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002990:	e7fe      	b.n	8002990 <UsageFault_Handler+0x4>

08002992 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002992:	b480      	push	{r7}
 8002994:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002996:	bf00      	nop
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr

0800299e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800299e:	b480      	push	{r7}
 80029a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029a2:	bf00      	nop
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr

080029aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029aa:	b480      	push	{r7}
 80029ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc80      	pop	{r7}
 80029b4:	4770      	bx	lr

080029b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029ba:	f000 f8cb 	bl	8002b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029c2:	b480      	push	{r7}
 80029c4:	af00      	add	r7, sp, #0
	return 1;
 80029c6:	2301      	movs	r3, #1
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr

080029d0 <_kill>:

int _kill(int pid, int sig)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80029da:	f003 fed5 	bl	8006788 <__errno>
 80029de:	4603      	mov	r3, r0
 80029e0:	2216      	movs	r2, #22
 80029e2:	601a      	str	r2, [r3, #0]
	return -1;
 80029e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <_exit>:

void _exit (int status)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80029f8:	f04f 31ff 	mov.w	r1, #4294967295
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7ff ffe7 	bl	80029d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a02:	e7fe      	b.n	8002a02 <_exit+0x12>

08002a04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a0c:	4a14      	ldr	r2, [pc, #80]	; (8002a60 <_sbrk+0x5c>)
 8002a0e:	4b15      	ldr	r3, [pc, #84]	; (8002a64 <_sbrk+0x60>)
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a18:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <_sbrk+0x64>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d102      	bne.n	8002a26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a20:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <_sbrk+0x64>)
 8002a22:	4a12      	ldr	r2, [pc, #72]	; (8002a6c <_sbrk+0x68>)
 8002a24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a26:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <_sbrk+0x64>)
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d207      	bcs.n	8002a44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a34:	f003 fea8 	bl	8006788 <__errno>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	220c      	movs	r2, #12
 8002a3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a42:	e009      	b.n	8002a58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a44:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <_sbrk+0x64>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a4a:	4b07      	ldr	r3, [pc, #28]	; (8002a68 <_sbrk+0x64>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4413      	add	r3, r2
 8002a52:	4a05      	ldr	r2, [pc, #20]	; (8002a68 <_sbrk+0x64>)
 8002a54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a56:	68fb      	ldr	r3, [r7, #12]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20005000 	.word	0x20005000
 8002a64:	00000400 	.word	0x00000400
 8002a68:	20000380 	.word	0x20000380
 8002a6c:	200003d8 	.word	0x200003d8

08002a70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr

08002a7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a7c:	480c      	ldr	r0, [pc, #48]	; (8002ab0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a7e:	490d      	ldr	r1, [pc, #52]	; (8002ab4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a80:	4a0d      	ldr	r2, [pc, #52]	; (8002ab8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a84:	e002      	b.n	8002a8c <LoopCopyDataInit>

08002a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a8a:	3304      	adds	r3, #4

08002a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a90:	d3f9      	bcc.n	8002a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a92:	4a0a      	ldr	r2, [pc, #40]	; (8002abc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a94:	4c0a      	ldr	r4, [pc, #40]	; (8002ac0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a98:	e001      	b.n	8002a9e <LoopFillZerobss>

08002a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a9c:	3204      	adds	r2, #4

08002a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002aa0:	d3fb      	bcc.n	8002a9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002aa2:	f7ff ffe5 	bl	8002a70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002aa6:	f003 fe75 	bl	8006794 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002aaa:	f7fe fffd 	bl	8001aa8 <main>
  bx lr
 8002aae:	4770      	bx	lr
  ldr r0, =_sdata
 8002ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ab4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002ab8:	08006c6c 	.word	0x08006c6c
  ldr r2, =_sbss
 8002abc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002ac0:	200003d8 	.word	0x200003d8

08002ac4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ac4:	e7fe      	b.n	8002ac4 <ADC1_2_IRQHandler>
	...

08002ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002acc:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <HAL_Init+0x28>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a07      	ldr	r2, [pc, #28]	; (8002af0 <HAL_Init+0x28>)
 8002ad2:	f043 0310 	orr.w	r3, r3, #16
 8002ad6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ad8:	2003      	movs	r0, #3
 8002ada:	f000 fd83 	bl	80035e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ade:	200f      	movs	r0, #15
 8002ae0:	f000 f808 	bl	8002af4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ae4:	f7ff fd42 	bl	800256c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40022000 	.word	0x40022000

08002af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002afc:	4b12      	ldr	r3, [pc, #72]	; (8002b48 <HAL_InitTick+0x54>)
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <HAL_InitTick+0x58>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	4619      	mov	r1, r3
 8002b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 fd8d 	bl	8003632 <HAL_SYSTICK_Config>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e00e      	b.n	8002b40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b0f      	cmp	r3, #15
 8002b26:	d80a      	bhi.n	8002b3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b28:	2200      	movs	r2, #0
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b30:	f000 fd63 	bl	80035fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b34:	4a06      	ldr	r2, [pc, #24]	; (8002b50 <HAL_InitTick+0x5c>)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	e000      	b.n	8002b40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	20000000 	.word	0x20000000
 8002b4c:	20000008 	.word	0x20000008
 8002b50:	20000004 	.word	0x20000004

08002b54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b58:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <HAL_IncTick+0x1c>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <HAL_IncTick+0x20>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4413      	add	r3, r2
 8002b64:	4a03      	ldr	r2, [pc, #12]	; (8002b74 <HAL_IncTick+0x20>)
 8002b66:	6013      	str	r3, [r2, #0]
}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr
 8002b70:	20000008 	.word	0x20000008
 8002b74:	20000384 	.word	0x20000384

08002b78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b7c:	4b02      	ldr	r3, [pc, #8]	; (8002b88 <HAL_GetTick+0x10>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr
 8002b88:	20000384 	.word	0x20000384

08002b8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b94:	f7ff fff0 	bl	8002b78 <HAL_GetTick>
 8002b98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba4:	d005      	beq.n	8002bb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ba6:	4b0a      	ldr	r3, [pc, #40]	; (8002bd0 <HAL_Delay+0x44>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	461a      	mov	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4413      	add	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bb2:	bf00      	nop
 8002bb4:	f7ff ffe0 	bl	8002b78 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d8f7      	bhi.n	8002bb4 <HAL_Delay+0x28>
  {
  }
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20000008 	.word	0x20000008

08002bd4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e0be      	b.n	8002d74 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d109      	bne.n	8002c18 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7ff fcdc 	bl	80025d0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 fbf1 	bl	8003400 <ADC_ConversionStop_Disable>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c26:	f003 0310 	and.w	r3, r3, #16
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f040 8099 	bne.w	8002d62 <HAL_ADC_Init+0x18e>
 8002c30:	7dfb      	ldrb	r3, [r7, #23]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f040 8095 	bne.w	8002d62 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c40:	f023 0302 	bic.w	r3, r3, #2
 8002c44:	f043 0202 	orr.w	r2, r3, #2
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c54:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	7b1b      	ldrb	r3, [r3, #12]
 8002c5a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c5c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c6c:	d003      	beq.n	8002c76 <HAL_ADC_Init+0xa2>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d102      	bne.n	8002c7c <HAL_ADC_Init+0xa8>
 8002c76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c7a:	e000      	b.n	8002c7e <HAL_ADC_Init+0xaa>
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	7d1b      	ldrb	r3, [r3, #20]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d119      	bne.n	8002cc0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	7b1b      	ldrb	r3, [r3, #12]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d109      	bne.n	8002ca8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	035a      	lsls	r2, r3, #13
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	e00b      	b.n	8002cc0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cac:	f043 0220 	orr.w	r2, r3, #32
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb8:	f043 0201 	orr.w	r2, r3, #1
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	4b28      	ldr	r3, [pc, #160]	; (8002d7c <HAL_ADC_Init+0x1a8>)
 8002cdc:	4013      	ands	r3, r2
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6812      	ldr	r2, [r2, #0]
 8002ce2:	68b9      	ldr	r1, [r7, #8]
 8002ce4:	430b      	orrs	r3, r1
 8002ce6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cf0:	d003      	beq.n	8002cfa <HAL_ADC_Init+0x126>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d104      	bne.n	8002d04 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	051b      	lsls	r3, r3, #20
 8002d02:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	4b18      	ldr	r3, [pc, #96]	; (8002d80 <HAL_ADC_Init+0x1ac>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d10b      	bne.n	8002d40 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d32:	f023 0303 	bic.w	r3, r3, #3
 8002d36:	f043 0201 	orr.w	r2, r3, #1
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d3e:	e018      	b.n	8002d72 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d44:	f023 0312 	bic.w	r3, r3, #18
 8002d48:	f043 0210 	orr.w	r2, r3, #16
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	f043 0201 	orr.w	r2, r3, #1
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d60:	e007      	b.n	8002d72 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d66:	f043 0210 	orr.w	r2, r3, #16
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	ffe1f7fd 	.word	0xffe1f7fd
 8002d80:	ff1f0efe 	.word	0xff1f0efe

08002d84 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d101      	bne.n	8002d9e <HAL_ADC_Start+0x1a>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	e098      	b.n	8002ed0 <HAL_ADC_Start+0x14c>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 fad0 	bl	800334c <ADC_Enable>
 8002dac:	4603      	mov	r3, r0
 8002dae:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f040 8087 	bne.w	8002ec6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dc0:	f023 0301 	bic.w	r3, r3, #1
 8002dc4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a41      	ldr	r2, [pc, #260]	; (8002ed8 <HAL_ADC_Start+0x154>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d105      	bne.n	8002de2 <HAL_ADC_Start+0x5e>
 8002dd6:	4b41      	ldr	r3, [pc, #260]	; (8002edc <HAL_ADC_Start+0x158>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d115      	bne.n	8002e0e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d026      	beq.n	8002e4a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e00:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e04:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e0c:	e01d      	b.n	8002e4a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e12:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a2f      	ldr	r2, [pc, #188]	; (8002edc <HAL_ADC_Start+0x158>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d004      	beq.n	8002e2e <HAL_ADC_Start+0xaa>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a2b      	ldr	r2, [pc, #172]	; (8002ed8 <HAL_ADC_Start+0x154>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d10d      	bne.n	8002e4a <HAL_ADC_Start+0xc6>
 8002e2e:	4b2b      	ldr	r3, [pc, #172]	; (8002edc <HAL_ADC_Start+0x158>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d007      	beq.n	8002e4a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d006      	beq.n	8002e64 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5a:	f023 0206 	bic.w	r2, r3, #6
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e62:	e002      	b.n	8002e6a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f06f 0202 	mvn.w	r2, #2
 8002e7a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002e86:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002e8a:	d113      	bne.n	8002eb4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002e90:	4a11      	ldr	r2, [pc, #68]	; (8002ed8 <HAL_ADC_Start+0x154>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d105      	bne.n	8002ea2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002e96:	4b11      	ldr	r3, [pc, #68]	; (8002edc <HAL_ADC_Start+0x158>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d108      	bne.n	8002eb4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002eb0:	609a      	str	r2, [r3, #8]
 8002eb2:	e00c      	b.n	8002ece <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002ec2:	609a      	str	r2, [r3, #8]
 8002ec4:	e003      	b.n	8002ece <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40012800 	.word	0x40012800
 8002edc:	40012400 	.word	0x40012400

08002ee0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d101      	bne.n	8002efa <HAL_ADC_Stop+0x1a>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e01a      	b.n	8002f30 <HAL_ADC_Stop+0x50>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 fa7c 	bl	8003400 <ADC_ConversionStop_Disable>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d109      	bne.n	8002f26 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f16:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f1a:	f023 0301 	bic.w	r3, r3, #1
 8002f1e:	f043 0201 	orr.w	r2, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002f38:	b590      	push	{r4, r7, lr}
 8002f3a:	b087      	sub	sp, #28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002f4e:	f7ff fe13 	bl	8002b78 <HAL_GetTick>
 8002f52:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00b      	beq.n	8002f7a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f66:	f043 0220 	orr.w	r2, r3, #32
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e0d3      	b.n	8003122 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d131      	bne.n	8002fec <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d12a      	bne.n	8002fec <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002f96:	e021      	b.n	8002fdc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9e:	d01d      	beq.n	8002fdc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d007      	beq.n	8002fb6 <HAL_ADC_PollForConversion+0x7e>
 8002fa6:	f7ff fde7 	bl	8002b78 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d212      	bcs.n	8002fdc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10b      	bne.n	8002fdc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc8:	f043 0204 	orr.w	r2, r3, #4
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e0a2      	b.n	8003122 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0d6      	beq.n	8002f98 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002fea:	e070      	b.n	80030ce <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002fec:	4b4f      	ldr	r3, [pc, #316]	; (800312c <HAL_ADC_PollForConversion+0x1f4>)
 8002fee:	681c      	ldr	r4, [r3, #0]
 8002ff0:	2002      	movs	r0, #2
 8002ff2:	f001 f9b1 	bl	8004358 <HAL_RCCEx_GetPeriphCLKFreq>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6919      	ldr	r1, [r3, #16]
 8003002:	4b4b      	ldr	r3, [pc, #300]	; (8003130 <HAL_ADC_PollForConversion+0x1f8>)
 8003004:	400b      	ands	r3, r1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d118      	bne.n	800303c <HAL_ADC_PollForConversion+0x104>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68d9      	ldr	r1, [r3, #12]
 8003010:	4b48      	ldr	r3, [pc, #288]	; (8003134 <HAL_ADC_PollForConversion+0x1fc>)
 8003012:	400b      	ands	r3, r1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d111      	bne.n	800303c <HAL_ADC_PollForConversion+0x104>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6919      	ldr	r1, [r3, #16]
 800301e:	4b46      	ldr	r3, [pc, #280]	; (8003138 <HAL_ADC_PollForConversion+0x200>)
 8003020:	400b      	ands	r3, r1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d108      	bne.n	8003038 <HAL_ADC_PollForConversion+0x100>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68d9      	ldr	r1, [r3, #12]
 800302c:	4b43      	ldr	r3, [pc, #268]	; (800313c <HAL_ADC_PollForConversion+0x204>)
 800302e:	400b      	ands	r3, r1
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_ADC_PollForConversion+0x100>
 8003034:	2314      	movs	r3, #20
 8003036:	e020      	b.n	800307a <HAL_ADC_PollForConversion+0x142>
 8003038:	2329      	movs	r3, #41	; 0x29
 800303a:	e01e      	b.n	800307a <HAL_ADC_PollForConversion+0x142>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6919      	ldr	r1, [r3, #16]
 8003042:	4b3d      	ldr	r3, [pc, #244]	; (8003138 <HAL_ADC_PollForConversion+0x200>)
 8003044:	400b      	ands	r3, r1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d106      	bne.n	8003058 <HAL_ADC_PollForConversion+0x120>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68d9      	ldr	r1, [r3, #12]
 8003050:	4b3a      	ldr	r3, [pc, #232]	; (800313c <HAL_ADC_PollForConversion+0x204>)
 8003052:	400b      	ands	r3, r1
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00d      	beq.n	8003074 <HAL_ADC_PollForConversion+0x13c>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6919      	ldr	r1, [r3, #16]
 800305e:	4b38      	ldr	r3, [pc, #224]	; (8003140 <HAL_ADC_PollForConversion+0x208>)
 8003060:	400b      	ands	r3, r1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d108      	bne.n	8003078 <HAL_ADC_PollForConversion+0x140>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68d9      	ldr	r1, [r3, #12]
 800306c:	4b34      	ldr	r3, [pc, #208]	; (8003140 <HAL_ADC_PollForConversion+0x208>)
 800306e:	400b      	ands	r3, r1
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_ADC_PollForConversion+0x140>
 8003074:	2354      	movs	r3, #84	; 0x54
 8003076:	e000      	b.n	800307a <HAL_ADC_PollForConversion+0x142>
 8003078:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800307a:	fb02 f303 	mul.w	r3, r2, r3
 800307e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003080:	e021      	b.n	80030c6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003088:	d01a      	beq.n	80030c0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d007      	beq.n	80030a0 <HAL_ADC_PollForConversion+0x168>
 8003090:	f7ff fd72 	bl	8002b78 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	429a      	cmp	r2, r3
 800309e:	d20f      	bcs.n	80030c0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d90b      	bls.n	80030c0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ac:	f043 0204 	orr.w	r2, r3, #4
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e030      	b.n	8003122 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	3301      	adds	r3, #1
 80030c4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d8d9      	bhi.n	8003082 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f06f 0212 	mvn.w	r2, #18
 80030d6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80030ee:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80030f2:	d115      	bne.n	8003120 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d111      	bne.n	8003120 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003100:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d105      	bne.n	8003120 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003118:	f043 0201 	orr.w	r2, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	371c      	adds	r7, #28
 8003126:	46bd      	mov	sp, r7
 8003128:	bd90      	pop	{r4, r7, pc}
 800312a:	bf00      	nop
 800312c:	20000000 	.word	0x20000000
 8003130:	24924924 	.word	0x24924924
 8003134:	00924924 	.word	0x00924924
 8003138:	12492492 	.word	0x12492492
 800313c:	00492492 	.word	0x00492492
 8003140:	00249249 	.word	0x00249249

08003144 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003152:	4618      	mov	r0, r3
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr

0800315c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003166:	2300      	movs	r3, #0
 8003168:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800316a:	2300      	movs	r3, #0
 800316c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_ADC_ConfigChannel+0x20>
 8003178:	2302      	movs	r3, #2
 800317a:	e0dc      	b.n	8003336 <HAL_ADC_ConfigChannel+0x1da>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b06      	cmp	r3, #6
 800318a:	d81c      	bhi.n	80031c6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	3b05      	subs	r3, #5
 800319e:	221f      	movs	r2, #31
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	43db      	mvns	r3, r3
 80031a6:	4019      	ands	r1, r3
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	6818      	ldr	r0, [r3, #0]
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	3b05      	subs	r3, #5
 80031b8:	fa00 f203 	lsl.w	r2, r0, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	635a      	str	r2, [r3, #52]	; 0x34
 80031c4:	e03c      	b.n	8003240 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b0c      	cmp	r3, #12
 80031cc:	d81c      	bhi.n	8003208 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	3b23      	subs	r3, #35	; 0x23
 80031e0:	221f      	movs	r2, #31
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	43db      	mvns	r3, r3
 80031e8:	4019      	ands	r1, r3
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	6818      	ldr	r0, [r3, #0]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	3b23      	subs	r3, #35	; 0x23
 80031fa:	fa00 f203 	lsl.w	r2, r0, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	631a      	str	r2, [r3, #48]	; 0x30
 8003206:	e01b      	b.n	8003240 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	3b41      	subs	r3, #65	; 0x41
 800321a:	221f      	movs	r2, #31
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	43db      	mvns	r3, r3
 8003222:	4019      	ands	r1, r3
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	6818      	ldr	r0, [r3, #0]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	4613      	mov	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	3b41      	subs	r3, #65	; 0x41
 8003234:	fa00 f203 	lsl.w	r2, r0, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b09      	cmp	r3, #9
 8003246:	d91c      	bls.n	8003282 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68d9      	ldr	r1, [r3, #12]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	4613      	mov	r3, r2
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	4413      	add	r3, r2
 8003258:	3b1e      	subs	r3, #30
 800325a:	2207      	movs	r2, #7
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	43db      	mvns	r3, r3
 8003262:	4019      	ands	r1, r3
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	6898      	ldr	r0, [r3, #8]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	4613      	mov	r3, r2
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	4413      	add	r3, r2
 8003272:	3b1e      	subs	r3, #30
 8003274:	fa00 f203 	lsl.w	r2, r0, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	60da      	str	r2, [r3, #12]
 8003280:	e019      	b.n	80032b6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6919      	ldr	r1, [r3, #16]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	4613      	mov	r3, r2
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	4413      	add	r3, r2
 8003292:	2207      	movs	r2, #7
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	43db      	mvns	r3, r3
 800329a:	4019      	ands	r1, r3
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	6898      	ldr	r0, [r3, #8]
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	4613      	mov	r3, r2
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	4413      	add	r3, r2
 80032aa:	fa00 f203 	lsl.w	r2, r0, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b10      	cmp	r3, #16
 80032bc:	d003      	beq.n	80032c6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032c2:	2b11      	cmp	r3, #17
 80032c4:	d132      	bne.n	800332c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a1d      	ldr	r2, [pc, #116]	; (8003340 <HAL_ADC_ConfigChannel+0x1e4>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d125      	bne.n	800331c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d126      	bne.n	800332c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80032ec:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b10      	cmp	r3, #16
 80032f4:	d11a      	bne.n	800332c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032f6:	4b13      	ldr	r3, [pc, #76]	; (8003344 <HAL_ADC_ConfigChannel+0x1e8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a13      	ldr	r2, [pc, #76]	; (8003348 <HAL_ADC_ConfigChannel+0x1ec>)
 80032fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003300:	0c9a      	lsrs	r2, r3, #18
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800330c:	e002      	b.n	8003314 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	3b01      	subs	r3, #1
 8003312:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f9      	bne.n	800330e <HAL_ADC_ConfigChannel+0x1b2>
 800331a:	e007      	b.n	800332c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003320:	f043 0220 	orr.w	r2, r3, #32
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003334:	7bfb      	ldrb	r3, [r7, #15]
}
 8003336:	4618      	mov	r0, r3
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr
 8003340:	40012400 	.word	0x40012400
 8003344:	20000000 	.word	0x20000000
 8003348:	431bde83 	.word	0x431bde83

0800334c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003358:	2300      	movs	r3, #0
 800335a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b01      	cmp	r3, #1
 8003368:	d040      	beq.n	80033ec <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f042 0201 	orr.w	r2, r2, #1
 8003378:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800337a:	4b1f      	ldr	r3, [pc, #124]	; (80033f8 <ADC_Enable+0xac>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a1f      	ldr	r2, [pc, #124]	; (80033fc <ADC_Enable+0xb0>)
 8003380:	fba2 2303 	umull	r2, r3, r2, r3
 8003384:	0c9b      	lsrs	r3, r3, #18
 8003386:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003388:	e002      	b.n	8003390 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	3b01      	subs	r3, #1
 800338e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1f9      	bne.n	800338a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003396:	f7ff fbef 	bl	8002b78 <HAL_GetTick>
 800339a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800339c:	e01f      	b.n	80033de <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800339e:	f7ff fbeb 	bl	8002b78 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d918      	bls.n	80033de <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d011      	beq.n	80033de <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033be:	f043 0210 	orr.w	r2, r3, #16
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ca:	f043 0201 	orr.w	r2, r3, #1
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e007      	b.n	80033ee <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d1d8      	bne.n	800339e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	20000000 	.word	0x20000000
 80033fc:	431bde83 	.word	0x431bde83

08003400 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b01      	cmp	r3, #1
 8003418:	d12e      	bne.n	8003478 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0201 	bic.w	r2, r2, #1
 8003428:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800342a:	f7ff fba5 	bl	8002b78 <HAL_GetTick>
 800342e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003430:	e01b      	b.n	800346a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003432:	f7ff fba1 	bl	8002b78 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d914      	bls.n	800346a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b01      	cmp	r3, #1
 800344c:	d10d      	bne.n	800346a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003452:	f043 0210 	orr.w	r2, r3, #16
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345e:	f043 0201 	orr.w	r2, r3, #1
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e007      	b.n	800347a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b01      	cmp	r3, #1
 8003476:	d0dc      	beq.n	8003432 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003494:	4b0c      	ldr	r3, [pc, #48]	; (80034c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034a0:	4013      	ands	r3, r2
 80034a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034b6:	4a04      	ldr	r2, [pc, #16]	; (80034c8 <__NVIC_SetPriorityGrouping+0x44>)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	60d3      	str	r3, [r2, #12]
}
 80034bc:	bf00      	nop
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bc80      	pop	{r7}
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	e000ed00 	.word	0xe000ed00

080034cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034d0:	4b04      	ldr	r3, [pc, #16]	; (80034e4 <__NVIC_GetPriorityGrouping+0x18>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	0a1b      	lsrs	r3, r3, #8
 80034d6:	f003 0307 	and.w	r3, r3, #7
}
 80034da:	4618      	mov	r0, r3
 80034dc:	46bd      	mov	sp, r7
 80034de:	bc80      	pop	{r7}
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	e000ed00 	.word	0xe000ed00

080034e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	6039      	str	r1, [r7, #0]
 80034f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	db0a      	blt.n	8003512 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	490c      	ldr	r1, [pc, #48]	; (8003534 <__NVIC_SetPriority+0x4c>)
 8003502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003506:	0112      	lsls	r2, r2, #4
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	440b      	add	r3, r1
 800350c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003510:	e00a      	b.n	8003528 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	b2da      	uxtb	r2, r3
 8003516:	4908      	ldr	r1, [pc, #32]	; (8003538 <__NVIC_SetPriority+0x50>)
 8003518:	79fb      	ldrb	r3, [r7, #7]
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	3b04      	subs	r3, #4
 8003520:	0112      	lsls	r2, r2, #4
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	440b      	add	r3, r1
 8003526:	761a      	strb	r2, [r3, #24]
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	e000e100 	.word	0xe000e100
 8003538:	e000ed00 	.word	0xe000ed00

0800353c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800353c:	b480      	push	{r7}
 800353e:	b089      	sub	sp, #36	; 0x24
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	f1c3 0307 	rsb	r3, r3, #7
 8003556:	2b04      	cmp	r3, #4
 8003558:	bf28      	it	cs
 800355a:	2304      	movcs	r3, #4
 800355c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	3304      	adds	r3, #4
 8003562:	2b06      	cmp	r3, #6
 8003564:	d902      	bls.n	800356c <NVIC_EncodePriority+0x30>
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	3b03      	subs	r3, #3
 800356a:	e000      	b.n	800356e <NVIC_EncodePriority+0x32>
 800356c:	2300      	movs	r3, #0
 800356e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003570:	f04f 32ff 	mov.w	r2, #4294967295
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	43da      	mvns	r2, r3
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	401a      	ands	r2, r3
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003584:	f04f 31ff 	mov.w	r1, #4294967295
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	fa01 f303 	lsl.w	r3, r1, r3
 800358e:	43d9      	mvns	r1, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003594:	4313      	orrs	r3, r2
         );
}
 8003596:	4618      	mov	r0, r3
 8003598:	3724      	adds	r7, #36	; 0x24
 800359a:	46bd      	mov	sp, r7
 800359c:	bc80      	pop	{r7}
 800359e:	4770      	bx	lr

080035a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3b01      	subs	r3, #1
 80035ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035b0:	d301      	bcc.n	80035b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035b2:	2301      	movs	r3, #1
 80035b4:	e00f      	b.n	80035d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035b6:	4a0a      	ldr	r2, [pc, #40]	; (80035e0 <SysTick_Config+0x40>)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3b01      	subs	r3, #1
 80035bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035be:	210f      	movs	r1, #15
 80035c0:	f04f 30ff 	mov.w	r0, #4294967295
 80035c4:	f7ff ff90 	bl	80034e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035c8:	4b05      	ldr	r3, [pc, #20]	; (80035e0 <SysTick_Config+0x40>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035ce:	4b04      	ldr	r3, [pc, #16]	; (80035e0 <SysTick_Config+0x40>)
 80035d0:	2207      	movs	r2, #7
 80035d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	e000e010 	.word	0xe000e010

080035e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7ff ff49 	bl	8003484 <__NVIC_SetPriorityGrouping>
}
 80035f2:	bf00      	nop
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b086      	sub	sp, #24
 80035fe:	af00      	add	r7, sp, #0
 8003600:	4603      	mov	r3, r0
 8003602:	60b9      	str	r1, [r7, #8]
 8003604:	607a      	str	r2, [r7, #4]
 8003606:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800360c:	f7ff ff5e 	bl	80034cc <__NVIC_GetPriorityGrouping>
 8003610:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	68b9      	ldr	r1, [r7, #8]
 8003616:	6978      	ldr	r0, [r7, #20]
 8003618:	f7ff ff90 	bl	800353c <NVIC_EncodePriority>
 800361c:	4602      	mov	r2, r0
 800361e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003622:	4611      	mov	r1, r2
 8003624:	4618      	mov	r0, r3
 8003626:	f7ff ff5f 	bl	80034e8 <__NVIC_SetPriority>
}
 800362a:	bf00      	nop
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003632:	b580      	push	{r7, lr}
 8003634:	b082      	sub	sp, #8
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7ff ffb0 	bl	80035a0 <SysTick_Config>
 8003640:	4603      	mov	r3, r0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
	...

0800364c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800364c:	b480      	push	{r7}
 800364e:	b08b      	sub	sp, #44	; 0x2c
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003656:	2300      	movs	r3, #0
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800365a:	2300      	movs	r3, #0
 800365c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800365e:	e169      	b.n	8003934 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003660:	2201      	movs	r2, #1
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	69fa      	ldr	r2, [r7, #28]
 8003670:	4013      	ands	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	429a      	cmp	r2, r3
 800367a:	f040 8158 	bne.w	800392e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	4a9a      	ldr	r2, [pc, #616]	; (80038ec <HAL_GPIO_Init+0x2a0>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d05e      	beq.n	8003746 <HAL_GPIO_Init+0xfa>
 8003688:	4a98      	ldr	r2, [pc, #608]	; (80038ec <HAL_GPIO_Init+0x2a0>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d875      	bhi.n	800377a <HAL_GPIO_Init+0x12e>
 800368e:	4a98      	ldr	r2, [pc, #608]	; (80038f0 <HAL_GPIO_Init+0x2a4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d058      	beq.n	8003746 <HAL_GPIO_Init+0xfa>
 8003694:	4a96      	ldr	r2, [pc, #600]	; (80038f0 <HAL_GPIO_Init+0x2a4>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d86f      	bhi.n	800377a <HAL_GPIO_Init+0x12e>
 800369a:	4a96      	ldr	r2, [pc, #600]	; (80038f4 <HAL_GPIO_Init+0x2a8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d052      	beq.n	8003746 <HAL_GPIO_Init+0xfa>
 80036a0:	4a94      	ldr	r2, [pc, #592]	; (80038f4 <HAL_GPIO_Init+0x2a8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d869      	bhi.n	800377a <HAL_GPIO_Init+0x12e>
 80036a6:	4a94      	ldr	r2, [pc, #592]	; (80038f8 <HAL_GPIO_Init+0x2ac>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d04c      	beq.n	8003746 <HAL_GPIO_Init+0xfa>
 80036ac:	4a92      	ldr	r2, [pc, #584]	; (80038f8 <HAL_GPIO_Init+0x2ac>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d863      	bhi.n	800377a <HAL_GPIO_Init+0x12e>
 80036b2:	4a92      	ldr	r2, [pc, #584]	; (80038fc <HAL_GPIO_Init+0x2b0>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d046      	beq.n	8003746 <HAL_GPIO_Init+0xfa>
 80036b8:	4a90      	ldr	r2, [pc, #576]	; (80038fc <HAL_GPIO_Init+0x2b0>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d85d      	bhi.n	800377a <HAL_GPIO_Init+0x12e>
 80036be:	2b12      	cmp	r3, #18
 80036c0:	d82a      	bhi.n	8003718 <HAL_GPIO_Init+0xcc>
 80036c2:	2b12      	cmp	r3, #18
 80036c4:	d859      	bhi.n	800377a <HAL_GPIO_Init+0x12e>
 80036c6:	a201      	add	r2, pc, #4	; (adr r2, 80036cc <HAL_GPIO_Init+0x80>)
 80036c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036cc:	08003747 	.word	0x08003747
 80036d0:	08003721 	.word	0x08003721
 80036d4:	08003733 	.word	0x08003733
 80036d8:	08003775 	.word	0x08003775
 80036dc:	0800377b 	.word	0x0800377b
 80036e0:	0800377b 	.word	0x0800377b
 80036e4:	0800377b 	.word	0x0800377b
 80036e8:	0800377b 	.word	0x0800377b
 80036ec:	0800377b 	.word	0x0800377b
 80036f0:	0800377b 	.word	0x0800377b
 80036f4:	0800377b 	.word	0x0800377b
 80036f8:	0800377b 	.word	0x0800377b
 80036fc:	0800377b 	.word	0x0800377b
 8003700:	0800377b 	.word	0x0800377b
 8003704:	0800377b 	.word	0x0800377b
 8003708:	0800377b 	.word	0x0800377b
 800370c:	0800377b 	.word	0x0800377b
 8003710:	08003729 	.word	0x08003729
 8003714:	0800373d 	.word	0x0800373d
 8003718:	4a79      	ldr	r2, [pc, #484]	; (8003900 <HAL_GPIO_Init+0x2b4>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d013      	beq.n	8003746 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800371e:	e02c      	b.n	800377a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	623b      	str	r3, [r7, #32]
          break;
 8003726:	e029      	b.n	800377c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	3304      	adds	r3, #4
 800372e:	623b      	str	r3, [r7, #32]
          break;
 8003730:	e024      	b.n	800377c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	3308      	adds	r3, #8
 8003738:	623b      	str	r3, [r7, #32]
          break;
 800373a:	e01f      	b.n	800377c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	330c      	adds	r3, #12
 8003742:	623b      	str	r3, [r7, #32]
          break;
 8003744:	e01a      	b.n	800377c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d102      	bne.n	8003754 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800374e:	2304      	movs	r3, #4
 8003750:	623b      	str	r3, [r7, #32]
          break;
 8003752:	e013      	b.n	800377c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d105      	bne.n	8003768 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800375c:	2308      	movs	r3, #8
 800375e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	69fa      	ldr	r2, [r7, #28]
 8003764:	611a      	str	r2, [r3, #16]
          break;
 8003766:	e009      	b.n	800377c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003768:	2308      	movs	r3, #8
 800376a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	69fa      	ldr	r2, [r7, #28]
 8003770:	615a      	str	r2, [r3, #20]
          break;
 8003772:	e003      	b.n	800377c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003774:	2300      	movs	r3, #0
 8003776:	623b      	str	r3, [r7, #32]
          break;
 8003778:	e000      	b.n	800377c <HAL_GPIO_Init+0x130>
          break;
 800377a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	2bff      	cmp	r3, #255	; 0xff
 8003780:	d801      	bhi.n	8003786 <HAL_GPIO_Init+0x13a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	e001      	b.n	800378a <HAL_GPIO_Init+0x13e>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	3304      	adds	r3, #4
 800378a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	2bff      	cmp	r3, #255	; 0xff
 8003790:	d802      	bhi.n	8003798 <HAL_GPIO_Init+0x14c>
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	e002      	b.n	800379e <HAL_GPIO_Init+0x152>
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	3b08      	subs	r3, #8
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	210f      	movs	r1, #15
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	fa01 f303 	lsl.w	r3, r1, r3
 80037ac:	43db      	mvns	r3, r3
 80037ae:	401a      	ands	r2, r3
 80037b0:	6a39      	ldr	r1, [r7, #32]
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	fa01 f303 	lsl.w	r3, r1, r3
 80037b8:	431a      	orrs	r2, r3
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 80b1 	beq.w	800392e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80037cc:	4b4d      	ldr	r3, [pc, #308]	; (8003904 <HAL_GPIO_Init+0x2b8>)
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	4a4c      	ldr	r2, [pc, #304]	; (8003904 <HAL_GPIO_Init+0x2b8>)
 80037d2:	f043 0301 	orr.w	r3, r3, #1
 80037d6:	6193      	str	r3, [r2, #24]
 80037d8:	4b4a      	ldr	r3, [pc, #296]	; (8003904 <HAL_GPIO_Init+0x2b8>)
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	60bb      	str	r3, [r7, #8]
 80037e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80037e4:	4a48      	ldr	r2, [pc, #288]	; (8003908 <HAL_GPIO_Init+0x2bc>)
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	089b      	lsrs	r3, r3, #2
 80037ea:	3302      	adds	r3, #2
 80037ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	f003 0303 	and.w	r3, r3, #3
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	220f      	movs	r2, #15
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	43db      	mvns	r3, r3
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	4013      	ands	r3, r2
 8003806:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a40      	ldr	r2, [pc, #256]	; (800390c <HAL_GPIO_Init+0x2c0>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d013      	beq.n	8003838 <HAL_GPIO_Init+0x1ec>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a3f      	ldr	r2, [pc, #252]	; (8003910 <HAL_GPIO_Init+0x2c4>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d00d      	beq.n	8003834 <HAL_GPIO_Init+0x1e8>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a3e      	ldr	r2, [pc, #248]	; (8003914 <HAL_GPIO_Init+0x2c8>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d007      	beq.n	8003830 <HAL_GPIO_Init+0x1e4>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a3d      	ldr	r2, [pc, #244]	; (8003918 <HAL_GPIO_Init+0x2cc>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d101      	bne.n	800382c <HAL_GPIO_Init+0x1e0>
 8003828:	2303      	movs	r3, #3
 800382a:	e006      	b.n	800383a <HAL_GPIO_Init+0x1ee>
 800382c:	2304      	movs	r3, #4
 800382e:	e004      	b.n	800383a <HAL_GPIO_Init+0x1ee>
 8003830:	2302      	movs	r3, #2
 8003832:	e002      	b.n	800383a <HAL_GPIO_Init+0x1ee>
 8003834:	2301      	movs	r3, #1
 8003836:	e000      	b.n	800383a <HAL_GPIO_Init+0x1ee>
 8003838:	2300      	movs	r3, #0
 800383a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800383c:	f002 0203 	and.w	r2, r2, #3
 8003840:	0092      	lsls	r2, r2, #2
 8003842:	4093      	lsls	r3, r2
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	4313      	orrs	r3, r2
 8003848:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800384a:	492f      	ldr	r1, [pc, #188]	; (8003908 <HAL_GPIO_Init+0x2bc>)
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	089b      	lsrs	r3, r3, #2
 8003850:	3302      	adds	r3, #2
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d006      	beq.n	8003872 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003864:	4b2d      	ldr	r3, [pc, #180]	; (800391c <HAL_GPIO_Init+0x2d0>)
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	492c      	ldr	r1, [pc, #176]	; (800391c <HAL_GPIO_Init+0x2d0>)
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	4313      	orrs	r3, r2
 800386e:	600b      	str	r3, [r1, #0]
 8003870:	e006      	b.n	8003880 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003872:	4b2a      	ldr	r3, [pc, #168]	; (800391c <HAL_GPIO_Init+0x2d0>)
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	43db      	mvns	r3, r3
 800387a:	4928      	ldr	r1, [pc, #160]	; (800391c <HAL_GPIO_Init+0x2d0>)
 800387c:	4013      	ands	r3, r2
 800387e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d006      	beq.n	800389a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800388c:	4b23      	ldr	r3, [pc, #140]	; (800391c <HAL_GPIO_Init+0x2d0>)
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	4922      	ldr	r1, [pc, #136]	; (800391c <HAL_GPIO_Init+0x2d0>)
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	4313      	orrs	r3, r2
 8003896:	604b      	str	r3, [r1, #4]
 8003898:	e006      	b.n	80038a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800389a:	4b20      	ldr	r3, [pc, #128]	; (800391c <HAL_GPIO_Init+0x2d0>)
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	43db      	mvns	r3, r3
 80038a2:	491e      	ldr	r1, [pc, #120]	; (800391c <HAL_GPIO_Init+0x2d0>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d006      	beq.n	80038c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80038b4:	4b19      	ldr	r3, [pc, #100]	; (800391c <HAL_GPIO_Init+0x2d0>)
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	4918      	ldr	r1, [pc, #96]	; (800391c <HAL_GPIO_Init+0x2d0>)
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	4313      	orrs	r3, r2
 80038be:	608b      	str	r3, [r1, #8]
 80038c0:	e006      	b.n	80038d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80038c2:	4b16      	ldr	r3, [pc, #88]	; (800391c <HAL_GPIO_Init+0x2d0>)
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	43db      	mvns	r3, r3
 80038ca:	4914      	ldr	r1, [pc, #80]	; (800391c <HAL_GPIO_Init+0x2d0>)
 80038cc:	4013      	ands	r3, r2
 80038ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d021      	beq.n	8003920 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80038dc:	4b0f      	ldr	r3, [pc, #60]	; (800391c <HAL_GPIO_Init+0x2d0>)
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	490e      	ldr	r1, [pc, #56]	; (800391c <HAL_GPIO_Init+0x2d0>)
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	60cb      	str	r3, [r1, #12]
 80038e8:	e021      	b.n	800392e <HAL_GPIO_Init+0x2e2>
 80038ea:	bf00      	nop
 80038ec:	10320000 	.word	0x10320000
 80038f0:	10310000 	.word	0x10310000
 80038f4:	10220000 	.word	0x10220000
 80038f8:	10210000 	.word	0x10210000
 80038fc:	10120000 	.word	0x10120000
 8003900:	10110000 	.word	0x10110000
 8003904:	40021000 	.word	0x40021000
 8003908:	40010000 	.word	0x40010000
 800390c:	40010800 	.word	0x40010800
 8003910:	40010c00 	.word	0x40010c00
 8003914:	40011000 	.word	0x40011000
 8003918:	40011400 	.word	0x40011400
 800391c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003920:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <HAL_GPIO_Init+0x304>)
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	43db      	mvns	r3, r3
 8003928:	4909      	ldr	r1, [pc, #36]	; (8003950 <HAL_GPIO_Init+0x304>)
 800392a:	4013      	ands	r3, r2
 800392c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	3301      	adds	r3, #1
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	fa22 f303 	lsr.w	r3, r2, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	f47f ae8e 	bne.w	8003660 <HAL_GPIO_Init+0x14>
  }
}
 8003944:	bf00      	nop
 8003946:	bf00      	nop
 8003948:	372c      	adds	r7, #44	; 0x2c
 800394a:	46bd      	mov	sp, r7
 800394c:	bc80      	pop	{r7}
 800394e:	4770      	bx	lr
 8003950:	40010400 	.word	0x40010400

08003954 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	460b      	mov	r3, r1
 800395e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	887b      	ldrh	r3, [r7, #2]
 8003966:	4013      	ands	r3, r2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d002      	beq.n	8003972 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800396c:	2301      	movs	r3, #1
 800396e:	73fb      	strb	r3, [r7, #15]
 8003970:	e001      	b.n	8003976 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003972:	2300      	movs	r3, #0
 8003974:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003976:	7bfb      	ldrb	r3, [r7, #15]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr

08003982 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
 800398a:	460b      	mov	r3, r1
 800398c:	807b      	strh	r3, [r7, #2]
 800398e:	4613      	mov	r3, r2
 8003990:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003992:	787b      	ldrb	r3, [r7, #1]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003998:	887a      	ldrh	r2, [r7, #2]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800399e:	e003      	b.n	80039a8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80039a0:	887b      	ldrh	r3, [r7, #2]
 80039a2:	041a      	lsls	r2, r3, #16
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	611a      	str	r2, [r3, #16]
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bc80      	pop	{r7}
 80039b0:	4770      	bx	lr
	...

080039b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e272      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 8087 	beq.w	8003ae2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039d4:	4b92      	ldr	r3, [pc, #584]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f003 030c 	and.w	r3, r3, #12
 80039dc:	2b04      	cmp	r3, #4
 80039de:	d00c      	beq.n	80039fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039e0:	4b8f      	ldr	r3, [pc, #572]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f003 030c 	and.w	r3, r3, #12
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	d112      	bne.n	8003a12 <HAL_RCC_OscConfig+0x5e>
 80039ec:	4b8c      	ldr	r3, [pc, #560]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f8:	d10b      	bne.n	8003a12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039fa:	4b89      	ldr	r3, [pc, #548]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d06c      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x12c>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d168      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e24c      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a1a:	d106      	bne.n	8003a2a <HAL_RCC_OscConfig+0x76>
 8003a1c:	4b80      	ldr	r3, [pc, #512]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a7f      	ldr	r2, [pc, #508]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a26:	6013      	str	r3, [r2, #0]
 8003a28:	e02e      	b.n	8003a88 <HAL_RCC_OscConfig+0xd4>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10c      	bne.n	8003a4c <HAL_RCC_OscConfig+0x98>
 8003a32:	4b7b      	ldr	r3, [pc, #492]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a7a      	ldr	r2, [pc, #488]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	4b78      	ldr	r3, [pc, #480]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a77      	ldr	r2, [pc, #476]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	e01d      	b.n	8003a88 <HAL_RCC_OscConfig+0xd4>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a54:	d10c      	bne.n	8003a70 <HAL_RCC_OscConfig+0xbc>
 8003a56:	4b72      	ldr	r3, [pc, #456]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a71      	ldr	r2, [pc, #452]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	4b6f      	ldr	r3, [pc, #444]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a6e      	ldr	r2, [pc, #440]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	e00b      	b.n	8003a88 <HAL_RCC_OscConfig+0xd4>
 8003a70:	4b6b      	ldr	r3, [pc, #428]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a6a      	ldr	r2, [pc, #424]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	4b68      	ldr	r3, [pc, #416]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a67      	ldr	r2, [pc, #412]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d013      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a90:	f7ff f872 	bl	8002b78 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a98:	f7ff f86e 	bl	8002b78 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b64      	cmp	r3, #100	; 0x64
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e200      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aaa:	4b5d      	ldr	r3, [pc, #372]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f0      	beq.n	8003a98 <HAL_RCC_OscConfig+0xe4>
 8003ab6:	e014      	b.n	8003ae2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab8:	f7ff f85e 	bl	8002b78 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ac0:	f7ff f85a 	bl	8002b78 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b64      	cmp	r3, #100	; 0x64
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e1ec      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ad2:	4b53      	ldr	r3, [pc, #332]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x10c>
 8003ade:	e000      	b.n	8003ae2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d063      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003aee:	4b4c      	ldr	r3, [pc, #304]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f003 030c 	and.w	r3, r3, #12
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00b      	beq.n	8003b12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003afa:	4b49      	ldr	r3, [pc, #292]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f003 030c 	and.w	r3, r3, #12
 8003b02:	2b08      	cmp	r3, #8
 8003b04:	d11c      	bne.n	8003b40 <HAL_RCC_OscConfig+0x18c>
 8003b06:	4b46      	ldr	r3, [pc, #280]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d116      	bne.n	8003b40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b12:	4b43      	ldr	r3, [pc, #268]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d005      	beq.n	8003b2a <HAL_RCC_OscConfig+0x176>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d001      	beq.n	8003b2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e1c0      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b2a:	4b3d      	ldr	r3, [pc, #244]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	4939      	ldr	r1, [pc, #228]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b3e:	e03a      	b.n	8003bb6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d020      	beq.n	8003b8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b48:	4b36      	ldr	r3, [pc, #216]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4e:	f7ff f813 	bl	8002b78 <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b56:	f7ff f80f 	bl	8002b78 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e1a1      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b68:	4b2d      	ldr	r3, [pc, #180]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0f0      	beq.n	8003b56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b74:	4b2a      	ldr	r3, [pc, #168]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	4927      	ldr	r1, [pc, #156]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	600b      	str	r3, [r1, #0]
 8003b88:	e015      	b.n	8003bb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b8a:	4b26      	ldr	r3, [pc, #152]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b90:	f7fe fff2 	bl	8002b78 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b98:	f7fe ffee 	bl	8002b78 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e180      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003baa:	4b1d      	ldr	r3, [pc, #116]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f0      	bne.n	8003b98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d03a      	beq.n	8003c38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d019      	beq.n	8003bfe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bca:	4b17      	ldr	r3, [pc, #92]	; (8003c28 <HAL_RCC_OscConfig+0x274>)
 8003bcc:	2201      	movs	r2, #1
 8003bce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd0:	f7fe ffd2 	bl	8002b78 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd8:	f7fe ffce 	bl	8002b78 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e160      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bea:	4b0d      	ldr	r3, [pc, #52]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f0      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003bf6:	2001      	movs	r0, #1
 8003bf8:	f000 fada 	bl	80041b0 <RCC_Delay>
 8003bfc:	e01c      	b.n	8003c38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bfe:	4b0a      	ldr	r3, [pc, #40]	; (8003c28 <HAL_RCC_OscConfig+0x274>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c04:	f7fe ffb8 	bl	8002b78 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c0a:	e00f      	b.n	8003c2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c0c:	f7fe ffb4 	bl	8002b78 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d908      	bls.n	8003c2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e146      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
 8003c1e:	bf00      	nop
 8003c20:	40021000 	.word	0x40021000
 8003c24:	42420000 	.word	0x42420000
 8003c28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c2c:	4b92      	ldr	r3, [pc, #584]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1e9      	bne.n	8003c0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 80a6 	beq.w	8003d92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c46:	2300      	movs	r3, #0
 8003c48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c4a:	4b8b      	ldr	r3, [pc, #556]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10d      	bne.n	8003c72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c56:	4b88      	ldr	r3, [pc, #544]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	4a87      	ldr	r2, [pc, #540]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c60:	61d3      	str	r3, [r2, #28]
 8003c62:	4b85      	ldr	r3, [pc, #532]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6a:	60bb      	str	r3, [r7, #8]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c72:	4b82      	ldr	r3, [pc, #520]	; (8003e7c <HAL_RCC_OscConfig+0x4c8>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d118      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c7e:	4b7f      	ldr	r3, [pc, #508]	; (8003e7c <HAL_RCC_OscConfig+0x4c8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a7e      	ldr	r2, [pc, #504]	; (8003e7c <HAL_RCC_OscConfig+0x4c8>)
 8003c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c8a:	f7fe ff75 	bl	8002b78 <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c90:	e008      	b.n	8003ca4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c92:	f7fe ff71 	bl	8002b78 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b64      	cmp	r3, #100	; 0x64
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e103      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca4:	4b75      	ldr	r3, [pc, #468]	; (8003e7c <HAL_RCC_OscConfig+0x4c8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0f0      	beq.n	8003c92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d106      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x312>
 8003cb8:	4b6f      	ldr	r3, [pc, #444]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	4a6e      	ldr	r2, [pc, #440]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003cbe:	f043 0301 	orr.w	r3, r3, #1
 8003cc2:	6213      	str	r3, [r2, #32]
 8003cc4:	e02d      	b.n	8003d22 <HAL_RCC_OscConfig+0x36e>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10c      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x334>
 8003cce:	4b6a      	ldr	r3, [pc, #424]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	4a69      	ldr	r2, [pc, #420]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003cd4:	f023 0301 	bic.w	r3, r3, #1
 8003cd8:	6213      	str	r3, [r2, #32]
 8003cda:	4b67      	ldr	r3, [pc, #412]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	4a66      	ldr	r2, [pc, #408]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003ce0:	f023 0304 	bic.w	r3, r3, #4
 8003ce4:	6213      	str	r3, [r2, #32]
 8003ce6:	e01c      	b.n	8003d22 <HAL_RCC_OscConfig+0x36e>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	2b05      	cmp	r3, #5
 8003cee:	d10c      	bne.n	8003d0a <HAL_RCC_OscConfig+0x356>
 8003cf0:	4b61      	ldr	r3, [pc, #388]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	4a60      	ldr	r2, [pc, #384]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003cf6:	f043 0304 	orr.w	r3, r3, #4
 8003cfa:	6213      	str	r3, [r2, #32]
 8003cfc:	4b5e      	ldr	r3, [pc, #376]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	4a5d      	ldr	r2, [pc, #372]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003d02:	f043 0301 	orr.w	r3, r3, #1
 8003d06:	6213      	str	r3, [r2, #32]
 8003d08:	e00b      	b.n	8003d22 <HAL_RCC_OscConfig+0x36e>
 8003d0a:	4b5b      	ldr	r3, [pc, #364]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	4a5a      	ldr	r2, [pc, #360]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003d10:	f023 0301 	bic.w	r3, r3, #1
 8003d14:	6213      	str	r3, [r2, #32]
 8003d16:	4b58      	ldr	r3, [pc, #352]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	4a57      	ldr	r2, [pc, #348]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003d1c:	f023 0304 	bic.w	r3, r3, #4
 8003d20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d015      	beq.n	8003d56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d2a:	f7fe ff25 	bl	8002b78 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d30:	e00a      	b.n	8003d48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d32:	f7fe ff21 	bl	8002b78 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e0b1      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d48:	4b4b      	ldr	r3, [pc, #300]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0ee      	beq.n	8003d32 <HAL_RCC_OscConfig+0x37e>
 8003d54:	e014      	b.n	8003d80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d56:	f7fe ff0f 	bl	8002b78 <HAL_GetTick>
 8003d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d5c:	e00a      	b.n	8003d74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d5e:	f7fe ff0b 	bl	8002b78 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e09b      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d74:	4b40      	ldr	r3, [pc, #256]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1ee      	bne.n	8003d5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d80:	7dfb      	ldrb	r3, [r7, #23]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d105      	bne.n	8003d92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d86:	4b3c      	ldr	r3, [pc, #240]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	4a3b      	ldr	r2, [pc, #236]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003d8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 8087 	beq.w	8003eaa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d9c:	4b36      	ldr	r3, [pc, #216]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f003 030c 	and.w	r3, r3, #12
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d061      	beq.n	8003e6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	69db      	ldr	r3, [r3, #28]
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d146      	bne.n	8003e3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db0:	4b33      	ldr	r3, [pc, #204]	; (8003e80 <HAL_RCC_OscConfig+0x4cc>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db6:	f7fe fedf 	bl	8002b78 <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dbe:	f7fe fedb 	bl	8002b78 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e06d      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dd0:	4b29      	ldr	r3, [pc, #164]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1f0      	bne.n	8003dbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de4:	d108      	bne.n	8003df8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003de6:	4b24      	ldr	r3, [pc, #144]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	4921      	ldr	r1, [pc, #132]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003df8:	4b1f      	ldr	r3, [pc, #124]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a19      	ldr	r1, [r3, #32]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	430b      	orrs	r3, r1
 8003e0a:	491b      	ldr	r1, [pc, #108]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e10:	4b1b      	ldr	r3, [pc, #108]	; (8003e80 <HAL_RCC_OscConfig+0x4cc>)
 8003e12:	2201      	movs	r2, #1
 8003e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e16:	f7fe feaf 	bl	8002b78 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e1c:	e008      	b.n	8003e30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e1e:	f7fe feab 	bl	8002b78 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e03d      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e30:	4b11      	ldr	r3, [pc, #68]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0f0      	beq.n	8003e1e <HAL_RCC_OscConfig+0x46a>
 8003e3c:	e035      	b.n	8003eaa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e3e:	4b10      	ldr	r3, [pc, #64]	; (8003e80 <HAL_RCC_OscConfig+0x4cc>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e44:	f7fe fe98 	bl	8002b78 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e4c:	f7fe fe94 	bl	8002b78 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e026      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e5e:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f0      	bne.n	8003e4c <HAL_RCC_OscConfig+0x498>
 8003e6a:	e01e      	b.n	8003eaa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d107      	bne.n	8003e84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e019      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	40007000 	.word	0x40007000
 8003e80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e84:	4b0b      	ldr	r3, [pc, #44]	; (8003eb4 <HAL_RCC_OscConfig+0x500>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d106      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d001      	beq.n	8003eaa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e000      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	40021000 	.word	0x40021000

08003eb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e0d0      	b.n	800406e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ecc:	4b6a      	ldr	r3, [pc, #424]	; (8004078 <HAL_RCC_ClockConfig+0x1c0>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0307 	and.w	r3, r3, #7
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d910      	bls.n	8003efc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eda:	4b67      	ldr	r3, [pc, #412]	; (8004078 <HAL_RCC_ClockConfig+0x1c0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f023 0207 	bic.w	r2, r3, #7
 8003ee2:	4965      	ldr	r1, [pc, #404]	; (8004078 <HAL_RCC_ClockConfig+0x1c0>)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eea:	4b63      	ldr	r3, [pc, #396]	; (8004078 <HAL_RCC_ClockConfig+0x1c0>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d001      	beq.n	8003efc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e0b8      	b.n	800406e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d020      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f14:	4b59      	ldr	r3, [pc, #356]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	4a58      	ldr	r2, [pc, #352]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003f1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0308 	and.w	r3, r3, #8
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d005      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f2c:	4b53      	ldr	r3, [pc, #332]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	4a52      	ldr	r2, [pc, #328]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003f32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003f36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f38:	4b50      	ldr	r3, [pc, #320]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	494d      	ldr	r1, [pc, #308]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d040      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d107      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5e:	4b47      	ldr	r3, [pc, #284]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d115      	bne.n	8003f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e07f      	b.n	800406e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d107      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f76:	4b41      	ldr	r3, [pc, #260]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d109      	bne.n	8003f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e073      	b.n	800406e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f86:	4b3d      	ldr	r3, [pc, #244]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e06b      	b.n	800406e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f96:	4b39      	ldr	r3, [pc, #228]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f023 0203 	bic.w	r2, r3, #3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	4936      	ldr	r1, [pc, #216]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fa8:	f7fe fde6 	bl	8002b78 <HAL_GetTick>
 8003fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fae:	e00a      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb0:	f7fe fde2 	bl	8002b78 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e053      	b.n	800406e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc6:	4b2d      	ldr	r3, [pc, #180]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f003 020c 	and.w	r2, r3, #12
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d1eb      	bne.n	8003fb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fd8:	4b27      	ldr	r3, [pc, #156]	; (8004078 <HAL_RCC_ClockConfig+0x1c0>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d210      	bcs.n	8004008 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe6:	4b24      	ldr	r3, [pc, #144]	; (8004078 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f023 0207 	bic.w	r2, r3, #7
 8003fee:	4922      	ldr	r1, [pc, #136]	; (8004078 <HAL_RCC_ClockConfig+0x1c0>)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff6:	4b20      	ldr	r3, [pc, #128]	; (8004078 <HAL_RCC_ClockConfig+0x1c0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	429a      	cmp	r2, r3
 8004002:	d001      	beq.n	8004008 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e032      	b.n	800406e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b00      	cmp	r3, #0
 8004012:	d008      	beq.n	8004026 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004014:	4b19      	ldr	r3, [pc, #100]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	4916      	ldr	r1, [pc, #88]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8004022:	4313      	orrs	r3, r2
 8004024:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0308 	and.w	r3, r3, #8
 800402e:	2b00      	cmp	r3, #0
 8004030:	d009      	beq.n	8004046 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004032:	4b12      	ldr	r3, [pc, #72]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	490e      	ldr	r1, [pc, #56]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8004042:	4313      	orrs	r3, r2
 8004044:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004046:	f000 f821 	bl	800408c <HAL_RCC_GetSysClockFreq>
 800404a:	4602      	mov	r2, r0
 800404c:	4b0b      	ldr	r3, [pc, #44]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	091b      	lsrs	r3, r3, #4
 8004052:	f003 030f 	and.w	r3, r3, #15
 8004056:	490a      	ldr	r1, [pc, #40]	; (8004080 <HAL_RCC_ClockConfig+0x1c8>)
 8004058:	5ccb      	ldrb	r3, [r1, r3]
 800405a:	fa22 f303 	lsr.w	r3, r2, r3
 800405e:	4a09      	ldr	r2, [pc, #36]	; (8004084 <HAL_RCC_ClockConfig+0x1cc>)
 8004060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004062:	4b09      	ldr	r3, [pc, #36]	; (8004088 <HAL_RCC_ClockConfig+0x1d0>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4618      	mov	r0, r3
 8004068:	f7fe fd44 	bl	8002af4 <HAL_InitTick>

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	40022000 	.word	0x40022000
 800407c:	40021000 	.word	0x40021000
 8004080:	08006c00 	.word	0x08006c00
 8004084:	20000000 	.word	0x20000000
 8004088:	20000004 	.word	0x20000004

0800408c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800408c:	b490      	push	{r4, r7}
 800408e:	b08a      	sub	sp, #40	; 0x28
 8004090:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004092:	4b29      	ldr	r3, [pc, #164]	; (8004138 <HAL_RCC_GetSysClockFreq+0xac>)
 8004094:	1d3c      	adds	r4, r7, #4
 8004096:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004098:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800409c:	f240 2301 	movw	r3, #513	; 0x201
 80040a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040a2:	2300      	movs	r3, #0
 80040a4:	61fb      	str	r3, [r7, #28]
 80040a6:	2300      	movs	r3, #0
 80040a8:	61bb      	str	r3, [r7, #24]
 80040aa:	2300      	movs	r3, #0
 80040ac:	627b      	str	r3, [r7, #36]	; 0x24
 80040ae:	2300      	movs	r3, #0
 80040b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80040b6:	4b21      	ldr	r3, [pc, #132]	; (800413c <HAL_RCC_GetSysClockFreq+0xb0>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f003 030c 	and.w	r3, r3, #12
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d002      	beq.n	80040cc <HAL_RCC_GetSysClockFreq+0x40>
 80040c6:	2b08      	cmp	r3, #8
 80040c8:	d003      	beq.n	80040d2 <HAL_RCC_GetSysClockFreq+0x46>
 80040ca:	e02b      	b.n	8004124 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040cc:	4b1c      	ldr	r3, [pc, #112]	; (8004140 <HAL_RCC_GetSysClockFreq+0xb4>)
 80040ce:	623b      	str	r3, [r7, #32]
      break;
 80040d0:	e02b      	b.n	800412a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	0c9b      	lsrs	r3, r3, #18
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	3328      	adds	r3, #40	; 0x28
 80040dc:	443b      	add	r3, r7
 80040de:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80040e2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d012      	beq.n	8004114 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040ee:	4b13      	ldr	r3, [pc, #76]	; (800413c <HAL_RCC_GetSysClockFreq+0xb0>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	0c5b      	lsrs	r3, r3, #17
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	3328      	adds	r3, #40	; 0x28
 80040fa:	443b      	add	r3, r7
 80040fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004100:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	4a0e      	ldr	r2, [pc, #56]	; (8004140 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004106:	fb03 f202 	mul.w	r2, r3, r2
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004110:	627b      	str	r3, [r7, #36]	; 0x24
 8004112:	e004      	b.n	800411e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	4a0b      	ldr	r2, [pc, #44]	; (8004144 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004118:	fb02 f303 	mul.w	r3, r2, r3
 800411c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004120:	623b      	str	r3, [r7, #32]
      break;
 8004122:	e002      	b.n	800412a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004124:	4b08      	ldr	r3, [pc, #32]	; (8004148 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004126:	623b      	str	r3, [r7, #32]
      break;
 8004128:	bf00      	nop
    }
  }
  return sysclockfreq;
 800412a:	6a3b      	ldr	r3, [r7, #32]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3728      	adds	r7, #40	; 0x28
 8004130:	46bd      	mov	sp, r7
 8004132:	bc90      	pop	{r4, r7}
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	08006be0 	.word	0x08006be0
 800413c:	40021000 	.word	0x40021000
 8004140:	00f42400 	.word	0x00f42400
 8004144:	003d0900 	.word	0x003d0900
 8004148:	007a1200 	.word	0x007a1200

0800414c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004150:	4b02      	ldr	r3, [pc, #8]	; (800415c <HAL_RCC_GetHCLKFreq+0x10>)
 8004152:	681b      	ldr	r3, [r3, #0]
}
 8004154:	4618      	mov	r0, r3
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr
 800415c:	20000000 	.word	0x20000000

08004160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004164:	f7ff fff2 	bl	800414c <HAL_RCC_GetHCLKFreq>
 8004168:	4602      	mov	r2, r0
 800416a:	4b05      	ldr	r3, [pc, #20]	; (8004180 <HAL_RCC_GetPCLK1Freq+0x20>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	0a1b      	lsrs	r3, r3, #8
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	4903      	ldr	r1, [pc, #12]	; (8004184 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004176:	5ccb      	ldrb	r3, [r1, r3]
 8004178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800417c:	4618      	mov	r0, r3
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40021000 	.word	0x40021000
 8004184:	08006c10 	.word	0x08006c10

08004188 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800418c:	f7ff ffde 	bl	800414c <HAL_RCC_GetHCLKFreq>
 8004190:	4602      	mov	r2, r0
 8004192:	4b05      	ldr	r3, [pc, #20]	; (80041a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	0adb      	lsrs	r3, r3, #11
 8004198:	f003 0307 	and.w	r3, r3, #7
 800419c:	4903      	ldr	r1, [pc, #12]	; (80041ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800419e:	5ccb      	ldrb	r3, [r1, r3]
 80041a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	40021000 	.word	0x40021000
 80041ac:	08006c10 	.word	0x08006c10

080041b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80041b8:	4b0a      	ldr	r3, [pc, #40]	; (80041e4 <RCC_Delay+0x34>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a0a      	ldr	r2, [pc, #40]	; (80041e8 <RCC_Delay+0x38>)
 80041be:	fba2 2303 	umull	r2, r3, r2, r3
 80041c2:	0a5b      	lsrs	r3, r3, #9
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	fb02 f303 	mul.w	r3, r2, r3
 80041ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80041cc:	bf00      	nop
  }
  while (Delay --);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	1e5a      	subs	r2, r3, #1
 80041d2:	60fa      	str	r2, [r7, #12]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1f9      	bne.n	80041cc <RCC_Delay+0x1c>
}
 80041d8:	bf00      	nop
 80041da:	bf00      	nop
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	bc80      	pop	{r7}
 80041e2:	4770      	bx	lr
 80041e4:	20000000 	.word	0x20000000
 80041e8:	10624dd3 	.word	0x10624dd3

080041ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	613b      	str	r3, [r7, #16]
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b00      	cmp	r3, #0
 8004206:	d07d      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004208:	2300      	movs	r3, #0
 800420a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800420c:	4b4f      	ldr	r3, [pc, #316]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10d      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004218:	4b4c      	ldr	r3, [pc, #304]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	4a4b      	ldr	r2, [pc, #300]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800421e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004222:	61d3      	str	r3, [r2, #28]
 8004224:	4b49      	ldr	r3, [pc, #292]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422c:	60bb      	str	r3, [r7, #8]
 800422e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004230:	2301      	movs	r3, #1
 8004232:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004234:	4b46      	ldr	r3, [pc, #280]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423c:	2b00      	cmp	r3, #0
 800423e:	d118      	bne.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004240:	4b43      	ldr	r3, [pc, #268]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a42      	ldr	r2, [pc, #264]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800424a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800424c:	f7fe fc94 	bl	8002b78 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004252:	e008      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004254:	f7fe fc90 	bl	8002b78 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b64      	cmp	r3, #100	; 0x64
 8004260:	d901      	bls.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e06d      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004266:	4b3a      	ldr	r3, [pc, #232]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0f0      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004272:	4b36      	ldr	r3, [pc, #216]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800427a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d02e      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	429a      	cmp	r2, r3
 800428e:	d027      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004290:	4b2e      	ldr	r3, [pc, #184]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004298:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800429a:	4b2e      	ldr	r3, [pc, #184]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800429c:	2201      	movs	r2, #1
 800429e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042a0:	4b2c      	ldr	r3, [pc, #176]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80042a6:	4a29      	ldr	r2, [pc, #164]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d014      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b6:	f7fe fc5f 	bl	8002b78 <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042bc:	e00a      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042be:	f7fe fc5b 	bl	8002b78 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e036      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042d4:	4b1d      	ldr	r3, [pc, #116]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d0ee      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042e0:	4b1a      	ldr	r3, [pc, #104]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	4917      	ldr	r1, [pc, #92]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80042f2:	7dfb      	ldrb	r3, [r7, #23]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d105      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042f8:	4b14      	ldr	r3, [pc, #80]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	4a13      	ldr	r2, [pc, #76]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004302:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d008      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004310:	4b0e      	ldr	r3, [pc, #56]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	490b      	ldr	r1, [pc, #44]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800431e:	4313      	orrs	r3, r2
 8004320:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0310 	and.w	r3, r3, #16
 800432a:	2b00      	cmp	r3, #0
 800432c:	d008      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800432e:	4b07      	ldr	r3, [pc, #28]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	4904      	ldr	r1, [pc, #16]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800433c:	4313      	orrs	r3, r2
 800433e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	40021000 	.word	0x40021000
 8004350:	40007000 	.word	0x40007000
 8004354:	42420440 	.word	0x42420440

08004358 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004358:	b590      	push	{r4, r7, lr}
 800435a:	b08d      	sub	sp, #52	; 0x34
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004360:	4b58      	ldr	r3, [pc, #352]	; (80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004362:	f107 040c 	add.w	r4, r7, #12
 8004366:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004368:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800436c:	f240 2301 	movw	r3, #513	; 0x201
 8004370:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004372:	2300      	movs	r3, #0
 8004374:	627b      	str	r3, [r7, #36]	; 0x24
 8004376:	2300      	movs	r3, #0
 8004378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800437a:	2300      	movs	r3, #0
 800437c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800437e:	2300      	movs	r3, #0
 8004380:	61fb      	str	r3, [r7, #28]
 8004382:	2300      	movs	r3, #0
 8004384:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b10      	cmp	r3, #16
 800438a:	d00a      	beq.n	80043a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b10      	cmp	r3, #16
 8004390:	f200 808d 	bhi.w	80044ae <HAL_RCCEx_GetPeriphCLKFreq+0x156>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d049      	beq.n	800442e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b02      	cmp	r3, #2
 800439e:	d078      	beq.n	8004492 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80043a0:	e085      	b.n	80044ae <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80043a2:	4b49      	ldr	r3, [pc, #292]	; (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80043a8:	4b47      	ldr	r3, [pc, #284]	; (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d07e      	beq.n	80044b2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	0c9b      	lsrs	r3, r3, #18
 80043b8:	f003 030f 	and.w	r3, r3, #15
 80043bc:	3330      	adds	r3, #48	; 0x30
 80043be:	443b      	add	r3, r7
 80043c0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80043c4:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d017      	beq.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80043d0:	4b3d      	ldr	r3, [pc, #244]	; (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	0c5b      	lsrs	r3, r3, #17
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	3330      	adds	r3, #48	; 0x30
 80043dc:	443b      	add	r3, r7
 80043de:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80043e2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00d      	beq.n	800440a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80043ee:	4a37      	ldr	r2, [pc, #220]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	fb02 f303 	mul.w	r3, r2, r3
 80043fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043fe:	e004      	b.n	800440a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	4a33      	ldr	r2, [pc, #204]	; (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004404:	fb02 f303 	mul.w	r3, r2, r3
 8004408:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800440a:	4b2f      	ldr	r3, [pc, #188]	; (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004412:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004416:	d102      	bne.n	800441e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8004418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800441c:	e049      	b.n	80044b2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
          frequency = (pllclk * 2) / 3;
 800441e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	4a2c      	ldr	r2, [pc, #176]	; (80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8004424:	fba2 2303 	umull	r2, r3, r2, r3
 8004428:	085b      	lsrs	r3, r3, #1
 800442a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800442c:	e041      	b.n	80044b2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
      temp_reg = RCC->BDCR;
 800442e:	4b26      	ldr	r3, [pc, #152]	; (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800443a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800443e:	d108      	bne.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 800444a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800444e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004450:	e01e      	b.n	8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800445c:	d109      	bne.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 800445e:	4b1a      	ldr	r3, [pc, #104]	; (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800446a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800446e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004470:	e00e      	b.n	8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004478:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800447c:	d11b      	bne.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 800447e:	4b12      	ldr	r3, [pc, #72]	; (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d015      	beq.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        frequency = HSE_VALUE / 128U;
 800448a:	4b13      	ldr	r3, [pc, #76]	; (80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 800448c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800448e:	e012      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8004490:	e011      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004492:	f7ff fe79 	bl	8004188 <HAL_RCC_GetPCLK2Freq>
 8004496:	4602      	mov	r2, r0
 8004498:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	0b9b      	lsrs	r3, r3, #14
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	3301      	adds	r3, #1
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044aa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80044ac:	e004      	b.n	80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      break;
 80044ae:	bf00      	nop
 80044b0:	e002      	b.n	80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      break;
 80044b2:	bf00      	nop
 80044b4:	e000      	b.n	80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      break;
 80044b6:	bf00      	nop
    }
  }
  return (frequency);
 80044b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3734      	adds	r7, #52	; 0x34
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd90      	pop	{r4, r7, pc}
 80044c2:	bf00      	nop
 80044c4:	08006bf0 	.word	0x08006bf0
 80044c8:	40021000 	.word	0x40021000
 80044cc:	00f42400 	.word	0x00f42400
 80044d0:	003d0900 	.word	0x003d0900
 80044d4:	aaaaaaab 	.word	0xaaaaaaab
 80044d8:	0001e848 	.word	0x0001e848

080044dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e076      	b.n	80045dc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d108      	bne.n	8004508 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044fe:	d009      	beq.n	8004514 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	61da      	str	r2, [r3, #28]
 8004506:	e005      	b.n	8004514 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d106      	bne.n	8004534 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7fe f8b4 	bl	800269c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2202      	movs	r2, #2
 8004538:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800454a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	431a      	orrs	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004598:	ea42 0103 	orr.w	r1, r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	0c1a      	lsrs	r2, r3, #16
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f002 0204 	and.w	r2, r2, #4
 80045ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	69da      	ldr	r2, [r3, #28]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b088      	sub	sp, #32
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	603b      	str	r3, [r7, #0]
 80045f0:	4613      	mov	r3, r2
 80045f2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045f4:	2300      	movs	r3, #0
 80045f6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d101      	bne.n	8004606 <HAL_SPI_Transmit+0x22>
 8004602:	2302      	movs	r3, #2
 8004604:	e126      	b.n	8004854 <HAL_SPI_Transmit+0x270>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800460e:	f7fe fab3 	bl	8002b78 <HAL_GetTick>
 8004612:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004614:	88fb      	ldrh	r3, [r7, #6]
 8004616:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b01      	cmp	r3, #1
 8004622:	d002      	beq.n	800462a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004624:	2302      	movs	r3, #2
 8004626:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004628:	e10b      	b.n	8004842 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d002      	beq.n	8004636 <HAL_SPI_Transmit+0x52>
 8004630:	88fb      	ldrh	r3, [r7, #6]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d102      	bne.n	800463c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	77fb      	strb	r3, [r7, #31]
    goto error;
 800463a:	e102      	b.n	8004842 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2203      	movs	r2, #3
 8004640:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	88fa      	ldrh	r2, [r7, #6]
 8004654:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	88fa      	ldrh	r2, [r7, #6]
 800465a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004682:	d10f      	bne.n	80046a4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004692:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ae:	2b40      	cmp	r3, #64	; 0x40
 80046b0:	d007      	beq.n	80046c2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ca:	d14b      	bne.n	8004764 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d002      	beq.n	80046da <HAL_SPI_Transmit+0xf6>
 80046d4:	8afb      	ldrh	r3, [r7, #22]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d13e      	bne.n	8004758 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046de:	881a      	ldrh	r2, [r3, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ea:	1c9a      	adds	r2, r3, #2
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	3b01      	subs	r3, #1
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046fe:	e02b      	b.n	8004758 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b02      	cmp	r3, #2
 800470c:	d112      	bne.n	8004734 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004712:	881a      	ldrh	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471e:	1c9a      	adds	r2, r3, #2
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004728:	b29b      	uxth	r3, r3
 800472a:	3b01      	subs	r3, #1
 800472c:	b29a      	uxth	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	86da      	strh	r2, [r3, #54]	; 0x36
 8004732:	e011      	b.n	8004758 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004734:	f7fe fa20 	bl	8002b78 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	683a      	ldr	r2, [r7, #0]
 8004740:	429a      	cmp	r2, r3
 8004742:	d803      	bhi.n	800474c <HAL_SPI_Transmit+0x168>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474a:	d102      	bne.n	8004752 <HAL_SPI_Transmit+0x16e>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d102      	bne.n	8004758 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004756:	e074      	b.n	8004842 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800475c:	b29b      	uxth	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1ce      	bne.n	8004700 <HAL_SPI_Transmit+0x11c>
 8004762:	e04c      	b.n	80047fe <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <HAL_SPI_Transmit+0x18e>
 800476c:	8afb      	ldrh	r3, [r7, #22]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d140      	bne.n	80047f4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	330c      	adds	r3, #12
 800477c:	7812      	ldrb	r2, [r2, #0]
 800477e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004784:	1c5a      	adds	r2, r3, #1
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800478e:	b29b      	uxth	r3, r3
 8004790:	3b01      	subs	r3, #1
 8004792:	b29a      	uxth	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004798:	e02c      	b.n	80047f4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d113      	bne.n	80047d0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	330c      	adds	r3, #12
 80047b2:	7812      	ldrb	r2, [r2, #0]
 80047b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ba:	1c5a      	adds	r2, r3, #1
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	3b01      	subs	r3, #1
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	86da      	strh	r2, [r3, #54]	; 0x36
 80047ce:	e011      	b.n	80047f4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047d0:	f7fe f9d2 	bl	8002b78 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d803      	bhi.n	80047e8 <HAL_SPI_Transmit+0x204>
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e6:	d102      	bne.n	80047ee <HAL_SPI_Transmit+0x20a>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d102      	bne.n	80047f4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80047f2:	e026      	b.n	8004842 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1cd      	bne.n	800479a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	6839      	ldr	r1, [r7, #0]
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f000 fbb8 	bl	8004f78 <SPI_EndRxTxTransaction>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d002      	beq.n	8004814 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2220      	movs	r2, #32
 8004812:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10a      	bne.n	8004832 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800481c:	2300      	movs	r3, #0
 800481e:	613b      	str	r3, [r7, #16]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	613b      	str	r3, [r7, #16]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	613b      	str	r3, [r7, #16]
 8004830:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004836:	2b00      	cmp	r3, #0
 8004838:	d002      	beq.n	8004840 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	77fb      	strb	r3, [r7, #31]
 800483e:	e000      	b.n	8004842 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004840:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004852:	7ffb      	ldrb	r3, [r7, #31]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3720      	adds	r7, #32
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b088      	sub	sp, #32
 8004860:	af02      	add	r7, sp, #8
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	603b      	str	r3, [r7, #0]
 8004868:	4613      	mov	r3, r2
 800486a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800486c:	2300      	movs	r3, #0
 800486e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004878:	d112      	bne.n	80048a0 <HAL_SPI_Receive+0x44>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10e      	bne.n	80048a0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2204      	movs	r2, #4
 8004886:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800488a:	88fa      	ldrh	r2, [r7, #6]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	4613      	mov	r3, r2
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	68b9      	ldr	r1, [r7, #8]
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 f8f1 	bl	8004a7e <HAL_SPI_TransmitReceive>
 800489c:	4603      	mov	r3, r0
 800489e:	e0ea      	b.n	8004a76 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d101      	bne.n	80048ae <HAL_SPI_Receive+0x52>
 80048aa:	2302      	movs	r3, #2
 80048ac:	e0e3      	b.n	8004a76 <HAL_SPI_Receive+0x21a>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048b6:	f7fe f95f 	bl	8002b78 <HAL_GetTick>
 80048ba:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d002      	beq.n	80048ce <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80048c8:	2302      	movs	r3, #2
 80048ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80048cc:	e0ca      	b.n	8004a64 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d002      	beq.n	80048da <HAL_SPI_Receive+0x7e>
 80048d4:	88fb      	ldrh	r3, [r7, #6]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d102      	bne.n	80048e0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80048de:	e0c1      	b.n	8004a64 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2204      	movs	r2, #4
 80048e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	88fa      	ldrh	r2, [r7, #6]
 80048f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	88fa      	ldrh	r2, [r7, #6]
 80048fe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004926:	d10f      	bne.n	8004948 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004936:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004946:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004952:	2b40      	cmp	r3, #64	; 0x40
 8004954:	d007      	beq.n	8004966 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004964:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d162      	bne.n	8004a34 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800496e:	e02e      	b.n	80049ce <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b01      	cmp	r3, #1
 800497c:	d115      	bne.n	80049aa <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f103 020c 	add.w	r2, r3, #12
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498a:	7812      	ldrb	r2, [r2, #0]
 800498c:	b2d2      	uxtb	r2, r2
 800498e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004994:	1c5a      	adds	r2, r3, #1
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800499e:	b29b      	uxth	r3, r3
 80049a0:	3b01      	subs	r3, #1
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049a8:	e011      	b.n	80049ce <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049aa:	f7fe f8e5 	bl	8002b78 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d803      	bhi.n	80049c2 <HAL_SPI_Receive+0x166>
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c0:	d102      	bne.n	80049c8 <HAL_SPI_Receive+0x16c>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d102      	bne.n	80049ce <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	75fb      	strb	r3, [r7, #23]
          goto error;
 80049cc:	e04a      	b.n	8004a64 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1cb      	bne.n	8004970 <HAL_SPI_Receive+0x114>
 80049d8:	e031      	b.n	8004a3e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d113      	bne.n	8004a10 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f2:	b292      	uxth	r2, r2
 80049f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fa:	1c9a      	adds	r2, r3, #2
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	3b01      	subs	r3, #1
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a0e:	e011      	b.n	8004a34 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a10:	f7fe f8b2 	bl	8002b78 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d803      	bhi.n	8004a28 <HAL_SPI_Receive+0x1cc>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a26:	d102      	bne.n	8004a2e <HAL_SPI_Receive+0x1d2>
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d102      	bne.n	8004a34 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004a32:	e017      	b.n	8004a64 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1cd      	bne.n	80049da <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	6839      	ldr	r1, [r7, #0]
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 fa46 	bl	8004ed4 <SPI_EndRxTransaction>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2220      	movs	r2, #32
 8004a52:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d002      	beq.n	8004a62 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	75fb      	strb	r3, [r7, #23]
 8004a60:	e000      	b.n	8004a64 <HAL_SPI_Receive+0x208>
  }

error :
 8004a62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3718      	adds	r7, #24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b08c      	sub	sp, #48	; 0x30
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	60f8      	str	r0, [r7, #12]
 8004a86:	60b9      	str	r1, [r7, #8]
 8004a88:	607a      	str	r2, [r7, #4]
 8004a8a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a90:	2300      	movs	r3, #0
 8004a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d101      	bne.n	8004aa4 <HAL_SPI_TransmitReceive+0x26>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e18a      	b.n	8004dba <HAL_SPI_TransmitReceive+0x33c>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004aac:	f7fe f864 	bl	8002b78 <HAL_GetTick>
 8004ab0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ab8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004ac2:	887b      	ldrh	r3, [r7, #2]
 8004ac4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ac6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d00f      	beq.n	8004aee <HAL_SPI_TransmitReceive+0x70>
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ad4:	d107      	bne.n	8004ae6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d103      	bne.n	8004ae6 <HAL_SPI_TransmitReceive+0x68>
 8004ade:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d003      	beq.n	8004aee <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004aec:	e15b      	b.n	8004da6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d005      	beq.n	8004b00 <HAL_SPI_TransmitReceive+0x82>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d002      	beq.n	8004b00 <HAL_SPI_TransmitReceive+0x82>
 8004afa:	887b      	ldrh	r3, [r7, #2]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d103      	bne.n	8004b08 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004b06:	e14e      	b.n	8004da6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b04      	cmp	r3, #4
 8004b12:	d003      	beq.n	8004b1c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2205      	movs	r2, #5
 8004b18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	887a      	ldrh	r2, [r7, #2]
 8004b2c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	887a      	ldrh	r2, [r7, #2]
 8004b32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	887a      	ldrh	r2, [r7, #2]
 8004b3e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	887a      	ldrh	r2, [r7, #2]
 8004b44:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5c:	2b40      	cmp	r3, #64	; 0x40
 8004b5e:	d007      	beq.n	8004b70 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b78:	d178      	bne.n	8004c6c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d002      	beq.n	8004b88 <HAL_SPI_TransmitReceive+0x10a>
 8004b82:	8b7b      	ldrh	r3, [r7, #26]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d166      	bne.n	8004c56 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8c:	881a      	ldrh	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b98:	1c9a      	adds	r2, r3, #2
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bac:	e053      	b.n	8004c56 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d11b      	bne.n	8004bf4 <HAL_SPI_TransmitReceive+0x176>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d016      	beq.n	8004bf4 <HAL_SPI_TransmitReceive+0x176>
 8004bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d113      	bne.n	8004bf4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd0:	881a      	ldrh	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bdc:	1c9a      	adds	r2, r3, #2
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	3b01      	subs	r3, #1
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d119      	bne.n	8004c36 <HAL_SPI_TransmitReceive+0x1b8>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d014      	beq.n	8004c36 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c16:	b292      	uxth	r2, r2
 8004c18:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1e:	1c9a      	adds	r2, r3, #2
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c32:	2301      	movs	r3, #1
 8004c34:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c36:	f7fd ff9f 	bl	8002b78 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d807      	bhi.n	8004c56 <HAL_SPI_TransmitReceive+0x1d8>
 8004c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4c:	d003      	beq.n	8004c56 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004c54:	e0a7      	b.n	8004da6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1a6      	bne.n	8004bae <HAL_SPI_TransmitReceive+0x130>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1a1      	bne.n	8004bae <HAL_SPI_TransmitReceive+0x130>
 8004c6a:	e07c      	b.n	8004d66 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <HAL_SPI_TransmitReceive+0x1fc>
 8004c74:	8b7b      	ldrh	r3, [r7, #26]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d16b      	bne.n	8004d52 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	330c      	adds	r3, #12
 8004c84:	7812      	ldrb	r2, [r2, #0]
 8004c86:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8c:	1c5a      	adds	r2, r3, #1
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ca0:	e057      	b.n	8004d52 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d11c      	bne.n	8004cea <HAL_SPI_TransmitReceive+0x26c>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d017      	beq.n	8004cea <HAL_SPI_TransmitReceive+0x26c>
 8004cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d114      	bne.n	8004cea <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	330c      	adds	r3, #12
 8004cca:	7812      	ldrb	r2, [r2, #0]
 8004ccc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd2:	1c5a      	adds	r2, r3, #1
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d119      	bne.n	8004d2c <HAL_SPI_TransmitReceive+0x2ae>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d014      	beq.n	8004d2c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68da      	ldr	r2, [r3, #12]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0c:	b2d2      	uxtb	r2, r2
 8004d0e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d14:	1c5a      	adds	r2, r3, #1
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	3b01      	subs	r3, #1
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d2c:	f7fd ff24 	bl	8002b78 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d803      	bhi.n	8004d44 <HAL_SPI_TransmitReceive+0x2c6>
 8004d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d42:	d102      	bne.n	8004d4a <HAL_SPI_TransmitReceive+0x2cc>
 8004d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d103      	bne.n	8004d52 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004d50:	e029      	b.n	8004da6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1a2      	bne.n	8004ca2 <HAL_SPI_TransmitReceive+0x224>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d19d      	bne.n	8004ca2 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f000 f904 	bl	8004f78 <SPI_EndRxTxTransaction>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d006      	beq.n	8004d84 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004d82:	e010      	b.n	8004da6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10b      	bne.n	8004da4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	617b      	str	r3, [r7, #20]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	617b      	str	r3, [r7, #20]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	617b      	str	r3, [r7, #20]
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	e000      	b.n	8004da6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004da4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004db6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3730      	adds	r7, #48	; 0x30
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
	...

08004dc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b088      	sub	sp, #32
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	603b      	str	r3, [r7, #0]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004dd4:	f7fd fed0 	bl	8002b78 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ddc:	1a9b      	subs	r3, r3, r2
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	4413      	add	r3, r2
 8004de2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004de4:	f7fd fec8 	bl	8002b78 <HAL_GetTick>
 8004de8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004dea:	4b39      	ldr	r3, [pc, #228]	; (8004ed0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	015b      	lsls	r3, r3, #5
 8004df0:	0d1b      	lsrs	r3, r3, #20
 8004df2:	69fa      	ldr	r2, [r7, #28]
 8004df4:	fb02 f303 	mul.w	r3, r2, r3
 8004df8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dfa:	e054      	b.n	8004ea6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e02:	d050      	beq.n	8004ea6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e04:	f7fd feb8 	bl	8002b78 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	69fa      	ldr	r2, [r7, #28]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d902      	bls.n	8004e1a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d13d      	bne.n	8004e96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e32:	d111      	bne.n	8004e58 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e3c:	d004      	beq.n	8004e48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e46:	d107      	bne.n	8004e58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e60:	d10f      	bne.n	8004e82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e017      	b.n	8004ec6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	4013      	ands	r3, r2
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	bf0c      	ite	eq
 8004eb6:	2301      	moveq	r3, #1
 8004eb8:	2300      	movne	r3, #0
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	79fb      	ldrb	r3, [r7, #7]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d19b      	bne.n	8004dfc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3720      	adds	r7, #32
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	20000000 	.word	0x20000000

08004ed4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af02      	add	r7, sp, #8
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ee8:	d111      	bne.n	8004f0e <SPI_EndRxTransaction+0x3a>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ef2:	d004      	beq.n	8004efe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004efc:	d107      	bne.n	8004f0e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f0c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f16:	d117      	bne.n	8004f48 <SPI_EndRxTransaction+0x74>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f20:	d112      	bne.n	8004f48 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f7ff ff49 	bl	8004dc4 <SPI_WaitFlagStateUntilTimeout>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d01a      	beq.n	8004f6e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f3c:	f043 0220 	orr.w	r2, r3, #32
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e013      	b.n	8004f70 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	2180      	movs	r1, #128	; 0x80
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f7ff ff36 	bl	8004dc4 <SPI_WaitFlagStateUntilTimeout>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d007      	beq.n	8004f6e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f62:	f043 0220 	orr.w	r2, r3, #32
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e000      	b.n	8004f70 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af02      	add	r7, sp, #8
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	2180      	movs	r1, #128	; 0x80
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f7ff ff18 	bl	8004dc4 <SPI_WaitFlagStateUntilTimeout>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d007      	beq.n	8004faa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9e:	f043 0220 	orr.w	r2, r3, #32
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e000      	b.n	8004fac <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e041      	b.n	800504a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d106      	bne.n	8004fe0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7fd fbf2 	bl	80027c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3304      	adds	r3, #4
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4610      	mov	r0, r2
 8004ff4:	f000 fb0e 	bl	8005614 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b082      	sub	sp, #8
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e041      	b.n	80050e8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d106      	bne.n	800507e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f839 	bl	80050f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2202      	movs	r2, #2
 8005082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	3304      	adds	r3, #4
 800508e:	4619      	mov	r1, r3
 8005090:	4610      	mov	r0, r2
 8005092:	f000 fabf 	bl	8005614 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bc80      	pop	{r7}
 8005100:	4770      	bx	lr
	...

08005104 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d109      	bne.n	8005128 <HAL_TIM_PWM_Start+0x24>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b01      	cmp	r3, #1
 800511e:	bf14      	ite	ne
 8005120:	2301      	movne	r3, #1
 8005122:	2300      	moveq	r3, #0
 8005124:	b2db      	uxtb	r3, r3
 8005126:	e022      	b.n	800516e <HAL_TIM_PWM_Start+0x6a>
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	2b04      	cmp	r3, #4
 800512c:	d109      	bne.n	8005142 <HAL_TIM_PWM_Start+0x3e>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b01      	cmp	r3, #1
 8005138:	bf14      	ite	ne
 800513a:	2301      	movne	r3, #1
 800513c:	2300      	moveq	r3, #0
 800513e:	b2db      	uxtb	r3, r3
 8005140:	e015      	b.n	800516e <HAL_TIM_PWM_Start+0x6a>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b08      	cmp	r3, #8
 8005146:	d109      	bne.n	800515c <HAL_TIM_PWM_Start+0x58>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b01      	cmp	r3, #1
 8005152:	bf14      	ite	ne
 8005154:	2301      	movne	r3, #1
 8005156:	2300      	moveq	r3, #0
 8005158:	b2db      	uxtb	r3, r3
 800515a:	e008      	b.n	800516e <HAL_TIM_PWM_Start+0x6a>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b01      	cmp	r3, #1
 8005166:	bf14      	ite	ne
 8005168:	2301      	movne	r3, #1
 800516a:	2300      	moveq	r3, #0
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e05e      	b.n	8005234 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d104      	bne.n	8005186 <HAL_TIM_PWM_Start+0x82>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005184:	e013      	b.n	80051ae <HAL_TIM_PWM_Start+0xaa>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b04      	cmp	r3, #4
 800518a:	d104      	bne.n	8005196 <HAL_TIM_PWM_Start+0x92>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005194:	e00b      	b.n	80051ae <HAL_TIM_PWM_Start+0xaa>
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b08      	cmp	r3, #8
 800519a:	d104      	bne.n	80051a6 <HAL_TIM_PWM_Start+0xa2>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2202      	movs	r2, #2
 80051a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051a4:	e003      	b.n	80051ae <HAL_TIM_PWM_Start+0xaa>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2202      	movs	r2, #2
 80051aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2201      	movs	r2, #1
 80051b4:	6839      	ldr	r1, [r7, #0]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 fcac 	bl	8005b14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a1e      	ldr	r2, [pc, #120]	; (800523c <HAL_TIM_PWM_Start+0x138>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d107      	bne.n	80051d6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a18      	ldr	r2, [pc, #96]	; (800523c <HAL_TIM_PWM_Start+0x138>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d00e      	beq.n	80051fe <HAL_TIM_PWM_Start+0xfa>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e8:	d009      	beq.n	80051fe <HAL_TIM_PWM_Start+0xfa>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a14      	ldr	r2, [pc, #80]	; (8005240 <HAL_TIM_PWM_Start+0x13c>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d004      	beq.n	80051fe <HAL_TIM_PWM_Start+0xfa>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a12      	ldr	r2, [pc, #72]	; (8005244 <HAL_TIM_PWM_Start+0x140>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d111      	bne.n	8005222 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f003 0307 	and.w	r3, r3, #7
 8005208:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2b06      	cmp	r3, #6
 800520e:	d010      	beq.n	8005232 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0201 	orr.w	r2, r2, #1
 800521e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005220:	e007      	b.n	8005232 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f042 0201 	orr.w	r2, r2, #1
 8005230:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	40012c00 	.word	0x40012c00
 8005240:	40000400 	.word	0x40000400
 8005244:	40000800 	.word	0x40000800

08005248 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2200      	movs	r2, #0
 8005258:	6839      	ldr	r1, [r7, #0]
 800525a:	4618      	mov	r0, r3
 800525c:	f000 fc5a 	bl	8005b14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a29      	ldr	r2, [pc, #164]	; (800530c <HAL_TIM_PWM_Stop+0xc4>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d117      	bne.n	800529a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6a1a      	ldr	r2, [r3, #32]
 8005270:	f241 1311 	movw	r3, #4369	; 0x1111
 8005274:	4013      	ands	r3, r2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10f      	bne.n	800529a <HAL_TIM_PWM_Stop+0x52>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6a1a      	ldr	r2, [r3, #32]
 8005280:	f240 4344 	movw	r3, #1092	; 0x444
 8005284:	4013      	ands	r3, r2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d107      	bne.n	800529a <HAL_TIM_PWM_Stop+0x52>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005298:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6a1a      	ldr	r2, [r3, #32]
 80052a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80052a4:	4013      	ands	r3, r2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10f      	bne.n	80052ca <HAL_TIM_PWM_Stop+0x82>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	6a1a      	ldr	r2, [r3, #32]
 80052b0:	f240 4344 	movw	r3, #1092	; 0x444
 80052b4:	4013      	ands	r3, r2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d107      	bne.n	80052ca <HAL_TIM_PWM_Stop+0x82>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 0201 	bic.w	r2, r2, #1
 80052c8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d104      	bne.n	80052da <HAL_TIM_PWM_Stop+0x92>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052d8:	e013      	b.n	8005302 <HAL_TIM_PWM_Stop+0xba>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b04      	cmp	r3, #4
 80052de:	d104      	bne.n	80052ea <HAL_TIM_PWM_Stop+0xa2>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052e8:	e00b      	b.n	8005302 <HAL_TIM_PWM_Stop+0xba>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	d104      	bne.n	80052fa <HAL_TIM_PWM_Stop+0xb2>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052f8:	e003      	b.n	8005302 <HAL_TIM_PWM_Stop+0xba>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3708      	adds	r7, #8
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	40012c00 	.word	0x40012c00

08005310 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005322:	2b01      	cmp	r3, #1
 8005324:	d101      	bne.n	800532a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005326:	2302      	movs	r3, #2
 8005328:	e0ac      	b.n	8005484 <HAL_TIM_PWM_ConfigChannel+0x174>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b0c      	cmp	r3, #12
 8005336:	f200 809f 	bhi.w	8005478 <HAL_TIM_PWM_ConfigChannel+0x168>
 800533a:	a201      	add	r2, pc, #4	; (adr r2, 8005340 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800533c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005340:	08005375 	.word	0x08005375
 8005344:	08005479 	.word	0x08005479
 8005348:	08005479 	.word	0x08005479
 800534c:	08005479 	.word	0x08005479
 8005350:	080053b5 	.word	0x080053b5
 8005354:	08005479 	.word	0x08005479
 8005358:	08005479 	.word	0x08005479
 800535c:	08005479 	.word	0x08005479
 8005360:	080053f7 	.word	0x080053f7
 8005364:	08005479 	.word	0x08005479
 8005368:	08005479 	.word	0x08005479
 800536c:	08005479 	.word	0x08005479
 8005370:	08005437 	.word	0x08005437
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68b9      	ldr	r1, [r7, #8]
 800537a:	4618      	mov	r0, r3
 800537c:	f000 f9ac 	bl	80056d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699a      	ldr	r2, [r3, #24]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0208 	orr.w	r2, r2, #8
 800538e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699a      	ldr	r2, [r3, #24]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0204 	bic.w	r2, r2, #4
 800539e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6999      	ldr	r1, [r3, #24]
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	691a      	ldr	r2, [r3, #16]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	430a      	orrs	r2, r1
 80053b0:	619a      	str	r2, [r3, #24]
      break;
 80053b2:	e062      	b.n	800547a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68b9      	ldr	r1, [r7, #8]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 f9f2 	bl	80057a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	699a      	ldr	r2, [r3, #24]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	699a      	ldr	r2, [r3, #24]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6999      	ldr	r1, [r3, #24]
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	021a      	lsls	r2, r3, #8
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	430a      	orrs	r2, r1
 80053f2:	619a      	str	r2, [r3, #24]
      break;
 80053f4:	e041      	b.n	800547a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68b9      	ldr	r1, [r7, #8]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 fa3b 	bl	8005878 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69da      	ldr	r2, [r3, #28]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f042 0208 	orr.w	r2, r2, #8
 8005410:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69da      	ldr	r2, [r3, #28]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0204 	bic.w	r2, r2, #4
 8005420:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	69d9      	ldr	r1, [r3, #28]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	691a      	ldr	r2, [r3, #16]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	430a      	orrs	r2, r1
 8005432:	61da      	str	r2, [r3, #28]
      break;
 8005434:	e021      	b.n	800547a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68b9      	ldr	r1, [r7, #8]
 800543c:	4618      	mov	r0, r3
 800543e:	f000 fa85 	bl	800594c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	69da      	ldr	r2, [r3, #28]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005450:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	69da      	ldr	r2, [r3, #28]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005460:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	69d9      	ldr	r1, [r3, #28]
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	021a      	lsls	r2, r3, #8
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	61da      	str	r2, [r3, #28]
      break;
 8005476:	e000      	b.n	800547a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005478:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800549c:	2b01      	cmp	r3, #1
 800549e:	d101      	bne.n	80054a4 <HAL_TIM_ConfigClockSource+0x18>
 80054a0:	2302      	movs	r3, #2
 80054a2:	e0b3      	b.n	800560c <HAL_TIM_ConfigClockSource+0x180>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054dc:	d03e      	beq.n	800555c <HAL_TIM_ConfigClockSource+0xd0>
 80054de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054e2:	f200 8087 	bhi.w	80055f4 <HAL_TIM_ConfigClockSource+0x168>
 80054e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ea:	f000 8085 	beq.w	80055f8 <HAL_TIM_ConfigClockSource+0x16c>
 80054ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f2:	d87f      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x168>
 80054f4:	2b70      	cmp	r3, #112	; 0x70
 80054f6:	d01a      	beq.n	800552e <HAL_TIM_ConfigClockSource+0xa2>
 80054f8:	2b70      	cmp	r3, #112	; 0x70
 80054fa:	d87b      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x168>
 80054fc:	2b60      	cmp	r3, #96	; 0x60
 80054fe:	d050      	beq.n	80055a2 <HAL_TIM_ConfigClockSource+0x116>
 8005500:	2b60      	cmp	r3, #96	; 0x60
 8005502:	d877      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x168>
 8005504:	2b50      	cmp	r3, #80	; 0x50
 8005506:	d03c      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0xf6>
 8005508:	2b50      	cmp	r3, #80	; 0x50
 800550a:	d873      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x168>
 800550c:	2b40      	cmp	r3, #64	; 0x40
 800550e:	d058      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0x136>
 8005510:	2b40      	cmp	r3, #64	; 0x40
 8005512:	d86f      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x168>
 8005514:	2b30      	cmp	r3, #48	; 0x30
 8005516:	d064      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x156>
 8005518:	2b30      	cmp	r3, #48	; 0x30
 800551a:	d86b      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x168>
 800551c:	2b20      	cmp	r3, #32
 800551e:	d060      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x156>
 8005520:	2b20      	cmp	r3, #32
 8005522:	d867      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x168>
 8005524:	2b00      	cmp	r3, #0
 8005526:	d05c      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x156>
 8005528:	2b10      	cmp	r3, #16
 800552a:	d05a      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800552c:	e062      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6818      	ldr	r0, [r3, #0]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	6899      	ldr	r1, [r3, #8]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	685a      	ldr	r2, [r3, #4]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	f000 faca 	bl	8005ad6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005550:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	609a      	str	r2, [r3, #8]
      break;
 800555a:	e04e      	b.n	80055fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6818      	ldr	r0, [r3, #0]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	6899      	ldr	r1, [r3, #8]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f000 fab3 	bl	8005ad6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689a      	ldr	r2, [r3, #8]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800557e:	609a      	str	r2, [r3, #8]
      break;
 8005580:	e03b      	b.n	80055fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6818      	ldr	r0, [r3, #0]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	6859      	ldr	r1, [r3, #4]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	461a      	mov	r2, r3
 8005590:	f000 fa2a 	bl	80059e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2150      	movs	r1, #80	; 0x50
 800559a:	4618      	mov	r0, r3
 800559c:	f000 fa81 	bl	8005aa2 <TIM_ITRx_SetConfig>
      break;
 80055a0:	e02b      	b.n	80055fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6818      	ldr	r0, [r3, #0]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	6859      	ldr	r1, [r3, #4]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	461a      	mov	r2, r3
 80055b0:	f000 fa48 	bl	8005a44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2160      	movs	r1, #96	; 0x60
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 fa71 	bl	8005aa2 <TIM_ITRx_SetConfig>
      break;
 80055c0:	e01b      	b.n	80055fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6818      	ldr	r0, [r3, #0]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	6859      	ldr	r1, [r3, #4]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	461a      	mov	r2, r3
 80055d0:	f000 fa0a 	bl	80059e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2140      	movs	r1, #64	; 0x40
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 fa61 	bl	8005aa2 <TIM_ITRx_SetConfig>
      break;
 80055e0:	e00b      	b.n	80055fa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4619      	mov	r1, r3
 80055ec:	4610      	mov	r0, r2
 80055ee:	f000 fa58 	bl	8005aa2 <TIM_ITRx_SetConfig>
        break;
 80055f2:	e002      	b.n	80055fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80055f4:	bf00      	nop
 80055f6:	e000      	b.n	80055fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80055f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a29      	ldr	r2, [pc, #164]	; (80056cc <TIM_Base_SetConfig+0xb8>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d00b      	beq.n	8005644 <TIM_Base_SetConfig+0x30>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005632:	d007      	beq.n	8005644 <TIM_Base_SetConfig+0x30>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a26      	ldr	r2, [pc, #152]	; (80056d0 <TIM_Base_SetConfig+0xbc>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d003      	beq.n	8005644 <TIM_Base_SetConfig+0x30>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a25      	ldr	r2, [pc, #148]	; (80056d4 <TIM_Base_SetConfig+0xc0>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d108      	bne.n	8005656 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	4313      	orrs	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a1c      	ldr	r2, [pc, #112]	; (80056cc <TIM_Base_SetConfig+0xb8>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d00b      	beq.n	8005676 <TIM_Base_SetConfig+0x62>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005664:	d007      	beq.n	8005676 <TIM_Base_SetConfig+0x62>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a19      	ldr	r2, [pc, #100]	; (80056d0 <TIM_Base_SetConfig+0xbc>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d003      	beq.n	8005676 <TIM_Base_SetConfig+0x62>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a18      	ldr	r2, [pc, #96]	; (80056d4 <TIM_Base_SetConfig+0xc0>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d108      	bne.n	8005688 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800567c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	4313      	orrs	r3, r2
 8005686:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	4313      	orrs	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	689a      	ldr	r2, [r3, #8]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a07      	ldr	r2, [pc, #28]	; (80056cc <TIM_Base_SetConfig+0xb8>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d103      	bne.n	80056bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	691a      	ldr	r2, [r3, #16]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	615a      	str	r2, [r3, #20]
}
 80056c2:	bf00      	nop
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bc80      	pop	{r7}
 80056ca:	4770      	bx	lr
 80056cc:	40012c00 	.word	0x40012c00
 80056d0:	40000400 	.word	0x40000400
 80056d4:	40000800 	.word	0x40000800

080056d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056d8:	b480      	push	{r7}
 80056da:	b087      	sub	sp, #28
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	f023 0201 	bic.w	r2, r3, #1
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f023 0303 	bic.w	r3, r3, #3
 800570e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	4313      	orrs	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f023 0302 	bic.w	r3, r3, #2
 8005720:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	4313      	orrs	r3, r2
 800572a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a1c      	ldr	r2, [pc, #112]	; (80057a0 <TIM_OC1_SetConfig+0xc8>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d10c      	bne.n	800574e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f023 0308 	bic.w	r3, r3, #8
 800573a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	4313      	orrs	r3, r2
 8005744:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f023 0304 	bic.w	r3, r3, #4
 800574c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a13      	ldr	r2, [pc, #76]	; (80057a0 <TIM_OC1_SetConfig+0xc8>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d111      	bne.n	800577a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800575c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005764:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	4313      	orrs	r3, r2
 800576e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	4313      	orrs	r3, r2
 8005778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	621a      	str	r2, [r3, #32]
}
 8005794:	bf00      	nop
 8005796:	371c      	adds	r7, #28
 8005798:	46bd      	mov	sp, r7
 800579a:	bc80      	pop	{r7}
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	40012c00 	.word	0x40012c00

080057a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	f023 0210 	bic.w	r2, r3, #16
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	021b      	lsls	r3, r3, #8
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f023 0320 	bic.w	r3, r3, #32
 80057ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	011b      	lsls	r3, r3, #4
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a1d      	ldr	r2, [pc, #116]	; (8005874 <TIM_OC2_SetConfig+0xd0>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d10d      	bne.n	8005820 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800580a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	011b      	lsls	r3, r3, #4
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	4313      	orrs	r3, r2
 8005816:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800581e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a14      	ldr	r2, [pc, #80]	; (8005874 <TIM_OC2_SetConfig+0xd0>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d113      	bne.n	8005850 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800582e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005836:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	695b      	ldr	r3, [r3, #20]
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	4313      	orrs	r3, r2
 8005842:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	4313      	orrs	r3, r2
 800584e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	621a      	str	r2, [r3, #32]
}
 800586a:	bf00      	nop
 800586c:	371c      	adds	r7, #28
 800586e:	46bd      	mov	sp, r7
 8005870:	bc80      	pop	{r7}
 8005872:	4770      	bx	lr
 8005874:	40012c00 	.word	0x40012c00

08005878 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005878:	b480      	push	{r7}
 800587a:	b087      	sub	sp, #28
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	69db      	ldr	r3, [r3, #28]
 800589e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f023 0303 	bic.w	r3, r3, #3
 80058ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	021b      	lsls	r3, r3, #8
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a1d      	ldr	r2, [pc, #116]	; (8005948 <TIM_OC3_SetConfig+0xd0>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d10d      	bne.n	80058f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	021b      	lsls	r3, r3, #8
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a14      	ldr	r2, [pc, #80]	; (8005948 <TIM_OC3_SetConfig+0xd0>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d113      	bne.n	8005922 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005900:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005908:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	011b      	lsls	r3, r3, #4
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	4313      	orrs	r3, r2
 8005914:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	011b      	lsls	r3, r3, #4
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	4313      	orrs	r3, r2
 8005920:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685a      	ldr	r2, [r3, #4]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	621a      	str	r2, [r3, #32]
}
 800593c:	bf00      	nop
 800593e:	371c      	adds	r7, #28
 8005940:	46bd      	mov	sp, r7
 8005942:	bc80      	pop	{r7}
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	40012c00 	.word	0x40012c00

0800594c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800594c:	b480      	push	{r7}
 800594e:	b087      	sub	sp, #28
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	69db      	ldr	r3, [r3, #28]
 8005972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800597a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005982:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	021b      	lsls	r3, r3, #8
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	4313      	orrs	r3, r2
 800598e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005996:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	031b      	lsls	r3, r3, #12
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a0f      	ldr	r2, [pc, #60]	; (80059e4 <TIM_OC4_SetConfig+0x98>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d109      	bne.n	80059c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	019b      	lsls	r3, r3, #6
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	4313      	orrs	r3, r2
 80059be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685a      	ldr	r2, [r3, #4]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	621a      	str	r2, [r3, #32]
}
 80059da:	bf00      	nop
 80059dc:	371c      	adds	r7, #28
 80059de:	46bd      	mov	sp, r7
 80059e0:	bc80      	pop	{r7}
 80059e2:	4770      	bx	lr
 80059e4:	40012c00 	.word	0x40012c00

080059e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b087      	sub	sp, #28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	f023 0201 	bic.w	r2, r3, #1
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	011b      	lsls	r3, r3, #4
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f023 030a 	bic.w	r3, r3, #10
 8005a24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	621a      	str	r2, [r3, #32]
}
 8005a3a:	bf00      	nop
 8005a3c:	371c      	adds	r7, #28
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bc80      	pop	{r7}
 8005a42:	4770      	bx	lr

08005a44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	f023 0210 	bic.w	r2, r3, #16
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	031b      	lsls	r3, r3, #12
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	011b      	lsls	r3, r3, #4
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	621a      	str	r2, [r3, #32]
}
 8005a98:	bf00      	nop
 8005a9a:	371c      	adds	r7, #28
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bc80      	pop	{r7}
 8005aa0:	4770      	bx	lr

08005aa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b085      	sub	sp, #20
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	f043 0307 	orr.w	r3, r3, #7
 8005ac4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	609a      	str	r2, [r3, #8]
}
 8005acc:	bf00      	nop
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bc80      	pop	{r7}
 8005ad4:	4770      	bx	lr

08005ad6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b087      	sub	sp, #28
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	60f8      	str	r0, [r7, #12]
 8005ade:	60b9      	str	r1, [r7, #8]
 8005ae0:	607a      	str	r2, [r7, #4]
 8005ae2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005af0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	021a      	lsls	r2, r3, #8
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	431a      	orrs	r2, r3
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	609a      	str	r2, [r3, #8]
}
 8005b0a:	bf00      	nop
 8005b0c:	371c      	adds	r7, #28
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bc80      	pop	{r7}
 8005b12:	4770      	bx	lr

08005b14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f003 031f 	and.w	r3, r3, #31
 8005b26:	2201      	movs	r2, #1
 8005b28:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6a1a      	ldr	r2, [r3, #32]
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	43db      	mvns	r3, r3
 8005b36:	401a      	ands	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6a1a      	ldr	r2, [r3, #32]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	f003 031f 	and.w	r3, r3, #31
 8005b46:	6879      	ldr	r1, [r7, #4]
 8005b48:	fa01 f303 	lsl.w	r3, r1, r3
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	621a      	str	r2, [r3, #32]
}
 8005b52:	bf00      	nop
 8005b54:	371c      	adds	r7, #28
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bc80      	pop	{r7}
 8005b5a:	4770      	bx	lr

08005b5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d101      	bne.n	8005b74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b70:	2302      	movs	r3, #2
 8005b72:	e046      	b.n	8005c02 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a16      	ldr	r2, [pc, #88]	; (8005c0c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d00e      	beq.n	8005bd6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bc0:	d009      	beq.n	8005bd6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a12      	ldr	r2, [pc, #72]	; (8005c10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d004      	beq.n	8005bd6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a10      	ldr	r2, [pc, #64]	; (8005c14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d10c      	bne.n	8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bdc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3714      	adds	r7, #20
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bc80      	pop	{r7}
 8005c0a:	4770      	bx	lr
 8005c0c:	40012c00 	.word	0x40012c00
 8005c10:	40000400 	.word	0x40000400
 8005c14:	40000800 	.word	0x40000800

08005c18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c22:	2300      	movs	r3, #0
 8005c24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d101      	bne.n	8005c34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c30:	2302      	movs	r3, #2
 8005c32:	e03d      	b.n	8005cb0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	695b      	ldr	r3, [r3, #20]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bc80      	pop	{r7}
 8005cb8:	4770      	bx	lr

08005cba <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b082      	sub	sp, #8
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d101      	bne.n	8005ccc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e03f      	b.n	8005d4c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d106      	bne.n	8005ce6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f7fc fdc1 	bl	8002868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2224      	movs	r2, #36	; 0x24
 8005cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68da      	ldr	r2, [r3, #12]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cfc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f904 	bl	8005f0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	691a      	ldr	r2, [r3, #16]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d12:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	695a      	ldr	r2, [r3, #20]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d22:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68da      	ldr	r2, [r3, #12]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d32:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2220      	movs	r2, #32
 8005d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2220      	movs	r2, #32
 8005d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3708      	adds	r7, #8
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b08a      	sub	sp, #40	; 0x28
 8005d58:	af02      	add	r7, sp, #8
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	603b      	str	r3, [r7, #0]
 8005d60:	4613      	mov	r3, r2
 8005d62:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d64:	2300      	movs	r3, #0
 8005d66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b20      	cmp	r3, #32
 8005d72:	d17c      	bne.n	8005e6e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d002      	beq.n	8005d80 <HAL_UART_Transmit+0x2c>
 8005d7a:	88fb      	ldrh	r3, [r7, #6]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e075      	b.n	8005e70 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d101      	bne.n	8005d92 <HAL_UART_Transmit+0x3e>
 8005d8e:	2302      	movs	r3, #2
 8005d90:	e06e      	b.n	8005e70 <HAL_UART_Transmit+0x11c>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2221      	movs	r2, #33	; 0x21
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005da8:	f7fc fee6 	bl	8002b78 <HAL_GetTick>
 8005dac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	88fa      	ldrh	r2, [r7, #6]
 8005db2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	88fa      	ldrh	r2, [r7, #6]
 8005db8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dc2:	d108      	bne.n	8005dd6 <HAL_UART_Transmit+0x82>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d104      	bne.n	8005dd6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	61bb      	str	r3, [r7, #24]
 8005dd4:	e003      	b.n	8005dde <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005de6:	e02a      	b.n	8005e3e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	2200      	movs	r2, #0
 8005df0:	2180      	movs	r1, #128	; 0x80
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f000 f840 	bl	8005e78 <UART_WaitOnFlagUntilTimeout>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e036      	b.n	8005e70 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10b      	bne.n	8005e20 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	881b      	ldrh	r3, [r3, #0]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e16:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	3302      	adds	r3, #2
 8005e1c:	61bb      	str	r3, [r7, #24]
 8005e1e:	e007      	b.n	8005e30 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	781a      	ldrb	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	3b01      	subs	r3, #1
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1cf      	bne.n	8005de8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	2140      	movs	r1, #64	; 0x40
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f000 f810 	bl	8005e78 <UART_WaitOnFlagUntilTimeout>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d001      	beq.n	8005e62 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e006      	b.n	8005e70 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2220      	movs	r2, #32
 8005e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	e000      	b.n	8005e70 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005e6e:	2302      	movs	r3, #2
  }
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3720      	adds	r7, #32
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	603b      	str	r3, [r7, #0]
 8005e84:	4613      	mov	r3, r2
 8005e86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e88:	e02c      	b.n	8005ee4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e90:	d028      	beq.n	8005ee4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d007      	beq.n	8005ea8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e98:	f7fc fe6e 	bl	8002b78 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	69ba      	ldr	r2, [r7, #24]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d21d      	bcs.n	8005ee4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68da      	ldr	r2, [r3, #12]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005eb6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	695a      	ldr	r2, [r3, #20]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f022 0201 	bic.w	r2, r2, #1
 8005ec6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e00f      	b.n	8005f04 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	4013      	ands	r3, r2
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	bf0c      	ite	eq
 8005ef4:	2301      	moveq	r3, #1
 8005ef6:	2300      	movne	r3, #0
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	461a      	mov	r2, r3
 8005efc:	79fb      	ldrb	r3, [r7, #7]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d0c3      	beq.n	8005e8a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	68da      	ldr	r2, [r3, #12]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	689a      	ldr	r2, [r3, #8]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	431a      	orrs	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005f46:	f023 030c 	bic.w	r3, r3, #12
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	6812      	ldr	r2, [r2, #0]
 8005f4e:	68b9      	ldr	r1, [r7, #8]
 8005f50:	430b      	orrs	r3, r1
 8005f52:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	699a      	ldr	r2, [r3, #24]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	430a      	orrs	r2, r1
 8005f68:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a2c      	ldr	r2, [pc, #176]	; (8006020 <UART_SetConfig+0x114>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d103      	bne.n	8005f7c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005f74:	f7fe f908 	bl	8004188 <HAL_RCC_GetPCLK2Freq>
 8005f78:	60f8      	str	r0, [r7, #12]
 8005f7a:	e002      	b.n	8005f82 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005f7c:	f7fe f8f0 	bl	8004160 <HAL_RCC_GetPCLK1Freq>
 8005f80:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	4613      	mov	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	009a      	lsls	r2, r3, #2
 8005f8c:	441a      	add	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f98:	4a22      	ldr	r2, [pc, #136]	; (8006024 <UART_SetConfig+0x118>)
 8005f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9e:	095b      	lsrs	r3, r3, #5
 8005fa0:	0119      	lsls	r1, r3, #4
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	009a      	lsls	r2, r3, #2
 8005fac:	441a      	add	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fb8:	4b1a      	ldr	r3, [pc, #104]	; (8006024 <UART_SetConfig+0x118>)
 8005fba:	fba3 0302 	umull	r0, r3, r3, r2
 8005fbe:	095b      	lsrs	r3, r3, #5
 8005fc0:	2064      	movs	r0, #100	; 0x64
 8005fc2:	fb00 f303 	mul.w	r3, r0, r3
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	011b      	lsls	r3, r3, #4
 8005fca:	3332      	adds	r3, #50	; 0x32
 8005fcc:	4a15      	ldr	r2, [pc, #84]	; (8006024 <UART_SetConfig+0x118>)
 8005fce:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd2:	095b      	lsrs	r3, r3, #5
 8005fd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fd8:	4419      	add	r1, r3
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	009a      	lsls	r2, r3, #2
 8005fe4:	441a      	add	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ff0:	4b0c      	ldr	r3, [pc, #48]	; (8006024 <UART_SetConfig+0x118>)
 8005ff2:	fba3 0302 	umull	r0, r3, r3, r2
 8005ff6:	095b      	lsrs	r3, r3, #5
 8005ff8:	2064      	movs	r0, #100	; 0x64
 8005ffa:	fb00 f303 	mul.w	r3, r0, r3
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	011b      	lsls	r3, r3, #4
 8006002:	3332      	adds	r3, #50	; 0x32
 8006004:	4a07      	ldr	r2, [pc, #28]	; (8006024 <UART_SetConfig+0x118>)
 8006006:	fba2 2303 	umull	r2, r3, r2, r3
 800600a:	095b      	lsrs	r3, r3, #5
 800600c:	f003 020f 	and.w	r2, r3, #15
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	440a      	add	r2, r1
 8006016:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006018:	bf00      	nop
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	40013800 	.word	0x40013800
 8006024:	51eb851f 	.word	0x51eb851f

08006028 <_ZN11MC3479Class12setSerialSPIEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:



// Set the MC3479's SPI object
bool MC3479Class::setSerialSPI(SPI_HandleTypeDef * spi,GPIO_TypeDef * csn_GPIO, uint16_t csn_PIN )
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
 8006034:	807b      	strh	r3, [r7, #2]
	this->_SPI1 = spi;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	601a      	str	r2, [r3, #0]
	this->_CSN_GPIO = csn_GPIO;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	609a      	str	r2, [r3, #8]
	this->_CSN_PIN = csn_PIN;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	887a      	ldrh	r2, [r7, #2]
 8006046:	819a      	strh	r2, [r3, #12]
	return 1; // Return Success
 8006048:	2301      	movs	r3, #1
}
 800604a:	4618      	mov	r0, r3
 800604c:	3714      	adds	r7, #20
 800604e:	46bd      	mov	sp, r7
 8006050:	bc80      	pop	{r7}
 8006052:	4770      	bx	lr

08006054 <_ZN11MC3479Class16SPI_readRegisterEhPh>:

// Read from a register using SPI
bool MC3479Class::SPI_readRegister(uint8_t reg,  uint8_t* data)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	460b      	mov	r3, r1
 800605e:	607a      	str	r2, [r7, #4]
 8006060:	72fb      	strb	r3, [r7, #11]

	uint8_t spiBytes[2];
	spiBytes[0] = SPIread_REG | reg;
 8006062:	7afb      	ldrb	r3, [r7, #11]
 8006064:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006068:	b2db      	uxtb	r3, r3
 800606a:	753b      	strb	r3, [r7, #20]
	spiBytes[1] = SPIread_BYTE2;
 800606c:	2300      	movs	r3, #0
 800606e:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_RESET);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6898      	ldr	r0, [r3, #8]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	899b      	ldrh	r3, [r3, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	4619      	mov	r1, r3
 800607c:	f7fd fc81 	bl	8003982 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_SPI1, &spiBytes[0], sizeof(spiBytes), 10);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6818      	ldr	r0, [r3, #0]
 8006084:	f107 0114 	add.w	r1, r7, #20
 8006088:	230a      	movs	r3, #10
 800608a:	2202      	movs	r2, #2
 800608c:	f7fe faaa 	bl	80045e4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(this->_SPI1, data, REG_BYTES_LEN, 10);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6818      	ldr	r0, [r3, #0]
 8006094:	230a      	movs	r3, #10
 8006096:	2201      	movs	r2, #1
 8006098:	6879      	ldr	r1, [r7, #4]
 800609a:	f7fe fbdf 	bl	800485c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_SET);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6898      	ldr	r0, [r3, #8]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	899b      	ldrh	r3, [r3, #12]
 80060a6:	2201      	movs	r2, #1
 80060a8:	4619      	mov	r1, r3
 80060aa:	f7fd fc6a 	bl	8003982 <HAL_GPIO_WritePin>
	return 1;
 80060ae:	2301      	movs	r3, #1
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3718      	adds	r7, #24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <_ZN11MC3479Class17SPI_writeRegisterEhh>:

// Write to a register using SPI
uint8_t MC3479Class::SPI_writeRegister(uint8_t reg, uint8_t data)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	460b      	mov	r3, r1
 80060c2:	70fb      	strb	r3, [r7, #3]
 80060c4:	4613      	mov	r3, r2
 80060c6:	70bb      	strb	r3, [r7, #2]
	// Write data to reg:
	uint8_t spiBytes[2];
	spiBytes[0] = SPIwrite_REG | reg;
 80060c8:	78fb      	ldrb	r3, [r7, #3]
 80060ca:	733b      	strb	r3, [r7, #12]
	spiBytes[1] = data;
 80060cc:	78bb      	ldrb	r3, [r7, #2]
 80060ce:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_RESET);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6898      	ldr	r0, [r3, #8]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	899b      	ldrh	r3, [r3, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	4619      	mov	r1, r3
 80060dc:	f7fd fc51 	bl	8003982 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_SPI1, &spiBytes[0], sizeof(spiBytes), 10);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6818      	ldr	r0, [r3, #0]
 80060e4:	f107 010c 	add.w	r1, r7, #12
 80060e8:	230a      	movs	r3, #10
 80060ea:	2202      	movs	r2, #2
 80060ec:	f7fe fa7a 	bl	80045e4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_SET);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6898      	ldr	r0, [r3, #8]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	899b      	ldrh	r3, [r3, #12]
 80060f8:	2201      	movs	r2, #1
 80060fa:	4619      	mov	r1, r3
 80060fc:	f7fd fc41 	bl	8003982 <HAL_GPIO_WritePin>

	// Read back the register and return the bytes:
	uint8_t regReadBack = 0;
 8006100:	2300      	movs	r3, #0
 8006102:	72fb      	strb	r3, [r7, #11]
	MC3479Class::SPI_readRegister(reg, &regReadBack);
 8006104:	f107 020b 	add.w	r2, r7, #11
 8006108:	78fb      	ldrb	r3, [r7, #3]
 800610a:	4619      	mov	r1, r3
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f7ff ffa1 	bl	8006054 <_ZN11MC3479Class16SPI_readRegisterEhPh>
	return regReadBack;
 8006112:	7afb      	ldrb	r3, [r7, #11]
}
 8006114:	4618      	mov	r0, r3
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <_ZN11MC3479Class21burstSPI_readRegisterEhPhh>:

// Read from a register using SPI
bool MC3479Class::burstSPI_readRegister(uint8_t reg, uint8_t* data, uint8_t reg_count)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b086      	sub	sp, #24
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	607a      	str	r2, [r7, #4]
 8006126:	461a      	mov	r2, r3
 8006128:	460b      	mov	r3, r1
 800612a:	72fb      	strb	r3, [r7, #11]
 800612c:	4613      	mov	r3, r2
 800612e:	72bb      	strb	r3, [r7, #10]
	uint8_t spiBytes[2];
	spiBytes[0] = SPIread_REG | reg;
 8006130:	7afb      	ldrb	r3, [r7, #11]
 8006132:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006136:	b2db      	uxtb	r3, r3
 8006138:	753b      	strb	r3, [r7, #20]
	spiBytes[1] = SPIread_BYTE2;
 800613a:	2300      	movs	r3, #0
 800613c:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_RESET);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6898      	ldr	r0, [r3, #8]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	899b      	ldrh	r3, [r3, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	4619      	mov	r1, r3
 800614a:	f7fd fc1a 	bl	8003982 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_SPI1, spiBytes, sizeof(spiBytes), 10);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6818      	ldr	r0, [r3, #0]
 8006152:	f107 0114 	add.w	r1, r7, #20
 8006156:	230a      	movs	r3, #10
 8006158:	2202      	movs	r2, #2
 800615a:	f7fe fa43 	bl	80045e4 <HAL_SPI_Transmit>

	for (uint8_t i=0; i<reg_count; i++)
 800615e:	2300      	movs	r3, #0
 8006160:	75fb      	strb	r3, [r7, #23]
 8006162:	7dfa      	ldrb	r2, [r7, #23]
 8006164:	7abb      	ldrb	r3, [r7, #10]
 8006166:	429a      	cmp	r2, r3
 8006168:	d20c      	bcs.n	8006184 <_ZN11MC3479Class21burstSPI_readRegisterEhPhh+0x68>
	{
		//TODO: Validate that data[0] will be Xdata LSB
		HAL_SPI_Receive(this->_SPI1, &data[i], REG_BYTES_LEN, 10);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6818      	ldr	r0, [r3, #0]
 800616e:	7dfb      	ldrb	r3, [r7, #23]
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	18d1      	adds	r1, r2, r3
 8006174:	230a      	movs	r3, #10
 8006176:	2201      	movs	r2, #1
 8006178:	f7fe fb70 	bl	800485c <HAL_SPI_Receive>
	for (uint8_t i=0; i<reg_count; i++)
 800617c:	7dfb      	ldrb	r3, [r7, #23]
 800617e:	3301      	adds	r3, #1
 8006180:	75fb      	strb	r3, [r7, #23]
 8006182:	e7ee      	b.n	8006162 <_ZN11MC3479Class21burstSPI_readRegisterEhPhh+0x46>
	}
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_SET);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6898      	ldr	r0, [r3, #8]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	899b      	ldrh	r3, [r3, #12]
 800618c:	2201      	movs	r2, #1
 800618e:	4619      	mov	r1, r3
 8006190:	f7fd fbf7 	bl	8003982 <HAL_GPIO_WritePin>
	return 1;
 8006194:	2301      	movs	r3, #1

}
 8006196:	4618      	mov	r0, r3
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <_ZN11MC3479Class19configAccelerometerEv>:
	return 1;
}
#endif

// Perform the initial MC3479 hard-coded configuration
void MC3479Class::configAccelerometer(){
 800619e:	b580      	push	{r7, lr}
 80061a0:	b084      	sub	sp, #16
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]

#ifdef _SPI_COM_ENABLED
		//Configuration using SPI:

		// Register 0x06 (interrupt enable)
		data = 0xFF & ACQ_INT_EN; //only activates interrupts after each sample
 80061a6:	2380      	movs	r3, #128	; 0x80
 80061a8:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_INTR_CTRL, data);
 80061aa:	7bfb      	ldrb	r3, [r7, #15]
 80061ac:	461a      	mov	r2, r3
 80061ae:	2106      	movs	r1, #6
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f7ff ff81 	bl	80060b8 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x07 (MODE)
		data = 0xFF & WAKE; // clocks running, X,Y,Z axis sampled @ data rate
 80061b6:	2301      	movs	r3, #1
 80061b8:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_MODE, data);
 80061ba:	7bfb      	ldrb	r3, [r7, #15]
 80061bc:	461a      	mov	r2, r3
 80061be:	2107      	movs	r1, #7
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f7ff ff79 	bl	80060b8 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x08 (Sample  Rate)
		data = 0xFF & RATE7_2000Hz; // sample x,y,z @ 100Hz
 80061c6:	230f      	movs	r3, #15
 80061c8:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_SR, data);
 80061ca:	7bfb      	ldrb	r3, [r7, #15]
 80061cc:	461a      	mov	r2, r3
 80061ce:	2108      	movs	r1, #8
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7ff ff71 	bl	80060b8 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x09 (Motion Control)
		data = 0xFF & 0x00; //No motion detection enabled Z-axis positive through top of package
 80061d6:	2300      	movs	r3, #0
 80061d8:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_MOTION_CTRL, data);
 80061da:	7bfb      	ldrb	r3, [r7, #15]
 80061dc:	461a      	mov	r2, r3
 80061de:	2109      	movs	r1, #9
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f7ff ff69 	bl	80060b8 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x20 (Range Select Control)
		data = 0xFF & 0x00; // No resolution range change, no LPF
 80061e6:	2300      	movs	r3, #0
 80061e8:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_RANGE, data);
 80061ea:	7bfb      	ldrb	r3, [r7, #15]
 80061ec:	461a      	mov	r2, r3
 80061ee:	2120      	movs	r1, #32
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f7ff ff61 	bl	80060b8 <_ZN11MC3479Class17SPI_writeRegisterEhh>
//		MC3479Class::SPI_readRegister(MC3479_ZGAIN, &data);
//		data = data & 0xFF; //no GAIN
//		MC3479Class::SPI_writeRegister(MC3479_ZGAIN, data);

		// RegisteO 0x2D (FIFO Control)
		data = 0XFF & FIFO_TH_INT_EN & FIFO_FULL_INT_EN; // FIFO TH/Full IRQ set on INTN2 pin.
 80061f6:	2300      	movs	r3, #0
 80061f8:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_FIFO_CTRL, data);
 80061fa:	7bfb      	ldrb	r3, [r7, #15]
 80061fc:	461a      	mov	r2, r3
 80061fe:	212d      	movs	r1, #45	; 0x2d
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f7ff ff59 	bl	80060b8 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x2E (FIFO Threshold)
		data = 0xFF & 0x10; //FIFO IRQ threshold set to 50%
 8006206:	2310      	movs	r3, #16
 8006208:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_FIFO_TH, data);
 800620a:	7bfb      	ldrb	r3, [r7, #15]
 800620c:	461a      	mov	r2, r3
 800620e:	212e      	movs	r1, #46	; 0x2e
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f7ff ff51 	bl	80060b8 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x30 (FIFO Control 2, Sample Rate 2)
		//Burst-read cycle that includes XOUT[15:0], YOUT[15:0],
		//ZOUT[15:0], annd NOTTTT: STATUS[7:0], and INTR_STATUS[7:0]:
		data = 0xFF & 0x00;
 8006216:	2300      	movs	r3, #0
 8006218:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_FIFO_CTRL2_SR2, data);
 800621a:	7bfb      	ldrb	r3, [r7, #15]
 800621c:	461a      	mov	r2, r3
 800621e:	2130      	movs	r1, #48	; 0x30
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f7ff ff49 	bl	80060b8 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x31 (Communication Control)
		data = 0xFF & 0x00; //0x14 interrupts are cleared simultaneously, 4bit SPI, default Interrupt pins
 8006226:	2300      	movs	r3, #0
 8006228:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_COMM_CTRL, data);
 800622a:	7bfb      	ldrb	r3, [r7, #15]
 800622c:	461a      	mov	r2, r3
 800622e:	2131      	movs	r1, #49	; 0x31
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f7ff ff41 	bl	80060b8 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x33 (GPIO Control)
		data = 0xFF & GPIO1_INTN1_IPP & GPIO2_INTN2_IPP; // interrupt pins are push-pull, active low
 8006236:	2300      	movs	r3, #0
 8006238:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_GPIO_CTRL, data);
 800623a:	7bfb      	ldrb	r3, [r7, #15]
 800623c:	461a      	mov	r2, r3
 800623e:	2133      	movs	r1, #51	; 0x33
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f7ff ff39 	bl	80060b8 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x40 (Tilt/Flip threshold LSB)
		data = 0xFF & 0x0F; // 15/255 Tilt/Flip Threshold LSB
 8006246:	230f      	movs	r3, #15
 8006248:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_TF_THRESH_LSB, data);
 800624a:	7bfb      	ldrb	r3, [r7, #15]
 800624c:	461a      	mov	r2, r3
 800624e:	2140      	movs	r1, #64	; 0x40
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f7ff ff31 	bl	80060b8 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x41 (Tilt/Flip threshold MSB)
		data = 0xFF & 0x00; // 0/255 Tilt/Flip Threshold MSB
 8006256:	2300      	movs	r3, #0
 8006258:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_TF_THRESH_MSB, data);
 800625a:	7bfb      	ldrb	r3, [r7, #15]
 800625c:	461a      	mov	r2, r3
 800625e:	2141      	movs	r1, #65	; 0x41
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f7ff ff29 	bl	80060b8 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x42 (Tilt/Flip De-bounce)
		data = 0xFF & 0x0F; // Tilt/Flip de-bounce duration to 15/255 before triggering IRQ
 8006266:	230f      	movs	r3, #15
 8006268:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_TF_DB, data);
 800626a:	7bfb      	ldrb	r3, [r7, #15]
 800626c:	461a      	mov	r2, r3
 800626e:	2142      	movs	r1, #66	; 0x42
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f7ff ff21 	bl	80060b8 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x43 (AnyMotion Threshold LSB)
		data = 0xFF & 0x0F; // 15/255 AnyMotionThreshold LSB
 8006276:	230f      	movs	r3, #15
 8006278:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_AM_THRESH_LSB, data);
 800627a:	7bfb      	ldrb	r3, [r7, #15]
 800627c:	461a      	mov	r2, r3
 800627e:	2143      	movs	r1, #67	; 0x43
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f7ff ff19 	bl	80060b8 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x44 (AnyMotion Threshold MSB)
		data = 0xFF & 0x00; // 0/255 AnyMotionThreshold MSB
 8006286:	2300      	movs	r3, #0
 8006288:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_AM_THRESH_MSB, data);
 800628a:	7bfb      	ldrb	r3, [r7, #15]
 800628c:	461a      	mov	r2, r3
 800628e:	2144      	movs	r1, #68	; 0x44
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f7ff ff11 	bl	80060b8 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x45 (AnyMotion De-bounce)
		data = 0xFF & 0x0F; // AnyMotion de-bounce duration to 15/255 before triggering IRQ
 8006296:	230f      	movs	r3, #15
 8006298:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_AM_DB, data);
 800629a:	7bfb      	ldrb	r3, [r7, #15]
 800629c:	461a      	mov	r2, r3
 800629e:	2145      	movs	r1, #69	; 0x45
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f7ff ff09 	bl	80060b8 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x46 (Shake Threshold LSB)
		data = 0xFF & 0x0F; // 15/255 Shake Threshold LSB
 80062a6:	230f      	movs	r3, #15
 80062a8:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_SHK_THRESH_LSB, data);
 80062aa:	7bfb      	ldrb	r3, [r7, #15]
 80062ac:	461a      	mov	r2, r3
 80062ae:	2146      	movs	r1, #70	; 0x46
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f7ff ff01 	bl	80060b8 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x47 (Shake Threshold MSB)
		data = 0xFF & 0x00; // 0/255 Shake Threshold MSB
 80062b6:	2300      	movs	r3, #0
 80062b8:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_SHK_THRESH_MSB, data);
 80062ba:	7bfb      	ldrb	r3, [r7, #15]
 80062bc:	461a      	mov	r2, r3
 80062be:	2147      	movs	r1, #71	; 0x47
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f7ff fef9 	bl	80060b8 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x48 (Peak-to-Peak Duration LSB)
		data = 0xFF & 0x00; // Minimum duration to trigger a shake interrupt - unused???
 80062c6:	2300      	movs	r3, #0
 80062c8:	73fb      	strb	r3, [r7, #15]
		//TODO: are we using p2p or shake counter thresholds for interrupts??
		MC3479Class::SPI_writeRegister(MC3479_PK_P2P_DUR_THRESH_LSB, data);
 80062ca:	7bfb      	ldrb	r3, [r7, #15]
 80062cc:	461a      	mov	r2, r3
 80062ce:	2148      	movs	r1, #72	; 0x48
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f7ff fef1 	bl	80060b8 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x49 (Shake/Peak-to-Peak Duration MSB)
		data = 0xFF & 0x00; // Minimum duration to trigger a shake interrupt - unused???
 80062d6:	2300      	movs	r3, #0
 80062d8:	73fb      	strb	r3, [r7, #15]
		//TODO: are we using p2p or shake counter thresholds for interrupts??
		MC3479Class::SPI_writeRegister(MC3479_PK_P2P_DUR_THRESH_MSB, data);
 80062da:	7bfb      	ldrb	r3, [r7, #15]
 80062dc:	461a      	mov	r2, r3
 80062de:	2149      	movs	r1, #73	; 0x49
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f7ff fee9 	bl	80060b8 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x4A (Timer control)
		data = 0xFF & 0x00; //Tilt-35 latch disabled,tilt-35 angle detection duration = 1.6s (default)
 80062e6:	2300      	movs	r3, #0
 80062e8:	73fb      	strb	r3, [r7, #15]
		//TODO: if Tilt35 duration is too large for our control system, can we ignore configuration?
		MC3479Class::SPI_writeRegister(MC3479_TIMER_CTRL, data);
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
 80062ec:	461a      	mov	r2, r3
 80062ee:	214a      	movs	r1, #74	; 0x4a
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f7ff fee1 	bl	80060b8 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x4B (Read Count Register)
		data = 0xFF & 0x06; // default 6 reads when register 0x30 bit 7(FIFO_BURST) is enabled
 80062f6:	2306      	movs	r3, #6
 80062f8:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_RD_CNT, data);
 80062fa:	7bfb      	ldrb	r3, [r7, #15]
 80062fc:	461a      	mov	r2, r3
 80062fe:	214b      	movs	r1, #75	; 0x4b
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7ff fed9 	bl	80060b8 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x4B (Read Count Register)

#endif /* _SPI_COM_ENABLED */

	return;
 8006306:	bf00      	nop
}
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <_ZN11MC3479Class6getXYZEPhS0_S0_>:
		uint8_t data = 0xFF & rate; // sample x,y,z @ 100Hz
		return MC3479Class::SPI_writeRegister(MC3479_SR, data);
}

bool MC3479Class::getXYZ(uint8_t* xData, uint8_t* yData, uint8_t* zData)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b086      	sub	sp, #24
 8006312:	af00      	add	r7, sp, #0
 8006314:	60f8      	str	r0, [r7, #12]
 8006316:	60b9      	str	r1, [r7, #8]
 8006318:	607a      	str	r2, [r7, #4]
 800631a:	603b      	str	r3, [r7, #0]
	uint8_t Buffer[8];
	MC3479Class::burstSPI_readRegister(MC3479_XOUT_EX_L, &Buffer[0], 6);
 800631c:	f107 0210 	add.w	r2, r7, #16
 8006320:	2306      	movs	r3, #6
 8006322:	210d      	movs	r1, #13
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f7ff fef9 	bl	800611c <_ZN11MC3479Class21burstSPI_readRegisterEhPhh>
	xData[0] = Buffer[0];
 800632a:	7c3a      	ldrb	r2, [r7, #16]
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	701a      	strb	r2, [r3, #0]
	xData[1] = Buffer[1];
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	3301      	adds	r3, #1
 8006334:	7c7a      	ldrb	r2, [r7, #17]
 8006336:	701a      	strb	r2, [r3, #0]
	yData[0] = Buffer[2];
 8006338:	7cba      	ldrb	r2, [r7, #18]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	701a      	strb	r2, [r3, #0]
	yData[1] = Buffer[3];
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	3301      	adds	r3, #1
 8006342:	7cfa      	ldrb	r2, [r7, #19]
 8006344:	701a      	strb	r2, [r3, #0]
	zData[0] = Buffer[4];
 8006346:	7d3a      	ldrb	r2, [r7, #20]
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	701a      	strb	r2, [r3, #0]
	zData[1] = Buffer[5];
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	3301      	adds	r3, #1
 8006350:	7d7a      	ldrb	r2, [r7, #21]
 8006352:	701a      	strb	r2, [r3, #0]
	return 1;
 8006354:	2301      	movs	r3, #1
}
 8006356:	4618      	mov	r0, r3
 8006358:	3718      	adds	r7, #24
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <_ZN12MP6543HClass23x_configMotorControllerEtttP17TIM_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_tS3_t>:
											uint16_t xPwmChannelC, TIM_HandleTypeDef * xPwmTimer,
											GPIO_TypeDef* ENA, uint16_t ENA_Pin,
											GPIO_TypeDef* ENB, uint16_t ENB_Pin,
											GPIO_TypeDef* ENC, uint16_t ENC_Pin,
											GPIO_TypeDef* xSleep, uint16_t xSleepPin,
											GPIO_TypeDef* xFault, uint16_t xFaultPin){
 800635e:	b580      	push	{r7, lr}
 8006360:	b084      	sub	sp, #16
 8006362:	af00      	add	r7, sp, #0
 8006364:	60f8      	str	r0, [r7, #12]
 8006366:	4608      	mov	r0, r1
 8006368:	4611      	mov	r1, r2
 800636a:	461a      	mov	r2, r3
 800636c:	4603      	mov	r3, r0
 800636e:	817b      	strh	r3, [r7, #10]
 8006370:	460b      	mov	r3, r1
 8006372:	813b      	strh	r3, [r7, #8]
 8006374:	4613      	mov	r3, r2
 8006376:	80fb      	strh	r3, [r7, #6]
	this->_x_PWM = xPwmTimer;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	69ba      	ldr	r2, [r7, #24]
 800637c:	625a      	str	r2, [r3, #36]	; 0x24
	this->_x_PWM_CHANNEL_A = xPwmChannelA;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	897a      	ldrh	r2, [r7, #10]
 8006382:	83da      	strh	r2, [r3, #30]
	this->_x_PWM_CHANNEL_B = xPwmChannelB;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	893a      	ldrh	r2, [r7, #8]
 8006388:	841a      	strh	r2, [r3, #32]
	this->_x_PWM_CHANNEL_C = xPwmChannelC;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	88fa      	ldrh	r2, [r7, #6]
 800638e:	845a      	strh	r2, [r3, #34]	; 0x22
	this->_x_ENA = ENA;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	69fa      	ldr	r2, [r7, #28]
 8006394:	609a      	str	r2, [r3, #8]
	this->_x_ENB = ENB;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800639a:	60da      	str	r2, [r3, #12]
	this->_x_ENC = ENC;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063a0:	611a      	str	r2, [r3, #16]
	this->_x_ENA_Pin = ENA_Pin;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	8c3a      	ldrh	r2, [r7, #32]
 80063a6:	831a      	strh	r2, [r3, #24]
	this->_x_ENB_Pin = ENB_Pin;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80063ac:	835a      	strh	r2, [r3, #26]
	this->_x_ENC_Pin = ENC_Pin;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80063b2:	839a      	strh	r2, [r3, #28]


	this->_x_nSLEEP_GPIO = xSleep;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063b8:	601a      	str	r2, [r3, #0]
	this->_x_nSLEEP_PIN = xSleepPin;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80063be:	829a      	strh	r2, [r3, #20]
	HAL_GPIO_WritePin(_x_nSLEEP_GPIO, _x_nSLEEP_PIN, GPIO_PIN_SET);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6818      	ldr	r0, [r3, #0]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8a9b      	ldrh	r3, [r3, #20]
 80063c8:	2201      	movs	r2, #1
 80063ca:	4619      	mov	r1, r3
 80063cc:	f7fd fad9 	bl	8003982 <HAL_GPIO_WritePin>
	this->_x_nFAULT_GPIO = xFault;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063d4:	605a      	str	r2, [r3, #4]
	this->_x_nFAULT_PIN = xFaultPin;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80063dc:	82da      	strh	r2, [r3, #22]

	return 1;
 80063de:	2301      	movs	r3, #1
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <_ZN12MP6543HClass12x_motorFaultEv>:
//	MP6543H.y_motorBrake(true);
//	return 1;
//}

bool MP6543HClass::x_motorFault()
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
	return !HAL_GPIO_ReadPin(_x_nFAULT_GPIO, _x_nFAULT_PIN);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	8adb      	ldrh	r3, [r3, #22]
 80063f8:	4619      	mov	r1, r3
 80063fa:	4610      	mov	r0, r2
 80063fc:	f7fd faaa 	bl	8003954 <HAL_GPIO_ReadPin>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	bf0c      	ite	eq
 8006406:	2301      	moveq	r3, #1
 8006408:	2300      	movne	r3, #0
 800640a:	b2db      	uxtb	r3, r3
}
 800640c:	4618      	mov	r0, r3
 800640e:	3708      	adds	r7, #8
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <_ZdlPvj>:
 8006414:	f000 b817 	b.w	8006446 <_ZdlPv>

08006418 <_Znwj>:
 8006418:	2801      	cmp	r0, #1
 800641a:	bf38      	it	cc
 800641c:	2001      	movcc	r0, #1
 800641e:	b510      	push	{r4, lr}
 8006420:	4604      	mov	r4, r0
 8006422:	4620      	mov	r0, r4
 8006424:	f000 f9da 	bl	80067dc <malloc>
 8006428:	b930      	cbnz	r0, 8006438 <_Znwj+0x20>
 800642a:	f000 f80f 	bl	800644c <_ZSt15get_new_handlerv>
 800642e:	b908      	cbnz	r0, 8006434 <_Znwj+0x1c>
 8006430:	f000 f9a3 	bl	800677a <abort>
 8006434:	4780      	blx	r0
 8006436:	e7f4      	b.n	8006422 <_Znwj+0xa>
 8006438:	bd10      	pop	{r4, pc}

0800643a <_ZSt17__throw_bad_allocv>:
 800643a:	b508      	push	{r3, lr}
 800643c:	f000 f99d 	bl	800677a <abort>

08006440 <_ZSt20__throw_length_errorPKc>:
 8006440:	b508      	push	{r3, lr}
 8006442:	f000 f99a 	bl	800677a <abort>

08006446 <_ZdlPv>:
 8006446:	f000 b9d1 	b.w	80067ec <free>
	...

0800644c <_ZSt15get_new_handlerv>:
 800644c:	4b02      	ldr	r3, [pc, #8]	; (8006458 <_ZSt15get_new_handlerv+0xc>)
 800644e:	6818      	ldr	r0, [r3, #0]
 8006450:	f3bf 8f5b 	dmb	ish
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	200003c4 	.word	0x200003c4
 800645c:	00000000 	.word	0x00000000

08006460 <atan>:
 8006460:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006464:	4bb6      	ldr	r3, [pc, #728]	; (8006740 <atan+0x2e0>)
 8006466:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800646a:	429e      	cmp	r6, r3
 800646c:	4604      	mov	r4, r0
 800646e:	460d      	mov	r5, r1
 8006470:	468b      	mov	fp, r1
 8006472:	dd17      	ble.n	80064a4 <atan+0x44>
 8006474:	4bb3      	ldr	r3, [pc, #716]	; (8006744 <atan+0x2e4>)
 8006476:	429e      	cmp	r6, r3
 8006478:	dc01      	bgt.n	800647e <atan+0x1e>
 800647a:	d109      	bne.n	8006490 <atan+0x30>
 800647c:	b140      	cbz	r0, 8006490 <atan+0x30>
 800647e:	4622      	mov	r2, r4
 8006480:	462b      	mov	r3, r5
 8006482:	4620      	mov	r0, r4
 8006484:	4629      	mov	r1, r5
 8006486:	f7f9 fe69 	bl	800015c <__adddf3>
 800648a:	4604      	mov	r4, r0
 800648c:	460d      	mov	r5, r1
 800648e:	e005      	b.n	800649c <atan+0x3c>
 8006490:	f1bb 0f00 	cmp.w	fp, #0
 8006494:	4cac      	ldr	r4, [pc, #688]	; (8006748 <atan+0x2e8>)
 8006496:	f300 8121 	bgt.w	80066dc <atan+0x27c>
 800649a:	4dac      	ldr	r5, [pc, #688]	; (800674c <atan+0x2ec>)
 800649c:	4620      	mov	r0, r4
 800649e:	4629      	mov	r1, r5
 80064a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a4:	4baa      	ldr	r3, [pc, #680]	; (8006750 <atan+0x2f0>)
 80064a6:	429e      	cmp	r6, r3
 80064a8:	dc11      	bgt.n	80064ce <atan+0x6e>
 80064aa:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80064ae:	429e      	cmp	r6, r3
 80064b0:	dc0a      	bgt.n	80064c8 <atan+0x68>
 80064b2:	a38b      	add	r3, pc, #556	; (adr r3, 80066e0 <atan+0x280>)
 80064b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b8:	f7f9 fe50 	bl	800015c <__adddf3>
 80064bc:	2200      	movs	r2, #0
 80064be:	4ba5      	ldr	r3, [pc, #660]	; (8006754 <atan+0x2f4>)
 80064c0:	f7fa fa92 	bl	80009e8 <__aeabi_dcmpgt>
 80064c4:	2800      	cmp	r0, #0
 80064c6:	d1e9      	bne.n	800649c <atan+0x3c>
 80064c8:	f04f 3aff 	mov.w	sl, #4294967295
 80064cc:	e027      	b.n	800651e <atan+0xbe>
 80064ce:	f000 f951 	bl	8006774 <fabs>
 80064d2:	4ba1      	ldr	r3, [pc, #644]	; (8006758 <atan+0x2f8>)
 80064d4:	4604      	mov	r4, r0
 80064d6:	429e      	cmp	r6, r3
 80064d8:	460d      	mov	r5, r1
 80064da:	f300 80b8 	bgt.w	800664e <atan+0x1ee>
 80064de:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80064e2:	429e      	cmp	r6, r3
 80064e4:	f300 809c 	bgt.w	8006620 <atan+0x1c0>
 80064e8:	4602      	mov	r2, r0
 80064ea:	460b      	mov	r3, r1
 80064ec:	f7f9 fe36 	bl	800015c <__adddf3>
 80064f0:	2200      	movs	r2, #0
 80064f2:	4b98      	ldr	r3, [pc, #608]	; (8006754 <atan+0x2f4>)
 80064f4:	f7f9 fe30 	bl	8000158 <__aeabi_dsub>
 80064f8:	2200      	movs	r2, #0
 80064fa:	4606      	mov	r6, r0
 80064fc:	460f      	mov	r7, r1
 80064fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006502:	4620      	mov	r0, r4
 8006504:	4629      	mov	r1, r5
 8006506:	f7f9 fe29 	bl	800015c <__adddf3>
 800650a:	4602      	mov	r2, r0
 800650c:	460b      	mov	r3, r1
 800650e:	4630      	mov	r0, r6
 8006510:	4639      	mov	r1, r7
 8006512:	f7fa f903 	bl	800071c <__aeabi_ddiv>
 8006516:	f04f 0a00 	mov.w	sl, #0
 800651a:	4604      	mov	r4, r0
 800651c:	460d      	mov	r5, r1
 800651e:	4622      	mov	r2, r4
 8006520:	462b      	mov	r3, r5
 8006522:	4620      	mov	r0, r4
 8006524:	4629      	mov	r1, r5
 8006526:	f7f9 ffcf 	bl	80004c8 <__aeabi_dmul>
 800652a:	4602      	mov	r2, r0
 800652c:	460b      	mov	r3, r1
 800652e:	4680      	mov	r8, r0
 8006530:	4689      	mov	r9, r1
 8006532:	f7f9 ffc9 	bl	80004c8 <__aeabi_dmul>
 8006536:	a36c      	add	r3, pc, #432	; (adr r3, 80066e8 <atan+0x288>)
 8006538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653c:	4606      	mov	r6, r0
 800653e:	460f      	mov	r7, r1
 8006540:	f7f9 ffc2 	bl	80004c8 <__aeabi_dmul>
 8006544:	a36a      	add	r3, pc, #424	; (adr r3, 80066f0 <atan+0x290>)
 8006546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654a:	f7f9 fe07 	bl	800015c <__adddf3>
 800654e:	4632      	mov	r2, r6
 8006550:	463b      	mov	r3, r7
 8006552:	f7f9 ffb9 	bl	80004c8 <__aeabi_dmul>
 8006556:	a368      	add	r3, pc, #416	; (adr r3, 80066f8 <atan+0x298>)
 8006558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655c:	f7f9 fdfe 	bl	800015c <__adddf3>
 8006560:	4632      	mov	r2, r6
 8006562:	463b      	mov	r3, r7
 8006564:	f7f9 ffb0 	bl	80004c8 <__aeabi_dmul>
 8006568:	a365      	add	r3, pc, #404	; (adr r3, 8006700 <atan+0x2a0>)
 800656a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656e:	f7f9 fdf5 	bl	800015c <__adddf3>
 8006572:	4632      	mov	r2, r6
 8006574:	463b      	mov	r3, r7
 8006576:	f7f9 ffa7 	bl	80004c8 <__aeabi_dmul>
 800657a:	a363      	add	r3, pc, #396	; (adr r3, 8006708 <atan+0x2a8>)
 800657c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006580:	f7f9 fdec 	bl	800015c <__adddf3>
 8006584:	4632      	mov	r2, r6
 8006586:	463b      	mov	r3, r7
 8006588:	f7f9 ff9e 	bl	80004c8 <__aeabi_dmul>
 800658c:	a360      	add	r3, pc, #384	; (adr r3, 8006710 <atan+0x2b0>)
 800658e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006592:	f7f9 fde3 	bl	800015c <__adddf3>
 8006596:	4642      	mov	r2, r8
 8006598:	464b      	mov	r3, r9
 800659a:	f7f9 ff95 	bl	80004c8 <__aeabi_dmul>
 800659e:	a35e      	add	r3, pc, #376	; (adr r3, 8006718 <atan+0x2b8>)
 80065a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a4:	4680      	mov	r8, r0
 80065a6:	4689      	mov	r9, r1
 80065a8:	4630      	mov	r0, r6
 80065aa:	4639      	mov	r1, r7
 80065ac:	f7f9 ff8c 	bl	80004c8 <__aeabi_dmul>
 80065b0:	a35b      	add	r3, pc, #364	; (adr r3, 8006720 <atan+0x2c0>)
 80065b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b6:	f7f9 fdcf 	bl	8000158 <__aeabi_dsub>
 80065ba:	4632      	mov	r2, r6
 80065bc:	463b      	mov	r3, r7
 80065be:	f7f9 ff83 	bl	80004c8 <__aeabi_dmul>
 80065c2:	a359      	add	r3, pc, #356	; (adr r3, 8006728 <atan+0x2c8>)
 80065c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c8:	f7f9 fdc6 	bl	8000158 <__aeabi_dsub>
 80065cc:	4632      	mov	r2, r6
 80065ce:	463b      	mov	r3, r7
 80065d0:	f7f9 ff7a 	bl	80004c8 <__aeabi_dmul>
 80065d4:	a356      	add	r3, pc, #344	; (adr r3, 8006730 <atan+0x2d0>)
 80065d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065da:	f7f9 fdbd 	bl	8000158 <__aeabi_dsub>
 80065de:	4632      	mov	r2, r6
 80065e0:	463b      	mov	r3, r7
 80065e2:	f7f9 ff71 	bl	80004c8 <__aeabi_dmul>
 80065e6:	a354      	add	r3, pc, #336	; (adr r3, 8006738 <atan+0x2d8>)
 80065e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ec:	f7f9 fdb4 	bl	8000158 <__aeabi_dsub>
 80065f0:	4632      	mov	r2, r6
 80065f2:	463b      	mov	r3, r7
 80065f4:	f7f9 ff68 	bl	80004c8 <__aeabi_dmul>
 80065f8:	4602      	mov	r2, r0
 80065fa:	460b      	mov	r3, r1
 80065fc:	4640      	mov	r0, r8
 80065fe:	4649      	mov	r1, r9
 8006600:	f7f9 fdac 	bl	800015c <__adddf3>
 8006604:	4622      	mov	r2, r4
 8006606:	462b      	mov	r3, r5
 8006608:	f7f9 ff5e 	bl	80004c8 <__aeabi_dmul>
 800660c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	d144      	bne.n	80066a0 <atan+0x240>
 8006616:	4620      	mov	r0, r4
 8006618:	4629      	mov	r1, r5
 800661a:	f7f9 fd9d 	bl	8000158 <__aeabi_dsub>
 800661e:	e734      	b.n	800648a <atan+0x2a>
 8006620:	2200      	movs	r2, #0
 8006622:	4b4c      	ldr	r3, [pc, #304]	; (8006754 <atan+0x2f4>)
 8006624:	f7f9 fd98 	bl	8000158 <__aeabi_dsub>
 8006628:	2200      	movs	r2, #0
 800662a:	4606      	mov	r6, r0
 800662c:	460f      	mov	r7, r1
 800662e:	4620      	mov	r0, r4
 8006630:	4629      	mov	r1, r5
 8006632:	4b48      	ldr	r3, [pc, #288]	; (8006754 <atan+0x2f4>)
 8006634:	f7f9 fd92 	bl	800015c <__adddf3>
 8006638:	4602      	mov	r2, r0
 800663a:	460b      	mov	r3, r1
 800663c:	4630      	mov	r0, r6
 800663e:	4639      	mov	r1, r7
 8006640:	f7fa f86c 	bl	800071c <__aeabi_ddiv>
 8006644:	f04f 0a01 	mov.w	sl, #1
 8006648:	4604      	mov	r4, r0
 800664a:	460d      	mov	r5, r1
 800664c:	e767      	b.n	800651e <atan+0xbe>
 800664e:	4b43      	ldr	r3, [pc, #268]	; (800675c <atan+0x2fc>)
 8006650:	429e      	cmp	r6, r3
 8006652:	da1a      	bge.n	800668a <atan+0x22a>
 8006654:	2200      	movs	r2, #0
 8006656:	4b42      	ldr	r3, [pc, #264]	; (8006760 <atan+0x300>)
 8006658:	f7f9 fd7e 	bl	8000158 <__aeabi_dsub>
 800665c:	2200      	movs	r2, #0
 800665e:	4606      	mov	r6, r0
 8006660:	460f      	mov	r7, r1
 8006662:	4620      	mov	r0, r4
 8006664:	4629      	mov	r1, r5
 8006666:	4b3e      	ldr	r3, [pc, #248]	; (8006760 <atan+0x300>)
 8006668:	f7f9 ff2e 	bl	80004c8 <__aeabi_dmul>
 800666c:	2200      	movs	r2, #0
 800666e:	4b39      	ldr	r3, [pc, #228]	; (8006754 <atan+0x2f4>)
 8006670:	f7f9 fd74 	bl	800015c <__adddf3>
 8006674:	4602      	mov	r2, r0
 8006676:	460b      	mov	r3, r1
 8006678:	4630      	mov	r0, r6
 800667a:	4639      	mov	r1, r7
 800667c:	f7fa f84e 	bl	800071c <__aeabi_ddiv>
 8006680:	f04f 0a02 	mov.w	sl, #2
 8006684:	4604      	mov	r4, r0
 8006686:	460d      	mov	r5, r1
 8006688:	e749      	b.n	800651e <atan+0xbe>
 800668a:	4602      	mov	r2, r0
 800668c:	460b      	mov	r3, r1
 800668e:	2000      	movs	r0, #0
 8006690:	4934      	ldr	r1, [pc, #208]	; (8006764 <atan+0x304>)
 8006692:	f7fa f843 	bl	800071c <__aeabi_ddiv>
 8006696:	f04f 0a03 	mov.w	sl, #3
 800669a:	4604      	mov	r4, r0
 800669c:	460d      	mov	r5, r1
 800669e:	e73e      	b.n	800651e <atan+0xbe>
 80066a0:	4b31      	ldr	r3, [pc, #196]	; (8006768 <atan+0x308>)
 80066a2:	4e32      	ldr	r6, [pc, #200]	; (800676c <atan+0x30c>)
 80066a4:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80066a8:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80066ac:	e9da 2300 	ldrd	r2, r3, [sl]
 80066b0:	f7f9 fd52 	bl	8000158 <__aeabi_dsub>
 80066b4:	4622      	mov	r2, r4
 80066b6:	462b      	mov	r3, r5
 80066b8:	f7f9 fd4e 	bl	8000158 <__aeabi_dsub>
 80066bc:	4602      	mov	r2, r0
 80066be:	460b      	mov	r3, r1
 80066c0:	e9d6 0100 	ldrd	r0, r1, [r6]
 80066c4:	f7f9 fd48 	bl	8000158 <__aeabi_dsub>
 80066c8:	f1bb 0f00 	cmp.w	fp, #0
 80066cc:	4604      	mov	r4, r0
 80066ce:	460d      	mov	r5, r1
 80066d0:	f6bf aee4 	bge.w	800649c <atan+0x3c>
 80066d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80066d8:	461d      	mov	r5, r3
 80066da:	e6df      	b.n	800649c <atan+0x3c>
 80066dc:	4d24      	ldr	r5, [pc, #144]	; (8006770 <atan+0x310>)
 80066de:	e6dd      	b.n	800649c <atan+0x3c>
 80066e0:	8800759c 	.word	0x8800759c
 80066e4:	7e37e43c 	.word	0x7e37e43c
 80066e8:	e322da11 	.word	0xe322da11
 80066ec:	3f90ad3a 	.word	0x3f90ad3a
 80066f0:	24760deb 	.word	0x24760deb
 80066f4:	3fa97b4b 	.word	0x3fa97b4b
 80066f8:	a0d03d51 	.word	0xa0d03d51
 80066fc:	3fb10d66 	.word	0x3fb10d66
 8006700:	c54c206e 	.word	0xc54c206e
 8006704:	3fb745cd 	.word	0x3fb745cd
 8006708:	920083ff 	.word	0x920083ff
 800670c:	3fc24924 	.word	0x3fc24924
 8006710:	5555550d 	.word	0x5555550d
 8006714:	3fd55555 	.word	0x3fd55555
 8006718:	2c6a6c2f 	.word	0x2c6a6c2f
 800671c:	bfa2b444 	.word	0xbfa2b444
 8006720:	52defd9a 	.word	0x52defd9a
 8006724:	3fadde2d 	.word	0x3fadde2d
 8006728:	af749a6d 	.word	0xaf749a6d
 800672c:	3fb3b0f2 	.word	0x3fb3b0f2
 8006730:	fe231671 	.word	0xfe231671
 8006734:	3fbc71c6 	.word	0x3fbc71c6
 8006738:	9998ebc4 	.word	0x9998ebc4
 800673c:	3fc99999 	.word	0x3fc99999
 8006740:	440fffff 	.word	0x440fffff
 8006744:	7ff00000 	.word	0x7ff00000
 8006748:	54442d18 	.word	0x54442d18
 800674c:	bff921fb 	.word	0xbff921fb
 8006750:	3fdbffff 	.word	0x3fdbffff
 8006754:	3ff00000 	.word	0x3ff00000
 8006758:	3ff2ffff 	.word	0x3ff2ffff
 800675c:	40038000 	.word	0x40038000
 8006760:	3ff80000 	.word	0x3ff80000
 8006764:	bff00000 	.word	0xbff00000
 8006768:	08006c38 	.word	0x08006c38
 800676c:	08006c18 	.word	0x08006c18
 8006770:	3ff921fb 	.word	0x3ff921fb

08006774 <fabs>:
 8006774:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006778:	4770      	bx	lr

0800677a <abort>:
 800677a:	2006      	movs	r0, #6
 800677c:	b508      	push	{r3, lr}
 800677e:	f000 f981 	bl	8006a84 <raise>
 8006782:	2001      	movs	r0, #1
 8006784:	f7fc f934 	bl	80029f0 <_exit>

08006788 <__errno>:
 8006788:	4b01      	ldr	r3, [pc, #4]	; (8006790 <__errno+0x8>)
 800678a:	6818      	ldr	r0, [r3, #0]
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	2000000c 	.word	0x2000000c

08006794 <__libc_init_array>:
 8006794:	b570      	push	{r4, r5, r6, lr}
 8006796:	2600      	movs	r6, #0
 8006798:	4d0c      	ldr	r5, [pc, #48]	; (80067cc <__libc_init_array+0x38>)
 800679a:	4c0d      	ldr	r4, [pc, #52]	; (80067d0 <__libc_init_array+0x3c>)
 800679c:	1b64      	subs	r4, r4, r5
 800679e:	10a4      	asrs	r4, r4, #2
 80067a0:	42a6      	cmp	r6, r4
 80067a2:	d109      	bne.n	80067b8 <__libc_init_array+0x24>
 80067a4:	f000 f998 	bl	8006ad8 <_init>
 80067a8:	2600      	movs	r6, #0
 80067aa:	4d0a      	ldr	r5, [pc, #40]	; (80067d4 <__libc_init_array+0x40>)
 80067ac:	4c0a      	ldr	r4, [pc, #40]	; (80067d8 <__libc_init_array+0x44>)
 80067ae:	1b64      	subs	r4, r4, r5
 80067b0:	10a4      	asrs	r4, r4, #2
 80067b2:	42a6      	cmp	r6, r4
 80067b4:	d105      	bne.n	80067c2 <__libc_init_array+0x2e>
 80067b6:	bd70      	pop	{r4, r5, r6, pc}
 80067b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80067bc:	4798      	blx	r3
 80067be:	3601      	adds	r6, #1
 80067c0:	e7ee      	b.n	80067a0 <__libc_init_array+0xc>
 80067c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80067c6:	4798      	blx	r3
 80067c8:	3601      	adds	r6, #1
 80067ca:	e7f2      	b.n	80067b2 <__libc_init_array+0x1e>
 80067cc:	08006c58 	.word	0x08006c58
 80067d0:	08006c58 	.word	0x08006c58
 80067d4:	08006c58 	.word	0x08006c58
 80067d8:	08006c64 	.word	0x08006c64

080067dc <malloc>:
 80067dc:	4b02      	ldr	r3, [pc, #8]	; (80067e8 <malloc+0xc>)
 80067de:	4601      	mov	r1, r0
 80067e0:	6818      	ldr	r0, [r3, #0]
 80067e2:	f000 b8a3 	b.w	800692c <_malloc_r>
 80067e6:	bf00      	nop
 80067e8:	2000000c 	.word	0x2000000c

080067ec <free>:
 80067ec:	4b02      	ldr	r3, [pc, #8]	; (80067f8 <free+0xc>)
 80067ee:	4601      	mov	r1, r0
 80067f0:	6818      	ldr	r0, [r3, #0]
 80067f2:	f000 b833 	b.w	800685c <_free_r>
 80067f6:	bf00      	nop
 80067f8:	2000000c 	.word	0x2000000c

080067fc <memcpy>:
 80067fc:	440a      	add	r2, r1
 80067fe:	4291      	cmp	r1, r2
 8006800:	f100 33ff 	add.w	r3, r0, #4294967295
 8006804:	d100      	bne.n	8006808 <memcpy+0xc>
 8006806:	4770      	bx	lr
 8006808:	b510      	push	{r4, lr}
 800680a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800680e:	4291      	cmp	r1, r2
 8006810:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006814:	d1f9      	bne.n	800680a <memcpy+0xe>
 8006816:	bd10      	pop	{r4, pc}

08006818 <memmove>:
 8006818:	4288      	cmp	r0, r1
 800681a:	b510      	push	{r4, lr}
 800681c:	eb01 0402 	add.w	r4, r1, r2
 8006820:	d902      	bls.n	8006828 <memmove+0x10>
 8006822:	4284      	cmp	r4, r0
 8006824:	4623      	mov	r3, r4
 8006826:	d807      	bhi.n	8006838 <memmove+0x20>
 8006828:	1e43      	subs	r3, r0, #1
 800682a:	42a1      	cmp	r1, r4
 800682c:	d008      	beq.n	8006840 <memmove+0x28>
 800682e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006832:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006836:	e7f8      	b.n	800682a <memmove+0x12>
 8006838:	4601      	mov	r1, r0
 800683a:	4402      	add	r2, r0
 800683c:	428a      	cmp	r2, r1
 800683e:	d100      	bne.n	8006842 <memmove+0x2a>
 8006840:	bd10      	pop	{r4, pc}
 8006842:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006846:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800684a:	e7f7      	b.n	800683c <memmove+0x24>

0800684c <memset>:
 800684c:	4603      	mov	r3, r0
 800684e:	4402      	add	r2, r0
 8006850:	4293      	cmp	r3, r2
 8006852:	d100      	bne.n	8006856 <memset+0xa>
 8006854:	4770      	bx	lr
 8006856:	f803 1b01 	strb.w	r1, [r3], #1
 800685a:	e7f9      	b.n	8006850 <memset+0x4>

0800685c <_free_r>:
 800685c:	b538      	push	{r3, r4, r5, lr}
 800685e:	4605      	mov	r5, r0
 8006860:	2900      	cmp	r1, #0
 8006862:	d040      	beq.n	80068e6 <_free_r+0x8a>
 8006864:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006868:	1f0c      	subs	r4, r1, #4
 800686a:	2b00      	cmp	r3, #0
 800686c:	bfb8      	it	lt
 800686e:	18e4      	addlt	r4, r4, r3
 8006870:	f000 f924 	bl	8006abc <__malloc_lock>
 8006874:	4a1c      	ldr	r2, [pc, #112]	; (80068e8 <_free_r+0x8c>)
 8006876:	6813      	ldr	r3, [r2, #0]
 8006878:	b933      	cbnz	r3, 8006888 <_free_r+0x2c>
 800687a:	6063      	str	r3, [r4, #4]
 800687c:	6014      	str	r4, [r2, #0]
 800687e:	4628      	mov	r0, r5
 8006880:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006884:	f000 b920 	b.w	8006ac8 <__malloc_unlock>
 8006888:	42a3      	cmp	r3, r4
 800688a:	d908      	bls.n	800689e <_free_r+0x42>
 800688c:	6820      	ldr	r0, [r4, #0]
 800688e:	1821      	adds	r1, r4, r0
 8006890:	428b      	cmp	r3, r1
 8006892:	bf01      	itttt	eq
 8006894:	6819      	ldreq	r1, [r3, #0]
 8006896:	685b      	ldreq	r3, [r3, #4]
 8006898:	1809      	addeq	r1, r1, r0
 800689a:	6021      	streq	r1, [r4, #0]
 800689c:	e7ed      	b.n	800687a <_free_r+0x1e>
 800689e:	461a      	mov	r2, r3
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	b10b      	cbz	r3, 80068a8 <_free_r+0x4c>
 80068a4:	42a3      	cmp	r3, r4
 80068a6:	d9fa      	bls.n	800689e <_free_r+0x42>
 80068a8:	6811      	ldr	r1, [r2, #0]
 80068aa:	1850      	adds	r0, r2, r1
 80068ac:	42a0      	cmp	r0, r4
 80068ae:	d10b      	bne.n	80068c8 <_free_r+0x6c>
 80068b0:	6820      	ldr	r0, [r4, #0]
 80068b2:	4401      	add	r1, r0
 80068b4:	1850      	adds	r0, r2, r1
 80068b6:	4283      	cmp	r3, r0
 80068b8:	6011      	str	r1, [r2, #0]
 80068ba:	d1e0      	bne.n	800687e <_free_r+0x22>
 80068bc:	6818      	ldr	r0, [r3, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	4401      	add	r1, r0
 80068c2:	6011      	str	r1, [r2, #0]
 80068c4:	6053      	str	r3, [r2, #4]
 80068c6:	e7da      	b.n	800687e <_free_r+0x22>
 80068c8:	d902      	bls.n	80068d0 <_free_r+0x74>
 80068ca:	230c      	movs	r3, #12
 80068cc:	602b      	str	r3, [r5, #0]
 80068ce:	e7d6      	b.n	800687e <_free_r+0x22>
 80068d0:	6820      	ldr	r0, [r4, #0]
 80068d2:	1821      	adds	r1, r4, r0
 80068d4:	428b      	cmp	r3, r1
 80068d6:	bf01      	itttt	eq
 80068d8:	6819      	ldreq	r1, [r3, #0]
 80068da:	685b      	ldreq	r3, [r3, #4]
 80068dc:	1809      	addeq	r1, r1, r0
 80068de:	6021      	streq	r1, [r4, #0]
 80068e0:	6063      	str	r3, [r4, #4]
 80068e2:	6054      	str	r4, [r2, #4]
 80068e4:	e7cb      	b.n	800687e <_free_r+0x22>
 80068e6:	bd38      	pop	{r3, r4, r5, pc}
 80068e8:	200003c8 	.word	0x200003c8

080068ec <sbrk_aligned>:
 80068ec:	b570      	push	{r4, r5, r6, lr}
 80068ee:	4e0e      	ldr	r6, [pc, #56]	; (8006928 <sbrk_aligned+0x3c>)
 80068f0:	460c      	mov	r4, r1
 80068f2:	6831      	ldr	r1, [r6, #0]
 80068f4:	4605      	mov	r5, r0
 80068f6:	b911      	cbnz	r1, 80068fe <sbrk_aligned+0x12>
 80068f8:	f000 f88c 	bl	8006a14 <_sbrk_r>
 80068fc:	6030      	str	r0, [r6, #0]
 80068fe:	4621      	mov	r1, r4
 8006900:	4628      	mov	r0, r5
 8006902:	f000 f887 	bl	8006a14 <_sbrk_r>
 8006906:	1c43      	adds	r3, r0, #1
 8006908:	d00a      	beq.n	8006920 <sbrk_aligned+0x34>
 800690a:	1cc4      	adds	r4, r0, #3
 800690c:	f024 0403 	bic.w	r4, r4, #3
 8006910:	42a0      	cmp	r0, r4
 8006912:	d007      	beq.n	8006924 <sbrk_aligned+0x38>
 8006914:	1a21      	subs	r1, r4, r0
 8006916:	4628      	mov	r0, r5
 8006918:	f000 f87c 	bl	8006a14 <_sbrk_r>
 800691c:	3001      	adds	r0, #1
 800691e:	d101      	bne.n	8006924 <sbrk_aligned+0x38>
 8006920:	f04f 34ff 	mov.w	r4, #4294967295
 8006924:	4620      	mov	r0, r4
 8006926:	bd70      	pop	{r4, r5, r6, pc}
 8006928:	200003cc 	.word	0x200003cc

0800692c <_malloc_r>:
 800692c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006930:	1ccd      	adds	r5, r1, #3
 8006932:	f025 0503 	bic.w	r5, r5, #3
 8006936:	3508      	adds	r5, #8
 8006938:	2d0c      	cmp	r5, #12
 800693a:	bf38      	it	cc
 800693c:	250c      	movcc	r5, #12
 800693e:	2d00      	cmp	r5, #0
 8006940:	4607      	mov	r7, r0
 8006942:	db01      	blt.n	8006948 <_malloc_r+0x1c>
 8006944:	42a9      	cmp	r1, r5
 8006946:	d905      	bls.n	8006954 <_malloc_r+0x28>
 8006948:	230c      	movs	r3, #12
 800694a:	2600      	movs	r6, #0
 800694c:	603b      	str	r3, [r7, #0]
 800694e:	4630      	mov	r0, r6
 8006950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006954:	4e2e      	ldr	r6, [pc, #184]	; (8006a10 <_malloc_r+0xe4>)
 8006956:	f000 f8b1 	bl	8006abc <__malloc_lock>
 800695a:	6833      	ldr	r3, [r6, #0]
 800695c:	461c      	mov	r4, r3
 800695e:	bb34      	cbnz	r4, 80069ae <_malloc_r+0x82>
 8006960:	4629      	mov	r1, r5
 8006962:	4638      	mov	r0, r7
 8006964:	f7ff ffc2 	bl	80068ec <sbrk_aligned>
 8006968:	1c43      	adds	r3, r0, #1
 800696a:	4604      	mov	r4, r0
 800696c:	d14d      	bne.n	8006a0a <_malloc_r+0xde>
 800696e:	6834      	ldr	r4, [r6, #0]
 8006970:	4626      	mov	r6, r4
 8006972:	2e00      	cmp	r6, #0
 8006974:	d140      	bne.n	80069f8 <_malloc_r+0xcc>
 8006976:	6823      	ldr	r3, [r4, #0]
 8006978:	4631      	mov	r1, r6
 800697a:	4638      	mov	r0, r7
 800697c:	eb04 0803 	add.w	r8, r4, r3
 8006980:	f000 f848 	bl	8006a14 <_sbrk_r>
 8006984:	4580      	cmp	r8, r0
 8006986:	d13a      	bne.n	80069fe <_malloc_r+0xd2>
 8006988:	6821      	ldr	r1, [r4, #0]
 800698a:	3503      	adds	r5, #3
 800698c:	1a6d      	subs	r5, r5, r1
 800698e:	f025 0503 	bic.w	r5, r5, #3
 8006992:	3508      	adds	r5, #8
 8006994:	2d0c      	cmp	r5, #12
 8006996:	bf38      	it	cc
 8006998:	250c      	movcc	r5, #12
 800699a:	4638      	mov	r0, r7
 800699c:	4629      	mov	r1, r5
 800699e:	f7ff ffa5 	bl	80068ec <sbrk_aligned>
 80069a2:	3001      	adds	r0, #1
 80069a4:	d02b      	beq.n	80069fe <_malloc_r+0xd2>
 80069a6:	6823      	ldr	r3, [r4, #0]
 80069a8:	442b      	add	r3, r5
 80069aa:	6023      	str	r3, [r4, #0]
 80069ac:	e00e      	b.n	80069cc <_malloc_r+0xa0>
 80069ae:	6822      	ldr	r2, [r4, #0]
 80069b0:	1b52      	subs	r2, r2, r5
 80069b2:	d41e      	bmi.n	80069f2 <_malloc_r+0xc6>
 80069b4:	2a0b      	cmp	r2, #11
 80069b6:	d916      	bls.n	80069e6 <_malloc_r+0xba>
 80069b8:	1961      	adds	r1, r4, r5
 80069ba:	42a3      	cmp	r3, r4
 80069bc:	6025      	str	r5, [r4, #0]
 80069be:	bf18      	it	ne
 80069c0:	6059      	strne	r1, [r3, #4]
 80069c2:	6863      	ldr	r3, [r4, #4]
 80069c4:	bf08      	it	eq
 80069c6:	6031      	streq	r1, [r6, #0]
 80069c8:	5162      	str	r2, [r4, r5]
 80069ca:	604b      	str	r3, [r1, #4]
 80069cc:	4638      	mov	r0, r7
 80069ce:	f104 060b 	add.w	r6, r4, #11
 80069d2:	f000 f879 	bl	8006ac8 <__malloc_unlock>
 80069d6:	f026 0607 	bic.w	r6, r6, #7
 80069da:	1d23      	adds	r3, r4, #4
 80069dc:	1af2      	subs	r2, r6, r3
 80069de:	d0b6      	beq.n	800694e <_malloc_r+0x22>
 80069e0:	1b9b      	subs	r3, r3, r6
 80069e2:	50a3      	str	r3, [r4, r2]
 80069e4:	e7b3      	b.n	800694e <_malloc_r+0x22>
 80069e6:	6862      	ldr	r2, [r4, #4]
 80069e8:	42a3      	cmp	r3, r4
 80069ea:	bf0c      	ite	eq
 80069ec:	6032      	streq	r2, [r6, #0]
 80069ee:	605a      	strne	r2, [r3, #4]
 80069f0:	e7ec      	b.n	80069cc <_malloc_r+0xa0>
 80069f2:	4623      	mov	r3, r4
 80069f4:	6864      	ldr	r4, [r4, #4]
 80069f6:	e7b2      	b.n	800695e <_malloc_r+0x32>
 80069f8:	4634      	mov	r4, r6
 80069fa:	6876      	ldr	r6, [r6, #4]
 80069fc:	e7b9      	b.n	8006972 <_malloc_r+0x46>
 80069fe:	230c      	movs	r3, #12
 8006a00:	4638      	mov	r0, r7
 8006a02:	603b      	str	r3, [r7, #0]
 8006a04:	f000 f860 	bl	8006ac8 <__malloc_unlock>
 8006a08:	e7a1      	b.n	800694e <_malloc_r+0x22>
 8006a0a:	6025      	str	r5, [r4, #0]
 8006a0c:	e7de      	b.n	80069cc <_malloc_r+0xa0>
 8006a0e:	bf00      	nop
 8006a10:	200003c8 	.word	0x200003c8

08006a14 <_sbrk_r>:
 8006a14:	b538      	push	{r3, r4, r5, lr}
 8006a16:	2300      	movs	r3, #0
 8006a18:	4d05      	ldr	r5, [pc, #20]	; (8006a30 <_sbrk_r+0x1c>)
 8006a1a:	4604      	mov	r4, r0
 8006a1c:	4608      	mov	r0, r1
 8006a1e:	602b      	str	r3, [r5, #0]
 8006a20:	f7fb fff0 	bl	8002a04 <_sbrk>
 8006a24:	1c43      	adds	r3, r0, #1
 8006a26:	d102      	bne.n	8006a2e <_sbrk_r+0x1a>
 8006a28:	682b      	ldr	r3, [r5, #0]
 8006a2a:	b103      	cbz	r3, 8006a2e <_sbrk_r+0x1a>
 8006a2c:	6023      	str	r3, [r4, #0]
 8006a2e:	bd38      	pop	{r3, r4, r5, pc}
 8006a30:	200003d0 	.word	0x200003d0

08006a34 <_raise_r>:
 8006a34:	291f      	cmp	r1, #31
 8006a36:	b538      	push	{r3, r4, r5, lr}
 8006a38:	4604      	mov	r4, r0
 8006a3a:	460d      	mov	r5, r1
 8006a3c:	d904      	bls.n	8006a48 <_raise_r+0x14>
 8006a3e:	2316      	movs	r3, #22
 8006a40:	6003      	str	r3, [r0, #0]
 8006a42:	f04f 30ff 	mov.w	r0, #4294967295
 8006a46:	bd38      	pop	{r3, r4, r5, pc}
 8006a48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006a4a:	b112      	cbz	r2, 8006a52 <_raise_r+0x1e>
 8006a4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006a50:	b94b      	cbnz	r3, 8006a66 <_raise_r+0x32>
 8006a52:	4620      	mov	r0, r4
 8006a54:	f000 f830 	bl	8006ab8 <_getpid_r>
 8006a58:	462a      	mov	r2, r5
 8006a5a:	4601      	mov	r1, r0
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a62:	f000 b817 	b.w	8006a94 <_kill_r>
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d00a      	beq.n	8006a80 <_raise_r+0x4c>
 8006a6a:	1c59      	adds	r1, r3, #1
 8006a6c:	d103      	bne.n	8006a76 <_raise_r+0x42>
 8006a6e:	2316      	movs	r3, #22
 8006a70:	6003      	str	r3, [r0, #0]
 8006a72:	2001      	movs	r0, #1
 8006a74:	e7e7      	b.n	8006a46 <_raise_r+0x12>
 8006a76:	2400      	movs	r4, #0
 8006a78:	4628      	mov	r0, r5
 8006a7a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006a7e:	4798      	blx	r3
 8006a80:	2000      	movs	r0, #0
 8006a82:	e7e0      	b.n	8006a46 <_raise_r+0x12>

08006a84 <raise>:
 8006a84:	4b02      	ldr	r3, [pc, #8]	; (8006a90 <raise+0xc>)
 8006a86:	4601      	mov	r1, r0
 8006a88:	6818      	ldr	r0, [r3, #0]
 8006a8a:	f7ff bfd3 	b.w	8006a34 <_raise_r>
 8006a8e:	bf00      	nop
 8006a90:	2000000c 	.word	0x2000000c

08006a94 <_kill_r>:
 8006a94:	b538      	push	{r3, r4, r5, lr}
 8006a96:	2300      	movs	r3, #0
 8006a98:	4d06      	ldr	r5, [pc, #24]	; (8006ab4 <_kill_r+0x20>)
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	4608      	mov	r0, r1
 8006a9e:	4611      	mov	r1, r2
 8006aa0:	602b      	str	r3, [r5, #0]
 8006aa2:	f7fb ff95 	bl	80029d0 <_kill>
 8006aa6:	1c43      	adds	r3, r0, #1
 8006aa8:	d102      	bne.n	8006ab0 <_kill_r+0x1c>
 8006aaa:	682b      	ldr	r3, [r5, #0]
 8006aac:	b103      	cbz	r3, 8006ab0 <_kill_r+0x1c>
 8006aae:	6023      	str	r3, [r4, #0]
 8006ab0:	bd38      	pop	{r3, r4, r5, pc}
 8006ab2:	bf00      	nop
 8006ab4:	200003d0 	.word	0x200003d0

08006ab8 <_getpid_r>:
 8006ab8:	f7fb bf83 	b.w	80029c2 <_getpid>

08006abc <__malloc_lock>:
 8006abc:	4801      	ldr	r0, [pc, #4]	; (8006ac4 <__malloc_lock+0x8>)
 8006abe:	f000 b809 	b.w	8006ad4 <__retarget_lock_acquire_recursive>
 8006ac2:	bf00      	nop
 8006ac4:	200003d4 	.word	0x200003d4

08006ac8 <__malloc_unlock>:
 8006ac8:	4801      	ldr	r0, [pc, #4]	; (8006ad0 <__malloc_unlock+0x8>)
 8006aca:	f000 b804 	b.w	8006ad6 <__retarget_lock_release_recursive>
 8006ace:	bf00      	nop
 8006ad0:	200003d4 	.word	0x200003d4

08006ad4 <__retarget_lock_acquire_recursive>:
 8006ad4:	4770      	bx	lr

08006ad6 <__retarget_lock_release_recursive>:
 8006ad6:	4770      	bx	lr

08006ad8 <_init>:
 8006ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ada:	bf00      	nop
 8006adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ade:	bc08      	pop	{r3}
 8006ae0:	469e      	mov	lr, r3
 8006ae2:	4770      	bx	lr

08006ae4 <_fini>:
 8006ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ae6:	bf00      	nop
 8006ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aea:	bc08      	pop	{r3}
 8006aec:	469e      	mov	lr, r3
 8006aee:	4770      	bx	lr

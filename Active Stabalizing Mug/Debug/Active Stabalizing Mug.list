
Active Stabalizing Mug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047f0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080048fc  080048fc  000148fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004924  08004924  000202dc  2**0
                  CONTENTS
  4 .ARM          00000000  08004924  08004924  000202dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004924  08004924  000202dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004924  08004924  00014924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004928  08004928  00014928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002dc  20000000  0800492c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  200002dc  08004c08  000202dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000052c  08004c08  0002052c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120ef  00000000  00000000  00020305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026ee  00000000  00000000  000323f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  00034ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  00035cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5b5  00000000  00000000  00036e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e7d  00000000  00000000  000513ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000915a3  00000000  00000000  0006526a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f680d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e4c  00000000  00000000  000f6860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002dc 	.word	0x200002dc
 8000128:	00000000 	.word	0x00000000
 800012c:	080048e4 	.word	0x080048e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002e0 	.word	0x200002e0
 8000148:	080048e4 	.word	0x080048e4

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__gedf2>:
 80004c4:	f04f 3cff 	mov.w	ip, #4294967295
 80004c8:	e006      	b.n	80004d8 <__cmpdf2+0x4>
 80004ca:	bf00      	nop

080004cc <__ledf2>:
 80004cc:	f04f 0c01 	mov.w	ip, #1
 80004d0:	e002      	b.n	80004d8 <__cmpdf2+0x4>
 80004d2:	bf00      	nop

080004d4 <__cmpdf2>:
 80004d4:	f04f 0c01 	mov.w	ip, #1
 80004d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004e8:	bf18      	it	ne
 80004ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004ee:	d01b      	beq.n	8000528 <__cmpdf2+0x54>
 80004f0:	b001      	add	sp, #4
 80004f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004f6:	bf0c      	ite	eq
 80004f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80004fc:	ea91 0f03 	teqne	r1, r3
 8000500:	bf02      	ittt	eq
 8000502:	ea90 0f02 	teqeq	r0, r2
 8000506:	2000      	moveq	r0, #0
 8000508:	4770      	bxeq	lr
 800050a:	f110 0f00 	cmn.w	r0, #0
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf58      	it	pl
 8000514:	4299      	cmppl	r1, r3
 8000516:	bf08      	it	eq
 8000518:	4290      	cmpeq	r0, r2
 800051a:	bf2c      	ite	cs
 800051c:	17d8      	asrcs	r0, r3, #31
 800051e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000522:	f040 0001 	orr.w	r0, r0, #1
 8000526:	4770      	bx	lr
 8000528:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800052c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000530:	d102      	bne.n	8000538 <__cmpdf2+0x64>
 8000532:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000536:	d107      	bne.n	8000548 <__cmpdf2+0x74>
 8000538:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800053c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000540:	d1d6      	bne.n	80004f0 <__cmpdf2+0x1c>
 8000542:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000546:	d0d3      	beq.n	80004f0 <__cmpdf2+0x1c>
 8000548:	f85d 0b04 	ldr.w	r0, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop

08000550 <__aeabi_cdrcmple>:
 8000550:	4684      	mov	ip, r0
 8000552:	4610      	mov	r0, r2
 8000554:	4662      	mov	r2, ip
 8000556:	468c      	mov	ip, r1
 8000558:	4619      	mov	r1, r3
 800055a:	4663      	mov	r3, ip
 800055c:	e000      	b.n	8000560 <__aeabi_cdcmpeq>
 800055e:	bf00      	nop

08000560 <__aeabi_cdcmpeq>:
 8000560:	b501      	push	{r0, lr}
 8000562:	f7ff ffb7 	bl	80004d4 <__cmpdf2>
 8000566:	2800      	cmp	r0, #0
 8000568:	bf48      	it	mi
 800056a:	f110 0f00 	cmnmi.w	r0, #0
 800056e:	bd01      	pop	{r0, pc}

08000570 <__aeabi_dcmpeq>:
 8000570:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000574:	f7ff fff4 	bl	8000560 <__aeabi_cdcmpeq>
 8000578:	bf0c      	ite	eq
 800057a:	2001      	moveq	r0, #1
 800057c:	2000      	movne	r0, #0
 800057e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000582:	bf00      	nop

08000584 <__aeabi_dcmplt>:
 8000584:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000588:	f7ff ffea 	bl	8000560 <__aeabi_cdcmpeq>
 800058c:	bf34      	ite	cc
 800058e:	2001      	movcc	r0, #1
 8000590:	2000      	movcs	r0, #0
 8000592:	f85d fb08 	ldr.w	pc, [sp], #8
 8000596:	bf00      	nop

08000598 <__aeabi_dcmple>:
 8000598:	f84d ed08 	str.w	lr, [sp, #-8]!
 800059c:	f7ff ffe0 	bl	8000560 <__aeabi_cdcmpeq>
 80005a0:	bf94      	ite	ls
 80005a2:	2001      	movls	r0, #1
 80005a4:	2000      	movhi	r0, #0
 80005a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005aa:	bf00      	nop

080005ac <__aeabi_dcmpge>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff ffce 	bl	8000550 <__aeabi_cdrcmple>
 80005b4:	bf94      	ite	ls
 80005b6:	2001      	movls	r0, #1
 80005b8:	2000      	movhi	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmpgt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffc4 	bl	8000550 <__aeabi_cdrcmple>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <_ZN12ControlClass11lookupAngleEss>:
#include "controlSystem.h"

ControlClass ControlSystem;

int16_t ControlClass::lookupAngle(int16_t z_acc, int16_t axis_acc)
{
 80005d4:	b5b0      	push	{r4, r5, r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	807b      	strh	r3, [r7, #2]
 80005e0:	4613      	mov	r3, r2
 80005e2:	803b      	strh	r3, [r7, #0]


	if (z_acc == 0){
 80005e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d108      	bne.n	80005fe <_ZN12ControlClass11lookupAngleEss+0x2a>
		//divide by 0 case:
		return (axis_acc < 0) ? (int16_t) -90 : (int16_t) 90;
 80005ec:	f9b7 3000 	ldrsh.w	r3, [r7]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	da02      	bge.n	80005fa <_ZN12ControlClass11lookupAngleEss+0x26>
 80005f4:	f06f 0359 	mvn.w	r3, #89	; 0x59
 80005f8:	e045      	b.n	8000686 <_ZN12ControlClass11lookupAngleEss+0xb2>
 80005fa:	235a      	movs	r3, #90	; 0x5a
 80005fc:	e043      	b.n	8000686 <_ZN12ControlClass11lookupAngleEss+0xb2>
	}

	double arctan_theta = (double)(axis_acc/z_acc);
 80005fe:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000602:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000606:	fb92 f3f3 	sdiv	r3, r2, r3
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff fef0 	bl	80003f0 <__aeabi_i2d>
 8000610:	4602      	mov	r2, r0
 8000612:	460b      	mov	r3, r1
 8000614:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int sign;

	//convert ratio to positive for quicker LUT result
	if (arctan_theta < 0)
 8000618:	f04f 0200 	mov.w	r2, #0
 800061c:	f04f 0300 	mov.w	r3, #0
 8000620:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000624:	f7ff ffae 	bl	8000584 <__aeabi_dcmplt>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d009      	beq.n	8000642 <_ZN12ControlClass11lookupAngleEss+0x6e>
	{
		arctan_theta *= -1;
 800062e:	693c      	ldr	r4, [r7, #16]
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000636:	e9c7 4504 	strd	r4, r5, [r7, #16]
		sign = -1;
 800063a:	f04f 33ff 	mov.w	r3, #4294967295
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	e001      	b.n	8000646 <_ZN12ControlClass11lookupAngleEss+0x72>
	}
	else
	{
		sign = 1;
 8000642:	2301      	movs	r3, #1
 8000644:	60fb      	str	r3, [r7, #12]
	}
	uint8_t i;
	for (i = 0; i < sizeof(ControlSystem.angleTable)/sizeof(double); i++)
 8000646:	2300      	movs	r3, #0
 8000648:	72fb      	strb	r3, [r7, #11]
 800064a:	7afb      	ldrb	r3, [r7, #11]
 800064c:	2b59      	cmp	r3, #89	; 0x59
 800064e:	d812      	bhi.n	8000676 <_ZN12ControlClass11lookupAngleEss+0xa2>
	{
		if (arctan_theta < ControlSystem.angleTable[i+1]){
 8000650:	7afb      	ldrb	r3, [r7, #11]
 8000652:	3301      	adds	r3, #1
 8000654:	4a0e      	ldr	r2, [pc, #56]	; (8000690 <_ZN12ControlClass11lookupAngleEss+0xbc>)
 8000656:	00db      	lsls	r3, r3, #3
 8000658:	4413      	add	r3, r2
 800065a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800065e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000662:	f7ff ff8f 	bl	8000584 <__aeabi_dcmplt>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d103      	bne.n	8000674 <_ZN12ControlClass11lookupAngleEss+0xa0>
	for (i = 0; i < sizeof(ControlSystem.angleTable)/sizeof(double); i++)
 800066c:	7afb      	ldrb	r3, [r7, #11]
 800066e:	3301      	adds	r3, #1
 8000670:	72fb      	strb	r3, [r7, #11]
 8000672:	e7ea      	b.n	800064a <_ZN12ControlClass11lookupAngleEss+0x76>
			break;
 8000674:	bf00      	nop
		}
	}

	return sign * i; //angle between -89 and +89
 8000676:	7afb      	ldrb	r3, [r7, #11]
 8000678:	b29b      	uxth	r3, r3
 800067a:	68fa      	ldr	r2, [r7, #12]
 800067c:	b292      	uxth	r2, r2
 800067e:	fb02 f303 	mul.w	r3, r2, r3
 8000682:	b29b      	uxth	r3, r3
 8000684:	b21b      	sxth	r3, r3
}
 8000686:	4618      	mov	r0, r3
 8000688:	3718      	adds	r7, #24
 800068a:	46bd      	mov	sp, r7
 800068c:	bdb0      	pop	{r4, r5, r7, pc}
 800068e:	bf00      	nop
 8000690:	20000000 	.word	0x20000000

08000694 <_ZN12ControlClass14normalizeThetaEhhhh>:


int16_t ControlClass::normalizeTheta(uint8_t data0, uint8_t data1, uint8_t z0, uint8_t z1)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	4608      	mov	r0, r1
 800069e:	4611      	mov	r1, r2
 80006a0:	461a      	mov	r2, r3
 80006a2:	4603      	mov	r3, r0
 80006a4:	70fb      	strb	r3, [r7, #3]
 80006a6:	460b      	mov	r3, r1
 80006a8:	70bb      	strb	r3, [r7, #2]
 80006aa:	4613      	mov	r3, r2
 80006ac:	707b      	strb	r3, [r7, #1]
	int16_t z_acc = (z1 << 8) | z0;
 80006ae:	7e3b      	ldrb	r3, [r7, #24]
 80006b0:	021b      	lsls	r3, r3, #8
 80006b2:	b21a      	sxth	r2, r3
 80006b4:	787b      	ldrb	r3, [r7, #1]
 80006b6:	b21b      	sxth	r3, r3
 80006b8:	4313      	orrs	r3, r2
 80006ba:	81fb      	strh	r3, [r7, #14]
	int16_t axis_acc = (data1 << 8) | data0;
 80006bc:	78bb      	ldrb	r3, [r7, #2]
 80006be:	021b      	lsls	r3, r3, #8
 80006c0:	b21a      	sxth	r2, r3
 80006c2:	78fb      	ldrb	r3, [r7, #3]
 80006c4:	b21b      	sxth	r3, r3
 80006c6:	4313      	orrs	r3, r2
 80006c8:	81bb      	strh	r3, [r7, #12]
	return lookupAngle(axis_acc,z_acc);
 80006ca:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80006ce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80006d2:	4619      	mov	r1, r3
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff ff7d 	bl	80005d4 <_ZN12ControlClass11lookupAngleEss>
 80006da:	4603      	mov	r3, r0




}
 80006dc:	4618      	mov	r0, r3
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08e      	sub	sp, #56	; 0x38
 80006e8:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ea:	f000 fed3 	bl	8001494 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ee:	f000 f8eb 	bl	80008c8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f2:	f000 fb73 	bl	8000ddc <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 80006f6:	f000 f947 	bl	8000988 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 80006fa:	f000 f98d 	bl	8000a18 <_ZL12MX_ADC2_Initv>
  MX_SPI1_Init();
 80006fe:	f000 fa07 	bl	8000b10 <_ZL12MX_SPI1_Initv>
  MX_TIM1_Init();
 8000702:	f000 fa41 	bl	8000b88 <_ZL12MX_TIM1_Initv>
  MX_USART2_UART_Init();
 8000706:	f000 fb0d 	bl	8000d24 <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 800070a:	f000 fb39 	bl	8000d80 <_ZL19MX_USART3_UART_Initv>
  MX_I2C1_Init();
 800070e:	f000 f9cb 	bl	8000aa8 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */

  //Configure Accelerometer using PA4 for CSn, in SPI mode
  MC3479.setSerialSPI(&hspi1, GPIOA, SPI1_CSn_Pin);
 8000712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000716:	4a57      	ldr	r2, [pc, #348]	; (8000874 <main+0x190>)
 8000718:	4957      	ldr	r1, [pc, #348]	; (8000878 <main+0x194>)
 800071a:	4858      	ldr	r0, [pc, #352]	; (800087c <main+0x198>)
 800071c:	f003 fe3e 	bl	800439c <_ZN11MC3479Class12setSerialSPIEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>

  //Configure GPIO variables for x-axis
  MP6543H.x_configMotorController(TIM_CHANNEL_1, &htim1,
 8000720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000724:	9306      	str	r3, [sp, #24]
 8000726:	4b56      	ldr	r3, [pc, #344]	; (8000880 <main+0x19c>)
 8000728:	9305      	str	r3, [sp, #20]
 800072a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800072e:	9304      	str	r3, [sp, #16]
 8000730:	4b53      	ldr	r3, [pc, #332]	; (8000880 <main+0x19c>)
 8000732:	9303      	str	r3, [sp, #12]
 8000734:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000738:	9302      	str	r3, [sp, #8]
 800073a:	4b51      	ldr	r3, [pc, #324]	; (8000880 <main+0x19c>)
 800073c:	9301      	str	r3, [sp, #4]
 800073e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	4b4e      	ldr	r3, [pc, #312]	; (8000880 <main+0x19c>)
 8000746:	4a4f      	ldr	r2, [pc, #316]	; (8000884 <main+0x1a0>)
 8000748:	2100      	movs	r1, #0
 800074a:	484f      	ldr	r0, [pc, #316]	; (8000888 <main+0x1a4>)
 800074c:	f004 f882 	bl	8004854 <_ZN12MP6543HClass23x_configMotorControllerEtP17TIM_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>
		  	  	  	  	  	  	  GPIOB, MP6543H_DIR_X_Pin,
								  	  GPIOB, MP6543H_nBRAKE_X_Pin,
									  	  GPIOB, MP6543H_nSLEEP_X_Pin,
										  	  GPIOB, MP6543H_nFAULT_X_Pin);
  // Configure GPIO variables for y-axis
  MP6543H.y_configMotorController(TIM_CHANNEL_2, &htim1,
 8000750:	2304      	movs	r3, #4
 8000752:	9306      	str	r3, [sp, #24]
 8000754:	4b4a      	ldr	r3, [pc, #296]	; (8000880 <main+0x19c>)
 8000756:	9305      	str	r3, [sp, #20]
 8000758:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800075c:	9304      	str	r3, [sp, #16]
 800075e:	4b45      	ldr	r3, [pc, #276]	; (8000874 <main+0x190>)
 8000760:	9303      	str	r3, [sp, #12]
 8000762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000766:	9302      	str	r3, [sp, #8]
 8000768:	4b42      	ldr	r3, [pc, #264]	; (8000874 <main+0x190>)
 800076a:	9301      	str	r3, [sp, #4]
 800076c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000770:	9300      	str	r3, [sp, #0]
 8000772:	4b40      	ldr	r3, [pc, #256]	; (8000874 <main+0x190>)
 8000774:	4a43      	ldr	r2, [pc, #268]	; (8000884 <main+0x1a0>)
 8000776:	2104      	movs	r1, #4
 8000778:	4843      	ldr	r0, [pc, #268]	; (8000888 <main+0x1a4>)
 800077a:	f004 f879 	bl	8004870 <_ZN12MP6543HClass23y_configMotorControllerEtP17TIM_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>
		  	  	  	  	  	  	  GPIOA, MP6543H_DIR_Y_Pin,
								  	  GPIOA, MP6543H_nBRAKE_Y_Pin,
									  	  GPIOA, MP6543H_nSLEEP_Y_Pin,
										  	  GPIOB, MP6543H_nFAULT_Y_Pin);

  MC3479.configAccelerometer();
 800077e:	483f      	ldr	r0, [pc, #252]	; (800087c <main+0x198>)
 8000780:	f003 fed0 	bl	8004524 <_ZN11MC3479Class19configAccelerometerEv>
  uint8_t xData [2];
  uint8_t yData [2];
  uint8_t zData [2];
  uint8_t motionFlagStatus;
  uint8_t motionIrqStatus;
  uint8_t newLine = '\n';
 8000784:	230a      	movs	r3, #10
 8000786:	717b      	strb	r3, [r7, #5]
//  uint8_t* newLinePtr = newLine;

  //TIMER1 was set to 255 bits per period, at 8MHz, this is ~ 31kHz
  //We can set the PWM duty cycle% from 0-255 bits of each cycle where n/255 * 100% = PWM duty cycle
  int8_t MP6543H_PWM1_SPEED = 0; //PWM Value from 0 to 255
 8000788:	2300      	movs	r3, #0
 800078a:	75fb      	strb	r3, [r7, #23]
//  bool x_inactive = false;
//  bool y_inactive = true;]
// TODO: implement variable x and y nominal values
//  int16_t x_nominal = 0;
//  int16_t y_nominal = 0;
  	int16_t x_theta = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	82bb      	strh	r3, [r7, #20]
  	int16_t y_theta = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	827b      	strh	r3, [r7, #18]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MC3479.getXYZ(xData, yData, zData);
 8000794:	f107 0308 	add.w	r3, r7, #8
 8000798:	f107 020c 	add.w	r2, r7, #12
 800079c:	f107 0110 	add.w	r1, r7, #16
 80007a0:	4836      	ldr	r0, [pc, #216]	; (800087c <main+0x198>)
 80007a2:	f003 fffe 	bl	80047a2 <_ZN11MC3479Class6getXYZEPhS0_S0_>
	  x_theta = ControlSystem.normalizeTheta(xData[0], xData[1], zData[0], zData[1]);
 80007a6:	7c39      	ldrb	r1, [r7, #16]
 80007a8:	7c7a      	ldrb	r2, [r7, #17]
 80007aa:	7a38      	ldrb	r0, [r7, #8]
 80007ac:	7a7b      	ldrb	r3, [r7, #9]
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	4603      	mov	r3, r0
 80007b2:	4836      	ldr	r0, [pc, #216]	; (800088c <main+0x1a8>)
 80007b4:	f7ff ff6e 	bl	8000694 <_ZN12ControlClass14normalizeThetaEhhhh>
 80007b8:	4603      	mov	r3, r0
 80007ba:	82bb      	strh	r3, [r7, #20]
	  y_theta = ControlSystem.normalizeTheta(yData[0], yData[1], zData[0], zData[1]);
 80007bc:	7b39      	ldrb	r1, [r7, #12]
 80007be:	7b7a      	ldrb	r2, [r7, #13]
 80007c0:	7a38      	ldrb	r0, [r7, #8]
 80007c2:	7a7b      	ldrb	r3, [r7, #9]
 80007c4:	9300      	str	r3, [sp, #0]
 80007c6:	4603      	mov	r3, r0
 80007c8:	4830      	ldr	r0, [pc, #192]	; (800088c <main+0x1a8>)
 80007ca:	f7ff ff63 	bl	8000694 <_ZN12ControlClass14normalizeThetaEhhhh>
 80007ce:	4603      	mov	r3, r0
 80007d0:	827b      	strh	r3, [r7, #18]
	  motionFlagStatus = MC3479.getMotionFlagStatus();
 80007d2:	482a      	ldr	r0, [pc, #168]	; (800087c <main+0x198>)
 80007d4:	f004 f80d 	bl	80047f2 <_ZN11MC3479Class19getMotionFlagStatusEv>
 80007d8:	4603      	mov	r3, r0
 80007da:	71fb      	strb	r3, [r7, #7]
	  motionIrqStatus = MC3479.getMotionIrqStatus();
 80007dc:	4827      	ldr	r0, [pc, #156]	; (800087c <main+0x198>)
 80007de:	f004 f818 	bl	8004812 <_ZN11MC3479Class18getMotionIrqStatusEv>
 80007e2:	4603      	mov	r3, r0
 80007e4:	71bb      	strb	r3, [r7, #6]
	  MC3479.clearMotionIrqStatus();
 80007e6:	4825      	ldr	r0, [pc, #148]	; (800087c <main+0x198>)
 80007e8:	f004 f823 	bl	8004832 <_ZN11MC3479Class20clearMotionIrqStatusEv>

#ifdef DEBUG_ENABLED
	  HAL_UART_Transmit(&huart2, &newLine, sizeof(newLine), 10);
 80007ec:	1d79      	adds	r1, r7, #5
 80007ee:	230a      	movs	r3, #10
 80007f0:	2201      	movs	r2, #1
 80007f2:	4827      	ldr	r0, [pc, #156]	; (8000890 <main+0x1ac>)
 80007f4:	f003 fc68 	bl	80040c8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, &motionFlagStatus, sizeof(motionFlagStatus), 10);
 80007f8:	1df9      	adds	r1, r7, #7
 80007fa:	230a      	movs	r3, #10
 80007fc:	2201      	movs	r2, #1
 80007fe:	4824      	ldr	r0, [pc, #144]	; (8000890 <main+0x1ac>)
 8000800:	f003 fc62 	bl	80040c8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, &motionIrqStatus, sizeof(motionIrqStatus), 10);
 8000804:	1db9      	adds	r1, r7, #6
 8000806:	230a      	movs	r3, #10
 8000808:	2201      	movs	r2, #1
 800080a:	4821      	ldr	r0, [pc, #132]	; (8000890 <main+0x1ac>)
 800080c:	f003 fc5c 	bl	80040c8 <HAL_UART_Transmit>

	  HAL_UART_Transmit(&huart2, &newLine, sizeof(newLine), 10);
 8000810:	1d79      	adds	r1, r7, #5
 8000812:	230a      	movs	r3, #10
 8000814:	2201      	movs	r2, #1
 8000816:	481e      	ldr	r0, [pc, #120]	; (8000890 <main+0x1ac>)
 8000818:	f003 fc56 	bl	80040c8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, &xData[0], sizeof(xData), 10);
 800081c:	f107 0110 	add.w	r1, r7, #16
 8000820:	230a      	movs	r3, #10
 8000822:	2202      	movs	r2, #2
 8000824:	481a      	ldr	r0, [pc, #104]	; (8000890 <main+0x1ac>)
 8000826:	f003 fc4f 	bl	80040c8 <HAL_UART_Transmit>
	  UART_Send_16bit(&huart2, x_theta);
 800082a:	8abb      	ldrh	r3, [r7, #20]
 800082c:	4619      	mov	r1, r3
 800082e:	4818      	ldr	r0, [pc, #96]	; (8000890 <main+0x1ac>)
 8000830:	f000 f830 	bl	8000894 <_Z15UART_Send_16bitP20__UART_HandleTypeDeft>

	  HAL_UART_Transmit(&huart2, &newLine, sizeof(newLine), 10);
 8000834:	1d79      	adds	r1, r7, #5
 8000836:	230a      	movs	r3, #10
 8000838:	2201      	movs	r2, #1
 800083a:	4815      	ldr	r0, [pc, #84]	; (8000890 <main+0x1ac>)
 800083c:	f003 fc44 	bl	80040c8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, &yData[0], sizeof(yData), 10);
 8000840:	f107 010c 	add.w	r1, r7, #12
 8000844:	230a      	movs	r3, #10
 8000846:	2202      	movs	r2, #2
 8000848:	4811      	ldr	r0, [pc, #68]	; (8000890 <main+0x1ac>)
 800084a:	f003 fc3d 	bl	80040c8 <HAL_UART_Transmit>
	  UART_Send_16bit(&huart2, y_theta);
 800084e:	8a7b      	ldrh	r3, [r7, #18]
 8000850:	4619      	mov	r1, r3
 8000852:	480f      	ldr	r0, [pc, #60]	; (8000890 <main+0x1ac>)
 8000854:	f000 f81e 	bl	8000894 <_Z15UART_Send_16bitP20__UART_HandleTypeDeft>

	  HAL_UART_Transmit(&huart2, &newLine, sizeof(newLine), 10);
 8000858:	1d79      	adds	r1, r7, #5
 800085a:	230a      	movs	r3, #10
 800085c:	2201      	movs	r2, #1
 800085e:	480c      	ldr	r0, [pc, #48]	; (8000890 <main+0x1ac>)
 8000860:	f003 fc32 	bl	80040c8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, &zData[0], sizeof(zData), 10);
 8000864:	f107 0108 	add.w	r1, r7, #8
 8000868:	230a      	movs	r3, #10
 800086a:	2202      	movs	r2, #2
 800086c:	4808      	ldr	r0, [pc, #32]	; (8000890 <main+0x1ac>)
 800086e:	f003 fc2b 	bl	80040c8 <HAL_UART_Transmit>
	  MC3479.getXYZ(xData, yData, zData);
 8000872:	e78f      	b.n	8000794 <main+0xb0>
 8000874:	40010800 	.word	0x40010800
 8000878:	200003ac 	.word	0x200003ac
 800087c:	200004d8 	.word	0x200004d8
 8000880:	40010c00 	.word	0x40010c00
 8000884:	20000404 	.word	0x20000404
 8000888:	200004ec 	.word	0x200004ec
 800088c:	20000000 	.word	0x20000000
 8000890:	2000044c 	.word	0x2000044c

08000894 <_Z15UART_Send_16bitP20__UART_HandleTypeDeft>:

// Wrapper method
// takes 16bit inputs and sends over uart in 8bit parts
// Just a method to clear up main.cpp code
HAL_StatusTypeDef UART_Send_16bit(UART_HandleTypeDef * uart, uint16_t data)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	807b      	strh	r3, [r7, #2]
	uint8_t packet[2] = {data & 0x00FF, data >> 8};
 80008a0:	887b      	ldrh	r3, [r7, #2]
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	733b      	strb	r3, [r7, #12]
 80008a6:	887b      	ldrh	r3, [r7, #2]
 80008a8:	0a1b      	lsrs	r3, r3, #8
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	737b      	strb	r3, [r7, #13]
	return HAL_UART_Transmit(uart, &packet[0], sizeof(packet), 10);
 80008b0:	f107 010c 	add.w	r1, r7, #12
 80008b4:	230a      	movs	r3, #10
 80008b6:	2202      	movs	r2, #2
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f003 fc05 	bl	80040c8 <HAL_UART_Transmit>
 80008be:	4603      	mov	r3, r0
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b094      	sub	sp, #80	; 0x50
 80008cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008d2:	2228      	movs	r2, #40	; 0x28
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f003 fffc 	bl	80048d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008f8:	2302      	movs	r3, #2
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008fc:	2301      	movs	r3, #1
 80008fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000900:	2310      	movs	r3, #16
 8000902:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000904:	2300      	movs	r3, #0
 8000906:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000908:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800090c:	4618      	mov	r0, r3
 800090e:	f001 fbf9 	bl	8002104 <HAL_RCC_OscConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	bf14      	ite	ne
 8000918:	2301      	movne	r3, #1
 800091a:	2300      	moveq	r3, #0
 800091c:	b2db      	uxtb	r3, r3
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <_Z18SystemClock_Configv+0x5e>
  {
    Error_Handler();
 8000922:	f000 fb2b 	bl	8000f7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000926:	230f      	movs	r3, #15
 8000928:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800092a:	2300      	movs	r3, #0
 800092c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000932:	2300      	movs	r3, #0
 8000934:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	2100      	movs	r1, #0
 8000940:	4618      	mov	r0, r3
 8000942:	f001 fe61 	bl	8002608 <HAL_RCC_ClockConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	bf14      	ite	ne
 800094c:	2301      	movne	r3, #1
 800094e:	2300      	moveq	r3, #0
 8000950:	b2db      	uxtb	r3, r3
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <_Z18SystemClock_Configv+0x92>
  {
    Error_Handler();
 8000956:	f000 fb11 	bl	8000f7c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800095a:	2302      	movs	r3, #2
 800095c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	4618      	mov	r0, r3
 8000966:	f001 ffe7 	bl	8002938 <HAL_RCCEx_PeriphCLKConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	bf14      	ite	ne
 8000970:	2301      	movne	r3, #1
 8000972:	2300      	moveq	r3, #0
 8000974:	b2db      	uxtb	r3, r3
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 800097a:	f000 faff 	bl	8000f7c <Error_Handler>
  }
}
 800097e:	bf00      	nop
 8000980:	3750      	adds	r7, #80	; 0x50
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000998:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <_ZL12MX_ADC1_Initv+0x88>)
 800099a:	4a1e      	ldr	r2, [pc, #120]	; (8000a14 <_ZL12MX_ADC1_Initv+0x8c>)
 800099c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800099e:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <_ZL12MX_ADC1_Initv+0x88>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009a4:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <_ZL12MX_ADC1_Initv+0x88>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009aa:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <_ZL12MX_ADC1_Initv+0x88>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009b0:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <_ZL12MX_ADC1_Initv+0x88>)
 80009b2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80009b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009b8:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <_ZL12MX_ADC1_Initv+0x88>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80009be:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <_ZL12MX_ADC1_Initv+0x88>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009c4:	4812      	ldr	r0, [pc, #72]	; (8000a10 <_ZL12MX_ADC1_Initv+0x88>)
 80009c6:	f000 fdc7 	bl	8001558 <HAL_ADC_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	bf14      	ite	ne
 80009d0:	2301      	movne	r3, #1
 80009d2:	2300      	moveq	r3, #0
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <_ZL12MX_ADC1_Initv+0x56>
  {
    Error_Handler();
 80009da:	f000 facf 	bl	8000f7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009e2:	2301      	movs	r3, #1
 80009e4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	4619      	mov	r1, r3
 80009ee:	4808      	ldr	r0, [pc, #32]	; (8000a10 <_ZL12MX_ADC1_Initv+0x88>)
 80009f0:	f000 fe8a 	bl	8001708 <HAL_ADC_ConfigChannel>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	bf14      	ite	ne
 80009fa:	2301      	movne	r3, #1
 80009fc:	2300      	moveq	r3, #0
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <_ZL12MX_ADC1_Initv+0x80>
  {
    Error_Handler();
 8000a04:	f000 faba 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a08:	bf00      	nop
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	200002f8 	.word	0x200002f8
 8000a14:	40012400 	.word	0x40012400

08000a18 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a28:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <_ZL12MX_ADC2_Initv+0x88>)
 8000a2a:	4a1e      	ldr	r2, [pc, #120]	; (8000aa4 <_ZL12MX_ADC2_Initv+0x8c>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a2e:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <_ZL12MX_ADC2_Initv+0x88>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a34:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <_ZL12MX_ADC2_Initv+0x88>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <_ZL12MX_ADC2_Initv+0x88>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a40:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <_ZL12MX_ADC2_Initv+0x88>)
 8000a42:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a46:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a48:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <_ZL12MX_ADC2_Initv+0x88>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000a4e:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <_ZL12MX_ADC2_Initv+0x88>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a54:	4812      	ldr	r0, [pc, #72]	; (8000aa0 <_ZL12MX_ADC2_Initv+0x88>)
 8000a56:	f000 fd7f 	bl	8001558 <HAL_ADC_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	bf14      	ite	ne
 8000a60:	2301      	movne	r3, #1
 8000a62:	2300      	moveq	r3, #0
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <_ZL12MX_ADC2_Initv+0x56>
  {
    Error_Handler();
 8000a6a:	f000 fa87 	bl	8000f7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a6e:	2307      	movs	r3, #7
 8000a70:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a72:	2301      	movs	r3, #1
 8000a74:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4808      	ldr	r0, [pc, #32]	; (8000aa0 <_ZL12MX_ADC2_Initv+0x88>)
 8000a80:	f000 fe42 	bl	8001708 <HAL_ADC_ConfigChannel>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	bf14      	ite	ne
 8000a8a:	2301      	movne	r3, #1
 8000a8c:	2300      	moveq	r3, #0
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <_ZL12MX_ADC2_Initv+0x80>
  {
    Error_Handler();
 8000a94:	f000 fa72 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000328 	.word	0x20000328
 8000aa4:	40012800 	.word	0x40012800

08000aa8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aac:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <_ZL12MX_I2C1_Initv+0x5c>)
 8000aae:	4a16      	ldr	r2, [pc, #88]	; (8000b08 <_ZL12MX_I2C1_Initv+0x60>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ab2:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ab4:	4a15      	ldr	r2, [pc, #84]	; (8000b0c <_ZL12MX_I2C1_Initv+0x64>)
 8000ab6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <_ZL12MX_I2C1_Initv+0x5c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ac6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000acc:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ae4:	4807      	ldr	r0, [pc, #28]	; (8000b04 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ae6:	f001 f9c9 	bl	8001e7c <HAL_I2C_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	bf14      	ite	ne
 8000af0:	2301      	movne	r3, #1
 8000af2:	2300      	moveq	r3, #0
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8000afa:	f000 fa3f 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000358 	.word	0x20000358
 8000b08:	40005400 	.word	0x40005400
 8000b0c:	00061a80 	.word	0x00061a80

08000b10 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b14:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <_ZL12MX_SPI1_Initv+0x70>)
 8000b16:	4a1b      	ldr	r2, [pc, #108]	; (8000b84 <_ZL12MX_SPI1_Initv+0x74>)
 8000b18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b1a:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <_ZL12MX_SPI1_Initv+0x70>)
 8000b1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <_ZL12MX_SPI1_Initv+0x70>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <_ZL12MX_SPI1_Initv+0x70>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <_ZL12MX_SPI1_Initv+0x70>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <_ZL12MX_SPI1_Initv+0x70>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <_ZL12MX_SPI1_Initv+0x70>)
 8000b3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b40:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b42:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <_ZL12MX_SPI1_Initv+0x70>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b48:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <_ZL12MX_SPI1_Initv+0x70>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <_ZL12MX_SPI1_Initv+0x70>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <_ZL12MX_SPI1_Initv+0x70>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <_ZL12MX_SPI1_Initv+0x70>)
 8000b5c:	220a      	movs	r2, #10
 8000b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b60:	4807      	ldr	r0, [pc, #28]	; (8000b80 <_ZL12MX_SPI1_Initv+0x70>)
 8000b62:	f001 ff9f 	bl	8002aa4 <HAL_SPI_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	bf14      	ite	ne
 8000b6c:	2301      	movne	r3, #1
 8000b6e:	2300      	moveq	r3, #0
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8000b76:	f000 fa01 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200003ac 	.word	0x200003ac
 8000b84:	40013000 	.word	0x40013000

08000b88 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b096      	sub	sp, #88	; 0x58
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]
 8000bb6:	615a      	str	r2, [r3, #20]
 8000bb8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2220      	movs	r2, #32
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f003 fe87 	bl	80048d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bc6:	4b55      	ldr	r3, [pc, #340]	; (8000d1c <_ZL12MX_TIM1_Initv+0x194>)
 8000bc8:	4a55      	ldr	r2, [pc, #340]	; (8000d20 <_ZL12MX_TIM1_Initv+0x198>)
 8000bca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bcc:	4b53      	ldr	r3, [pc, #332]	; (8000d1c <_ZL12MX_TIM1_Initv+0x194>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd2:	4b52      	ldr	r3, [pc, #328]	; (8000d1c <_ZL12MX_TIM1_Initv+0x194>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 250;
 8000bd8:	4b50      	ldr	r3, [pc, #320]	; (8000d1c <_ZL12MX_TIM1_Initv+0x194>)
 8000bda:	22fa      	movs	r2, #250	; 0xfa
 8000bdc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bde:	4b4f      	ldr	r3, [pc, #316]	; (8000d1c <_ZL12MX_TIM1_Initv+0x194>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000be4:	4b4d      	ldr	r3, [pc, #308]	; (8000d1c <_ZL12MX_TIM1_Initv+0x194>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bea:	4b4c      	ldr	r3, [pc, #304]	; (8000d1c <_ZL12MX_TIM1_Initv+0x194>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bf0:	484a      	ldr	r0, [pc, #296]	; (8000d1c <_ZL12MX_TIM1_Initv+0x194>)
 8000bf2:	f002 fcc3 	bl	800357c <HAL_TIM_Base_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	bf14      	ite	ne
 8000bfc:	2301      	movne	r3, #1
 8000bfe:	2300      	moveq	r3, #0
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <_ZL12MX_TIM1_Initv+0x82>
  {
    Error_Handler();
 8000c06:	f000 f9b9 	bl	8000f7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c0e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c10:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c14:	4619      	mov	r1, r3
 8000c16:	4841      	ldr	r0, [pc, #260]	; (8000d1c <_ZL12MX_TIM1_Initv+0x194>)
 8000c18:	f002 fe16 	bl	8003848 <HAL_TIM_ConfigClockSource>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	bf14      	ite	ne
 8000c22:	2301      	movne	r3, #1
 8000c24:	2300      	moveq	r3, #0
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <_ZL12MX_TIM1_Initv+0xa8>
  {
    Error_Handler();
 8000c2c:	f000 f9a6 	bl	8000f7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c30:	483a      	ldr	r0, [pc, #232]	; (8000d1c <_ZL12MX_TIM1_Initv+0x194>)
 8000c32:	f002 fcf2 	bl	800361a <HAL_TIM_PWM_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	bf14      	ite	ne
 8000c3c:	2301      	movne	r3, #1
 8000c3e:	2300      	moveq	r3, #0
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <_ZL12MX_TIM1_Initv+0xc2>
  {
    Error_Handler();
 8000c46:	f000 f999 	bl	8000f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c52:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c56:	4619      	mov	r1, r3
 8000c58:	4830      	ldr	r0, [pc, #192]	; (8000d1c <_ZL12MX_TIM1_Initv+0x194>)
 8000c5a:	f003 f939 	bl	8003ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	bf14      	ite	ne
 8000c64:	2301      	movne	r3, #1
 8000c66:	2300      	moveq	r3, #0
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <_ZL12MX_TIM1_Initv+0xea>
  {
    Error_Handler();
 8000c6e:	f000 f985 	bl	8000f7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c72:	2360      	movs	r3, #96	; 0x60
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c82:	2300      	movs	r3, #0
 8000c84:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c86:	2300      	movs	r3, #0
 8000c88:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c92:	2200      	movs	r2, #0
 8000c94:	4619      	mov	r1, r3
 8000c96:	4821      	ldr	r0, [pc, #132]	; (8000d1c <_ZL12MX_TIM1_Initv+0x194>)
 8000c98:	f002 fd18 	bl	80036cc <HAL_TIM_PWM_ConfigChannel>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	bf14      	ite	ne
 8000ca2:	2301      	movne	r3, #1
 8000ca4:	2300      	moveq	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <_ZL12MX_TIM1_Initv+0x128>
  {
    Error_Handler();
 8000cac:	f000 f966 	bl	8000f7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb4:	2204      	movs	r2, #4
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4818      	ldr	r0, [pc, #96]	; (8000d1c <_ZL12MX_TIM1_Initv+0x194>)
 8000cba:	f002 fd07 	bl	80036cc <HAL_TIM_PWM_ConfigChannel>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	bf14      	ite	ne
 8000cc4:	2301      	movne	r3, #1
 8000cc6:	2300      	moveq	r3, #0
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <_ZL12MX_TIM1_Initv+0x14a>
  {
    Error_Handler();
 8000cce:	f000 f955 	bl	8000f7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ce6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4809      	ldr	r0, [pc, #36]	; (8000d1c <_ZL12MX_TIM1_Initv+0x194>)
 8000cf6:	f003 f949 	bl	8003f8c <HAL_TIMEx_ConfigBreakDeadTime>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	bf14      	ite	ne
 8000d00:	2301      	movne	r3, #1
 8000d02:	2300      	moveq	r3, #0
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <_ZL12MX_TIM1_Initv+0x186>
  {
    Error_Handler();
 8000d0a:	f000 f937 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d0e:	4803      	ldr	r0, [pc, #12]	; (8000d1c <_ZL12MX_TIM1_Initv+0x194>)
 8000d10:	f000 fab2 	bl	8001278 <HAL_TIM_MspPostInit>

}
 8000d14:	bf00      	nop
 8000d16:	3758      	adds	r7, #88	; 0x58
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000404 	.word	0x20000404
 8000d20:	40012c00 	.word	0x40012c00

08000d24 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d28:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000d2a:	4a14      	ldr	r2, [pc, #80]	; (8000d7c <_ZL19MX_USART2_UART_Initv+0x58>)
 8000d2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d2e:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000d30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d36:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d3c:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d42:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d48:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d5a:	4807      	ldr	r0, [pc, #28]	; (8000d78 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000d5c:	f003 f967 	bl	800402e <HAL_UART_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	bf14      	ite	ne
 8000d66:	2301      	movne	r3, #1
 8000d68:	2300      	moveq	r3, #0
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000d70:	f000 f904 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	2000044c 	.word	0x2000044c
 8000d7c:	40004400 	.word	0x40004400

08000d80 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d84:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000d86:	4a14      	ldr	r2, [pc, #80]	; (8000dd8 <_ZL19MX_USART3_UART_Initv+0x58>)
 8000d88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d8a:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000d8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d98:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000da4:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000da6:	220c      	movs	r2, #12
 8000da8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000daa:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000db6:	4807      	ldr	r0, [pc, #28]	; (8000dd4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000db8:	f003 f939 	bl	800402e <HAL_UART_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	bf14      	ite	ne
 8000dc2:	2301      	movne	r3, #1
 8000dc4:	2300      	moveq	r3, #0
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8000dcc:	f000 f8d6 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000490 	.word	0x20000490
 8000dd8:	40004800 	.word	0x40004800

08000ddc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df0:	4b5c      	ldr	r3, [pc, #368]	; (8000f64 <_ZL12MX_GPIO_Initv+0x188>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a5b      	ldr	r2, [pc, #364]	; (8000f64 <_ZL12MX_GPIO_Initv+0x188>)
 8000df6:	f043 0310 	orr.w	r3, r3, #16
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b59      	ldr	r3, [pc, #356]	; (8000f64 <_ZL12MX_GPIO_Initv+0x188>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f003 0310 	and.w	r3, r3, #16
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e08:	4b56      	ldr	r3, [pc, #344]	; (8000f64 <_ZL12MX_GPIO_Initv+0x188>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	4a55      	ldr	r2, [pc, #340]	; (8000f64 <_ZL12MX_GPIO_Initv+0x188>)
 8000e0e:	f043 0320 	orr.w	r3, r3, #32
 8000e12:	6193      	str	r3, [r2, #24]
 8000e14:	4b53      	ldr	r3, [pc, #332]	; (8000f64 <_ZL12MX_GPIO_Initv+0x188>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	f003 0320 	and.w	r3, r3, #32
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e20:	4b50      	ldr	r3, [pc, #320]	; (8000f64 <_ZL12MX_GPIO_Initv+0x188>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	4a4f      	ldr	r2, [pc, #316]	; (8000f64 <_ZL12MX_GPIO_Initv+0x188>)
 8000e26:	f043 0304 	orr.w	r3, r3, #4
 8000e2a:	6193      	str	r3, [r2, #24]
 8000e2c:	4b4d      	ldr	r3, [pc, #308]	; (8000f64 <_ZL12MX_GPIO_Initv+0x188>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	f003 0304 	and.w	r3, r3, #4
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e38:	4b4a      	ldr	r3, [pc, #296]	; (8000f64 <_ZL12MX_GPIO_Initv+0x188>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	4a49      	ldr	r2, [pc, #292]	; (8000f64 <_ZL12MX_GPIO_Initv+0x188>)
 8000e3e:	f043 0308 	orr.w	r3, r3, #8
 8000e42:	6193      	str	r3, [r2, #24]
 8000e44:	4b47      	ldr	r3, [pc, #284]	; (8000f64 <_ZL12MX_GPIO_Initv+0x188>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	f003 0308 	and.w	r3, r3, #8
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LEDR_Out_Pin|LEDG_Out_Pin|LEDB_Out_Pin, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000e56:	4844      	ldr	r0, [pc, #272]	; (8000f68 <_ZL12MX_GPIO_Initv+0x18c>)
 8000e58:	f000 fff8 	bl	8001e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Power_OSC_IN_GPIO_Port, LED_Power_OSC_IN_Pin, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2101      	movs	r1, #1
 8000e60:	4842      	ldr	r0, [pc, #264]	; (8000f6c <_ZL12MX_GPIO_Initv+0x190>)
 8000e62:	f000 fff3 	bl	8001e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MP6543H_DIR_X_Pin|MP6543H_nBRAKE_X_Pin, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8000e6c:	4840      	ldr	r0, [pc, #256]	; (8000f70 <_ZL12MX_GPIO_Initv+0x194>)
 8000e6e:	f000 ffed 	bl	8001e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MP6543H_DIR_Y_Pin|MP6543H_nSLEEP_Y_Pin|MP6543H_nBRAKE_Y_Pin|SPI1_CSn_Pin, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	f44f 411c 	mov.w	r1, #39936	; 0x9c00
 8000e78:	483e      	ldr	r0, [pc, #248]	; (8000f74 <_ZL12MX_GPIO_Initv+0x198>)
 8000e7a:	f000 ffe7 	bl	8001e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LEDR_Out_Pin LEDG_Out_Pin LEDB_Out_Pin */
  GPIO_InitStruct.Pin = LEDR_Out_Pin|LEDG_Out_Pin|LEDB_Out_Pin;
 8000e7e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000e82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e84:	2301      	movs	r3, #1
 8000e86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	4619      	mov	r1, r3
 8000e96:	4834      	ldr	r0, [pc, #208]	; (8000f68 <_ZL12MX_GPIO_Initv+0x18c>)
 8000e98:	f000 fe54 	bl	8001b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Power_OSC_IN_Pin */
  GPIO_InitStruct.Pin = LED_Power_OSC_IN_Pin;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_Power_OSC_IN_GPIO_Port, &GPIO_InitStruct);
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	482e      	ldr	r0, [pc, #184]	; (8000f6c <_ZL12MX_GPIO_Initv+0x190>)
 8000eb4:	f000 fe46 	bl	8001b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Button_In_OSC_OUT_Pin */
  GPIO_InitStruct.Pin = LED_Button_In_OSC_OUT_Pin;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_Button_In_OSC_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4828      	ldr	r0, [pc, #160]	; (8000f6c <_ZL12MX_GPIO_Initv+0x190>)
 8000ecc:	f000 fe3a 	bl	8001b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : nTILT_BUTTON_Pin */
  GPIO_InitStruct.Pin = nTILT_BUTTON_Pin;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nTILT_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4824      	ldr	r0, [pc, #144]	; (8000f74 <_ZL12MX_GPIO_Initv+0x198>)
 8000ee4:	f000 fe2e 	bl	8001b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : MP6543H_nFAULT_Y_Pin MP6543H_nFAULT_X_Pin MP6543H_nSLEEP_X_Pin MC3479_INTN1_Pin
                           MC3479_INTN2_Pin */
  GPIO_InitStruct.Pin = MP6543H_nFAULT_Y_Pin|MP6543H_nFAULT_X_Pin|MP6543H_nSLEEP_X_Pin|MC3479_INTN1_Pin
 8000ee8:	f245 03c4 	movw	r3, #20676	; 0x50c4
 8000eec:	617b      	str	r3, [r7, #20]
                          |MC3479_INTN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	481c      	ldr	r0, [pc, #112]	; (8000f70 <_ZL12MX_GPIO_Initv+0x194>)
 8000efe:	f000 fe21 	bl	8001b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : MP6543H_DIR_X_Pin MP6543H_nBRAKE_X_Pin */
  GPIO_InitStruct.Pin = MP6543H_DIR_X_Pin|MP6543H_nBRAKE_X_Pin;
 8000f02:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2302      	movs	r3, #2
 8000f12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4815      	ldr	r0, [pc, #84]	; (8000f70 <_ZL12MX_GPIO_Initv+0x194>)
 8000f1c:	f000 fe12 	bl	8001b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : MP6543H_DIR_Y_Pin MP6543H_nSLEEP_Y_Pin MP6543H_nBRAKE_Y_Pin SPI1_CSn_Pin */
  GPIO_InitStruct.Pin = MP6543H_DIR_Y_Pin|MP6543H_nSLEEP_Y_Pin|MP6543H_nBRAKE_Y_Pin|SPI1_CSn_Pin;
 8000f20:	f44f 431c 	mov.w	r3, #39936	; 0x9c00
 8000f24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f26:	2301      	movs	r3, #1
 8000f28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4619      	mov	r1, r3
 8000f38:	480e      	ldr	r0, [pc, #56]	; (8000f74 <_ZL12MX_GPIO_Initv+0x198>)
 8000f3a:	f000 fe03 	bl	8001b44 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <_ZL12MX_GPIO_Initv+0x19c>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
 8000f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f46:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8000f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
 8000f54:	4a08      	ldr	r2, [pc, #32]	; (8000f78 <_ZL12MX_GPIO_Initv+0x19c>)
 8000f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f58:	6053      	str	r3, [r2, #4]

}
 8000f5a:	bf00      	nop
 8000f5c:	3728      	adds	r7, #40	; 0x28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40011000 	.word	0x40011000
 8000f6c:	40011400 	.word	0x40011400
 8000f70:	40010c00 	.word	0x40010c00
 8000f74:	40010800 	.word	0x40010800
 8000f78:	40010000 	.word	0x40010000

08000f7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f80:	b672      	cpsid	i
}
 8000f82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <Error_Handler+0x8>
	...

08000f88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <HAL_MspInit+0x5c>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	4a14      	ldr	r2, [pc, #80]	; (8000fe4 <HAL_MspInit+0x5c>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6193      	str	r3, [r2, #24]
 8000f9a:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_MspInit+0x5c>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <HAL_MspInit+0x5c>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	4a0e      	ldr	r2, [pc, #56]	; (8000fe4 <HAL_MspInit+0x5c>)
 8000fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	61d3      	str	r3, [r2, #28]
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <HAL_MspInit+0x5c>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <HAL_MspInit+0x60>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <HAL_MspInit+0x60>)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	40010000 	.word	0x40010000

08000fec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08c      	sub	sp, #48	; 0x30
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 0320 	add.w	r3, r7, #32
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a33      	ldr	r2, [pc, #204]	; (80010d4 <HAL_ADC_MspInit+0xe8>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d122      	bne.n	8001052 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800100c:	4b32      	ldr	r3, [pc, #200]	; (80010d8 <HAL_ADC_MspInit+0xec>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	4a31      	ldr	r2, [pc, #196]	; (80010d8 <HAL_ADC_MspInit+0xec>)
 8001012:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001016:	6193      	str	r3, [r2, #24]
 8001018:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <HAL_ADC_MspInit+0xec>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001020:	61fb      	str	r3, [r7, #28]
 8001022:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001024:	4b2c      	ldr	r3, [pc, #176]	; (80010d8 <HAL_ADC_MspInit+0xec>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	4a2b      	ldr	r2, [pc, #172]	; (80010d8 <HAL_ADC_MspInit+0xec>)
 800102a:	f043 0304 	orr.w	r3, r3, #4
 800102e:	6193      	str	r3, [r2, #24]
 8001030:	4b29      	ldr	r3, [pc, #164]	; (80010d8 <HAL_ADC_MspInit+0xec>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	f003 0304 	and.w	r3, r3, #4
 8001038:	61bb      	str	r3, [r7, #24]
 800103a:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC1_IN1_BATT_Pin;
 800103c:	2301      	movs	r3, #1
 800103e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001040:	2303      	movs	r3, #3
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC1_IN1_BATT_GPIO_Port, &GPIO_InitStruct);
 8001044:	f107 0320 	add.w	r3, r7, #32
 8001048:	4619      	mov	r1, r3
 800104a:	4824      	ldr	r0, [pc, #144]	; (80010dc <HAL_ADC_MspInit+0xf0>)
 800104c:	f000 fd7a 	bl	8001b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001050:	e03c      	b.n	80010cc <HAL_ADC_MspInit+0xe0>
  else if(hadc->Instance==ADC2)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a22      	ldr	r2, [pc, #136]	; (80010e0 <HAL_ADC_MspInit+0xf4>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d137      	bne.n	80010cc <HAL_ADC_MspInit+0xe0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800105c:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <HAL_ADC_MspInit+0xec>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4a1d      	ldr	r2, [pc, #116]	; (80010d8 <HAL_ADC_MspInit+0xec>)
 8001062:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001066:	6193      	str	r3, [r2, #24]
 8001068:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <HAL_ADC_MspInit+0xec>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001070:	617b      	str	r3, [r7, #20]
 8001072:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <HAL_ADC_MspInit+0xec>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a17      	ldr	r2, [pc, #92]	; (80010d8 <HAL_ADC_MspInit+0xec>)
 800107a:	f043 0304 	orr.w	r3, r3, #4
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <HAL_ADC_MspInit+0xec>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 0304 	and.w	r3, r3, #4
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_ADC_MspInit+0xec>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a11      	ldr	r2, [pc, #68]	; (80010d8 <HAL_ADC_MspInit+0xec>)
 8001092:	f043 0308 	orr.w	r3, r3, #8
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <HAL_ADC_MspInit+0xec>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f003 0308 	and.w	r3, r3, #8
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MP6543H_SOA_X_Pin|MP6543H_SOB_X_Pin|MP6543H_SOC_X_Pin|MP6543H_SOA_Y_Pin;
 80010a4:	23f0      	movs	r3, #240	; 0xf0
 80010a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010a8:	2303      	movs	r3, #3
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ac:	f107 0320 	add.w	r3, r7, #32
 80010b0:	4619      	mov	r1, r3
 80010b2:	480a      	ldr	r0, [pc, #40]	; (80010dc <HAL_ADC_MspInit+0xf0>)
 80010b4:	f000 fd46 	bl	8001b44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MP6543H_SOB_Y_Pin|MP6543H_SOC_Y_Pin;
 80010b8:	2303      	movs	r3, #3
 80010ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010bc:	2303      	movs	r3, #3
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c0:	f107 0320 	add.w	r3, r7, #32
 80010c4:	4619      	mov	r1, r3
 80010c6:	4807      	ldr	r0, [pc, #28]	; (80010e4 <HAL_ADC_MspInit+0xf8>)
 80010c8:	f000 fd3c 	bl	8001b44 <HAL_GPIO_Init>
}
 80010cc:	bf00      	nop
 80010ce:	3730      	adds	r7, #48	; 0x30
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40012400 	.word	0x40012400
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40010800 	.word	0x40010800
 80010e0:	40012800 	.word	0x40012800
 80010e4:	40010c00 	.word	0x40010c00

080010e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a1d      	ldr	r2, [pc, #116]	; (8001178 <HAL_I2C_MspInit+0x90>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d132      	bne.n	800116e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001108:	4b1c      	ldr	r3, [pc, #112]	; (800117c <HAL_I2C_MspInit+0x94>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	4a1b      	ldr	r2, [pc, #108]	; (800117c <HAL_I2C_MspInit+0x94>)
 800110e:	f043 0308 	orr.w	r3, r3, #8
 8001112:	6193      	str	r3, [r2, #24]
 8001114:	4b19      	ldr	r3, [pc, #100]	; (800117c <HAL_I2C_MspInit+0x94>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	f003 0308 	and.w	r3, r3, #8
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001120:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001126:	2312      	movs	r3, #18
 8001128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800112a:	2303      	movs	r3, #3
 800112c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4619      	mov	r1, r3
 8001134:	4812      	ldr	r0, [pc, #72]	; (8001180 <HAL_I2C_MspInit+0x98>)
 8001136:	f000 fd05 	bl	8001b44 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800113a:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_I2C_MspInit+0x9c>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
 8001140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001142:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	f043 0302 	orr.w	r3, r3, #2
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
 8001150:	4a0c      	ldr	r2, [pc, #48]	; (8001184 <HAL_I2C_MspInit+0x9c>)
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <HAL_I2C_MspInit+0x94>)
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	4a08      	ldr	r2, [pc, #32]	; (800117c <HAL_I2C_MspInit+0x94>)
 800115c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001160:	61d3      	str	r3, [r2, #28]
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_I2C_MspInit+0x94>)
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800116e:	bf00      	nop
 8001170:	3728      	adds	r7, #40	; 0x28
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40005400 	.word	0x40005400
 800117c:	40021000 	.word	0x40021000
 8001180:	40010c00 	.word	0x40010c00
 8001184:	40010000 	.word	0x40010000

08001188 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a22      	ldr	r2, [pc, #136]	; (800122c <HAL_SPI_MspInit+0xa4>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d13d      	bne.n	8001224 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011a8:	4b21      	ldr	r3, [pc, #132]	; (8001230 <HAL_SPI_MspInit+0xa8>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a20      	ldr	r2, [pc, #128]	; (8001230 <HAL_SPI_MspInit+0xa8>)
 80011ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <HAL_SPI_MspInit+0xa8>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <HAL_SPI_MspInit+0xa8>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4a1a      	ldr	r2, [pc, #104]	; (8001230 <HAL_SPI_MspInit+0xa8>)
 80011c6:	f043 0308 	orr.w	r3, r3, #8
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b18      	ldr	r3, [pc, #96]	; (8001230 <HAL_SPI_MspInit+0xa8>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80011d8:	2328      	movs	r3, #40	; 0x28
 80011da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011e0:	2303      	movs	r3, #3
 80011e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	4619      	mov	r1, r3
 80011ea:	4812      	ldr	r0, [pc, #72]	; (8001234 <HAL_SPI_MspInit+0xac>)
 80011ec:	f000 fcaa 	bl	8001b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011f0:	2310      	movs	r3, #16
 80011f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4619      	mov	r1, r3
 8001202:	480c      	ldr	r0, [pc, #48]	; (8001234 <HAL_SPI_MspInit+0xac>)
 8001204:	f000 fc9e 	bl	8001b44 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001208:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <HAL_SPI_MspInit+0xb0>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
 800120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001210:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
 800121e:	4a06      	ldr	r2, [pc, #24]	; (8001238 <HAL_SPI_MspInit+0xb0>)
 8001220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001222:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001224:	bf00      	nop
 8001226:	3728      	adds	r7, #40	; 0x28
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40013000 	.word	0x40013000
 8001230:	40021000 	.word	0x40021000
 8001234:	40010c00 	.word	0x40010c00
 8001238:	40010000 	.word	0x40010000

0800123c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a09      	ldr	r2, [pc, #36]	; (8001270 <HAL_TIM_Base_MspInit+0x34>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d10b      	bne.n	8001266 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <HAL_TIM_Base_MspInit+0x38>)
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	4a08      	ldr	r2, [pc, #32]	; (8001274 <HAL_TIM_Base_MspInit+0x38>)
 8001254:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001258:	6193      	str	r3, [r2, #24]
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_TIM_Base_MspInit+0x38>)
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001266:	bf00      	nop
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr
 8001270:	40012c00 	.word	0x40012c00
 8001274:	40021000 	.word	0x40021000

08001278 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a10      	ldr	r2, [pc, #64]	; (80012d4 <HAL_TIM_MspPostInit+0x5c>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d118      	bne.n	80012ca <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001298:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <HAL_TIM_MspPostInit+0x60>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a0e      	ldr	r2, [pc, #56]	; (80012d8 <HAL_TIM_MspPostInit+0x60>)
 800129e:	f043 0304 	orr.w	r3, r3, #4
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <HAL_TIM_MspPostInit+0x60>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MP6543H_PWM_X_Pin|MP6543H_PWM_Y_Pin;
 80012b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2302      	movs	r3, #2
 80012bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012be:	f107 0310 	add.w	r3, r7, #16
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <HAL_TIM_MspPostInit+0x64>)
 80012c6:	f000 fc3d 	bl	8001b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80012ca:	bf00      	nop
 80012cc:	3720      	adds	r7, #32
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40012c00 	.word	0x40012c00
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40010800 	.word	0x40010800

080012e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 0318 	add.w	r3, r7, #24
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a37      	ldr	r2, [pc, #220]	; (80013d8 <HAL_UART_MspInit+0xf8>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d130      	bne.n	8001362 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001300:	4b36      	ldr	r3, [pc, #216]	; (80013dc <HAL_UART_MspInit+0xfc>)
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	4a35      	ldr	r2, [pc, #212]	; (80013dc <HAL_UART_MspInit+0xfc>)
 8001306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800130a:	61d3      	str	r3, [r2, #28]
 800130c:	4b33      	ldr	r3, [pc, #204]	; (80013dc <HAL_UART_MspInit+0xfc>)
 800130e:	69db      	ldr	r3, [r3, #28]
 8001310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001318:	4b30      	ldr	r3, [pc, #192]	; (80013dc <HAL_UART_MspInit+0xfc>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4a2f      	ldr	r2, [pc, #188]	; (80013dc <HAL_UART_MspInit+0xfc>)
 800131e:	f043 0304 	orr.w	r3, r3, #4
 8001322:	6193      	str	r3, [r2, #24]
 8001324:	4b2d      	ldr	r3, [pc, #180]	; (80013dc <HAL_UART_MspInit+0xfc>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001330:	2304      	movs	r3, #4
 8001332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	2302      	movs	r3, #2
 8001336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001338:	2303      	movs	r3, #3
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133c:	f107 0318 	add.w	r3, r7, #24
 8001340:	4619      	mov	r1, r3
 8001342:	4827      	ldr	r0, [pc, #156]	; (80013e0 <HAL_UART_MspInit+0x100>)
 8001344:	f000 fbfe 	bl	8001b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001348:	2308      	movs	r3, #8
 800134a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001354:	f107 0318 	add.w	r3, r7, #24
 8001358:	4619      	mov	r1, r3
 800135a:	4821      	ldr	r0, [pc, #132]	; (80013e0 <HAL_UART_MspInit+0x100>)
 800135c:	f000 fbf2 	bl	8001b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001360:	e036      	b.n	80013d0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a1f      	ldr	r2, [pc, #124]	; (80013e4 <HAL_UART_MspInit+0x104>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d131      	bne.n	80013d0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800136c:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <HAL_UART_MspInit+0xfc>)
 800136e:	69db      	ldr	r3, [r3, #28]
 8001370:	4a1a      	ldr	r2, [pc, #104]	; (80013dc <HAL_UART_MspInit+0xfc>)
 8001372:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001376:	61d3      	str	r3, [r2, #28]
 8001378:	4b18      	ldr	r3, [pc, #96]	; (80013dc <HAL_UART_MspInit+0xfc>)
 800137a:	69db      	ldr	r3, [r3, #28]
 800137c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001384:	4b15      	ldr	r3, [pc, #84]	; (80013dc <HAL_UART_MspInit+0xfc>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	4a14      	ldr	r2, [pc, #80]	; (80013dc <HAL_UART_MspInit+0xfc>)
 800138a:	f043 0308 	orr.w	r3, r3, #8
 800138e:	6193      	str	r3, [r2, #24]
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_UART_MspInit+0xfc>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	f003 0308 	and.w	r3, r3, #8
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800139c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013aa:	f107 0318 	add.w	r3, r7, #24
 80013ae:	4619      	mov	r1, r3
 80013b0:	480d      	ldr	r0, [pc, #52]	; (80013e8 <HAL_UART_MspInit+0x108>)
 80013b2:	f000 fbc7 	bl	8001b44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c4:	f107 0318 	add.w	r3, r7, #24
 80013c8:	4619      	mov	r1, r3
 80013ca:	4807      	ldr	r0, [pc, #28]	; (80013e8 <HAL_UART_MspInit+0x108>)
 80013cc:	f000 fbba 	bl	8001b44 <HAL_GPIO_Init>
}
 80013d0:	bf00      	nop
 80013d2:	3728      	adds	r7, #40	; 0x28
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40004400 	.word	0x40004400
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40010800 	.word	0x40010800
 80013e4:	40004800 	.word	0x40004800
 80013e8:	40010c00 	.word	0x40010c00

080013ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <NMI_Handler+0x4>

080013f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f6:	e7fe      	b.n	80013f6 <HardFault_Handler+0x4>

080013f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <MemManage_Handler+0x4>

080013fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001402:	e7fe      	b.n	8001402 <BusFault_Handler+0x4>

08001404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001408:	e7fe      	b.n	8001408 <UsageFault_Handler+0x4>

0800140a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr

08001416 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr

08001422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr

0800142e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001432:	f000 f875 	bl	8001520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}

0800143a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr
	...

08001448 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001448:	480c      	ldr	r0, [pc, #48]	; (800147c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800144a:	490d      	ldr	r1, [pc, #52]	; (8001480 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800144c:	4a0d      	ldr	r2, [pc, #52]	; (8001484 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001450:	e002      	b.n	8001458 <LoopCopyDataInit>

08001452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001456:	3304      	adds	r3, #4

08001458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800145c:	d3f9      	bcc.n	8001452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145e:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001460:	4c0a      	ldr	r4, [pc, #40]	; (800148c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001464:	e001      	b.n	800146a <LoopFillZerobss>

08001466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001468:	3204      	adds	r2, #4

0800146a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800146c:	d3fb      	bcc.n	8001466 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800146e:	f7ff ffe4 	bl	800143a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001472:	f003 fa0b 	bl	800488c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001476:	f7ff f935 	bl	80006e4 <main>
  bx lr
 800147a:	4770      	bx	lr
  ldr r0, =_sdata
 800147c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001480:	200002dc 	.word	0x200002dc
  ldr r2, =_sidata
 8001484:	0800492c 	.word	0x0800492c
  ldr r2, =_sbss
 8001488:	200002dc 	.word	0x200002dc
  ldr r4, =_ebss
 800148c:	2000052c 	.word	0x2000052c

08001490 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001490:	e7fe      	b.n	8001490 <ADC1_2_IRQHandler>
	...

08001494 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <HAL_Init+0x28>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a07      	ldr	r2, [pc, #28]	; (80014bc <HAL_Init+0x28>)
 800149e:	f043 0310 	orr.w	r3, r3, #16
 80014a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a4:	2003      	movs	r0, #3
 80014a6:	f000 fb19 	bl	8001adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014aa:	200f      	movs	r0, #15
 80014ac:	f000 f808 	bl	80014c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b0:	f7ff fd6a 	bl	8000f88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40022000 	.word	0x40022000

080014c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_InitTick+0x54>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_InitTick+0x58>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4619      	mov	r1, r3
 80014d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014da:	fbb2 f3f3 	udiv	r3, r2, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 fb23 	bl	8001b2a <HAL_SYSTICK_Config>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e00e      	b.n	800150c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b0f      	cmp	r3, #15
 80014f2:	d80a      	bhi.n	800150a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f4:	2200      	movs	r2, #0
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295
 80014fc:	f000 faf9 	bl	8001af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001500:	4a06      	ldr	r2, [pc, #24]	; (800151c <HAL_InitTick+0x5c>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	e000      	b.n	800150c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
}
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200002d0 	.word	0x200002d0
 8001518:	200002d8 	.word	0x200002d8
 800151c:	200002d4 	.word	0x200002d4

08001520 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <HAL_IncTick+0x1c>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <HAL_IncTick+0x20>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4413      	add	r3, r2
 8001530:	4a03      	ldr	r2, [pc, #12]	; (8001540 <HAL_IncTick+0x20>)
 8001532:	6013      	str	r3, [r2, #0]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	200002d8 	.word	0x200002d8
 8001540:	200004d4 	.word	0x200004d4

08001544 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return uwTick;
 8001548:	4b02      	ldr	r3, [pc, #8]	; (8001554 <HAL_GetTick+0x10>)
 800154a:	681b      	ldr	r3, [r3, #0]
}
 800154c:	4618      	mov	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	200004d4 	.word	0x200004d4

08001558 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001560:	2300      	movs	r3, #0
 8001562:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001564:	2300      	movs	r3, #0
 8001566:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001568:	2300      	movs	r3, #0
 800156a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e0be      	b.n	80016f8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001584:	2b00      	cmp	r3, #0
 8001586:	d109      	bne.n	800159c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff fd28 	bl	8000fec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f000 f9ab 	bl	80018f8 <ADC_ConversionStop_Disable>
 80015a2:	4603      	mov	r3, r0
 80015a4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015aa:	f003 0310 	and.w	r3, r3, #16
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f040 8099 	bne.w	80016e6 <HAL_ADC_Init+0x18e>
 80015b4:	7dfb      	ldrb	r3, [r7, #23]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f040 8095 	bne.w	80016e6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015c4:	f023 0302 	bic.w	r3, r3, #2
 80015c8:	f043 0202 	orr.w	r2, r3, #2
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015d8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	7b1b      	ldrb	r3, [r3, #12]
 80015de:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80015e0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015f0:	d003      	beq.n	80015fa <HAL_ADC_Init+0xa2>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d102      	bne.n	8001600 <HAL_ADC_Init+0xa8>
 80015fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015fe:	e000      	b.n	8001602 <HAL_ADC_Init+0xaa>
 8001600:	2300      	movs	r3, #0
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	7d1b      	ldrb	r3, [r3, #20]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d119      	bne.n	8001644 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	7b1b      	ldrb	r3, [r3, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d109      	bne.n	800162c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	3b01      	subs	r3, #1
 800161e:	035a      	lsls	r2, r3, #13
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4313      	orrs	r3, r2
 8001624:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	e00b      	b.n	8001644 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001630:	f043 0220 	orr.w	r2, r3, #32
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163c:	f043 0201 	orr.w	r2, r3, #1
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	430a      	orrs	r2, r1
 8001656:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	689a      	ldr	r2, [r3, #8]
 800165e:	4b28      	ldr	r3, [pc, #160]	; (8001700 <HAL_ADC_Init+0x1a8>)
 8001660:	4013      	ands	r3, r2
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6812      	ldr	r2, [r2, #0]
 8001666:	68b9      	ldr	r1, [r7, #8]
 8001668:	430b      	orrs	r3, r1
 800166a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001674:	d003      	beq.n	800167e <HAL_ADC_Init+0x126>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d104      	bne.n	8001688 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	3b01      	subs	r3, #1
 8001684:	051b      	lsls	r3, r3, #20
 8001686:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	430a      	orrs	r2, r1
 800169a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	4b18      	ldr	r3, [pc, #96]	; (8001704 <HAL_ADC_Init+0x1ac>)
 80016a4:	4013      	ands	r3, r2
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d10b      	bne.n	80016c4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b6:	f023 0303 	bic.w	r3, r3, #3
 80016ba:	f043 0201 	orr.w	r2, r3, #1
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016c2:	e018      	b.n	80016f6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c8:	f023 0312 	bic.w	r3, r3, #18
 80016cc:	f043 0210 	orr.w	r2, r3, #16
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d8:	f043 0201 	orr.w	r2, r3, #1
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016e4:	e007      	b.n	80016f6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ea:	f043 0210 	orr.w	r2, r3, #16
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	ffe1f7fd 	.word	0xffe1f7fd
 8001704:	ff1f0efe 	.word	0xff1f0efe

08001708 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001716:	2300      	movs	r3, #0
 8001718:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001720:	2b01      	cmp	r3, #1
 8001722:	d101      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x20>
 8001724:	2302      	movs	r3, #2
 8001726:	e0dc      	b.n	80018e2 <HAL_ADC_ConfigChannel+0x1da>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b06      	cmp	r3, #6
 8001736:	d81c      	bhi.n	8001772 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	3b05      	subs	r3, #5
 800174a:	221f      	movs	r2, #31
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	4019      	ands	r1, r3
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	6818      	ldr	r0, [r3, #0]
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	3b05      	subs	r3, #5
 8001764:	fa00 f203 	lsl.w	r2, r0, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	635a      	str	r2, [r3, #52]	; 0x34
 8001770:	e03c      	b.n	80017ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b0c      	cmp	r3, #12
 8001778:	d81c      	bhi.n	80017b4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	3b23      	subs	r3, #35	; 0x23
 800178c:	221f      	movs	r2, #31
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	4019      	ands	r1, r3
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	6818      	ldr	r0, [r3, #0]
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	3b23      	subs	r3, #35	; 0x23
 80017a6:	fa00 f203 	lsl.w	r2, r0, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	631a      	str	r2, [r3, #48]	; 0x30
 80017b2:	e01b      	b.n	80017ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	3b41      	subs	r3, #65	; 0x41
 80017c6:	221f      	movs	r2, #31
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	4019      	ands	r1, r3
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	6818      	ldr	r0, [r3, #0]
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	3b41      	subs	r3, #65	; 0x41
 80017e0:	fa00 f203 	lsl.w	r2, r0, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b09      	cmp	r3, #9
 80017f2:	d91c      	bls.n	800182e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68d9      	ldr	r1, [r3, #12]
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	4613      	mov	r3, r2
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	4413      	add	r3, r2
 8001804:	3b1e      	subs	r3, #30
 8001806:	2207      	movs	r2, #7
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	4019      	ands	r1, r3
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	6898      	ldr	r0, [r3, #8]
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4613      	mov	r3, r2
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	4413      	add	r3, r2
 800181e:	3b1e      	subs	r3, #30
 8001820:	fa00 f203 	lsl.w	r2, r0, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	60da      	str	r2, [r3, #12]
 800182c:	e019      	b.n	8001862 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6919      	ldr	r1, [r3, #16]
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4613      	mov	r3, r2
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4413      	add	r3, r2
 800183e:	2207      	movs	r2, #7
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	4019      	ands	r1, r3
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	6898      	ldr	r0, [r3, #8]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4613      	mov	r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	fa00 f203 	lsl.w	r2, r0, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b10      	cmp	r3, #16
 8001868:	d003      	beq.n	8001872 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800186e:	2b11      	cmp	r3, #17
 8001870:	d132      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a1d      	ldr	r2, [pc, #116]	; (80018ec <HAL_ADC_ConfigChannel+0x1e4>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d125      	bne.n	80018c8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d126      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001898:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b10      	cmp	r3, #16
 80018a0:	d11a      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018a2:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <HAL_ADC_ConfigChannel+0x1e8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a13      	ldr	r2, [pc, #76]	; (80018f4 <HAL_ADC_ConfigChannel+0x1ec>)
 80018a8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ac:	0c9a      	lsrs	r2, r3, #18
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018b8:	e002      	b.n	80018c0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	3b01      	subs	r3, #1
 80018be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f9      	bne.n	80018ba <HAL_ADC_ConfigChannel+0x1b2>
 80018c6:	e007      	b.n	80018d8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018cc:	f043 0220 	orr.w	r2, r3, #32
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	40012400 	.word	0x40012400
 80018f0:	200002d0 	.word	0x200002d0
 80018f4:	431bde83 	.word	0x431bde83

080018f8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b01      	cmp	r3, #1
 8001910:	d12e      	bne.n	8001970 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f022 0201 	bic.w	r2, r2, #1
 8001920:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001922:	f7ff fe0f 	bl	8001544 <HAL_GetTick>
 8001926:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001928:	e01b      	b.n	8001962 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800192a:	f7ff fe0b 	bl	8001544 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d914      	bls.n	8001962 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b01      	cmp	r3, #1
 8001944:	d10d      	bne.n	8001962 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194a:	f043 0210 	orr.w	r2, r3, #16
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001956:	f043 0201 	orr.w	r2, r3, #1
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e007      	b.n	8001972 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b01      	cmp	r3, #1
 800196e:	d0dc      	beq.n	800192a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <__NVIC_SetPriorityGrouping+0x44>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001998:	4013      	ands	r3, r2
 800199a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ae:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <__NVIC_SetPriorityGrouping+0x44>)
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	60d3      	str	r3, [r2, #12]
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c8:	4b04      	ldr	r3, [pc, #16]	; (80019dc <__NVIC_GetPriorityGrouping+0x18>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	0a1b      	lsrs	r3, r3, #8
 80019ce:	f003 0307 	and.w	r3, r3, #7
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	6039      	str	r1, [r7, #0]
 80019ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	db0a      	blt.n	8001a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	490c      	ldr	r1, [pc, #48]	; (8001a2c <__NVIC_SetPriority+0x4c>)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	0112      	lsls	r2, r2, #4
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	440b      	add	r3, r1
 8001a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a08:	e00a      	b.n	8001a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4908      	ldr	r1, [pc, #32]	; (8001a30 <__NVIC_SetPriority+0x50>)
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	f003 030f 	and.w	r3, r3, #15
 8001a16:	3b04      	subs	r3, #4
 8001a18:	0112      	lsls	r2, r2, #4
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	761a      	strb	r2, [r3, #24]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000e100 	.word	0xe000e100
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b089      	sub	sp, #36	; 0x24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f1c3 0307 	rsb	r3, r3, #7
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	bf28      	it	cs
 8001a52:	2304      	movcs	r3, #4
 8001a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	2b06      	cmp	r3, #6
 8001a5c:	d902      	bls.n	8001a64 <NVIC_EncodePriority+0x30>
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3b03      	subs	r3, #3
 8001a62:	e000      	b.n	8001a66 <NVIC_EncodePriority+0x32>
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	f04f 32ff 	mov.w	r2, #4294967295
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43da      	mvns	r2, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	401a      	ands	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	fa01 f303 	lsl.w	r3, r1, r3
 8001a86:	43d9      	mvns	r1, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	4313      	orrs	r3, r2
         );
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3724      	adds	r7, #36	; 0x24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr

08001a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aa8:	d301      	bcc.n	8001aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e00f      	b.n	8001ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aae:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <SysTick_Config+0x40>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ab6:	210f      	movs	r1, #15
 8001ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8001abc:	f7ff ff90 	bl	80019e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <SysTick_Config+0x40>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac6:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <SysTick_Config+0x40>)
 8001ac8:	2207      	movs	r2, #7
 8001aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	e000e010 	.word	0xe000e010

08001adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff ff49 	bl	800197c <__NVIC_SetPriorityGrouping>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4603      	mov	r3, r0
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b04:	f7ff ff5e 	bl	80019c4 <__NVIC_GetPriorityGrouping>
 8001b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	68b9      	ldr	r1, [r7, #8]
 8001b0e:	6978      	ldr	r0, [r7, #20]
 8001b10:	f7ff ff90 	bl	8001a34 <NVIC_EncodePriority>
 8001b14:	4602      	mov	r2, r0
 8001b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff5f 	bl	80019e0 <__NVIC_SetPriority>
}
 8001b22:	bf00      	nop
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff ffb0 	bl	8001a98 <SysTick_Config>
 8001b38:	4603      	mov	r3, r0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b08b      	sub	sp, #44	; 0x2c
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b52:	2300      	movs	r3, #0
 8001b54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b56:	e169      	b.n	8001e2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	69fa      	ldr	r2, [r7, #28]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	f040 8158 	bne.w	8001e26 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	4a9a      	ldr	r2, [pc, #616]	; (8001de4 <HAL_GPIO_Init+0x2a0>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d05e      	beq.n	8001c3e <HAL_GPIO_Init+0xfa>
 8001b80:	4a98      	ldr	r2, [pc, #608]	; (8001de4 <HAL_GPIO_Init+0x2a0>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d875      	bhi.n	8001c72 <HAL_GPIO_Init+0x12e>
 8001b86:	4a98      	ldr	r2, [pc, #608]	; (8001de8 <HAL_GPIO_Init+0x2a4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d058      	beq.n	8001c3e <HAL_GPIO_Init+0xfa>
 8001b8c:	4a96      	ldr	r2, [pc, #600]	; (8001de8 <HAL_GPIO_Init+0x2a4>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d86f      	bhi.n	8001c72 <HAL_GPIO_Init+0x12e>
 8001b92:	4a96      	ldr	r2, [pc, #600]	; (8001dec <HAL_GPIO_Init+0x2a8>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d052      	beq.n	8001c3e <HAL_GPIO_Init+0xfa>
 8001b98:	4a94      	ldr	r2, [pc, #592]	; (8001dec <HAL_GPIO_Init+0x2a8>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d869      	bhi.n	8001c72 <HAL_GPIO_Init+0x12e>
 8001b9e:	4a94      	ldr	r2, [pc, #592]	; (8001df0 <HAL_GPIO_Init+0x2ac>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d04c      	beq.n	8001c3e <HAL_GPIO_Init+0xfa>
 8001ba4:	4a92      	ldr	r2, [pc, #584]	; (8001df0 <HAL_GPIO_Init+0x2ac>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d863      	bhi.n	8001c72 <HAL_GPIO_Init+0x12e>
 8001baa:	4a92      	ldr	r2, [pc, #584]	; (8001df4 <HAL_GPIO_Init+0x2b0>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d046      	beq.n	8001c3e <HAL_GPIO_Init+0xfa>
 8001bb0:	4a90      	ldr	r2, [pc, #576]	; (8001df4 <HAL_GPIO_Init+0x2b0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d85d      	bhi.n	8001c72 <HAL_GPIO_Init+0x12e>
 8001bb6:	2b12      	cmp	r3, #18
 8001bb8:	d82a      	bhi.n	8001c10 <HAL_GPIO_Init+0xcc>
 8001bba:	2b12      	cmp	r3, #18
 8001bbc:	d859      	bhi.n	8001c72 <HAL_GPIO_Init+0x12e>
 8001bbe:	a201      	add	r2, pc, #4	; (adr r2, 8001bc4 <HAL_GPIO_Init+0x80>)
 8001bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc4:	08001c3f 	.word	0x08001c3f
 8001bc8:	08001c19 	.word	0x08001c19
 8001bcc:	08001c2b 	.word	0x08001c2b
 8001bd0:	08001c6d 	.word	0x08001c6d
 8001bd4:	08001c73 	.word	0x08001c73
 8001bd8:	08001c73 	.word	0x08001c73
 8001bdc:	08001c73 	.word	0x08001c73
 8001be0:	08001c73 	.word	0x08001c73
 8001be4:	08001c73 	.word	0x08001c73
 8001be8:	08001c73 	.word	0x08001c73
 8001bec:	08001c73 	.word	0x08001c73
 8001bf0:	08001c73 	.word	0x08001c73
 8001bf4:	08001c73 	.word	0x08001c73
 8001bf8:	08001c73 	.word	0x08001c73
 8001bfc:	08001c73 	.word	0x08001c73
 8001c00:	08001c73 	.word	0x08001c73
 8001c04:	08001c73 	.word	0x08001c73
 8001c08:	08001c21 	.word	0x08001c21
 8001c0c:	08001c35 	.word	0x08001c35
 8001c10:	4a79      	ldr	r2, [pc, #484]	; (8001df8 <HAL_GPIO_Init+0x2b4>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d013      	beq.n	8001c3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c16:	e02c      	b.n	8001c72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	623b      	str	r3, [r7, #32]
          break;
 8001c1e:	e029      	b.n	8001c74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	3304      	adds	r3, #4
 8001c26:	623b      	str	r3, [r7, #32]
          break;
 8001c28:	e024      	b.n	8001c74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	3308      	adds	r3, #8
 8001c30:	623b      	str	r3, [r7, #32]
          break;
 8001c32:	e01f      	b.n	8001c74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	330c      	adds	r3, #12
 8001c3a:	623b      	str	r3, [r7, #32]
          break;
 8001c3c:	e01a      	b.n	8001c74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d102      	bne.n	8001c4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c46:	2304      	movs	r3, #4
 8001c48:	623b      	str	r3, [r7, #32]
          break;
 8001c4a:	e013      	b.n	8001c74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d105      	bne.n	8001c60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c54:	2308      	movs	r3, #8
 8001c56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69fa      	ldr	r2, [r7, #28]
 8001c5c:	611a      	str	r2, [r3, #16]
          break;
 8001c5e:	e009      	b.n	8001c74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c60:	2308      	movs	r3, #8
 8001c62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	69fa      	ldr	r2, [r7, #28]
 8001c68:	615a      	str	r2, [r3, #20]
          break;
 8001c6a:	e003      	b.n	8001c74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	623b      	str	r3, [r7, #32]
          break;
 8001c70:	e000      	b.n	8001c74 <HAL_GPIO_Init+0x130>
          break;
 8001c72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	2bff      	cmp	r3, #255	; 0xff
 8001c78:	d801      	bhi.n	8001c7e <HAL_GPIO_Init+0x13a>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	e001      	b.n	8001c82 <HAL_GPIO_Init+0x13e>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3304      	adds	r3, #4
 8001c82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	2bff      	cmp	r3, #255	; 0xff
 8001c88:	d802      	bhi.n	8001c90 <HAL_GPIO_Init+0x14c>
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	e002      	b.n	8001c96 <HAL_GPIO_Init+0x152>
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	3b08      	subs	r3, #8
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	210f      	movs	r1, #15
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	6a39      	ldr	r1, [r7, #32]
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f000 80b1 	beq.w	8001e26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cc4:	4b4d      	ldr	r3, [pc, #308]	; (8001dfc <HAL_GPIO_Init+0x2b8>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	4a4c      	ldr	r2, [pc, #304]	; (8001dfc <HAL_GPIO_Init+0x2b8>)
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	6193      	str	r3, [r2, #24]
 8001cd0:	4b4a      	ldr	r3, [pc, #296]	; (8001dfc <HAL_GPIO_Init+0x2b8>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cdc:	4a48      	ldr	r2, [pc, #288]	; (8001e00 <HAL_GPIO_Init+0x2bc>)
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	089b      	lsrs	r3, r3, #2
 8001ce2:	3302      	adds	r3, #2
 8001ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	220f      	movs	r2, #15
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a40      	ldr	r2, [pc, #256]	; (8001e04 <HAL_GPIO_Init+0x2c0>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d013      	beq.n	8001d30 <HAL_GPIO_Init+0x1ec>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a3f      	ldr	r2, [pc, #252]	; (8001e08 <HAL_GPIO_Init+0x2c4>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d00d      	beq.n	8001d2c <HAL_GPIO_Init+0x1e8>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a3e      	ldr	r2, [pc, #248]	; (8001e0c <HAL_GPIO_Init+0x2c8>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d007      	beq.n	8001d28 <HAL_GPIO_Init+0x1e4>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a3d      	ldr	r2, [pc, #244]	; (8001e10 <HAL_GPIO_Init+0x2cc>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d101      	bne.n	8001d24 <HAL_GPIO_Init+0x1e0>
 8001d20:	2303      	movs	r3, #3
 8001d22:	e006      	b.n	8001d32 <HAL_GPIO_Init+0x1ee>
 8001d24:	2304      	movs	r3, #4
 8001d26:	e004      	b.n	8001d32 <HAL_GPIO_Init+0x1ee>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e002      	b.n	8001d32 <HAL_GPIO_Init+0x1ee>
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e000      	b.n	8001d32 <HAL_GPIO_Init+0x1ee>
 8001d30:	2300      	movs	r3, #0
 8001d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d34:	f002 0203 	and.w	r2, r2, #3
 8001d38:	0092      	lsls	r2, r2, #2
 8001d3a:	4093      	lsls	r3, r2
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d42:	492f      	ldr	r1, [pc, #188]	; (8001e00 <HAL_GPIO_Init+0x2bc>)
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	089b      	lsrs	r3, r3, #2
 8001d48:	3302      	adds	r3, #2
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d006      	beq.n	8001d6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d5c:	4b2d      	ldr	r3, [pc, #180]	; (8001e14 <HAL_GPIO_Init+0x2d0>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	492c      	ldr	r1, [pc, #176]	; (8001e14 <HAL_GPIO_Init+0x2d0>)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	600b      	str	r3, [r1, #0]
 8001d68:	e006      	b.n	8001d78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d6a:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <HAL_GPIO_Init+0x2d0>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	43db      	mvns	r3, r3
 8001d72:	4928      	ldr	r1, [pc, #160]	; (8001e14 <HAL_GPIO_Init+0x2d0>)
 8001d74:	4013      	ands	r3, r2
 8001d76:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d006      	beq.n	8001d92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d84:	4b23      	ldr	r3, [pc, #140]	; (8001e14 <HAL_GPIO_Init+0x2d0>)
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	4922      	ldr	r1, [pc, #136]	; (8001e14 <HAL_GPIO_Init+0x2d0>)
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	604b      	str	r3, [r1, #4]
 8001d90:	e006      	b.n	8001da0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d92:	4b20      	ldr	r3, [pc, #128]	; (8001e14 <HAL_GPIO_Init+0x2d0>)
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	491e      	ldr	r1, [pc, #120]	; (8001e14 <HAL_GPIO_Init+0x2d0>)
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d006      	beq.n	8001dba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dac:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <HAL_GPIO_Init+0x2d0>)
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	4918      	ldr	r1, [pc, #96]	; (8001e14 <HAL_GPIO_Init+0x2d0>)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	608b      	str	r3, [r1, #8]
 8001db8:	e006      	b.n	8001dc8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dba:	4b16      	ldr	r3, [pc, #88]	; (8001e14 <HAL_GPIO_Init+0x2d0>)
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	4914      	ldr	r1, [pc, #80]	; (8001e14 <HAL_GPIO_Init+0x2d0>)
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d021      	beq.n	8001e18 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dd4:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <HAL_GPIO_Init+0x2d0>)
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	490e      	ldr	r1, [pc, #56]	; (8001e14 <HAL_GPIO_Init+0x2d0>)
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	60cb      	str	r3, [r1, #12]
 8001de0:	e021      	b.n	8001e26 <HAL_GPIO_Init+0x2e2>
 8001de2:	bf00      	nop
 8001de4:	10320000 	.word	0x10320000
 8001de8:	10310000 	.word	0x10310000
 8001dec:	10220000 	.word	0x10220000
 8001df0:	10210000 	.word	0x10210000
 8001df4:	10120000 	.word	0x10120000
 8001df8:	10110000 	.word	0x10110000
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40010000 	.word	0x40010000
 8001e04:	40010800 	.word	0x40010800
 8001e08:	40010c00 	.word	0x40010c00
 8001e0c:	40011000 	.word	0x40011000
 8001e10:	40011400 	.word	0x40011400
 8001e14:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <HAL_GPIO_Init+0x304>)
 8001e1a:	68da      	ldr	r2, [r3, #12]
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	4909      	ldr	r1, [pc, #36]	; (8001e48 <HAL_GPIO_Init+0x304>)
 8001e22:	4013      	ands	r3, r2
 8001e24:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	3301      	adds	r3, #1
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	fa22 f303 	lsr.w	r3, r2, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f47f ae8e 	bne.w	8001b58 <HAL_GPIO_Init+0x14>
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	bf00      	nop
 8001e40:	372c      	adds	r7, #44	; 0x2c
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr
 8001e48:	40010400 	.word	0x40010400

08001e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	807b      	strh	r3, [r7, #2]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e5c:	787b      	ldrb	r3, [r7, #1]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e62:	887a      	ldrh	r2, [r7, #2]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e68:	e003      	b.n	8001e72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e6a:	887b      	ldrh	r3, [r7, #2]
 8001e6c:	041a      	lsls	r2, r3, #16
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	611a      	str	r2, [r3, #16]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e12b      	b.n	80020e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d106      	bne.n	8001ea8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff f920 	bl	80010e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2224      	movs	r2, #36	; 0x24
 8001eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 0201 	bic.w	r2, r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ece:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ede:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ee0:	f000 fce4 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 8001ee4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	4a81      	ldr	r2, [pc, #516]	; (80020f0 <HAL_I2C_Init+0x274>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d807      	bhi.n	8001f00 <HAL_I2C_Init+0x84>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4a80      	ldr	r2, [pc, #512]	; (80020f4 <HAL_I2C_Init+0x278>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	bf94      	ite	ls
 8001ef8:	2301      	movls	r3, #1
 8001efa:	2300      	movhi	r3, #0
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	e006      	b.n	8001f0e <HAL_I2C_Init+0x92>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	4a7d      	ldr	r2, [pc, #500]	; (80020f8 <HAL_I2C_Init+0x27c>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	bf94      	ite	ls
 8001f08:	2301      	movls	r3, #1
 8001f0a:	2300      	movhi	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e0e7      	b.n	80020e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4a78      	ldr	r2, [pc, #480]	; (80020fc <HAL_I2C_Init+0x280>)
 8001f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1e:	0c9b      	lsrs	r3, r3, #18
 8001f20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68ba      	ldr	r2, [r7, #8]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	4a6a      	ldr	r2, [pc, #424]	; (80020f0 <HAL_I2C_Init+0x274>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d802      	bhi.n	8001f50 <HAL_I2C_Init+0xd4>
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	e009      	b.n	8001f64 <HAL_I2C_Init+0xe8>
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f56:	fb02 f303 	mul.w	r3, r2, r3
 8001f5a:	4a69      	ldr	r2, [pc, #420]	; (8002100 <HAL_I2C_Init+0x284>)
 8001f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f60:	099b      	lsrs	r3, r3, #6
 8001f62:	3301      	adds	r3, #1
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	430b      	orrs	r3, r1
 8001f6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	495c      	ldr	r1, [pc, #368]	; (80020f0 <HAL_I2C_Init+0x274>)
 8001f80:	428b      	cmp	r3, r1
 8001f82:	d819      	bhi.n	8001fb8 <HAL_I2C_Init+0x13c>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	1e59      	subs	r1, r3, #1
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f92:	1c59      	adds	r1, r3, #1
 8001f94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f98:	400b      	ands	r3, r1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00a      	beq.n	8001fb4 <HAL_I2C_Init+0x138>
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	1e59      	subs	r1, r3, #1
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fac:	3301      	adds	r3, #1
 8001fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb2:	e051      	b.n	8002058 <HAL_I2C_Init+0x1dc>
 8001fb4:	2304      	movs	r3, #4
 8001fb6:	e04f      	b.n	8002058 <HAL_I2C_Init+0x1dc>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d111      	bne.n	8001fe4 <HAL_I2C_Init+0x168>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	1e58      	subs	r0, r3, #1
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6859      	ldr	r1, [r3, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	440b      	add	r3, r1
 8001fce:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	bf0c      	ite	eq
 8001fdc:	2301      	moveq	r3, #1
 8001fde:	2300      	movne	r3, #0
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	e012      	b.n	800200a <HAL_I2C_Init+0x18e>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	1e58      	subs	r0, r3, #1
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6859      	ldr	r1, [r3, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	0099      	lsls	r1, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002000:	2b00      	cmp	r3, #0
 8002002:	bf0c      	ite	eq
 8002004:	2301      	moveq	r3, #1
 8002006:	2300      	movne	r3, #0
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_I2C_Init+0x196>
 800200e:	2301      	movs	r3, #1
 8002010:	e022      	b.n	8002058 <HAL_I2C_Init+0x1dc>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10e      	bne.n	8002038 <HAL_I2C_Init+0x1bc>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	1e58      	subs	r0, r3, #1
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6859      	ldr	r1, [r3, #4]
 8002022:	460b      	mov	r3, r1
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	440b      	add	r3, r1
 8002028:	fbb0 f3f3 	udiv	r3, r0, r3
 800202c:	3301      	adds	r3, #1
 800202e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002036:	e00f      	b.n	8002058 <HAL_I2C_Init+0x1dc>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	1e58      	subs	r0, r3, #1
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6859      	ldr	r1, [r3, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	440b      	add	r3, r1
 8002046:	0099      	lsls	r1, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	fbb0 f3f3 	udiv	r3, r0, r3
 800204e:	3301      	adds	r3, #1
 8002050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002054:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	6809      	ldr	r1, [r1, #0]
 800205c:	4313      	orrs	r3, r2
 800205e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69da      	ldr	r2, [r3, #28]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002086:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6911      	ldr	r1, [r2, #16]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	68d2      	ldr	r2, [r2, #12]
 8002092:	4311      	orrs	r1, r2
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	6812      	ldr	r2, [r2, #0]
 8002098:	430b      	orrs	r3, r1
 800209a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695a      	ldr	r2, [r3, #20]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	430a      	orrs	r2, r1
 80020b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 0201 	orr.w	r2, r2, #1
 80020c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2220      	movs	r2, #32
 80020d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	000186a0 	.word	0x000186a0
 80020f4:	001e847f 	.word	0x001e847f
 80020f8:	003d08ff 	.word	0x003d08ff
 80020fc:	431bde83 	.word	0x431bde83
 8002100:	10624dd3 	.word	0x10624dd3

08002104 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e272      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 8087 	beq.w	8002232 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002124:	4b92      	ldr	r3, [pc, #584]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 030c 	and.w	r3, r3, #12
 800212c:	2b04      	cmp	r3, #4
 800212e:	d00c      	beq.n	800214a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002130:	4b8f      	ldr	r3, [pc, #572]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 030c 	and.w	r3, r3, #12
 8002138:	2b08      	cmp	r3, #8
 800213a:	d112      	bne.n	8002162 <HAL_RCC_OscConfig+0x5e>
 800213c:	4b8c      	ldr	r3, [pc, #560]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002148:	d10b      	bne.n	8002162 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800214a:	4b89      	ldr	r3, [pc, #548]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d06c      	beq.n	8002230 <HAL_RCC_OscConfig+0x12c>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d168      	bne.n	8002230 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e24c      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800216a:	d106      	bne.n	800217a <HAL_RCC_OscConfig+0x76>
 800216c:	4b80      	ldr	r3, [pc, #512]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a7f      	ldr	r2, [pc, #508]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	e02e      	b.n	80021d8 <HAL_RCC_OscConfig+0xd4>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10c      	bne.n	800219c <HAL_RCC_OscConfig+0x98>
 8002182:	4b7b      	ldr	r3, [pc, #492]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a7a      	ldr	r2, [pc, #488]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002188:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	4b78      	ldr	r3, [pc, #480]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a77      	ldr	r2, [pc, #476]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002194:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	e01d      	b.n	80021d8 <HAL_RCC_OscConfig+0xd4>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021a4:	d10c      	bne.n	80021c0 <HAL_RCC_OscConfig+0xbc>
 80021a6:	4b72      	ldr	r3, [pc, #456]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a71      	ldr	r2, [pc, #452]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	4b6f      	ldr	r3, [pc, #444]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a6e      	ldr	r2, [pc, #440]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	e00b      	b.n	80021d8 <HAL_RCC_OscConfig+0xd4>
 80021c0:	4b6b      	ldr	r3, [pc, #428]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a6a      	ldr	r2, [pc, #424]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ca:	6013      	str	r3, [r2, #0]
 80021cc:	4b68      	ldr	r3, [pc, #416]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a67      	ldr	r2, [pc, #412]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d013      	beq.n	8002208 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e0:	f7ff f9b0 	bl	8001544 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e8:	f7ff f9ac 	bl	8001544 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b64      	cmp	r3, #100	; 0x64
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e200      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fa:	4b5d      	ldr	r3, [pc, #372]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f0      	beq.n	80021e8 <HAL_RCC_OscConfig+0xe4>
 8002206:	e014      	b.n	8002232 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7ff f99c 	bl	8001544 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002210:	f7ff f998 	bl	8001544 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b64      	cmp	r3, #100	; 0x64
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e1ec      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002222:	4b53      	ldr	r3, [pc, #332]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x10c>
 800222e:	e000      	b.n	8002232 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d063      	beq.n	8002306 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800223e:	4b4c      	ldr	r3, [pc, #304]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 030c 	and.w	r3, r3, #12
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00b      	beq.n	8002262 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800224a:	4b49      	ldr	r3, [pc, #292]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f003 030c 	and.w	r3, r3, #12
 8002252:	2b08      	cmp	r3, #8
 8002254:	d11c      	bne.n	8002290 <HAL_RCC_OscConfig+0x18c>
 8002256:	4b46      	ldr	r3, [pc, #280]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d116      	bne.n	8002290 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002262:	4b43      	ldr	r3, [pc, #268]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d005      	beq.n	800227a <HAL_RCC_OscConfig+0x176>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d001      	beq.n	800227a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e1c0      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800227a:	4b3d      	ldr	r3, [pc, #244]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	4939      	ldr	r1, [pc, #228]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 800228a:	4313      	orrs	r3, r2
 800228c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228e:	e03a      	b.n	8002306 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d020      	beq.n	80022da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002298:	4b36      	ldr	r3, [pc, #216]	; (8002374 <HAL_RCC_OscConfig+0x270>)
 800229a:	2201      	movs	r2, #1
 800229c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229e:	f7ff f951 	bl	8001544 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a6:	f7ff f94d 	bl	8001544 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e1a1      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b8:	4b2d      	ldr	r3, [pc, #180]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0f0      	beq.n	80022a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c4:	4b2a      	ldr	r3, [pc, #168]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	4927      	ldr	r1, [pc, #156]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	600b      	str	r3, [r1, #0]
 80022d8:	e015      	b.n	8002306 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022da:	4b26      	ldr	r3, [pc, #152]	; (8002374 <HAL_RCC_OscConfig+0x270>)
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e0:	f7ff f930 	bl	8001544 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e8:	f7ff f92c 	bl	8001544 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e180      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022fa:	4b1d      	ldr	r3, [pc, #116]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f0      	bne.n	80022e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	2b00      	cmp	r3, #0
 8002310:	d03a      	beq.n	8002388 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d019      	beq.n	800234e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800231a:	4b17      	ldr	r3, [pc, #92]	; (8002378 <HAL_RCC_OscConfig+0x274>)
 800231c:	2201      	movs	r2, #1
 800231e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002320:	f7ff f910 	bl	8001544 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002328:	f7ff f90c 	bl	8001544 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e160      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233a:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002346:	2001      	movs	r0, #1
 8002348:	f000 fad8 	bl	80028fc <RCC_Delay>
 800234c:	e01c      	b.n	8002388 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800234e:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <HAL_RCC_OscConfig+0x274>)
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002354:	f7ff f8f6 	bl	8001544 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800235a:	e00f      	b.n	800237c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800235c:	f7ff f8f2 	bl	8001544 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d908      	bls.n	800237c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e146      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
 800236e:	bf00      	nop
 8002370:	40021000 	.word	0x40021000
 8002374:	42420000 	.word	0x42420000
 8002378:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800237c:	4b92      	ldr	r3, [pc, #584]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1e9      	bne.n	800235c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 80a6 	beq.w	80024e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002396:	2300      	movs	r3, #0
 8002398:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800239a:	4b8b      	ldr	r3, [pc, #556]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10d      	bne.n	80023c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a6:	4b88      	ldr	r3, [pc, #544]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	4a87      	ldr	r2, [pc, #540]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 80023ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b0:	61d3      	str	r3, [r2, #28]
 80023b2:	4b85      	ldr	r3, [pc, #532]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023be:	2301      	movs	r3, #1
 80023c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c2:	4b82      	ldr	r3, [pc, #520]	; (80025cc <HAL_RCC_OscConfig+0x4c8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d118      	bne.n	8002400 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ce:	4b7f      	ldr	r3, [pc, #508]	; (80025cc <HAL_RCC_OscConfig+0x4c8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a7e      	ldr	r2, [pc, #504]	; (80025cc <HAL_RCC_OscConfig+0x4c8>)
 80023d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023da:	f7ff f8b3 	bl	8001544 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e2:	f7ff f8af 	bl	8001544 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b64      	cmp	r3, #100	; 0x64
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e103      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f4:	4b75      	ldr	r3, [pc, #468]	; (80025cc <HAL_RCC_OscConfig+0x4c8>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0f0      	beq.n	80023e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d106      	bne.n	8002416 <HAL_RCC_OscConfig+0x312>
 8002408:	4b6f      	ldr	r3, [pc, #444]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	4a6e      	ldr	r2, [pc, #440]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	6213      	str	r3, [r2, #32]
 8002414:	e02d      	b.n	8002472 <HAL_RCC_OscConfig+0x36e>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10c      	bne.n	8002438 <HAL_RCC_OscConfig+0x334>
 800241e:	4b6a      	ldr	r3, [pc, #424]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	4a69      	ldr	r2, [pc, #420]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002424:	f023 0301 	bic.w	r3, r3, #1
 8002428:	6213      	str	r3, [r2, #32]
 800242a:	4b67      	ldr	r3, [pc, #412]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	4a66      	ldr	r2, [pc, #408]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002430:	f023 0304 	bic.w	r3, r3, #4
 8002434:	6213      	str	r3, [r2, #32]
 8002436:	e01c      	b.n	8002472 <HAL_RCC_OscConfig+0x36e>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	2b05      	cmp	r3, #5
 800243e:	d10c      	bne.n	800245a <HAL_RCC_OscConfig+0x356>
 8002440:	4b61      	ldr	r3, [pc, #388]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	4a60      	ldr	r2, [pc, #384]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002446:	f043 0304 	orr.w	r3, r3, #4
 800244a:	6213      	str	r3, [r2, #32]
 800244c:	4b5e      	ldr	r3, [pc, #376]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	4a5d      	ldr	r2, [pc, #372]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	6213      	str	r3, [r2, #32]
 8002458:	e00b      	b.n	8002472 <HAL_RCC_OscConfig+0x36e>
 800245a:	4b5b      	ldr	r3, [pc, #364]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	4a5a      	ldr	r2, [pc, #360]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002460:	f023 0301 	bic.w	r3, r3, #1
 8002464:	6213      	str	r3, [r2, #32]
 8002466:	4b58      	ldr	r3, [pc, #352]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	4a57      	ldr	r2, [pc, #348]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 800246c:	f023 0304 	bic.w	r3, r3, #4
 8002470:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d015      	beq.n	80024a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247a:	f7ff f863 	bl	8001544 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002480:	e00a      	b.n	8002498 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002482:	f7ff f85f 	bl	8001544 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002490:	4293      	cmp	r3, r2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e0b1      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002498:	4b4b      	ldr	r3, [pc, #300]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0ee      	beq.n	8002482 <HAL_RCC_OscConfig+0x37e>
 80024a4:	e014      	b.n	80024d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a6:	f7ff f84d 	bl	8001544 <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ac:	e00a      	b.n	80024c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ae:	f7ff f849 	bl	8001544 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024bc:	4293      	cmp	r3, r2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e09b      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c4:	4b40      	ldr	r3, [pc, #256]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1ee      	bne.n	80024ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024d0:	7dfb      	ldrb	r3, [r7, #23]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d105      	bne.n	80024e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024d6:	4b3c      	ldr	r3, [pc, #240]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	4a3b      	ldr	r2, [pc, #236]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 8087 	beq.w	80025fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024ec:	4b36      	ldr	r3, [pc, #216]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 030c 	and.w	r3, r3, #12
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d061      	beq.n	80025bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d146      	bne.n	800258e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002500:	4b33      	ldr	r3, [pc, #204]	; (80025d0 <HAL_RCC_OscConfig+0x4cc>)
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002506:	f7ff f81d 	bl	8001544 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250e:	f7ff f819 	bl	8001544 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e06d      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002520:	4b29      	ldr	r3, [pc, #164]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1f0      	bne.n	800250e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002534:	d108      	bne.n	8002548 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002536:	4b24      	ldr	r3, [pc, #144]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	4921      	ldr	r1, [pc, #132]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002544:	4313      	orrs	r3, r2
 8002546:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002548:	4b1f      	ldr	r3, [pc, #124]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a19      	ldr	r1, [r3, #32]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	430b      	orrs	r3, r1
 800255a:	491b      	ldr	r1, [pc, #108]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 800255c:	4313      	orrs	r3, r2
 800255e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002560:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <HAL_RCC_OscConfig+0x4cc>)
 8002562:	2201      	movs	r2, #1
 8002564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002566:	f7fe ffed 	bl	8001544 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256e:	f7fe ffe9 	bl	8001544 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e03d      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002580:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0f0      	beq.n	800256e <HAL_RCC_OscConfig+0x46a>
 800258c:	e035      	b.n	80025fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258e:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <HAL_RCC_OscConfig+0x4cc>)
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002594:	f7fe ffd6 	bl	8001544 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800259c:	f7fe ffd2 	bl	8001544 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e026      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ae:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0x498>
 80025ba:	e01e      	b.n	80025fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69db      	ldr	r3, [r3, #28]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d107      	bne.n	80025d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e019      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40007000 	.word	0x40007000
 80025d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_RCC_OscConfig+0x500>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d106      	bne.n	80025f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d001      	beq.n	80025fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40021000 	.word	0x40021000

08002608 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e0d0      	b.n	80027be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800261c:	4b6a      	ldr	r3, [pc, #424]	; (80027c8 <HAL_RCC_ClockConfig+0x1c0>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d910      	bls.n	800264c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262a:	4b67      	ldr	r3, [pc, #412]	; (80027c8 <HAL_RCC_ClockConfig+0x1c0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f023 0207 	bic.w	r2, r3, #7
 8002632:	4965      	ldr	r1, [pc, #404]	; (80027c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	4313      	orrs	r3, r2
 8002638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800263a:	4b63      	ldr	r3, [pc, #396]	; (80027c8 <HAL_RCC_ClockConfig+0x1c0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d001      	beq.n	800264c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e0b8      	b.n	80027be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d020      	beq.n	800269a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002664:	4b59      	ldr	r3, [pc, #356]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	4a58      	ldr	r2, [pc, #352]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 800266a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800266e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0308 	and.w	r3, r3, #8
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800267c:	4b53      	ldr	r3, [pc, #332]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	4a52      	ldr	r2, [pc, #328]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002682:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002686:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002688:	4b50      	ldr	r3, [pc, #320]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	494d      	ldr	r1, [pc, #308]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	4313      	orrs	r3, r2
 8002698:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d040      	beq.n	8002728 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ae:	4b47      	ldr	r3, [pc, #284]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d115      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e07f      	b.n	80027be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d107      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c6:	4b41      	ldr	r3, [pc, #260]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d109      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e073      	b.n	80027be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d6:	4b3d      	ldr	r3, [pc, #244]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e06b      	b.n	80027be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026e6:	4b39      	ldr	r3, [pc, #228]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f023 0203 	bic.w	r2, r3, #3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	4936      	ldr	r1, [pc, #216]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026f8:	f7fe ff24 	bl	8001544 <HAL_GetTick>
 80026fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fe:	e00a      	b.n	8002716 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002700:	f7fe ff20 	bl	8001544 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	f241 3288 	movw	r2, #5000	; 0x1388
 800270e:	4293      	cmp	r3, r2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e053      	b.n	80027be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002716:	4b2d      	ldr	r3, [pc, #180]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f003 020c 	and.w	r2, r3, #12
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	429a      	cmp	r2, r3
 8002726:	d1eb      	bne.n	8002700 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002728:	4b27      	ldr	r3, [pc, #156]	; (80027c8 <HAL_RCC_ClockConfig+0x1c0>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d210      	bcs.n	8002758 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002736:	4b24      	ldr	r3, [pc, #144]	; (80027c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f023 0207 	bic.w	r2, r3, #7
 800273e:	4922      	ldr	r1, [pc, #136]	; (80027c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	4313      	orrs	r3, r2
 8002744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002746:	4b20      	ldr	r3, [pc, #128]	; (80027c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d001      	beq.n	8002758 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e032      	b.n	80027be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002764:	4b19      	ldr	r3, [pc, #100]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	4916      	ldr	r1, [pc, #88]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002772:	4313      	orrs	r3, r2
 8002774:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d009      	beq.n	8002796 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002782:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	490e      	ldr	r1, [pc, #56]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	4313      	orrs	r3, r2
 8002794:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002796:	f000 f821 	bl	80027dc <HAL_RCC_GetSysClockFreq>
 800279a:	4602      	mov	r2, r0
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	091b      	lsrs	r3, r3, #4
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	490a      	ldr	r1, [pc, #40]	; (80027d0 <HAL_RCC_ClockConfig+0x1c8>)
 80027a8:	5ccb      	ldrb	r3, [r1, r3]
 80027aa:	fa22 f303 	lsr.w	r3, r2, r3
 80027ae:	4a09      	ldr	r2, [pc, #36]	; (80027d4 <HAL_RCC_ClockConfig+0x1cc>)
 80027b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027b2:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <HAL_RCC_ClockConfig+0x1d0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fe fe82 	bl	80014c0 <HAL_InitTick>

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40022000 	.word	0x40022000
 80027cc:	40021000 	.word	0x40021000
 80027d0:	0800490c 	.word	0x0800490c
 80027d4:	200002d0 	.word	0x200002d0
 80027d8:	200002d4 	.word	0x200002d4

080027dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027dc:	b490      	push	{r4, r7}
 80027de:	b08a      	sub	sp, #40	; 0x28
 80027e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027e2:	4b29      	ldr	r3, [pc, #164]	; (8002888 <HAL_RCC_GetSysClockFreq+0xac>)
 80027e4:	1d3c      	adds	r4, r7, #4
 80027e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027ec:	f240 2301 	movw	r3, #513	; 0x201
 80027f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	61fb      	str	r3, [r7, #28]
 80027f6:	2300      	movs	r3, #0
 80027f8:	61bb      	str	r3, [r7, #24]
 80027fa:	2300      	movs	r3, #0
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002802:	2300      	movs	r3, #0
 8002804:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002806:	4b21      	ldr	r3, [pc, #132]	; (800288c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b04      	cmp	r3, #4
 8002814:	d002      	beq.n	800281c <HAL_RCC_GetSysClockFreq+0x40>
 8002816:	2b08      	cmp	r3, #8
 8002818:	d003      	beq.n	8002822 <HAL_RCC_GetSysClockFreq+0x46>
 800281a:	e02b      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800281c:	4b1c      	ldr	r3, [pc, #112]	; (8002890 <HAL_RCC_GetSysClockFreq+0xb4>)
 800281e:	623b      	str	r3, [r7, #32]
      break;
 8002820:	e02b      	b.n	800287a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	0c9b      	lsrs	r3, r3, #18
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	3328      	adds	r3, #40	; 0x28
 800282c:	443b      	add	r3, r7
 800282e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002832:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d012      	beq.n	8002864 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800283e:	4b13      	ldr	r3, [pc, #76]	; (800288c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	0c5b      	lsrs	r3, r3, #17
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	3328      	adds	r3, #40	; 0x28
 800284a:	443b      	add	r3, r7
 800284c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002850:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	4a0e      	ldr	r2, [pc, #56]	; (8002890 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002856:	fb03 f202 	mul.w	r2, r3, r2
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
 8002862:	e004      	b.n	800286e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	4a0b      	ldr	r2, [pc, #44]	; (8002894 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002868:	fb02 f303 	mul.w	r3, r2, r3
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	623b      	str	r3, [r7, #32]
      break;
 8002872:	e002      	b.n	800287a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002874:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002876:	623b      	str	r3, [r7, #32]
      break;
 8002878:	bf00      	nop
    }
  }
  return sysclockfreq;
 800287a:	6a3b      	ldr	r3, [r7, #32]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3728      	adds	r7, #40	; 0x28
 8002880:	46bd      	mov	sp, r7
 8002882:	bc90      	pop	{r4, r7}
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	080048fc 	.word	0x080048fc
 800288c:	40021000 	.word	0x40021000
 8002890:	007a1200 	.word	0x007a1200
 8002894:	003d0900 	.word	0x003d0900

08002898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800289c:	4b02      	ldr	r3, [pc, #8]	; (80028a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800289e:	681b      	ldr	r3, [r3, #0]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr
 80028a8:	200002d0 	.word	0x200002d0

080028ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028b0:	f7ff fff2 	bl	8002898 <HAL_RCC_GetHCLKFreq>
 80028b4:	4602      	mov	r2, r0
 80028b6:	4b05      	ldr	r3, [pc, #20]	; (80028cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	0a1b      	lsrs	r3, r3, #8
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	4903      	ldr	r1, [pc, #12]	; (80028d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028c2:	5ccb      	ldrb	r3, [r1, r3]
 80028c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40021000 	.word	0x40021000
 80028d0:	0800491c 	.word	0x0800491c

080028d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028d8:	f7ff ffde 	bl	8002898 <HAL_RCC_GetHCLKFreq>
 80028dc:	4602      	mov	r2, r0
 80028de:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	0adb      	lsrs	r3, r3, #11
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	4903      	ldr	r1, [pc, #12]	; (80028f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ea:	5ccb      	ldrb	r3, [r1, r3]
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40021000 	.word	0x40021000
 80028f8:	0800491c 	.word	0x0800491c

080028fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002904:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <RCC_Delay+0x34>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a0a      	ldr	r2, [pc, #40]	; (8002934 <RCC_Delay+0x38>)
 800290a:	fba2 2303 	umull	r2, r3, r2, r3
 800290e:	0a5b      	lsrs	r3, r3, #9
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	fb02 f303 	mul.w	r3, r2, r3
 8002916:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002918:	bf00      	nop
  }
  while (Delay --);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	1e5a      	subs	r2, r3, #1
 800291e:	60fa      	str	r2, [r7, #12]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1f9      	bne.n	8002918 <RCC_Delay+0x1c>
}
 8002924:	bf00      	nop
 8002926:	bf00      	nop
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr
 8002930:	200002d0 	.word	0x200002d0
 8002934:	10624dd3 	.word	0x10624dd3

08002938 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002940:	2300      	movs	r3, #0
 8002942:	613b      	str	r3, [r7, #16]
 8002944:	2300      	movs	r3, #0
 8002946:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b00      	cmp	r3, #0
 8002952:	d07d      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002954:	2300      	movs	r3, #0
 8002956:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002958:	4b4f      	ldr	r3, [pc, #316]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10d      	bne.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002964:	4b4c      	ldr	r3, [pc, #304]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	4a4b      	ldr	r2, [pc, #300]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800296e:	61d3      	str	r3, [r2, #28]
 8002970:	4b49      	ldr	r3, [pc, #292]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800297c:	2301      	movs	r3, #1
 800297e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002980:	4b46      	ldr	r3, [pc, #280]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002988:	2b00      	cmp	r3, #0
 800298a:	d118      	bne.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800298c:	4b43      	ldr	r3, [pc, #268]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a42      	ldr	r2, [pc, #264]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002996:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002998:	f7fe fdd4 	bl	8001544 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299e:	e008      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a0:	f7fe fdd0 	bl	8001544 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b64      	cmp	r3, #100	; 0x64
 80029ac:	d901      	bls.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e06d      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b2:	4b3a      	ldr	r3, [pc, #232]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0f0      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029be:	4b36      	ldr	r3, [pc, #216]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d02e      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d027      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029dc:	4b2e      	ldr	r3, [pc, #184]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029e6:	4b2e      	ldr	r3, [pc, #184]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029ec:	4b2c      	ldr	r3, [pc, #176]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029f2:	4a29      	ldr	r2, [pc, #164]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d014      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a02:	f7fe fd9f 	bl	8001544 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a08:	e00a      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a0a:	f7fe fd9b 	bl	8001544 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e036      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a20:	4b1d      	ldr	r3, [pc, #116]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0ee      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a2c:	4b1a      	ldr	r3, [pc, #104]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	4917      	ldr	r1, [pc, #92]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a3e:	7dfb      	ldrb	r3, [r7, #23]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d105      	bne.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a44:	4b14      	ldr	r3, [pc, #80]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a46:	69db      	ldr	r3, [r3, #28]
 8002a48:	4a13      	ldr	r2, [pc, #76]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a4e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d008      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a5c:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	490b      	ldr	r1, [pc, #44]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0310 	and.w	r3, r3, #16
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d008      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a7a:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	4904      	ldr	r1, [pc, #16]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40007000 	.word	0x40007000
 8002aa0:	42420440 	.word	0x42420440

08002aa4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e076      	b.n	8002ba4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d108      	bne.n	8002ad0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ac6:	d009      	beq.n	8002adc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	61da      	str	r2, [r3, #28]
 8002ace:	e005      	b.n	8002adc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d106      	bne.n	8002afc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7fe fb46 	bl	8001188 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2202      	movs	r2, #2
 8002b00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b24:	431a      	orrs	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b60:	ea42 0103 	orr.w	r1, r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b68:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	430a      	orrs	r2, r1
 8002b72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	0c1a      	lsrs	r2, r3, #16
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f002 0204 	and.w	r2, r2, #4
 8002b82:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	69da      	ldr	r2, [r3, #28]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b92:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	603b      	str	r3, [r7, #0]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <HAL_SPI_Transmit+0x22>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e126      	b.n	8002e1c <HAL_SPI_Transmit+0x270>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bd6:	f7fe fcb5 	bl	8001544 <HAL_GetTick>
 8002bda:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002bdc:	88fb      	ldrh	r3, [r7, #6]
 8002bde:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d002      	beq.n	8002bf2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002bec:	2302      	movs	r3, #2
 8002bee:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002bf0:	e10b      	b.n	8002e0a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d002      	beq.n	8002bfe <HAL_SPI_Transmit+0x52>
 8002bf8:	88fb      	ldrh	r3, [r7, #6]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d102      	bne.n	8002c04 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c02:	e102      	b.n	8002e0a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2203      	movs	r2, #3
 8002c08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	88fa      	ldrh	r2, [r7, #6]
 8002c1c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	88fa      	ldrh	r2, [r7, #6]
 8002c22:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c4a:	d10f      	bne.n	8002c6c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c5a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c6a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c76:	2b40      	cmp	r3, #64	; 0x40
 8002c78:	d007      	beq.n	8002c8a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c92:	d14b      	bne.n	8002d2c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d002      	beq.n	8002ca2 <HAL_SPI_Transmit+0xf6>
 8002c9c:	8afb      	ldrh	r3, [r7, #22]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d13e      	bne.n	8002d20 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	881a      	ldrh	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	1c9a      	adds	r2, r3, #2
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002cc6:	e02b      	b.n	8002d20 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d112      	bne.n	8002cfc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	881a      	ldrh	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	1c9a      	adds	r2, r3, #2
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	86da      	strh	r2, [r3, #54]	; 0x36
 8002cfa:	e011      	b.n	8002d20 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cfc:	f7fe fc22 	bl	8001544 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d803      	bhi.n	8002d14 <HAL_SPI_Transmit+0x168>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d12:	d102      	bne.n	8002d1a <HAL_SPI_Transmit+0x16e>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d102      	bne.n	8002d20 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d1e:	e074      	b.n	8002e0a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1ce      	bne.n	8002cc8 <HAL_SPI_Transmit+0x11c>
 8002d2a:	e04c      	b.n	8002dc6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <HAL_SPI_Transmit+0x18e>
 8002d34:	8afb      	ldrh	r3, [r7, #22]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d140      	bne.n	8002dbc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	330c      	adds	r3, #12
 8002d44:	7812      	ldrb	r2, [r2, #0]
 8002d46:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d60:	e02c      	b.n	8002dbc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d113      	bne.n	8002d98 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	330c      	adds	r3, #12
 8002d7a:	7812      	ldrb	r2, [r2, #0]
 8002d7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d96:	e011      	b.n	8002dbc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d98:	f7fe fbd4 	bl	8001544 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d803      	bhi.n	8002db0 <HAL_SPI_Transmit+0x204>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dae:	d102      	bne.n	8002db6 <HAL_SPI_Transmit+0x20a>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d102      	bne.n	8002dbc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002dba:	e026      	b.n	8002e0a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1cd      	bne.n	8002d62 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	6839      	ldr	r1, [r7, #0]
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 fbb8 	bl	8003540 <SPI_EndRxTxTransaction>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10a      	bne.n	8002dfa <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002de4:	2300      	movs	r3, #0
 8002de6:	613b      	str	r3, [r7, #16]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	613b      	str	r3, [r7, #16]
 8002df8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d002      	beq.n	8002e08 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	77fb      	strb	r3, [r7, #31]
 8002e06:	e000      	b.n	8002e0a <HAL_SPI_Transmit+0x25e>
  }

error:
 8002e08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3720      	adds	r7, #32
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af02      	add	r7, sp, #8
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	603b      	str	r3, [r7, #0]
 8002e30:	4613      	mov	r3, r2
 8002e32:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e40:	d112      	bne.n	8002e68 <HAL_SPI_Receive+0x44>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10e      	bne.n	8002e68 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2204      	movs	r2, #4
 8002e4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e52:	88fa      	ldrh	r2, [r7, #6]
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	68b9      	ldr	r1, [r7, #8]
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 f8f1 	bl	8003046 <HAL_SPI_TransmitReceive>
 8002e64:	4603      	mov	r3, r0
 8002e66:	e0ea      	b.n	800303e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d101      	bne.n	8002e76 <HAL_SPI_Receive+0x52>
 8002e72:	2302      	movs	r3, #2
 8002e74:	e0e3      	b.n	800303e <HAL_SPI_Receive+0x21a>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e7e:	f7fe fb61 	bl	8001544 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d002      	beq.n	8002e96 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002e90:	2302      	movs	r3, #2
 8002e92:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e94:	e0ca      	b.n	800302c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d002      	beq.n	8002ea2 <HAL_SPI_Receive+0x7e>
 8002e9c:	88fb      	ldrh	r3, [r7, #6]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d102      	bne.n	8002ea8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ea6:	e0c1      	b.n	800302c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2204      	movs	r2, #4
 8002eac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	88fa      	ldrh	r2, [r7, #6]
 8002ec0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	88fa      	ldrh	r2, [r7, #6]
 8002ec6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eee:	d10f      	bne.n	8002f10 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002efe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f0e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1a:	2b40      	cmp	r3, #64	; 0x40
 8002f1c:	d007      	beq.n	8002f2e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f2c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d162      	bne.n	8002ffc <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f36:	e02e      	b.n	8002f96 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d115      	bne.n	8002f72 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f103 020c 	add.w	r2, r3, #12
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f52:	7812      	ldrb	r2, [r2, #0]
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f70:	e011      	b.n	8002f96 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f72:	f7fe fae7 	bl	8001544 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d803      	bhi.n	8002f8a <HAL_SPI_Receive+0x166>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f88:	d102      	bne.n	8002f90 <HAL_SPI_Receive+0x16c>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d102      	bne.n	8002f96 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002f94:	e04a      	b.n	800302c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1cb      	bne.n	8002f38 <HAL_SPI_Receive+0x114>
 8002fa0:	e031      	b.n	8003006 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d113      	bne.n	8002fd8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fba:	b292      	uxth	r2, r2
 8002fbc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc2:	1c9a      	adds	r2, r3, #2
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fd6:	e011      	b.n	8002ffc <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fd8:	f7fe fab4 	bl	8001544 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d803      	bhi.n	8002ff0 <HAL_SPI_Receive+0x1cc>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fee:	d102      	bne.n	8002ff6 <HAL_SPI_Receive+0x1d2>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d102      	bne.n	8002ffc <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002ffa:	e017      	b.n	800302c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003000:	b29b      	uxth	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1cd      	bne.n	8002fa2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	6839      	ldr	r1, [r7, #0]
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 fa46 	bl	800349c <SPI_EndRxTransaction>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d002      	beq.n	800301c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2220      	movs	r2, #32
 800301a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003020:	2b00      	cmp	r3, #0
 8003022:	d002      	beq.n	800302a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	75fb      	strb	r3, [r7, #23]
 8003028:	e000      	b.n	800302c <HAL_SPI_Receive+0x208>
  }

error :
 800302a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800303c:	7dfb      	ldrb	r3, [r7, #23]
}
 800303e:	4618      	mov	r0, r3
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b08c      	sub	sp, #48	; 0x30
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	607a      	str	r2, [r7, #4]
 8003052:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003054:	2301      	movs	r3, #1
 8003056:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <HAL_SPI_TransmitReceive+0x26>
 8003068:	2302      	movs	r3, #2
 800306a:	e18a      	b.n	8003382 <HAL_SPI_TransmitReceive+0x33c>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003074:	f7fe fa66 	bl	8001544 <HAL_GetTick>
 8003078:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003080:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800308a:	887b      	ldrh	r3, [r7, #2]
 800308c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800308e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003092:	2b01      	cmp	r3, #1
 8003094:	d00f      	beq.n	80030b6 <HAL_SPI_TransmitReceive+0x70>
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800309c:	d107      	bne.n	80030ae <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d103      	bne.n	80030ae <HAL_SPI_TransmitReceive+0x68>
 80030a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d003      	beq.n	80030b6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80030ae:	2302      	movs	r3, #2
 80030b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030b4:	e15b      	b.n	800336e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d005      	beq.n	80030c8 <HAL_SPI_TransmitReceive+0x82>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d002      	beq.n	80030c8 <HAL_SPI_TransmitReceive+0x82>
 80030c2:	887b      	ldrh	r3, [r7, #2]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d103      	bne.n	80030d0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030ce:	e14e      	b.n	800336e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b04      	cmp	r3, #4
 80030da:	d003      	beq.n	80030e4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2205      	movs	r2, #5
 80030e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	887a      	ldrh	r2, [r7, #2]
 80030f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	887a      	ldrh	r2, [r7, #2]
 80030fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	887a      	ldrh	r2, [r7, #2]
 8003106:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	887a      	ldrh	r2, [r7, #2]
 800310c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003124:	2b40      	cmp	r3, #64	; 0x40
 8003126:	d007      	beq.n	8003138 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003136:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003140:	d178      	bne.n	8003234 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <HAL_SPI_TransmitReceive+0x10a>
 800314a:	8b7b      	ldrh	r3, [r7, #26]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d166      	bne.n	800321e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003154:	881a      	ldrh	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003160:	1c9a      	adds	r2, r3, #2
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800316a:	b29b      	uxth	r3, r3
 800316c:	3b01      	subs	r3, #1
 800316e:	b29a      	uxth	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003174:	e053      	b.n	800321e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b02      	cmp	r3, #2
 8003182:	d11b      	bne.n	80031bc <HAL_SPI_TransmitReceive+0x176>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003188:	b29b      	uxth	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d016      	beq.n	80031bc <HAL_SPI_TransmitReceive+0x176>
 800318e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003190:	2b01      	cmp	r3, #1
 8003192:	d113      	bne.n	80031bc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003198:	881a      	ldrh	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	1c9a      	adds	r2, r3, #2
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d119      	bne.n	80031fe <HAL_SPI_TransmitReceive+0x1b8>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d014      	beq.n	80031fe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031de:	b292      	uxth	r2, r2
 80031e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e6:	1c9a      	adds	r2, r3, #2
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	3b01      	subs	r3, #1
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031fa:	2301      	movs	r3, #1
 80031fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80031fe:	f7fe f9a1 	bl	8001544 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800320a:	429a      	cmp	r2, r3
 800320c:	d807      	bhi.n	800321e <HAL_SPI_TransmitReceive+0x1d8>
 800320e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003214:	d003      	beq.n	800321e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800321c:	e0a7      	b.n	800336e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003222:	b29b      	uxth	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1a6      	bne.n	8003176 <HAL_SPI_TransmitReceive+0x130>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800322c:	b29b      	uxth	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1a1      	bne.n	8003176 <HAL_SPI_TransmitReceive+0x130>
 8003232:	e07c      	b.n	800332e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d002      	beq.n	8003242 <HAL_SPI_TransmitReceive+0x1fc>
 800323c:	8b7b      	ldrh	r3, [r7, #26]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d16b      	bne.n	800331a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	330c      	adds	r3, #12
 800324c:	7812      	ldrb	r2, [r2, #0]
 800324e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800325e:	b29b      	uxth	r3, r3
 8003260:	3b01      	subs	r3, #1
 8003262:	b29a      	uxth	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003268:	e057      	b.n	800331a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b02      	cmp	r3, #2
 8003276:	d11c      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x26c>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800327c:	b29b      	uxth	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d017      	beq.n	80032b2 <HAL_SPI_TransmitReceive+0x26c>
 8003282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003284:	2b01      	cmp	r3, #1
 8003286:	d114      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	330c      	adds	r3, #12
 8003292:	7812      	ldrb	r2, [r2, #0]
 8003294:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032ae:	2300      	movs	r3, #0
 80032b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d119      	bne.n	80032f4 <HAL_SPI_TransmitReceive+0x2ae>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d014      	beq.n	80032f4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d4:	b2d2      	uxtb	r2, r2
 80032d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	3b01      	subs	r3, #1
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032f0:	2301      	movs	r3, #1
 80032f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80032f4:	f7fe f926 	bl	8001544 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003300:	429a      	cmp	r2, r3
 8003302:	d803      	bhi.n	800330c <HAL_SPI_TransmitReceive+0x2c6>
 8003304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330a:	d102      	bne.n	8003312 <HAL_SPI_TransmitReceive+0x2cc>
 800330c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330e:	2b00      	cmp	r3, #0
 8003310:	d103      	bne.n	800331a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003318:	e029      	b.n	800336e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800331e:	b29b      	uxth	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1a2      	bne.n	800326a <HAL_SPI_TransmitReceive+0x224>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003328:	b29b      	uxth	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d19d      	bne.n	800326a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800332e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003330:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 f904 	bl	8003540 <SPI_EndRxTxTransaction>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d006      	beq.n	800334c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2220      	movs	r2, #32
 8003348:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800334a:	e010      	b.n	800336e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10b      	bne.n	800336c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003354:	2300      	movs	r3, #0
 8003356:	617b      	str	r3, [r7, #20]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	e000      	b.n	800336e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800336c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800337e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003382:	4618      	mov	r0, r3
 8003384:	3730      	adds	r7, #48	; 0x30
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b088      	sub	sp, #32
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	4613      	mov	r3, r2
 800339a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800339c:	f7fe f8d2 	bl	8001544 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a4:	1a9b      	subs	r3, r3, r2
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	4413      	add	r3, r2
 80033aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80033ac:	f7fe f8ca 	bl	8001544 <HAL_GetTick>
 80033b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033b2:	4b39      	ldr	r3, [pc, #228]	; (8003498 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	015b      	lsls	r3, r3, #5
 80033b8:	0d1b      	lsrs	r3, r3, #20
 80033ba:	69fa      	ldr	r2, [r7, #28]
 80033bc:	fb02 f303 	mul.w	r3, r2, r3
 80033c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033c2:	e054      	b.n	800346e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ca:	d050      	beq.n	800346e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033cc:	f7fe f8ba 	bl	8001544 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	69fa      	ldr	r2, [r7, #28]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d902      	bls.n	80033e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d13d      	bne.n	800345e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033fa:	d111      	bne.n	8003420 <SPI_WaitFlagStateUntilTimeout+0x94>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003404:	d004      	beq.n	8003410 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800340e:	d107      	bne.n	8003420 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800341e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003424:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003428:	d10f      	bne.n	800344a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003448:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e017      	b.n	800348e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003464:	2300      	movs	r3, #0
 8003466:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	3b01      	subs	r3, #1
 800346c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	4013      	ands	r3, r2
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	429a      	cmp	r2, r3
 800347c:	bf0c      	ite	eq
 800347e:	2301      	moveq	r3, #1
 8003480:	2300      	movne	r3, #0
 8003482:	b2db      	uxtb	r3, r3
 8003484:	461a      	mov	r2, r3
 8003486:	79fb      	ldrb	r3, [r7, #7]
 8003488:	429a      	cmp	r2, r3
 800348a:	d19b      	bne.n	80033c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3720      	adds	r7, #32
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	200002d0 	.word	0x200002d0

0800349c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af02      	add	r7, sp, #8
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034b0:	d111      	bne.n	80034d6 <SPI_EndRxTransaction+0x3a>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ba:	d004      	beq.n	80034c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c4:	d107      	bne.n	80034d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034d4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034de:	d117      	bne.n	8003510 <SPI_EndRxTransaction+0x74>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e8:	d112      	bne.n	8003510 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	2200      	movs	r2, #0
 80034f2:	2101      	movs	r1, #1
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f7ff ff49 	bl	800338c <SPI_WaitFlagStateUntilTimeout>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d01a      	beq.n	8003536 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003504:	f043 0220 	orr.w	r2, r3, #32
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e013      	b.n	8003538 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	2200      	movs	r2, #0
 8003518:	2180      	movs	r1, #128	; 0x80
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f7ff ff36 	bl	800338c <SPI_WaitFlagStateUntilTimeout>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d007      	beq.n	8003536 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352a:	f043 0220 	orr.w	r2, r3, #32
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e000      	b.n	8003538 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af02      	add	r7, sp, #8
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2200      	movs	r2, #0
 8003554:	2180      	movs	r1, #128	; 0x80
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f7ff ff18 	bl	800338c <SPI_WaitFlagStateUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d007      	beq.n	8003572 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003566:	f043 0220 	orr.w	r2, r3, #32
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e000      	b.n	8003574 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e041      	b.n	8003612 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d106      	bne.n	80035a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7fd fe4a 	bl	800123c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2202      	movs	r2, #2
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3304      	adds	r3, #4
 80035b8:	4619      	mov	r1, r3
 80035ba:	4610      	mov	r0, r2
 80035bc:	f000 fa08 	bl	80039d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b082      	sub	sp, #8
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e041      	b.n	80036b0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d106      	bne.n	8003646 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f839 	bl	80036b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2202      	movs	r2, #2
 800364a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3304      	adds	r3, #4
 8003656:	4619      	mov	r1, r3
 8003658:	4610      	mov	r0, r2
 800365a:	f000 f9b9 	bl	80039d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bc80      	pop	{r7}
 80036c8:	4770      	bx	lr
	...

080036cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d101      	bne.n	80036e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80036e2:	2302      	movs	r3, #2
 80036e4:	e0ac      	b.n	8003840 <HAL_TIM_PWM_ConfigChannel+0x174>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b0c      	cmp	r3, #12
 80036f2:	f200 809f 	bhi.w	8003834 <HAL_TIM_PWM_ConfigChannel+0x168>
 80036f6:	a201      	add	r2, pc, #4	; (adr r2, 80036fc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80036f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fc:	08003731 	.word	0x08003731
 8003700:	08003835 	.word	0x08003835
 8003704:	08003835 	.word	0x08003835
 8003708:	08003835 	.word	0x08003835
 800370c:	08003771 	.word	0x08003771
 8003710:	08003835 	.word	0x08003835
 8003714:	08003835 	.word	0x08003835
 8003718:	08003835 	.word	0x08003835
 800371c:	080037b3 	.word	0x080037b3
 8003720:	08003835 	.word	0x08003835
 8003724:	08003835 	.word	0x08003835
 8003728:	08003835 	.word	0x08003835
 800372c:	080037f3 	.word	0x080037f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68b9      	ldr	r1, [r7, #8]
 8003736:	4618      	mov	r0, r3
 8003738:	f000 f9ac 	bl	8003a94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699a      	ldr	r2, [r3, #24]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f042 0208 	orr.w	r2, r2, #8
 800374a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	699a      	ldr	r2, [r3, #24]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0204 	bic.w	r2, r2, #4
 800375a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6999      	ldr	r1, [r3, #24]
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	691a      	ldr	r2, [r3, #16]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	619a      	str	r2, [r3, #24]
      break;
 800376e:	e062      	b.n	8003836 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68b9      	ldr	r1, [r7, #8]
 8003776:	4618      	mov	r0, r3
 8003778:	f000 f9f2 	bl	8003b60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699a      	ldr	r2, [r3, #24]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800378a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699a      	ldr	r2, [r3, #24]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800379a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6999      	ldr	r1, [r3, #24]
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	021a      	lsls	r2, r3, #8
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	619a      	str	r2, [r3, #24]
      break;
 80037b0:	e041      	b.n	8003836 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68b9      	ldr	r1, [r7, #8]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 fa3b 	bl	8003c34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	69da      	ldr	r2, [r3, #28]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f042 0208 	orr.w	r2, r2, #8
 80037cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	69da      	ldr	r2, [r3, #28]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0204 	bic.w	r2, r2, #4
 80037dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	69d9      	ldr	r1, [r3, #28]
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	61da      	str	r2, [r3, #28]
      break;
 80037f0:	e021      	b.n	8003836 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68b9      	ldr	r1, [r7, #8]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 fa85 	bl	8003d08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	69da      	ldr	r2, [r3, #28]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800380c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	69da      	ldr	r2, [r3, #28]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800381c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	69d9      	ldr	r1, [r3, #28]
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	021a      	lsls	r2, r3, #8
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	61da      	str	r2, [r3, #28]
      break;
 8003832:	e000      	b.n	8003836 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003834:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003858:	2b01      	cmp	r3, #1
 800385a:	d101      	bne.n	8003860 <HAL_TIM_ConfigClockSource+0x18>
 800385c:	2302      	movs	r3, #2
 800385e:	e0b3      	b.n	80039c8 <HAL_TIM_ConfigClockSource+0x180>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2202      	movs	r2, #2
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800387e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003886:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003898:	d03e      	beq.n	8003918 <HAL_TIM_ConfigClockSource+0xd0>
 800389a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800389e:	f200 8087 	bhi.w	80039b0 <HAL_TIM_ConfigClockSource+0x168>
 80038a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a6:	f000 8085 	beq.w	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
 80038aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ae:	d87f      	bhi.n	80039b0 <HAL_TIM_ConfigClockSource+0x168>
 80038b0:	2b70      	cmp	r3, #112	; 0x70
 80038b2:	d01a      	beq.n	80038ea <HAL_TIM_ConfigClockSource+0xa2>
 80038b4:	2b70      	cmp	r3, #112	; 0x70
 80038b6:	d87b      	bhi.n	80039b0 <HAL_TIM_ConfigClockSource+0x168>
 80038b8:	2b60      	cmp	r3, #96	; 0x60
 80038ba:	d050      	beq.n	800395e <HAL_TIM_ConfigClockSource+0x116>
 80038bc:	2b60      	cmp	r3, #96	; 0x60
 80038be:	d877      	bhi.n	80039b0 <HAL_TIM_ConfigClockSource+0x168>
 80038c0:	2b50      	cmp	r3, #80	; 0x50
 80038c2:	d03c      	beq.n	800393e <HAL_TIM_ConfigClockSource+0xf6>
 80038c4:	2b50      	cmp	r3, #80	; 0x50
 80038c6:	d873      	bhi.n	80039b0 <HAL_TIM_ConfigClockSource+0x168>
 80038c8:	2b40      	cmp	r3, #64	; 0x40
 80038ca:	d058      	beq.n	800397e <HAL_TIM_ConfigClockSource+0x136>
 80038cc:	2b40      	cmp	r3, #64	; 0x40
 80038ce:	d86f      	bhi.n	80039b0 <HAL_TIM_ConfigClockSource+0x168>
 80038d0:	2b30      	cmp	r3, #48	; 0x30
 80038d2:	d064      	beq.n	800399e <HAL_TIM_ConfigClockSource+0x156>
 80038d4:	2b30      	cmp	r3, #48	; 0x30
 80038d6:	d86b      	bhi.n	80039b0 <HAL_TIM_ConfigClockSource+0x168>
 80038d8:	2b20      	cmp	r3, #32
 80038da:	d060      	beq.n	800399e <HAL_TIM_ConfigClockSource+0x156>
 80038dc:	2b20      	cmp	r3, #32
 80038de:	d867      	bhi.n	80039b0 <HAL_TIM_ConfigClockSource+0x168>
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d05c      	beq.n	800399e <HAL_TIM_ConfigClockSource+0x156>
 80038e4:	2b10      	cmp	r3, #16
 80038e6:	d05a      	beq.n	800399e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80038e8:	e062      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	6899      	ldr	r1, [r3, #8]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f000 faca 	bl	8003e92 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800390c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	609a      	str	r2, [r3, #8]
      break;
 8003916:	e04e      	b.n	80039b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6818      	ldr	r0, [r3, #0]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	6899      	ldr	r1, [r3, #8]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f000 fab3 	bl	8003e92 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800393a:	609a      	str	r2, [r3, #8]
      break;
 800393c:	e03b      	b.n	80039b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6818      	ldr	r0, [r3, #0]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	6859      	ldr	r1, [r3, #4]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	461a      	mov	r2, r3
 800394c:	f000 fa2a 	bl	8003da4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2150      	movs	r1, #80	; 0x50
 8003956:	4618      	mov	r0, r3
 8003958:	f000 fa81 	bl	8003e5e <TIM_ITRx_SetConfig>
      break;
 800395c:	e02b      	b.n	80039b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6818      	ldr	r0, [r3, #0]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	6859      	ldr	r1, [r3, #4]
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	461a      	mov	r2, r3
 800396c:	f000 fa48 	bl	8003e00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2160      	movs	r1, #96	; 0x60
 8003976:	4618      	mov	r0, r3
 8003978:	f000 fa71 	bl	8003e5e <TIM_ITRx_SetConfig>
      break;
 800397c:	e01b      	b.n	80039b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6818      	ldr	r0, [r3, #0]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	6859      	ldr	r1, [r3, #4]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	461a      	mov	r2, r3
 800398c:	f000 fa0a 	bl	8003da4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2140      	movs	r1, #64	; 0x40
 8003996:	4618      	mov	r0, r3
 8003998:	f000 fa61 	bl	8003e5e <TIM_ITRx_SetConfig>
      break;
 800399c:	e00b      	b.n	80039b6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4619      	mov	r1, r3
 80039a8:	4610      	mov	r0, r2
 80039aa:	f000 fa58 	bl	8003e5e <TIM_ITRx_SetConfig>
        break;
 80039ae:	e002      	b.n	80039b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80039b0:	bf00      	nop
 80039b2:	e000      	b.n	80039b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80039b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a29      	ldr	r2, [pc, #164]	; (8003a88 <TIM_Base_SetConfig+0xb8>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d00b      	beq.n	8003a00 <TIM_Base_SetConfig+0x30>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ee:	d007      	beq.n	8003a00 <TIM_Base_SetConfig+0x30>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a26      	ldr	r2, [pc, #152]	; (8003a8c <TIM_Base_SetConfig+0xbc>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d003      	beq.n	8003a00 <TIM_Base_SetConfig+0x30>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a25      	ldr	r2, [pc, #148]	; (8003a90 <TIM_Base_SetConfig+0xc0>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d108      	bne.n	8003a12 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a1c      	ldr	r2, [pc, #112]	; (8003a88 <TIM_Base_SetConfig+0xb8>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d00b      	beq.n	8003a32 <TIM_Base_SetConfig+0x62>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a20:	d007      	beq.n	8003a32 <TIM_Base_SetConfig+0x62>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a19      	ldr	r2, [pc, #100]	; (8003a8c <TIM_Base_SetConfig+0xbc>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d003      	beq.n	8003a32 <TIM_Base_SetConfig+0x62>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a18      	ldr	r2, [pc, #96]	; (8003a90 <TIM_Base_SetConfig+0xc0>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d108      	bne.n	8003a44 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a07      	ldr	r2, [pc, #28]	; (8003a88 <TIM_Base_SetConfig+0xb8>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d103      	bne.n	8003a78 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	615a      	str	r2, [r3, #20]
}
 8003a7e:	bf00      	nop
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr
 8003a88:	40012c00 	.word	0x40012c00
 8003a8c:	40000400 	.word	0x40000400
 8003a90:	40000800 	.word	0x40000800

08003a94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	f023 0201 	bic.w	r2, r3, #1
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f023 0303 	bic.w	r3, r3, #3
 8003aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f023 0302 	bic.w	r3, r3, #2
 8003adc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a1c      	ldr	r2, [pc, #112]	; (8003b5c <TIM_OC1_SetConfig+0xc8>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d10c      	bne.n	8003b0a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f023 0308 	bic.w	r3, r3, #8
 8003af6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f023 0304 	bic.w	r3, r3, #4
 8003b08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a13      	ldr	r2, [pc, #76]	; (8003b5c <TIM_OC1_SetConfig+0xc8>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d111      	bne.n	8003b36 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	621a      	str	r2, [r3, #32]
}
 8003b50:	bf00      	nop
 8003b52:	371c      	adds	r7, #28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc80      	pop	{r7}
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40012c00 	.word	0x40012c00

08003b60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	f023 0210 	bic.w	r2, r3, #16
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	021b      	lsls	r3, r3, #8
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f023 0320 	bic.w	r3, r3, #32
 8003baa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a1d      	ldr	r2, [pc, #116]	; (8003c30 <TIM_OC2_SetConfig+0xd0>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d10d      	bne.n	8003bdc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a14      	ldr	r2, [pc, #80]	; (8003c30 <TIM_OC2_SetConfig+0xd0>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d113      	bne.n	8003c0c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	621a      	str	r2, [r3, #32]
}
 8003c26:	bf00      	nop
 8003c28:	371c      	adds	r7, #28
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc80      	pop	{r7}
 8003c2e:	4770      	bx	lr
 8003c30:	40012c00 	.word	0x40012c00

08003c34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f023 0303 	bic.w	r3, r3, #3
 8003c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	021b      	lsls	r3, r3, #8
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a1d      	ldr	r2, [pc, #116]	; (8003d04 <TIM_OC3_SetConfig+0xd0>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d10d      	bne.n	8003cae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	021b      	lsls	r3, r3, #8
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a14      	ldr	r2, [pc, #80]	; (8003d04 <TIM_OC3_SetConfig+0xd0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d113      	bne.n	8003cde <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	011b      	lsls	r3, r3, #4
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	621a      	str	r2, [r3, #32]
}
 8003cf8:	bf00      	nop
 8003cfa:	371c      	adds	r7, #28
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bc80      	pop	{r7}
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	40012c00 	.word	0x40012c00

08003d08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b087      	sub	sp, #28
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	021b      	lsls	r3, r3, #8
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	031b      	lsls	r3, r3, #12
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a0f      	ldr	r2, [pc, #60]	; (8003da0 <TIM_OC4_SetConfig+0x98>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d109      	bne.n	8003d7c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	019b      	lsls	r3, r3, #6
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	621a      	str	r2, [r3, #32]
}
 8003d96:	bf00      	nop
 8003d98:	371c      	adds	r7, #28
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bc80      	pop	{r7}
 8003d9e:	4770      	bx	lr
 8003da0:	40012c00 	.word	0x40012c00

08003da4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	f023 0201 	bic.w	r2, r3, #1
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f023 030a 	bic.w	r3, r3, #10
 8003de0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	621a      	str	r2, [r3, #32]
}
 8003df6:	bf00      	nop
 8003df8:	371c      	adds	r7, #28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr

08003e00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	f023 0210 	bic.w	r2, r3, #16
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	031b      	lsls	r3, r3, #12
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	011b      	lsls	r3, r3, #4
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	621a      	str	r2, [r3, #32]
}
 8003e54:	bf00      	nop
 8003e56:	371c      	adds	r7, #28
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr

08003e5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b085      	sub	sp, #20
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
 8003e66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f043 0307 	orr.w	r3, r3, #7
 8003e80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	609a      	str	r2, [r3, #8]
}
 8003e88:	bf00      	nop
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bc80      	pop	{r7}
 8003e90:	4770      	bx	lr

08003e92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b087      	sub	sp, #28
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	60f8      	str	r0, [r7, #12]
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	607a      	str	r2, [r7, #4]
 8003e9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	021a      	lsls	r2, r3, #8
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	609a      	str	r2, [r3, #8]
}
 8003ec6:	bf00      	nop
 8003ec8:	371c      	adds	r7, #28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr

08003ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d101      	bne.n	8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	e046      	b.n	8003f76 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a16      	ldr	r2, [pc, #88]	; (8003f80 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d00e      	beq.n	8003f4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f34:	d009      	beq.n	8003f4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a12      	ldr	r2, [pc, #72]	; (8003f84 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d004      	beq.n	8003f4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a10      	ldr	r2, [pc, #64]	; (8003f88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d10c      	bne.n	8003f64 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr
 8003f80:	40012c00 	.word	0x40012c00
 8003f84:	40000400 	.word	0x40000400
 8003f88:	40000800 	.word	0x40000800

08003f8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d101      	bne.n	8003fa8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e03d      	b.n	8004024 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	4313      	orrs	r3, r2
 8004002:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	bc80      	pop	{r7}
 800402c:	4770      	bx	lr

0800402e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b082      	sub	sp, #8
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e03f      	b.n	80040c0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	d106      	bne.n	800405a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f7fd f943 	bl	80012e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2224      	movs	r2, #36	; 0x24
 800405e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004070:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f904 	bl	8004280 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	691a      	ldr	r2, [r3, #16]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004086:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	695a      	ldr	r2, [r3, #20]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004096:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040a6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2220      	movs	r2, #32
 80040b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2220      	movs	r2, #32
 80040ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3708      	adds	r7, #8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b08a      	sub	sp, #40	; 0x28
 80040cc:	af02      	add	r7, sp, #8
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	603b      	str	r3, [r7, #0]
 80040d4:	4613      	mov	r3, r2
 80040d6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040d8:	2300      	movs	r3, #0
 80040da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b20      	cmp	r3, #32
 80040e6:	d17c      	bne.n	80041e2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <HAL_UART_Transmit+0x2c>
 80040ee:	88fb      	ldrh	r3, [r7, #6]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e075      	b.n	80041e4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d101      	bne.n	8004106 <HAL_UART_Transmit+0x3e>
 8004102:	2302      	movs	r3, #2
 8004104:	e06e      	b.n	80041e4 <HAL_UART_Transmit+0x11c>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2221      	movs	r2, #33	; 0x21
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800411c:	f7fd fa12 	bl	8001544 <HAL_GetTick>
 8004120:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	88fa      	ldrh	r2, [r7, #6]
 8004126:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	88fa      	ldrh	r2, [r7, #6]
 800412c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004136:	d108      	bne.n	800414a <HAL_UART_Transmit+0x82>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d104      	bne.n	800414a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004140:	2300      	movs	r3, #0
 8004142:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	61bb      	str	r3, [r7, #24]
 8004148:	e003      	b.n	8004152 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800414e:	2300      	movs	r3, #0
 8004150:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800415a:	e02a      	b.n	80041b2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	2200      	movs	r2, #0
 8004164:	2180      	movs	r1, #128	; 0x80
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f000 f840 	bl	80041ec <UART_WaitOnFlagUntilTimeout>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e036      	b.n	80041e4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10b      	bne.n	8004194 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	461a      	mov	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800418a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	3302      	adds	r3, #2
 8004190:	61bb      	str	r3, [r7, #24]
 8004192:	e007      	b.n	80041a4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	781a      	ldrb	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	3301      	adds	r3, #1
 80041a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1cf      	bne.n	800415c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	2200      	movs	r2, #0
 80041c4:	2140      	movs	r1, #64	; 0x40
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 f810 	bl	80041ec <UART_WaitOnFlagUntilTimeout>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e006      	b.n	80041e4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2220      	movs	r2, #32
 80041da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041de:	2300      	movs	r3, #0
 80041e0:	e000      	b.n	80041e4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80041e2:	2302      	movs	r3, #2
  }
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3720      	adds	r7, #32
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	603b      	str	r3, [r7, #0]
 80041f8:	4613      	mov	r3, r2
 80041fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041fc:	e02c      	b.n	8004258 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004204:	d028      	beq.n	8004258 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d007      	beq.n	800421c <UART_WaitOnFlagUntilTimeout+0x30>
 800420c:	f7fd f99a 	bl	8001544 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	429a      	cmp	r2, r3
 800421a:	d21d      	bcs.n	8004258 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68da      	ldr	r2, [r3, #12]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800422a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	695a      	ldr	r2, [r3, #20]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 0201 	bic.w	r2, r2, #1
 800423a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2220      	movs	r2, #32
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e00f      	b.n	8004278 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	4013      	ands	r3, r2
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	429a      	cmp	r2, r3
 8004266:	bf0c      	ite	eq
 8004268:	2301      	moveq	r3, #1
 800426a:	2300      	movne	r3, #0
 800426c:	b2db      	uxtb	r3, r3
 800426e:	461a      	mov	r2, r3
 8004270:	79fb      	ldrb	r3, [r7, #7]
 8004272:	429a      	cmp	r2, r3
 8004274:	d0c3      	beq.n	80041fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689a      	ldr	r2, [r3, #8]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	431a      	orrs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80042ba:	f023 030c 	bic.w	r3, r3, #12
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6812      	ldr	r2, [r2, #0]
 80042c2:	68b9      	ldr	r1, [r7, #8]
 80042c4:	430b      	orrs	r3, r1
 80042c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699a      	ldr	r2, [r3, #24]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a2c      	ldr	r2, [pc, #176]	; (8004394 <UART_SetConfig+0x114>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d103      	bne.n	80042f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80042e8:	f7fe faf4 	bl	80028d4 <HAL_RCC_GetPCLK2Freq>
 80042ec:	60f8      	str	r0, [r7, #12]
 80042ee:	e002      	b.n	80042f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80042f0:	f7fe fadc 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 80042f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	4613      	mov	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	009a      	lsls	r2, r3, #2
 8004300:	441a      	add	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	fbb2 f3f3 	udiv	r3, r2, r3
 800430c:	4a22      	ldr	r2, [pc, #136]	; (8004398 <UART_SetConfig+0x118>)
 800430e:	fba2 2303 	umull	r2, r3, r2, r3
 8004312:	095b      	lsrs	r3, r3, #5
 8004314:	0119      	lsls	r1, r3, #4
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	4613      	mov	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	009a      	lsls	r2, r3, #2
 8004320:	441a      	add	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	fbb2 f2f3 	udiv	r2, r2, r3
 800432c:	4b1a      	ldr	r3, [pc, #104]	; (8004398 <UART_SetConfig+0x118>)
 800432e:	fba3 0302 	umull	r0, r3, r3, r2
 8004332:	095b      	lsrs	r3, r3, #5
 8004334:	2064      	movs	r0, #100	; 0x64
 8004336:	fb00 f303 	mul.w	r3, r0, r3
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	3332      	adds	r3, #50	; 0x32
 8004340:	4a15      	ldr	r2, [pc, #84]	; (8004398 <UART_SetConfig+0x118>)
 8004342:	fba2 2303 	umull	r2, r3, r2, r3
 8004346:	095b      	lsrs	r3, r3, #5
 8004348:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800434c:	4419      	add	r1, r3
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	4613      	mov	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	009a      	lsls	r2, r3, #2
 8004358:	441a      	add	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	fbb2 f2f3 	udiv	r2, r2, r3
 8004364:	4b0c      	ldr	r3, [pc, #48]	; (8004398 <UART_SetConfig+0x118>)
 8004366:	fba3 0302 	umull	r0, r3, r3, r2
 800436a:	095b      	lsrs	r3, r3, #5
 800436c:	2064      	movs	r0, #100	; 0x64
 800436e:	fb00 f303 	mul.w	r3, r0, r3
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	3332      	adds	r3, #50	; 0x32
 8004378:	4a07      	ldr	r2, [pc, #28]	; (8004398 <UART_SetConfig+0x118>)
 800437a:	fba2 2303 	umull	r2, r3, r2, r3
 800437e:	095b      	lsrs	r3, r3, #5
 8004380:	f003 020f 	and.w	r2, r3, #15
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	440a      	add	r2, r1
 800438a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800438c:	bf00      	nop
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40013800 	.word	0x40013800
 8004398:	51eb851f 	.word	0x51eb851f

0800439c <_ZN11MC3479Class12setSerialSPIEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:
	return 1; // Return Success
}

// Set the MC3479's SPI object
bool MC3479Class::setSerialSPI(SPI_HandleTypeDef * spi,GPIO_TypeDef * csn_GPIO, uint16_t csn_PIN )
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	807b      	strh	r3, [r7, #2]
	this->_SPI1 = spi;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	601a      	str	r2, [r3, #0]
	this->_CSN_GPIO = csn_GPIO;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	609a      	str	r2, [r3, #8]
	this->_CSN_PIN = csn_PIN;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	887a      	ldrh	r2, [r7, #2]
 80043ba:	819a      	strh	r2, [r3, #12]
	return 1; // Return Success
 80043bc:	2301      	movs	r3, #1
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bc80      	pop	{r7}
 80043c6:	4770      	bx	lr

080043c8 <_ZN11MC3479Class16SPI_readRegisterEhPh>:

// Read from a register using SPI
bool MC3479Class::SPI_readRegister(uint8_t reg,  uint8_t* data)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	460b      	mov	r3, r1
 80043d2:	607a      	str	r2, [r7, #4]
 80043d4:	72fb      	strb	r3, [r7, #11]

	uint8_t spiBytes[2];
	spiBytes[0] = SPIread_REG && reg;
 80043d6:	7afb      	ldrb	r3, [r7, #11]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	bf14      	ite	ne
 80043dc:	2301      	movne	r3, #1
 80043de:	2300      	moveq	r3, #0
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	753b      	strb	r3, [r7, #20]
	spiBytes[1] = SPIread_BYTE2;
 80043e4:	2300      	movs	r3, #0
 80043e6:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_RESET);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6898      	ldr	r0, [r3, #8]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	899b      	ldrh	r3, [r3, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	4619      	mov	r1, r3
 80043f4:	f7fd fd2a 	bl	8001e4c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_SPI1, spiBytes, sizeof(spiBytes), 10);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6818      	ldr	r0, [r3, #0]
 80043fc:	f107 0114 	add.w	r1, r7, #20
 8004400:	230a      	movs	r3, #10
 8004402:	2202      	movs	r2, #2
 8004404:	f7fe fbd2 	bl	8002bac <HAL_SPI_Transmit>
	HAL_SPI_Receive(this->_SPI1, data, REG_BYTES_LEN, 10);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6818      	ldr	r0, [r3, #0]
 800440c:	230a      	movs	r3, #10
 800440e:	2201      	movs	r2, #1
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	f7fe fd07 	bl	8002e24 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_SET);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6898      	ldr	r0, [r3, #8]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	899b      	ldrh	r3, [r3, #12]
 800441e:	2201      	movs	r2, #1
 8004420:	4619      	mov	r1, r3
 8004422:	f7fd fd13 	bl	8001e4c <HAL_GPIO_WritePin>
	return 1;
 8004426:	2301      	movs	r3, #1
}
 8004428:	4618      	mov	r0, r3
 800442a:	3718      	adds	r7, #24
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <_ZN11MC3479Class17SPI_writeRegisterEhh>:

// Write to a register using SPI
uint8_t MC3479Class::SPI_writeRegister(uint8_t reg, uint8_t data)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	460b      	mov	r3, r1
 800443a:	70fb      	strb	r3, [r7, #3]
 800443c:	4613      	mov	r3, r2
 800443e:	70bb      	strb	r3, [r7, #2]
	// Write data to reg:
	uint8_t spiBytes[2];
	spiBytes[0] = SPIwrite_REG && reg;
 8004440:	78fb      	ldrb	r3, [r7, #3]
 8004442:	2b00      	cmp	r3, #0
 8004444:	bf14      	ite	ne
 8004446:	2301      	movne	r3, #1
 8004448:	2300      	moveq	r3, #0
 800444a:	b2db      	uxtb	r3, r3
 800444c:	733b      	strb	r3, [r7, #12]
	spiBytes[1] = data;
 800444e:	78bb      	ldrb	r3, [r7, #2]
 8004450:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_RESET);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6898      	ldr	r0, [r3, #8]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	899b      	ldrh	r3, [r3, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	4619      	mov	r1, r3
 800445e:	f7fd fcf5 	bl	8001e4c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_SPI1, spiBytes, sizeof(spiBytes), 10);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6818      	ldr	r0, [r3, #0]
 8004466:	f107 010c 	add.w	r1, r7, #12
 800446a:	230a      	movs	r3, #10
 800446c:	2202      	movs	r2, #2
 800446e:	f7fe fb9d 	bl	8002bac <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_SET);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6898      	ldr	r0, [r3, #8]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	899b      	ldrh	r3, [r3, #12]
 800447a:	2201      	movs	r2, #1
 800447c:	4619      	mov	r1, r3
 800447e:	f7fd fce5 	bl	8001e4c <HAL_GPIO_WritePin>

	// Read back the register and return the bytes:
	uint8_t regReadBack = 0;
 8004482:	2300      	movs	r3, #0
 8004484:	72fb      	strb	r3, [r7, #11]
	MC3479Class::SPI_readRegister(reg, &regReadBack);
 8004486:	f107 020b 	add.w	r2, r7, #11
 800448a:	78fb      	ldrb	r3, [r7, #3]
 800448c:	4619      	mov	r1, r3
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7ff ff9a 	bl	80043c8 <_ZN11MC3479Class16SPI_readRegisterEhPh>
	return regReadBack;
 8004494:	7afb      	ldrb	r3, [r7, #11]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <_ZN11MC3479Class21burstSPI_readRegisterEhPhh>:

// Read from a register using SPI
bool MC3479Class::burstSPI_readRegister(uint8_t reg, uint8_t* data, uint8_t reg_count)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b086      	sub	sp, #24
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	60f8      	str	r0, [r7, #12]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	461a      	mov	r2, r3
 80044aa:	460b      	mov	r3, r1
 80044ac:	72fb      	strb	r3, [r7, #11]
 80044ae:	4613      	mov	r3, r2
 80044b0:	72bb      	strb	r3, [r7, #10]
	uint8_t spiBytes[2];
	spiBytes[0] = SPIread_REG && reg;
 80044b2:	7afb      	ldrb	r3, [r7, #11]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	bf14      	ite	ne
 80044b8:	2301      	movne	r3, #1
 80044ba:	2300      	moveq	r3, #0
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	753b      	strb	r3, [r7, #20]
	spiBytes[1] = SPIread_BYTE2;
 80044c0:	2300      	movs	r3, #0
 80044c2:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_RESET);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6898      	ldr	r0, [r3, #8]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	899b      	ldrh	r3, [r3, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	4619      	mov	r1, r3
 80044d0:	f7fd fcbc 	bl	8001e4c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_SPI1, spiBytes, sizeof(spiBytes), 10);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6818      	ldr	r0, [r3, #0]
 80044d8:	f107 0114 	add.w	r1, r7, #20
 80044dc:	230a      	movs	r3, #10
 80044de:	2202      	movs	r2, #2
 80044e0:	f7fe fb64 	bl	8002bac <HAL_SPI_Transmit>

	for (uint8_t i=0; i<reg_count; i++)
 80044e4:	2300      	movs	r3, #0
 80044e6:	75fb      	strb	r3, [r7, #23]
 80044e8:	7dfa      	ldrb	r2, [r7, #23]
 80044ea:	7abb      	ldrb	r3, [r7, #10]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d20c      	bcs.n	800450a <_ZN11MC3479Class21burstSPI_readRegisterEhPhh+0x6c>
	{
		//TODO: Validate that data[0] will be Xdata LSB
		HAL_SPI_Receive(this->_SPI1, &data[i], REG_BYTES_LEN, 10);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6818      	ldr	r0, [r3, #0]
 80044f4:	7dfb      	ldrb	r3, [r7, #23]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	18d1      	adds	r1, r2, r3
 80044fa:	230a      	movs	r3, #10
 80044fc:	2201      	movs	r2, #1
 80044fe:	f7fe fc91 	bl	8002e24 <HAL_SPI_Receive>
	for (uint8_t i=0; i<reg_count; i++)
 8004502:	7dfb      	ldrb	r3, [r7, #23]
 8004504:	3301      	adds	r3, #1
 8004506:	75fb      	strb	r3, [r7, #23]
 8004508:	e7ee      	b.n	80044e8 <_ZN11MC3479Class21burstSPI_readRegisterEhPhh+0x4a>
	}
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_SET);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6898      	ldr	r0, [r3, #8]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	899b      	ldrh	r3, [r3, #12]
 8004512:	2201      	movs	r2, #1
 8004514:	4619      	mov	r1, r3
 8004516:	f7fd fc99 	bl	8001e4c <HAL_GPIO_WritePin>
	return 1;
 800451a:	2301      	movs	r3, #1

}
 800451c:	4618      	mov	r0, r3
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <_ZN11MC3479Class19configAccelerometerEv>:
	return 1;
}


// Perform the initial MC3479 hard-coded configuration
void MC3479Class::configAccelerometer(){
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]

#ifdef _SPI_COM_ENABLED
		//Configuration using SPI:

		// Register 0x06 (interrupt enable)
		data = 0xFF & ACQ_INT_EN; //only activates interrupts after each sample
 800452c:	2380      	movs	r3, #128	; 0x80
 800452e:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_INTR_CTRL, data);
 8004530:	7bfb      	ldrb	r3, [r7, #15]
 8004532:	461a      	mov	r2, r3
 8004534:	2106      	movs	r1, #6
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7ff ff7a 	bl	8004430 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x07 (MODE)
		data = 0xFF & WAKE; // clocks running, X,Y,Z axis sampled @ data rate
 800453c:	2301      	movs	r3, #1
 800453e:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_MODE, data);
 8004540:	7bfb      	ldrb	r3, [r7, #15]
 8004542:	461a      	mov	r2, r3
 8004544:	2107      	movs	r1, #7
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7ff ff72 	bl	8004430 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x08 (Sample  Rate)
		data = 0xFF & RATE1_100Hz; // sample x,y,z @ 100Hz
 800454c:	2309      	movs	r3, #9
 800454e:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_SR, data);
 8004550:	7bfb      	ldrb	r3, [r7, #15]
 8004552:	461a      	mov	r2, r3
 8004554:	2108      	movs	r1, #8
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7ff ff6a 	bl	8004430 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x09 (Motion Control)
		data = 0xFF & 0x00; //No motion detection enabled Z-axis positive through top of package
 800455c:	2300      	movs	r3, #0
 800455e:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_MOTION_CTRL, data);
 8004560:	7bfb      	ldrb	r3, [r7, #15]
 8004562:	461a      	mov	r2, r3
 8004564:	2109      	movs	r1, #9
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7ff ff62 	bl	8004430 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x20 (Range Select Control)
		data = 0xFF & 0x00; // No resolution range change, no LPF
 800456c:	2300      	movs	r3, #0
 800456e:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_RANGE, data);
 8004570:	7bfb      	ldrb	r3, [r7, #15]
 8004572:	461a      	mov	r2, r3
 8004574:	2120      	movs	r1, #32
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7ff ff5a 	bl	8004430 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x21 (X-offset lSB)
		MC3479Class::SPI_readRegister(MC3479_XOFFL, &data);
 800457c:	f107 030f 	add.w	r3, r7, #15
 8004580:	461a      	mov	r2, r3
 8004582:	2121      	movs	r1, #33	; 0x21
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7ff ff1f 	bl	80043c8 <_ZN11MC3479Class16SPI_readRegisterEhPh>
		data = data & 0xFF; //no offset
 800458a:	7bfb      	ldrb	r3, [r7, #15]
 800458c:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_XOFFL, data);
 800458e:	7bfb      	ldrb	r3, [r7, #15]
 8004590:	461a      	mov	r2, r3
 8004592:	2121      	movs	r1, #33	; 0x21
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f7ff ff4b 	bl	8004430 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x22 (X-offset MSB)
		MC3479Class::SPI_readRegister(MC3479_XOFFH, &data);
 800459a:	f107 030f 	add.w	r3, r7, #15
 800459e:	461a      	mov	r2, r3
 80045a0:	2122      	movs	r1, #34	; 0x22
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7ff ff10 	bl	80043c8 <_ZN11MC3479Class16SPI_readRegisterEhPh>
		data = data & 0xFF; //no offset
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
 80045aa:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_XOFFH, data);
 80045ac:	7bfb      	ldrb	r3, [r7, #15]
 80045ae:	461a      	mov	r2, r3
 80045b0:	2122      	movs	r1, #34	; 0x22
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7ff ff3c 	bl	8004430 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x23 (Y-offset LSB)
		MC3479Class::SPI_readRegister(MC3479_YOFFL, &data);
 80045b8:	f107 030f 	add.w	r3, r7, #15
 80045bc:	461a      	mov	r2, r3
 80045be:	2123      	movs	r1, #35	; 0x23
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f7ff ff01 	bl	80043c8 <_ZN11MC3479Class16SPI_readRegisterEhPh>
		data = data & 0xFF; //no offset
 80045c6:	7bfb      	ldrb	r3, [r7, #15]
 80045c8:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_YOFFL, data);
 80045ca:	7bfb      	ldrb	r3, [r7, #15]
 80045cc:	461a      	mov	r2, r3
 80045ce:	2123      	movs	r1, #35	; 0x23
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7ff ff2d 	bl	8004430 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x24 (Y-offset MSB)
		MC3479Class::SPI_readRegister(MC3479_YOFFH, &data);
 80045d6:	f107 030f 	add.w	r3, r7, #15
 80045da:	461a      	mov	r2, r3
 80045dc:	2124      	movs	r1, #36	; 0x24
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7ff fef2 	bl	80043c8 <_ZN11MC3479Class16SPI_readRegisterEhPh>
		data = data & 0xFF; //no offset
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
 80045e6:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_YOFFH, data);
 80045e8:	7bfb      	ldrb	r3, [r7, #15]
 80045ea:	461a      	mov	r2, r3
 80045ec:	2124      	movs	r1, #36	; 0x24
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7ff ff1e 	bl	8004430 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x25 (Z-offset LSB)
		MC3479Class::SPI_readRegister(MC3479_ZOFFL, &data);
 80045f4:	f107 030f 	add.w	r3, r7, #15
 80045f8:	461a      	mov	r2, r3
 80045fa:	2125      	movs	r1, #37	; 0x25
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7ff fee3 	bl	80043c8 <_ZN11MC3479Class16SPI_readRegisterEhPh>
		data = data & 0xFF; //no offset
 8004602:	7bfb      	ldrb	r3, [r7, #15]
 8004604:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_ZOFFL, data);
 8004606:	7bfb      	ldrb	r3, [r7, #15]
 8004608:	461a      	mov	r2, r3
 800460a:	2125      	movs	r1, #37	; 0x25
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7ff ff0f 	bl	8004430 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x26 (Z-offset MSB)
		MC3479Class::SPI_readRegister(MC3479_ZOFFH, &data);
 8004612:	f107 030f 	add.w	r3, r7, #15
 8004616:	461a      	mov	r2, r3
 8004618:	2126      	movs	r1, #38	; 0x26
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7ff fed4 	bl	80043c8 <_ZN11MC3479Class16SPI_readRegisterEhPh>
		data = data & 0xFF; //no offset
 8004620:	7bfb      	ldrb	r3, [r7, #15]
 8004622:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_ZOFFH, data);
 8004624:	7bfb      	ldrb	r3, [r7, #15]
 8004626:	461a      	mov	r2, r3
 8004628:	2126      	movs	r1, #38	; 0x26
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7ff ff00 	bl	8004430 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x27 (X Gain)
		MC3479Class::SPI_readRegister(MC3479_XGAIN, &data);
 8004630:	f107 030f 	add.w	r3, r7, #15
 8004634:	461a      	mov	r2, r3
 8004636:	2127      	movs	r1, #39	; 0x27
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f7ff fec5 	bl	80043c8 <_ZN11MC3479Class16SPI_readRegisterEhPh>
		data = data & 0xFF; //no GAIN
 800463e:	7bfb      	ldrb	r3, [r7, #15]
 8004640:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_XGAIN, data);
 8004642:	7bfb      	ldrb	r3, [r7, #15]
 8004644:	461a      	mov	r2, r3
 8004646:	2127      	movs	r1, #39	; 0x27
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7ff fef1 	bl	8004430 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x28 (Y Gain)
		MC3479Class::SPI_readRegister(MC3479_YGAIN, &data);
 800464e:	f107 030f 	add.w	r3, r7, #15
 8004652:	461a      	mov	r2, r3
 8004654:	2128      	movs	r1, #40	; 0x28
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7ff feb6 	bl	80043c8 <_ZN11MC3479Class16SPI_readRegisterEhPh>
		data = data & 0xFF; //no GAIN
 800465c:	7bfb      	ldrb	r3, [r7, #15]
 800465e:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_YGAIN, data);
 8004660:	7bfb      	ldrb	r3, [r7, #15]
 8004662:	461a      	mov	r2, r3
 8004664:	2128      	movs	r1, #40	; 0x28
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7ff fee2 	bl	8004430 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x29 (Z Gain)
		MC3479Class::SPI_readRegister(MC3479_ZGAIN, &data);
 800466c:	f107 030f 	add.w	r3, r7, #15
 8004670:	461a      	mov	r2, r3
 8004672:	2129      	movs	r1, #41	; 0x29
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f7ff fea7 	bl	80043c8 <_ZN11MC3479Class16SPI_readRegisterEhPh>
		data = data & 0xFF; //no GAIN
 800467a:	7bfb      	ldrb	r3, [r7, #15]
 800467c:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_ZGAIN, data);
 800467e:	7bfb      	ldrb	r3, [r7, #15]
 8004680:	461a      	mov	r2, r3
 8004682:	2129      	movs	r1, #41	; 0x29
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f7ff fed3 	bl	8004430 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// RegisteO 0x2D (FIFO Control)
		data = 0XFF & FIFO_TH_INT_EN & FIFO_FULL_INT_EN; // FIFO TH/Full IRQ set on INTN2 pin.
 800468a:	2300      	movs	r3, #0
 800468c:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_FIFO_CTRL, data);
 800468e:	7bfb      	ldrb	r3, [r7, #15]
 8004690:	461a      	mov	r2, r3
 8004692:	212d      	movs	r1, #45	; 0x2d
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f7ff fecb 	bl	8004430 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x2E (FIFO Threshold)
		data = 0xFF & 0x10; //FIFO IRQ threshold set to 50%
 800469a:	2310      	movs	r3, #16
 800469c:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_FIFO_TH, data);
 800469e:	7bfb      	ldrb	r3, [r7, #15]
 80046a0:	461a      	mov	r2, r3
 80046a2:	212e      	movs	r1, #46	; 0x2e
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7ff fec3 	bl	8004430 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x30 (FIFO Control 2, Sample Rate 2)
		//Burst-read cycle that includes XOUT[15:0], YOUT[15:0],
		//ZOUT[15:0], annd NOTTTT: STATUS[7:0], and INTR_STATUS[7:0]:
		data = 0xFF & 0x00;
 80046aa:	2300      	movs	r3, #0
 80046ac:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_FIFO_CTRL2_SR2, data);
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
 80046b0:	461a      	mov	r2, r3
 80046b2:	2130      	movs	r1, #48	; 0x30
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7ff febb 	bl	8004430 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x31 (Communication Control)
		data = 0xFF & 0x00; //0x14 interrupts are cleared simultaneously, 4bit SPI, default Interrupt pins
 80046ba:	2300      	movs	r3, #0
 80046bc:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_COMM_CTRL, data);
 80046be:	7bfb      	ldrb	r3, [r7, #15]
 80046c0:	461a      	mov	r2, r3
 80046c2:	2131      	movs	r1, #49	; 0x31
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7ff feb3 	bl	8004430 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x33 (GPIO Control)
		data = 0xFF & GPIO1_INTN1_IPP & GPIO2_INTN2_IPP; // interrupt pins are push-pull, active low
 80046ca:	2300      	movs	r3, #0
 80046cc:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_GPIO_CTRL, data);
 80046ce:	7bfb      	ldrb	r3, [r7, #15]
 80046d0:	461a      	mov	r2, r3
 80046d2:	2133      	movs	r1, #51	; 0x33
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7ff feab 	bl	8004430 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x40 (Tilt/Flip threshold LSB)
		data = 0xFF & 0x0F; // 15/255 Tilt/Flip Threshold LSB
 80046da:	230f      	movs	r3, #15
 80046dc:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_TF_THRESH_LSB, data);
 80046de:	7bfb      	ldrb	r3, [r7, #15]
 80046e0:	461a      	mov	r2, r3
 80046e2:	2140      	movs	r1, #64	; 0x40
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7ff fea3 	bl	8004430 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x41 (Tilt/Flip threshold MSB)
		data = 0xFF & 0x00; // 0/255 Tilt/Flip Threshold MSB
 80046ea:	2300      	movs	r3, #0
 80046ec:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_TF_THRESH_MSB, data);
 80046ee:	7bfb      	ldrb	r3, [r7, #15]
 80046f0:	461a      	mov	r2, r3
 80046f2:	2141      	movs	r1, #65	; 0x41
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f7ff fe9b 	bl	8004430 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x42 (Tilt/Flip De-bounce)
		data = 0xFF & 0x0F; // Tilt/Flip de-bounce duration to 15/255 before triggering IRQ
 80046fa:	230f      	movs	r3, #15
 80046fc:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_TF_DB, data);
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
 8004700:	461a      	mov	r2, r3
 8004702:	2142      	movs	r1, #66	; 0x42
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f7ff fe93 	bl	8004430 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x43 (AnyMotion Threshold LSB)
		data = 0xFF & 0x0F; // 15/255 AnyMotionThreshold LSB
 800470a:	230f      	movs	r3, #15
 800470c:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_AM_THRESH_LSB, data);
 800470e:	7bfb      	ldrb	r3, [r7, #15]
 8004710:	461a      	mov	r2, r3
 8004712:	2143      	movs	r1, #67	; 0x43
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f7ff fe8b 	bl	8004430 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x44 (AnyMotion Threshold MSB)
		data = 0xFF & 0x00; // 0/255 AnyMotionThreshold MSB
 800471a:	2300      	movs	r3, #0
 800471c:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_AM_THRESH_MSB, data);
 800471e:	7bfb      	ldrb	r3, [r7, #15]
 8004720:	461a      	mov	r2, r3
 8004722:	2144      	movs	r1, #68	; 0x44
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7ff fe83 	bl	8004430 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x45 (AnyMotion De-bounce)
		data = 0xFF & 0x0F; // AnyMotion de-bounce duration to 15/255 before triggering IRQ
 800472a:	230f      	movs	r3, #15
 800472c:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_AM_DB, data);
 800472e:	7bfb      	ldrb	r3, [r7, #15]
 8004730:	461a      	mov	r2, r3
 8004732:	2145      	movs	r1, #69	; 0x45
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f7ff fe7b 	bl	8004430 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x46 (Shake Threshold LSB)
		data = 0xFF & 0x0F; // 15/255 Shake Threshold LSB
 800473a:	230f      	movs	r3, #15
 800473c:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_SHK_THRESH_LSB, data);
 800473e:	7bfb      	ldrb	r3, [r7, #15]
 8004740:	461a      	mov	r2, r3
 8004742:	2146      	movs	r1, #70	; 0x46
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f7ff fe73 	bl	8004430 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x47 (Shake Threshold MSB)
		data = 0xFF & 0x00; // 0/255 Shake Threshold MSB
 800474a:	2300      	movs	r3, #0
 800474c:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_SHK_THRESH_MSB, data);
 800474e:	7bfb      	ldrb	r3, [r7, #15]
 8004750:	461a      	mov	r2, r3
 8004752:	2147      	movs	r1, #71	; 0x47
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7ff fe6b 	bl	8004430 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x48 (Peak-to-Peak Duration LSB)
		data = 0xFF & 0x00; // Minimum duration to trigger a shake interrupt - unused???
 800475a:	2300      	movs	r3, #0
 800475c:	73fb      	strb	r3, [r7, #15]
		//TODO: are we using p2p or shake counter thresholds for interrupts??
		MC3479Class::SPI_writeRegister(MC3479_PK_P2P_DUR_THRESH_LSB, data);
 800475e:	7bfb      	ldrb	r3, [r7, #15]
 8004760:	461a      	mov	r2, r3
 8004762:	2148      	movs	r1, #72	; 0x48
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f7ff fe63 	bl	8004430 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x49 (Shake/Peak-to-Peak Duration MSB)
		data = 0xFF & 0x00; // Minimum duration to trigger a shake interrupt - unused???
 800476a:	2300      	movs	r3, #0
 800476c:	73fb      	strb	r3, [r7, #15]
		//TODO: are we using p2p or shake counter thresholds for interrupts??
		MC3479Class::SPI_writeRegister(MC3479_PK_P2P_DUR_THRESH_MSB, data);
 800476e:	7bfb      	ldrb	r3, [r7, #15]
 8004770:	461a      	mov	r2, r3
 8004772:	2149      	movs	r1, #73	; 0x49
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f7ff fe5b 	bl	8004430 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x4A (Timer control)
		data = 0xFF & 0x00; //Tilt-35 latch disabled,tilt-35 angle detection duration = 1.6s (default)
 800477a:	2300      	movs	r3, #0
 800477c:	73fb      	strb	r3, [r7, #15]
		//TODO: if Tilt35 duration is too large for our control system, can we ignore configuration?
		MC3479Class::SPI_writeRegister(MC3479_TIMER_CTRL, data);
 800477e:	7bfb      	ldrb	r3, [r7, #15]
 8004780:	461a      	mov	r2, r3
 8004782:	214a      	movs	r1, #74	; 0x4a
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7ff fe53 	bl	8004430 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x4B (Read Count Register)
		data = 0xFF & 0x06; // default 6 reads when register 0x30 bit 7(FIFO_BURST) is enabled
 800478a:	2306      	movs	r3, #6
 800478c:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_RD_CNT, data);
 800478e:	7bfb      	ldrb	r3, [r7, #15]
 8004790:	461a      	mov	r2, r3
 8004792:	214b      	movs	r1, #75	; 0x4b
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7ff fe4b 	bl	8004430 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x4B (Read Count Register)

#endif /* _SPI_COM_ENABLED */

	return;
 800479a:	bf00      	nop
}
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <_ZN11MC3479Class6getXYZEPhS0_S0_>:
		MC3479Class::SPI_writeRegister(MC3479_SR, data);
		return 1;
}

bool MC3479Class::getXYZ(uint8_t* xData, uint8_t* yData, uint8_t* zData)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b086      	sub	sp, #24
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	60f8      	str	r0, [r7, #12]
 80047aa:	60b9      	str	r1, [r7, #8]
 80047ac:	607a      	str	r2, [r7, #4]
 80047ae:	603b      	str	r3, [r7, #0]
	uint8_t Buffer[8];
	MC3479Class::burstSPI_readRegister(MC3479_XOUT_EX_L, &Buffer[0], 6);
 80047b0:	f107 0210 	add.w	r2, r7, #16
 80047b4:	2306      	movs	r3, #6
 80047b6:	210d      	movs	r1, #13
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f7ff fe70 	bl	800449e <_ZN11MC3479Class21burstSPI_readRegisterEhPhh>
	xData[0] = Buffer[0];
 80047be:	7c3a      	ldrb	r2, [r7, #16]
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	701a      	strb	r2, [r3, #0]
	xData[1] = Buffer[1];
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	3301      	adds	r3, #1
 80047c8:	7c7a      	ldrb	r2, [r7, #17]
 80047ca:	701a      	strb	r2, [r3, #0]
	yData[0] = Buffer[2];
 80047cc:	7cba      	ldrb	r2, [r7, #18]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	701a      	strb	r2, [r3, #0]
	yData[1] = Buffer[3];
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	3301      	adds	r3, #1
 80047d6:	7cfa      	ldrb	r2, [r7, #19]
 80047d8:	701a      	strb	r2, [r3, #0]
	zData[0] = Buffer[4];
 80047da:	7d3a      	ldrb	r2, [r7, #20]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	701a      	strb	r2, [r3, #0]
	zData[1] = Buffer[5];
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	3301      	adds	r3, #1
 80047e4:	7d7a      	ldrb	r2, [r7, #21]
 80047e6:	701a      	strb	r2, [r3, #0]
	return 1;
 80047e8:	2301      	movs	r3, #1
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <_ZN11MC3479Class19getMotionFlagStatusEv>:

uint8_t MC3479Class::getMotionFlagStatus()
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b084      	sub	sp, #16
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
	uint8_t status;
	MC3479Class::SPI_readRegister(MC3479_STATUS, &status);
 80047fa:	f107 030f 	add.w	r3, r7, #15
 80047fe:	461a      	mov	r2, r3
 8004800:	2113      	movs	r1, #19
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7ff fde0 	bl	80043c8 <_ZN11MC3479Class16SPI_readRegisterEhPh>
	return status;
 8004808:	7bfb      	ldrb	r3, [r7, #15]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <_ZN11MC3479Class18getMotionIrqStatusEv>:

uint8_t MC3479Class::getMotionIrqStatus()
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b084      	sub	sp, #16
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
	uint8_t status;
	MC3479Class::SPI_readRegister(MC3479_INTR_STAT, &status);
 800481a:	f107 030f 	add.w	r3, r7, #15
 800481e:	461a      	mov	r2, r3
 8004820:	2114      	movs	r1, #20
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7ff fdd0 	bl	80043c8 <_ZN11MC3479Class16SPI_readRegisterEhPh>
	return status;
 8004828:	7bfb      	ldrb	r3, [r7, #15]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <_ZN11MC3479Class20clearMotionIrqStatusEv>:

bool MC3479Class::clearMotionIrqStatus()
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b084      	sub	sp, #16
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
	uint8_t clear = 0x00;
 800483a:	2300      	movs	r3, #0
 800483c:	73fb      	strb	r3, [r7, #15]
	MC3479Class::SPI_writeRegister(MC3479_INTR_STAT, clear);
 800483e:	7bfb      	ldrb	r3, [r7, #15]
 8004840:	461a      	mov	r2, r3
 8004842:	2114      	movs	r1, #20
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7ff fdf3 	bl	8004430 <_ZN11MC3479Class17SPI_writeRegisterEhh>
	return 1;
 800484a:	2301      	movs	r3, #1
}
 800484c:	4618      	mov	r0, r3
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <_ZN12MP6543HClass23x_configMotorControllerEtP17TIM_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>:
bool MP6543HClass::x_configMotorController(uint16_t xPwmChannel, TIM_HandleTypeDef * pwmTimer,
		GPIO_TypeDef* xDir, uint16_t xDirPin,
			GPIO_TypeDef* xDirBrake, uint16_t xBrakePin,
				GPIO_TypeDef* xSleep, uint16_t xSleepPin,
					GPIO_TypeDef* xFault, uint16_t xFaultPin)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	607a      	str	r2, [r7, #4]
 800485e:	603b      	str	r3, [r7, #0]
 8004860:	460b      	mov	r3, r1
 8004862:	817b      	strh	r3, [r7, #10]
	return 1;
 8004864:	2301      	movs	r3, #1
}
 8004866:	4618      	mov	r0, r3
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	bc80      	pop	{r7}
 800486e:	4770      	bx	lr

08004870 <_ZN12MP6543HClass23y_configMotorControllerEtP17TIM_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>:
bool MP6543HClass::y_configMotorController(uint16_t yPwmChannel, TIM_HandleTypeDef * pwmTimer,
		GPIO_TypeDef* yDir, uint16_t yDirPin,
			GPIO_TypeDef* yDirBrake, uint16_t yBrakePin,
				GPIO_TypeDef* ySleep, uint16_t ySleepPin,
					GPIO_TypeDef* yFault, uint16_t yFaultPin)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	607a      	str	r2, [r7, #4]
 800487a:	603b      	str	r3, [r7, #0]
 800487c:	460b      	mov	r3, r1
 800487e:	817b      	strh	r3, [r7, #10]
	return 1;
 8004880:	2301      	movs	r3, #1
}
 8004882:	4618      	mov	r0, r3
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	bc80      	pop	{r7}
 800488a:	4770      	bx	lr

0800488c <__libc_init_array>:
 800488c:	b570      	push	{r4, r5, r6, lr}
 800488e:	2600      	movs	r6, #0
 8004890:	4d0c      	ldr	r5, [pc, #48]	; (80048c4 <__libc_init_array+0x38>)
 8004892:	4c0d      	ldr	r4, [pc, #52]	; (80048c8 <__libc_init_array+0x3c>)
 8004894:	1b64      	subs	r4, r4, r5
 8004896:	10a4      	asrs	r4, r4, #2
 8004898:	42a6      	cmp	r6, r4
 800489a:	d109      	bne.n	80048b0 <__libc_init_array+0x24>
 800489c:	f000 f822 	bl	80048e4 <_init>
 80048a0:	2600      	movs	r6, #0
 80048a2:	4d0a      	ldr	r5, [pc, #40]	; (80048cc <__libc_init_array+0x40>)
 80048a4:	4c0a      	ldr	r4, [pc, #40]	; (80048d0 <__libc_init_array+0x44>)
 80048a6:	1b64      	subs	r4, r4, r5
 80048a8:	10a4      	asrs	r4, r4, #2
 80048aa:	42a6      	cmp	r6, r4
 80048ac:	d105      	bne.n	80048ba <__libc_init_array+0x2e>
 80048ae:	bd70      	pop	{r4, r5, r6, pc}
 80048b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80048b4:	4798      	blx	r3
 80048b6:	3601      	adds	r6, #1
 80048b8:	e7ee      	b.n	8004898 <__libc_init_array+0xc>
 80048ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80048be:	4798      	blx	r3
 80048c0:	3601      	adds	r6, #1
 80048c2:	e7f2      	b.n	80048aa <__libc_init_array+0x1e>
 80048c4:	08004924 	.word	0x08004924
 80048c8:	08004924 	.word	0x08004924
 80048cc:	08004924 	.word	0x08004924
 80048d0:	08004928 	.word	0x08004928

080048d4 <memset>:
 80048d4:	4603      	mov	r3, r0
 80048d6:	4402      	add	r2, r0
 80048d8:	4293      	cmp	r3, r2
 80048da:	d100      	bne.n	80048de <memset+0xa>
 80048dc:	4770      	bx	lr
 80048de:	f803 1b01 	strb.w	r1, [r3], #1
 80048e2:	e7f9      	b.n	80048d8 <memset+0x4>

080048e4 <_init>:
 80048e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e6:	bf00      	nop
 80048e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ea:	bc08      	pop	{r3}
 80048ec:	469e      	mov	lr, r3
 80048ee:	4770      	bx	lr

080048f0 <_fini>:
 80048f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048f2:	bf00      	nop
 80048f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048f6:	bc08      	pop	{r3}
 80048f8:	469e      	mov	lr, r3
 80048fa:	4770      	bx	lr

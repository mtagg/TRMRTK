
Active Stabalizing Mug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c28  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08008d38  08008d38  00018d38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f48  08008f48  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08008f48  08008f48  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008f48  08008f48  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08008f48  08008f48  00018f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08008f54  08008f54  00018f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000528  20000070  08008fcc  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000598  08008fcc  00020598  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000244b5  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000390c  00000000  00000000  0004454e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e8  00000000  00000000  00047e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018d0  00000000  00000000  00049848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d41e  00000000  00000000  0004b118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001613a  00000000  00000000  00068536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fe11  00000000  00000000  0007e670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011e481  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000784c  00000000  00000000  0011e4d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08008d20 	.word	0x08008d20

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08008d20 	.word	0x08008d20

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <_ZN13AS5048A_ClassC1Ev>:
#define MAG_MIN 0x0000
#define MAG_MAX 0x1FFF
#define N_POLE_PAIRS 14
#define DEG_PER_PHASE_INC (double)360/(180*N_POLE_PAIRS) // motor degrees oer one sineWave[] index

class AS5048A_Class{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2200      	movs	r2, #0
 8000a98:	731a      	strb	r2, [r3, #12]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	735a      	strb	r2, [r3, #13]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <_ZN13AS5048A_ClassC1Ev+0x40>)
 8000aa4:	8812      	ldrh	r2, [r2, #0]
 8000aa6:	81da      	strh	r2, [r3, #14]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a09      	ldr	r2, [pc, #36]	; (8000ad0 <_ZN13AS5048A_ClassC1Ev+0x44>)
 8000aac:	8812      	ldrh	r2, [r2, #0]
 8000aae:	821a      	strh	r2, [r3, #16]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a08      	ldr	r2, [pc, #32]	; (8000ad4 <_ZN13AS5048A_ClassC1Ev+0x48>)
 8000ab4:	8812      	ldrh	r2, [r2, #0]
 8000ab6:	825a      	strh	r2, [r3, #18]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <_ZN13AS5048A_ClassC1Ev+0x4c>)
 8000abc:	8812      	ldrh	r2, [r2, #0]
 8000abe:	829a      	strh	r2, [r3, #20]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr
 8000acc:	08008d38 	.word	0x08008d38
 8000ad0:	08008d3c 	.word	0x08008d3c
 8000ad4:	08008d40 	.word	0x08008d40
 8000ad8:	08008d44 	.word	0x08008d44

08000adc <_ZN13AS5048A_Class8SPI_InitEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:

#include "AS5048A.h"

AS5048A_Class AS5048A;

bool AS5048A_Class::SPI_Init(SPI_HandleTypeDef* spi, GPIO_TypeDef* csn_gpio,uint16_t csn_pin){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
 8000ae8:	807b      	strh	r3, [r7, #2]
	this->_SPI2 = spi;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	68ba      	ldr	r2, [r7, #8]
 8000aee:	601a      	str	r2, [r3, #0]
	this->_CSN_GPIO = csn_gpio;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	605a      	str	r2, [r3, #4]
	this->_CSN_PIN = csn_pin;
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	887a      	ldrh	r2, [r7, #2]
 8000afa:	811a      	strh	r2, [r3, #8]
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_SET);
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	6858      	ldr	r0, [r3, #4]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	891b      	ldrh	r3, [r3, #8]
 8000b04:	2201      	movs	r2, #1
 8000b06:	4619      	mov	r1, r3
 8000b08:	f005 f93b 	bl	8005d82 <HAL_GPIO_WritePin>
	this->errorCount = 0;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	759a      	strb	r2, [r3, #22]
	return 1;
 8000b12:	2301      	movs	r3, #1
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <_ZN13AS5048A_Class19readAngleSequentialEv>:
//	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_RESET);
//	HAL_SPI_Transmit(this->_SPI2, (uint8_t*)this->ANGLE, 1, AS5048A_SPI_TIMEOUT);
//	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_SET);
//	return AS5048A.Transcieve_Nop() & 0x3FFF; //removes error/parity
//}
int16_t AS5048A_Class::readAngleSequential(){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af02      	add	r7, sp, #8
 8000b22:	6078      	str	r0, [r7, #4]
	uint8_t regValue [2];
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_RESET);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6858      	ldr	r0, [r3, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	891b      	ldrh	r3, [r3, #8]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	4619      	mov	r1, r3
 8000b30:	f005 f927 	bl	8005d82 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(this->_SPI2, &this->ANGLE[0], &regValue[0], sizeof(this->ANGLE), AS5048A_SPI_TIMEOUT);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6818      	ldr	r0, [r3, #0]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f103 010e 	add.w	r1, r3, #14
 8000b3e:	f107 020c 	add.w	r2, r7, #12
 8000b42:	230a      	movs	r3, #10
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	2302      	movs	r3, #2
 8000b48:	f006 f8d7 	bl	8006cfa <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_SET);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6858      	ldr	r0, [r3, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	891b      	ldrh	r3, [r3, #8]
 8000b54:	2201      	movs	r2, #1
 8000b56:	4619      	mov	r1, r3
 8000b58:	f005 f913 	bl	8005d82 <HAL_GPIO_WritePin>
	// Check for error bit and re-call if found
	uint16_t regValue16 = (uint16_t)(((regValue[0]<<8)&0xFF00) | regValue[1]);
 8000b5c:	7b3b      	ldrb	r3, [r7, #12]
 8000b5e:	021b      	lsls	r3, r3, #8
 8000b60:	b21a      	sxth	r2, r3
 8000b62:	7b7b      	ldrb	r3, [r7, #13]
 8000b64:	b21b      	sxth	r3, r3
 8000b66:	4313      	orrs	r3, r2
 8000b68:	b21b      	sxth	r3, r3
 8000b6a:	81fb      	strh	r3, [r7, #14]
	if ((regValue16 & 0x4000) && this->errorCount < 5){
 8000b6c:	89fb      	ldrh	r3, [r7, #14]
 8000b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d00e      	beq.n	8000b94 <_ZN13AS5048A_Class19readAngleSequentialEv+0x78>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	7d9b      	ldrb	r3, [r3, #22]
 8000b7a:	2b04      	cmp	r3, #4
 8000b7c:	d80a      	bhi.n	8000b94 <_ZN13AS5048A_Class19readAngleSequentialEv+0x78>
		// Error bit set, recursively read up to 5 times
		this->errorCount += 1;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	7d9b      	ldrb	r3, [r3, #22]
 8000b82:	3301      	adds	r3, #1
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	759a      	strb	r2, [r3, #22]
		return AS5048A_Class::readAngleSequential();
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff ffc6 	bl	8000b1c <_ZN13AS5048A_Class19readAngleSequentialEv>
 8000b90:	4603      	mov	r3, r0
 8000b92:	e00c      	b.n	8000bae <_ZN13AS5048A_Class19readAngleSequentialEv+0x92>
	}
	this->errorCount = 0;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2200      	movs	r2, #0
 8000b98:	759a      	strb	r2, [r3, #22]
	return convertMagToDegrees(regValue16 & 0x3FFF); //removes error/parity
 8000b9a:	89fb      	ldrh	r3, [r7, #14]
 8000b9c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f000 f807 	bl	8000bb8 <_ZN13AS5048A_Class19convertMagToDegreesEt>
 8000baa:	4603      	mov	r3, r0
 8000bac:	bf00      	nop
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <_ZN13AS5048A_Class19convertMagToDegreesEt>:
//	HAL_SPI_Transmit(this->_SPI2, &this->ZERO6LSB[0], sizeof(this->ZERO6LSB), AS5048A_SPI_TIMEOUT);
//	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_SET);
//	return AS5048A.Transcieve_Nop(); //removes error/parity
//}

int16_t AS5048A_Class::convertMagToDegrees(uint16_t mag){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	807b      	strh	r3, [r7, #2]
	double fract = ((double)mag-MAG_MIN)/(MAG_MAX-MAG_MIN);
 8000bc4:	887b      	ldrh	r3, [r7, #2]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fc04 	bl	80003d4 <__aeabi_ui2d>
 8000bcc:	a30e      	add	r3, pc, #56	; (adr r3, 8000c08 <_ZN13AS5048A_Class19convertMagToDegreesEt+0x50>)
 8000bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd2:	f7ff fda3 	bl	800071c <__aeabi_ddiv>
 8000bd6:	4602      	mov	r2, r0
 8000bd8:	460b      	mov	r3, r1
 8000bda:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (int16_t)(fract*359);
 8000bde:	a30c      	add	r3, pc, #48	; (adr r3, 8000c10 <_ZN13AS5048A_Class19convertMagToDegreesEt+0x58>)
 8000be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000be8:	f7ff fc6e 	bl	80004c8 <__aeabi_dmul>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	4610      	mov	r0, r2
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f7ff ff02 	bl	80009fc <__aeabi_d2iz>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	b21b      	sxth	r3, r3
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	f3af 8000 	nop.w
 8000c08:	00000000 	.word	0x00000000
 8000c0c:	40bfff00 	.word	0x40bfff00
 8000c10:	00000000 	.word	0x00000000
 8000c14:	40767000 	.word	0x40767000

08000c18 <_Z41__static_initialization_and_destruction_0ii>:
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d107      	bne.n	8000c38 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d102      	bne.n	8000c38 <_Z41__static_initialization_and_destruction_0ii+0x20>
AS5048A_Class AS5048A;
 8000c32:	4803      	ldr	r0, [pc, #12]	; (8000c40 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000c34:	f7ff ff2a 	bl	8000a8c <_ZN13AS5048A_ClassC1Ev>
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	2000008c 	.word	0x2000008c

08000c44 <_GLOBAL__sub_I_AS5048A>:
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	f7ff ffe3 	bl	8000c18 <_Z41__static_initialization_and_destruction_0ii>
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	4618      	mov	r0, r3
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr

08000c6a <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c78:	d205      	bcs.n	8000c86 <_ZSt16__deque_buf_sizej+0x1c>
 8000c7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c84:	e000      	b.n	8000c88 <_ZSt16__deque_buf_sizej+0x1e>
 8000c86:	2301      	movs	r3, #1
 8000c88:	4618      	mov	r0, r3
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr

08000c92 <_ZNSt5queueIdSt5dequeIdSaIdEEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f000 fc41 	bl	8001524 <_ZNSt5dequeIdSaIdEED1Ev>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <_ZNSt5queueIsSt5dequeIsSaIsEEED1Ev>:
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 fc7a 	bl	80015b0 <_ZNSt5dequeIsSaIsEED1Ev>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <_ZN12ControlClassC1Ev>:
#define N_SINE_IDX (int)360

using namespace std;


class ControlClass{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	220a      	movs	r2, #10
 8000cd4:	701a      	strb	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	805a      	strh	r2, [r3, #2]
 8000cdc:	6879      	ldr	r1, [r7, #4]
 8000cde:	a34c      	add	r3, pc, #304	; (adr r3, 8000e10 <_ZN12ControlClassC1Ev+0x148>)
 8000ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a55      	ldr	r2, [pc, #340]	; (8000e40 <_ZN12ControlClassC1Ev+0x178>)
 8000cec:	3310      	adds	r3, #16
 8000cee:	4611      	mov	r1, r2
 8000cf0:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f007 fea5 	bl	8008a44 <memcpy>
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	a346      	add	r3, pc, #280	; (adr r3, 8000e18 <_ZN12ControlClassC1Ev+0x150>)
 8000cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d02:	e9c1 235e 	strd	r2, r3, [r1, #376]	; 0x178
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	a343      	add	r3, pc, #268	; (adr r3, 8000e18 <_ZN12ControlClassC1Ev+0x150>)
 8000d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d0e:	e9c1 2360 	strd	r2, r3, [r1, #384]	; 0x180
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	a342      	add	r3, pc, #264	; (adr r3, 8000e20 <_ZN12ControlClassC1Ev+0x158>)
 8000d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d1a:	e9c1 2362 	strd	r2, r3, [r1, #392]	; 0x188
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	f04f 0200 	mov.w	r2, #0
 8000d24:	f04f 0300 	mov.w	r3, #0
 8000d28:	e9c1 2364 	strd	r2, r3, [r1, #400]	; 0x190
 8000d2c:	6879      	ldr	r1, [r7, #4]
 8000d2e:	f04f 0200 	mov.w	r2, #0
 8000d32:	f04f 0300 	mov.w	r3, #0
 8000d36:	e9c1 2366 	strd	r2, r3, [r1, #408]	; 0x198
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8000d40:	2220      	movs	r2, #32
 8000d42:	2100      	movs	r1, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f007 fea5 	bl	8008a94 <memset>
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	f04f 0200 	mov.w	r2, #0
 8000d50:	f04f 0300 	mov.w	r3, #0
 8000d54:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
 8000d58:	6879      	ldr	r1, [r7, #4]
 8000d5a:	f04f 0200 	mov.w	r2, #0
 8000d5e:	f04f 0300 	mov.w	r3, #0
 8000d62:	e9c1 2372 	strd	r2, r3, [r1, #456]	; 0x1c8
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 fbc5 	bl	80014fc <_ZNSt5queueIdSt5dequeIdSaIdEEEC1IS2_vEEv>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f000 fc05 	bl	8001588 <_ZNSt5queueIsSt5dequeIsSaIsEEEC1IS2_vEEv>
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	a329      	add	r3, pc, #164	; (adr r3, 8000e28 <_ZN12ControlClassC1Ev+0x160>)
 8000d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d86:	e9c1 2388 	strd	r2, r3, [r1, #544]	; 0x220
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	a326      	add	r3, pc, #152	; (adr r3, 8000e28 <_ZN12ControlClassC1Ev+0x160>)
 8000d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d92:	e9c1 238a 	strd	r2, r3, [r1, #552]	; 0x228
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	a325      	add	r3, pc, #148	; (adr r3, 8000e30 <_ZN12ControlClassC1Ev+0x168>)
 8000d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d9e:	e9c1 238c 	strd	r2, r3, [r1, #560]	; 0x230
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	f04f 0200 	mov.w	r2, #0
 8000da8:	f04f 0300 	mov.w	r3, #0
 8000dac:	e9c1 238e 	strd	r2, r3, [r1, #568]	; 0x238
 8000db0:	6879      	ldr	r1, [r7, #4]
 8000db2:	f04f 0200 	mov.w	r2, #0
 8000db6:	f04f 0300 	mov.w	r3, #0
 8000dba:	e9c1 2390 	strd	r2, r3, [r1, #576]	; 0x240
 8000dbe:	6879      	ldr	r1, [r7, #4]
 8000dc0:	f04f 0200 	mov.w	r2, #0
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	e9c1 2392 	strd	r2, r3, [r1, #584]	; 0x248
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	a31a      	add	r3, pc, #104	; (adr r3, 8000e38 <_ZN12ControlClassC1Ev+0x170>)
 8000dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd4:	e9c1 2394 	strd	r2, r3, [r1, #592]	; 0x250
 8000dd8:	6879      	ldr	r1, [r7, #4]
 8000dda:	f04f 0200 	mov.w	r2, #0
 8000dde:	f04f 0300 	mov.w	r3, #0
 8000de2:	e9c1 2396 	strd	r2, r3, [r1, #600]	; 0x258
 8000de6:	6879      	ldr	r1, [r7, #4]
 8000de8:	f04f 0200 	mov.w	r2, #0
 8000dec:	f04f 0300 	mov.w	r3, #0
 8000df0:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260
 8000df4:	6879      	ldr	r1, [r7, #4]
 8000df6:	f04f 0200 	mov.w	r2, #0
 8000dfa:	f04f 0300 	mov.w	r3, #0
 8000dfe:	e9c1 239a 	strd	r2, r3, [r1, #616]	; 0x268
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4618      	mov	r0, r3
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	f3af 8000 	nop.w
 8000e10:	b05cc3e8 	.word	0xb05cc3e8
 8000e14:	404ca5dd 	.word	0x404ca5dd
 8000e18:	d2f1a9fc 	.word	0xd2f1a9fc
 8000e1c:	3f60624d 	.word	0x3f60624d
 8000e20:	eb851eb8 	.word	0xeb851eb8
 8000e24:	3f8eb851 	.word	0x3f8eb851
 8000e28:	33333333 	.word	0x33333333
 8000e2c:	3fd33333 	.word	0x3fd33333
 8000e30:	9999999a 	.word	0x9999999a
 8000e34:	3fb99999 	.word	0x3fb99999
 8000e38:	47ae147b 	.word	0x47ae147b
 8000e3c:	3f847ae1 	.word	0x3f847ae1
 8000e40:	08008d48 	.word	0x08008d48

08000e44 <_ZN12ControlClass11lookupAngleEss>:
#include "controlSystem.h"

ControlClass ControlSystem;

double ControlClass::lookupAngle(int16_t z_acc, int16_t axis_acc)
{
 8000e44:	b5b0      	push	{r4, r5, r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	807b      	strh	r3, [r7, #2]
 8000e50:	4613      	mov	r3, r2
 8000e52:	803b      	strh	r3, [r7, #0]


	// Check for divide by 0 at +/- 90 degrees
	if (z_acc == 0){
 8000e54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d10b      	bne.n	8000e74 <_ZN12ControlClass11lookupAngleEss+0x30>
		return (axis_acc < 0) ? (int16_t) -90 : (int16_t) 90;
 8000e5c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	da03      	bge.n	8000e6c <_ZN12ControlClass11lookupAngleEss+0x28>
 8000e64:	f04f 0200 	mov.w	r2, #0
 8000e68:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <_ZN12ControlClass11lookupAngleEss+0x80>)
 8000e6a:	e026      	b.n	8000eba <_ZN12ControlClass11lookupAngleEss+0x76>
 8000e6c:	f04f 0200 	mov.w	r2, #0
 8000e70:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <_ZN12ControlClass11lookupAngleEss+0x84>)
 8000e72:	e022      	b.n	8000eba <_ZN12ControlClass11lookupAngleEss+0x76>
	}
	// Mug needs to remain between -90 and +90 degrees otherwise this method needs to be updated.
	// It can be argued that we have massively failed if the mug reaches +/- 90 degrees tho, haha.
	double theta = atan((double)axis_acc/(double)z_acc)*this->RADS_TO_DEGREES;
 8000e74:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fabb 	bl	80003f4 <__aeabi_i2d>
 8000e7e:	4604      	mov	r4, r0
 8000e80:	460d      	mov	r5, r1
 8000e82:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fab4 	bl	80003f4 <__aeabi_i2d>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	460b      	mov	r3, r1
 8000e90:	4620      	mov	r0, r4
 8000e92:	4629      	mov	r1, r5
 8000e94:	f7ff fc42 	bl	800071c <__aeabi_ddiv>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f007 fc02 	bl	80086a8 <atan>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000eaa:	f7ff fb0d 	bl	80004c8 <__aeabi_dmul>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return theta;
 8000eb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8000eba:	4610      	mov	r0, r2
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ec4:	c0568000 	.word	0xc0568000
 8000ec8:	40568000 	.word	0x40568000
 8000ecc:	00000000 	.word	0x00000000

08000ed0 <_ZN12ControlClass16x_normalizeThetaEhhhh>:


double ControlClass::x_normalizeTheta(uint8_t data0, uint8_t data1, uint8_t z0, uint8_t z1)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af02      	add	r7, sp, #8
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	4608      	mov	r0, r1
 8000eda:	4611      	mov	r1, r2
 8000edc:	461a      	mov	r2, r3
 8000ede:	4603      	mov	r3, r0
 8000ee0:	70fb      	strb	r3, [r7, #3]
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	70bb      	strb	r3, [r7, #2]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	707b      	strb	r3, [r7, #1]
	int16_t z_acc = (z1 << 8) | (z0 & 0x00FF);
 8000eea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000eee:	021b      	lsls	r3, r3, #8
 8000ef0:	b21a      	sxth	r2, r3
 8000ef2:	787b      	ldrb	r3, [r7, #1]
 8000ef4:	b21b      	sxth	r3, r3
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	83fb      	strh	r3, [r7, #30]
	int16_t axis_acc = (data1 << 8) | (data0 & 0x00FF);
 8000efa:	78bb      	ldrb	r3, [r7, #2]
 8000efc:	021b      	lsls	r3, r3, #8
 8000efe:	b21a      	sxth	r2, r3
 8000f00:	78fb      	ldrb	r3, [r7, #3]
 8000f02:	b21b      	sxth	r3, r3
 8000f04:	4313      	orrs	r3, r2
 8000f06:	83bb      	strh	r3, [r7, #28]
	double current_theta = lookupAngle(z_acc, axis_acc);
 8000f08:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000f0c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000f10:	4619      	mov	r1, r3
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff ff96 	bl	8000e44 <_ZN12ControlClass11lookupAngleEss>
 8000f18:	e9c7 0104 	strd	r0, r1, [r7, #16]
	double kalmanAngle = ControlClass::kalmanFilter(current_theta, CTRL_LOOP_PERIOD);
 8000f1c:	a312      	add	r3, pc, #72	; (adr r3, 8000f68 <_ZN12ControlClass16x_normalizeThetaEhhhh+0x98>)
 8000f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f22:	e9cd 2300 	strd	r2, r3, [sp]
 8000f26:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f000 f85b 	bl	8000fe6 <_ZN12ControlClass12kalmanFilterEdd>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	e9c7 2302 	strd	r2, r3, [r7, #8]
	this->x_previousAngles.pop();
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 fb5b 	bl	80015fa <_ZNSt5queueIdSt5dequeIdSaIdEEE3popEv>
	this->x_previousAngles.push(kalmanAngle);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8000f4a:	f107 0208 	add.w	r2, r7, #8
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 fb5e 	bl	8001612 <_ZNSt5queueIdSt5dequeIdSaIdEEE4pushERKd>
//	double avgAngle =  ControlClass::averageAngle(this->x_previousAngles, this->x_previousAngles.size());
	return kalmanAngle;
 8000f56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8000f5a:	4610      	mov	r0, r2
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	3720      	adds	r7, #32
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	f3af 8000 	nop.w
 8000f68:	d2f1a9fc 	.word	0xd2f1a9fc
 8000f6c:	3f50624d 	.word	0x3f50624d

08000f70 <_ZN12ControlClass17initControlSystemEv>:



bool ControlClass::initControlSystem()
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]

	for (unsigned int i = 0; i < THETA_MOVING_AVG_PERIOD; i++){
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	d81c      	bhi.n	8000fbc <_ZN12ControlClass17initControlSystemEv+0x4c>
		this->x_previousAngles.push(0);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f503 70e8 	add.w	r0, r3, #464	; 0x1d0
 8000f88:	f04f 0200 	mov.w	r2, #0
 8000f8c:	f04f 0300 	mov.w	r3, #0
 8000f90:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8000f94:	f107 0308 	add.w	r3, r7, #8
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f000 fb48 	bl	800162e <_ZNSt5queueIdSt5dequeIdSaIdEEE4pushEOd>
		this->x_previousEncoderPositions.push(0);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	827a      	strh	r2, [r7, #18]
 8000fa8:	f107 0212 	add.w	r2, r7, #18
 8000fac:	4611      	mov	r1, r2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 fb4f 	bl	8001652 <_ZNSt5queueIsSt5dequeIsSaIsEEE4pushEOs>
	for (unsigned int i = 0; i < THETA_MOVING_AVG_PERIOD; i++){
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	e7df      	b.n	8000f7c <_ZN12ControlClass17initControlSystemEv+0xc>
//		this->y_previousAngles.push(0);
	}

	return 1;
 8000fbc:	2301      	movs	r3, #1
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <_ZNSt5queueIdSt5dequeIdSaIdEEEC1ERKS3_>:
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	6039      	str	r1, [r7, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	683a      	ldr	r2, [r7, #0]
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 fb4d 	bl	8001676 <_ZNSt5dequeIdSaIdEEC1ERKS1_>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <_ZN12ControlClass12kalmanFilterEdd>:
}

// Kalman-Filter:
// More info on the theory here: https://arxiv.org/ftp/arxiv/papers/1204/1204.0375.pdf
// Decent video that explains (with a part 2&3 for code examples): https://www.youtube.com/watch?v=TEKPcyBwEH8&list=PLvKAPIGzFEr8n7WRx8RptZmC1rXeTzYtA&index=2&ab_channel=CppMonk
double ControlClass::kalmanFilter(double angleIn, double dTime) {
 8000fe6:	b5b0      	push	{r4, r5, r7, lr}
 8000fe8:	b08c      	sub	sp, #48	; 0x30
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	60f8      	str	r0, [r7, #12]
 8000fee:	e9c7 2300 	strd	r2, r3, [r7]
// Typically with an IMU, we would have gyro AND accelerometer in this function, but this only accounts for accelly
  this->angle += dTime * (angleIn - this->bias); // Angle = previous angle plus (new angle - bias) * delta time.
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	e9d3 4564 	ldrd	r4, r5, [r3, #400]	; 0x190
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	e9d3 2366 	ldrd	r2, r3, [r3, #408]	; 0x198
 8000ffe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001002:	f7ff f8a9 	bl	8000158 <__aeabi_dsub>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	4610      	mov	r0, r2
 800100c:	4619      	mov	r1, r3
 800100e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001012:	f7ff fa59 	bl	80004c8 <__aeabi_dmul>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	4620      	mov	r0, r4
 800101c:	4629      	mov	r1, r5
 800101e:	f7ff f89d 	bl	800015c <__adddf3>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	68f9      	ldr	r1, [r7, #12]
 8001028:	e9c1 2364 	strd	r2, r3, [r1, #400]	; 0x190

// Update estimation error co-variance, ie. how much variance between angle measurements
  this->P[0][0] += dTime * (dTime*this->P[1][1] - this->P[0][1] - this->P[1][0] + this->qAngle);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	e9d3 4568 	ldrd	r4, r5, [r3, #416]	; 0x1a0
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	e9d3 016e 	ldrd	r0, r1, [r3, #440]	; 0x1b8
 8001038:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800103c:	f7ff fa44 	bl	80004c8 <__aeabi_dmul>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4610      	mov	r0, r2
 8001046:	4619      	mov	r1, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	e9d3 236a 	ldrd	r2, r3, [r3, #424]	; 0x1a8
 800104e:	f7ff f883 	bl	8000158 <__aeabi_dsub>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	4610      	mov	r0, r2
 8001058:	4619      	mov	r1, r3
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	e9d3 236c 	ldrd	r2, r3, [r3, #432]	; 0x1b0
 8001060:	f7ff f87a 	bl	8000158 <__aeabi_dsub>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4610      	mov	r0, r2
 800106a:	4619      	mov	r1, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 8001072:	f7ff f873 	bl	800015c <__adddf3>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	4610      	mov	r0, r2
 800107c:	4619      	mov	r1, r3
 800107e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001082:	f7ff fa21 	bl	80004c8 <__aeabi_dmul>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	4620      	mov	r0, r4
 800108c:	4629      	mov	r1, r5
 800108e:	f7ff f865 	bl	800015c <__adddf3>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	68f9      	ldr	r1, [r7, #12]
 8001098:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0
  this->P[0][1] -= dTime * P[1][1];
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	e9d3 016e 	ldrd	r0, r1, [r3, #440]	; 0x1b8
 80010a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80010ac:	f7ff fa0c 	bl	80004c8 <__aeabi_dmul>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	4620      	mov	r0, r4
 80010b6:	4629      	mov	r1, r5
 80010b8:	f7ff f84e 	bl	8000158 <__aeabi_dsub>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	68f9      	ldr	r1, [r7, #12]
 80010c2:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
  this->P[1][0] -= dTime * P[1][1];
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	e9d3 016e 	ldrd	r0, r1, [r3, #440]	; 0x1b8
 80010d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80010d6:	f7ff f9f7 	bl	80004c8 <__aeabi_dmul>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4620      	mov	r0, r4
 80010e0:	4629      	mov	r1, r5
 80010e2:	f7ff f839 	bl	8000158 <__aeabi_dsub>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	68f9      	ldr	r1, [r7, #12]
 80010ec:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
  this->P[1][1] += this->qBias * dTime;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	e9d3 456e 	ldrd	r4, r5, [r3, #440]	; 0x1b8
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	e9d3 0160 	ldrd	r0, r1, [r3, #384]	; 0x180
 80010fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001100:	f7ff f9e2 	bl	80004c8 <__aeabi_dmul>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4620      	mov	r0, r4
 800110a:	4629      	mov	r1, r5
 800110c:	f7ff f826 	bl	800015c <__adddf3>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	68f9      	ldr	r1, [r7, #12]
 8001116:	e9c1 236e 	strd	r2, r3, [r1, #440]	; 0x1b8

  // Calculate Kalman gain matrix
  double S = this->P[0][0] + this->rMeasure;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	e9d3 0168 	ldrd	r0, r1, [r3, #416]	; 0x1a0
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	e9d3 2362 	ldrd	r2, r3, [r3, #392]	; 0x188
 8001126:	f7ff f819 	bl	800015c <__adddf3>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  this->K[0] = this->P[0][0] / S;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	e9d3 0168 	ldrd	r0, r1, [r3, #416]	; 0x1a0
 8001138:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800113c:	f7ff faee 	bl	800071c <__aeabi_ddiv>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	68f9      	ldr	r1, [r7, #12]
 8001146:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
  this->K[1] = this->P[1][0] / S;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	e9d3 016c 	ldrd	r0, r1, [r3, #432]	; 0x1b0
 8001150:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001154:	f7ff fae2 	bl	800071c <__aeabi_ddiv>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	68f9      	ldr	r1, [r7, #12]
 800115e:	e9c1 2372 	strd	r2, r3, [r1, #456]	; 0x1c8

// Update angle and bias
  double y = angleIn - angle;		// y = difference between measured and
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 8001168:	e9d7 0100 	ldrd	r0, r1, [r7]
 800116c:	f7fe fff4 	bl	8000158 <__aeabi_dsub>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	e9c7 2308 	strd	r2, r3, [r7, #32]
  angle += K[0] * y; 				// angle is a function of delta-time, uncertainty in the kalman filter, and the sensor angle vs estimation.
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	e9d3 4564 	ldrd	r4, r5, [r3, #400]	; 0x190
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	e9d3 0170 	ldrd	r0, r1, [r3, #448]	; 0x1c0
 8001184:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001188:	f7ff f99e 	bl	80004c8 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4620      	mov	r0, r4
 8001192:	4629      	mov	r1, r5
 8001194:	f7fe ffe2 	bl	800015c <__adddf3>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	68f9      	ldr	r1, [r7, #12]
 800119e:	e9c1 2364 	strd	r2, r3, [r1, #400]	; 0x190
  bias += K[1] * y; 				// bias is a function of delta-time, previous bias, and the sensor angle vs estimation.
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	e9d3 4566 	ldrd	r4, r5, [r3, #408]	; 0x198
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	e9d3 0172 	ldrd	r0, r1, [r3, #456]	; 0x1c8
 80011ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80011b2:	f7ff f989 	bl	80004c8 <__aeabi_dmul>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4620      	mov	r0, r4
 80011bc:	4629      	mov	r1, r5
 80011be:	f7fe ffcd 	bl	800015c <__adddf3>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	68f9      	ldr	r1, [r7, #12]
 80011c8:	e9c1 2366 	strd	r2, r3, [r1, #408]	; 0x198

 // Update estimation error co-variance based on Kalman gain matrix
  double P00_temp = P[0][0];
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	; 0x1a0
 80011d2:	e9c7 2306 	strd	r2, r3, [r7, #24]
  double P01_temp = P[0][1];
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	e9d3 236a 	ldrd	r2, r3, [r3, #424]	; 0x1a8
 80011dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
  P[0][0] -= K[0] * P00_temp;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	e9d3 4568 	ldrd	r4, r5, [r3, #416]	; 0x1a0
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	e9d3 0170 	ldrd	r0, r1, [r3, #448]	; 0x1c0
 80011ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011f0:	f7ff f96a 	bl	80004c8 <__aeabi_dmul>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4620      	mov	r0, r4
 80011fa:	4629      	mov	r1, r5
 80011fc:	f7fe ffac 	bl	8000158 <__aeabi_dsub>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	68f9      	ldr	r1, [r7, #12]
 8001206:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0
  P[0][1] -= K[0] * P01_temp;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	e9d3 0170 	ldrd	r0, r1, [r3, #448]	; 0x1c0
 8001216:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800121a:	f7ff f955 	bl	80004c8 <__aeabi_dmul>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4620      	mov	r0, r4
 8001224:	4629      	mov	r1, r5
 8001226:	f7fe ff97 	bl	8000158 <__aeabi_dsub>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	68f9      	ldr	r1, [r7, #12]
 8001230:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
  P[1][0] -= K[1] * P00_temp;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	e9d3 0172 	ldrd	r0, r1, [r3, #456]	; 0x1c8
 8001240:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001244:	f7ff f940 	bl	80004c8 <__aeabi_dmul>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4620      	mov	r0, r4
 800124e:	4629      	mov	r1, r5
 8001250:	f7fe ff82 	bl	8000158 <__aeabi_dsub>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	68f9      	ldr	r1, [r7, #12]
 800125a:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
  P[1][1] -= K[1] * P01_temp;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	e9d3 456e 	ldrd	r4, r5, [r3, #440]	; 0x1b8
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	e9d3 0172 	ldrd	r0, r1, [r3, #456]	; 0x1c8
 800126a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800126e:	f7ff f92b 	bl	80004c8 <__aeabi_dmul>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4620      	mov	r0, r4
 8001278:	4629      	mov	r1, r5
 800127a:	f7fe ff6d 	bl	8000158 <__aeabi_dsub>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	68f9      	ldr	r1, [r7, #12]
 8001284:	e9c1 236e 	strd	r2, r3, [r1, #440]	; 0x1b8

  return this->angle;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
}
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	3730      	adds	r7, #48	; 0x30
 8001294:	46bd      	mov	sp, r7
 8001296:	bdb0      	pop	{r4, r5, r7, pc}

08001298 <_ZN12ControlClass14calculateDeltaESt5queueIdSt5dequeIdSaIdEEE>:

double ControlClass::calculateDelta(queue<double> angles){
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
	//TODO: update this to only consider the last 2 angles??
	auto front = angles.front();
 80012a2:	6838      	ldr	r0, [r7, #0]
 80012a4:	f000 fa31 	bl	800170a <_ZNSt5queueIdSt5dequeIdSaIdEEE5frontEv>
 80012a8:	4603      	mov	r3, r0
 80012aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ae:	e9c7 2304 	strd	r2, r3, [r7, #16]
	auto back = angles.back();
 80012b2:	6838      	ldr	r0, [r7, #0]
 80012b4:	f000 fa36 	bl	8001724 <_ZNSt5queueIdSt5dequeIdSaIdEEE4backEv>
 80012b8:	4603      	mov	r3, r0
 80012ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012be:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (double)(front - back);
 80012c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012ca:	f7fe ff45 	bl	8000158 <__aeabi_dsub>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
}
 80012d2:	4610      	mov	r0, r2
 80012d4:	4619      	mov	r1, r3
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	0000      	movs	r0, r0
	...

080012e0 <_ZN12ControlClass6getPIDEds>:
	auto front = this->x_previousEncoderPositions.front();
	auto back = this->x_previousEncoderPositions.back();
	return (int16_t)(front-back);
}

int16_t ControlClass::getPID(double angle, int16_t desired_angle){
 80012e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012e4:	b086      	sub	sp, #24
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	60f8      	str	r0, [r7, #12]
 80012ea:	e9c7 2300 	strd	r2, r3, [r7]
	this->error = angle-desired_angle;
 80012ee:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff f87e 	bl	80003f4 <__aeabi_i2d>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001300:	f7fe ff2a 	bl	8000158 <__aeabi_dsub>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	68f9      	ldr	r1, [r7, #12]
 800130a:	e9c1 2396 	strd	r2, r3, [r1, #600]	; 0x258

	// Calculate Proportional:
	this->x_P = this->x_kp * this->error;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	e9d3 0188 	ldrd	r0, r1, [r3, #544]	; 0x220
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	e9d3 2396 	ldrd	r2, r3, [r3, #600]	; 0x258
 800131a:	f7ff f8d5 	bl	80004c8 <__aeabi_dmul>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	68f9      	ldr	r1, [r7, #12]
 8001324:	e9c1 238e 	strd	r2, r3, [r1, #568]	; 0x238

	// Calculate Integrator:
	this->x_I = this->x_I + 0.5*this->x_ki*CTRL_LOOP_PERIOD*(this->error + this->previous_error);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	e9d3 4590 	ldrd	r4, r5, [r3, #576]	; 0x240
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	e9d3 018a 	ldrd	r0, r1, [r3, #552]	; 0x228
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	4b59      	ldr	r3, [pc, #356]	; (80014a0 <_ZN12ControlClass6getPIDEds+0x1c0>)
 800133a:	f7ff f8c5 	bl	80004c8 <__aeabi_dmul>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4610      	mov	r0, r2
 8001344:	4619      	mov	r1, r3
 8001346:	a354      	add	r3, pc, #336	; (adr r3, 8001498 <_ZN12ControlClass6getPIDEds+0x1b8>)
 8001348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134c:	f7ff f8bc 	bl	80004c8 <__aeabi_dmul>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4690      	mov	r8, r2
 8001356:	4699      	mov	r9, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	e9d3 0196 	ldrd	r0, r1, [r3, #600]	; 0x258
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	e9d3 2398 	ldrd	r2, r3, [r3, #608]	; 0x260
 8001364:	f7fe fefa 	bl	800015c <__adddf3>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4640      	mov	r0, r8
 800136e:	4649      	mov	r1, r9
 8001370:	f7ff f8aa 	bl	80004c8 <__aeabi_dmul>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4620      	mov	r0, r4
 800137a:	4629      	mov	r1, r5
 800137c:	f7fe feee 	bl	800015c <__adddf3>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	68f9      	ldr	r1, [r7, #12]
 8001386:	e9c1 2390 	strd	r2, r3, [r1, #576]	; 0x240

	// Calculate Derivator?:
	this->x_D = x_D*(2.0*this->tau - CTRL_LOOP_PERIOD)/(2.0*this->tau + CTRL_LOOP_PERIOD)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	e9d3 4592 	ldrd	r4, r5, [r3, #584]	; 0x248
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	e9d3 0194 	ldrd	r0, r1, [r3, #592]	; 0x250
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	f7fe fedf 	bl	800015c <__adddf3>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4610      	mov	r0, r2
 80013a4:	4619      	mov	r1, r3
 80013a6:	a33c      	add	r3, pc, #240	; (adr r3, 8001498 <_ZN12ControlClass6getPIDEds+0x1b8>)
 80013a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ac:	f7fe fed4 	bl	8000158 <__aeabi_dsub>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4620      	mov	r0, r4
 80013b6:	4629      	mov	r1, r5
 80013b8:	f7ff f886 	bl	80004c8 <__aeabi_dmul>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4614      	mov	r4, r2
 80013c2:	461d      	mov	r5, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	e9d3 0194 	ldrd	r0, r1, [r3, #592]	; 0x250
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	f7fe fec5 	bl	800015c <__adddf3>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4610      	mov	r0, r2
 80013d8:	4619      	mov	r1, r3
 80013da:	a32f      	add	r3, pc, #188	; (adr r3, 8001498 <_ZN12ControlClass6getPIDEds+0x1b8>)
 80013dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e0:	f7fe febc 	bl	800015c <__adddf3>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4620      	mov	r0, r4
 80013ea:	4629      	mov	r1, r5
 80013ec:	f7ff f996 	bl	800071c <__aeabi_ddiv>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4614      	mov	r4, r2
 80013f6:	461d      	mov	r5, r3
					+ 2.0*(this->x_kd)*(this->error - this->previous_error);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	e9d3 018c 	ldrd	r0, r1, [r3, #560]	; 0x230
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	f7fe feab 	bl	800015c <__adddf3>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4690      	mov	r8, r2
 800140c:	4699      	mov	r9, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	e9d3 0196 	ldrd	r0, r1, [r3, #600]	; 0x258
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	e9d3 2398 	ldrd	r2, r3, [r3, #608]	; 0x260
 800141a:	f7fe fe9d 	bl	8000158 <__aeabi_dsub>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4640      	mov	r0, r8
 8001424:	4649      	mov	r1, r9
 8001426:	f7ff f84f 	bl	80004c8 <__aeabi_dmul>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4620      	mov	r0, r4
 8001430:	4629      	mov	r1, r5
 8001432:	f7fe fe93 	bl	800015c <__adddf3>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
	this->x_D = x_D*(2.0*this->tau - CTRL_LOOP_PERIOD)/(2.0*this->tau + CTRL_LOOP_PERIOD)
 800143a:	68f9      	ldr	r1, [r7, #12]
 800143c:	e9c1 2392 	strd	r2, r3, [r1, #584]	; 0x248
//	this->x_D = x_kd * (this->error - this->previous_error) / CTRL_LOOP_PERIOD;

	// Update PID value and 'previous' variables
	int16_t PID = (this->x_P + this->x_I + this-> x_D);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	e9d3 018e 	ldrd	r0, r1, [r3, #568]	; 0x238
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	e9d3 2390 	ldrd	r2, r3, [r3, #576]	; 0x240
 800144c:	f7fe fe86 	bl	800015c <__adddf3>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4610      	mov	r0, r2
 8001456:	4619      	mov	r1, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	e9d3 2392 	ldrd	r2, r3, [r3, #584]	; 0x248
 800145e:	f7fe fe7d 	bl	800015c <__adddf3>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4610      	mov	r0, r2
 8001468:	4619      	mov	r1, r3
 800146a:	f7ff fac7 	bl	80009fc <__aeabi_d2iz>
 800146e:	4603      	mov	r3, r0
 8001470:	82fb      	strh	r3, [r7, #22]
	this->previous_error = error;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	e9d3 2396 	ldrd	r2, r3, [r3, #600]	; 0x258
 8001478:	68f9      	ldr	r1, [r7, #12]
 800147a:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260
	this->previous_angle = angle;
 800147e:	68f9      	ldr	r1, [r7, #12]
 8001480:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001484:	e9c1 239a 	strd	r2, r3, [r1, #616]	; 0x268
	return PID;
 8001488:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001496:	bf00      	nop
 8001498:	d2f1a9fc 	.word	0xd2f1a9fc
 800149c:	3f50624d 	.word	0x3f50624d
 80014a0:	3fe00000 	.word	0x3fe00000

080014a4 <_ZN12ControlClass8resetPIDEv>:

bool ControlClass::resetPID(){
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	this->x_P = 0;
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	f04f 0200 	mov.w	r2, #0
 80014b2:	f04f 0300 	mov.w	r3, #0
 80014b6:	e9c1 238e 	strd	r2, r3, [r1, #568]	; 0x238
	this->x_I = 0;
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	f04f 0300 	mov.w	r3, #0
 80014c4:	e9c1 2390 	strd	r2, r3, [r1, #576]	; 0x240
	this->x_D = 0;
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	f04f 0300 	mov.w	r3, #0
 80014d2:	e9c1 2392 	strd	r2, r3, [r1, #584]	; 0x248
	return 1;
 80014d6:	2301      	movs	r3, #1
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr

080014e2 <_ZNSt5dequeIdSaIdEEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 f932 	bl	8001756 <_ZNSt11_Deque_baseIdSaIdEEC1Ev>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <_ZNSt5queueIdSt5dequeIdSaIdEEEC1IS2_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	: c() { }
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4618      	mov	r0, r3
 8001508:	2328      	movs	r3, #40	; 0x28
 800150a:	461a      	mov	r2, r3
 800150c:	2100      	movs	r1, #0
 800150e:	f007 fac1 	bl	8008a94 <memset>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ffe4 	bl	80014e2 <_ZNSt5dequeIdSaIdEEC1Ev>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <_ZNSt5dequeIdSaIdEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	; 0x28
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 800152c:	f107 0308 	add.w	r3, r7, #8
 8001530:	6879      	ldr	r1, [r7, #4]
 8001532:	4618      	mov	r0, r3
 8001534:	f000 f942 	bl	80017bc <_ZNSt5dequeIdSaIdEE5beginEv>
 8001538:	f107 0318 	add.w	r3, r7, #24
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	4618      	mov	r0, r3
 8001540:	f000 f94b 	bl	80017da <_ZNSt5dequeIdSaIdEE3endEv>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4618      	mov	r0, r3
 8001548:	f000 f956 	bl	80017f8 <_ZNSt11_Deque_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 800154c:	4603      	mov	r3, r0
 800154e:	f107 0218 	add.w	r2, r7, #24
 8001552:	f107 0108 	add.w	r1, r7, #8
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 f973 	bl	8001842 <_ZNSt5dequeIdSaIdEE15_M_destroy_dataESt15_Deque_iteratorIdRdPdES5_RKS0_>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4618      	mov	r0, r3
 8001560:	f000 f90a 	bl	8001778 <_ZNSt11_Deque_baseIdSaIdEED1Ev>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4618      	mov	r0, r3
 8001568:	3728      	adds	r7, #40	; 0x28
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <_ZNSt5dequeIsSaIsEEC1Ev>:
      deque() = default;
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4618      	mov	r0, r3
 800157a:	f000 f97a 	bl	8001872 <_ZNSt11_Deque_baseIsSaIsEEC1Ev>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <_ZNSt5queueIsSt5dequeIsSaIsEEEC1IS2_vEEv>:
	queue()
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	: c() { }
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4618      	mov	r0, r3
 8001594:	2328      	movs	r3, #40	; 0x28
 8001596:	461a      	mov	r2, r3
 8001598:	2100      	movs	r1, #0
 800159a:	f007 fa7b 	bl	8008a94 <memset>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ffe4 	bl	800156e <_ZNSt5dequeIsSaIsEEC1Ev>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4618      	mov	r0, r3
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <_ZNSt5dequeIsSaIsEED1Ev>:
      ~deque()
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 80015b8:	f107 0308 	add.w	r3, r7, #8
 80015bc:	6879      	ldr	r1, [r7, #4]
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 f98a 	bl	80018d8 <_ZNSt5dequeIsSaIsEE5beginEv>
 80015c4:	f107 0318 	add.w	r3, r7, #24
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 f993 	bl	80018f6 <_ZNSt5dequeIsSaIsEE3endEv>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 f99e 	bl	8001914 <_ZNSt11_Deque_baseIsSaIsEE19_M_get_Tp_allocatorEv>
 80015d8:	4603      	mov	r3, r0
 80015da:	f107 0218 	add.w	r2, r7, #24
 80015de:	f107 0108 	add.w	r1, r7, #8
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 f9bb 	bl	800195e <_ZNSt5dequeIsSaIsEE15_M_destroy_dataESt15_Deque_iteratorIsRsPsES5_RKS0_>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f952 	bl	8001894 <_ZNSt11_Deque_baseIsSaIsEED1Ev>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4618      	mov	r0, r3
 80015f4:	3728      	adds	r7, #40	; 0x28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <_ZNSt5queueIdSt5dequeIdSaIdEEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4618      	mov	r0, r3
 8001606:	f000 f9b6 	bl	8001976 <_ZNSt5dequeIdSaIdEE9pop_frontEv>
      }
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <_ZNSt5queueIdSt5dequeIdSaIdEEE4pushERKd>:
      push(const value_type& __x)
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6839      	ldr	r1, [r7, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f000 f9cc 	bl	80019be <_ZNSt5dequeIdSaIdEE9push_backERKd>
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <_ZNSt5queueIdSt5dequeIdSaIdEEE4pushEOd>:
      push(value_type&& __x)
 800162e:	b590      	push	{r4, r7, lr}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	6039      	str	r1, [r7, #0]
      { c.push_back(std::move(__x)); }
 8001638:	687c      	ldr	r4, [r7, #4]
 800163a:	6838      	ldr	r0, [r7, #0]
 800163c:	f000 f9e1 	bl	8001a02 <_ZSt4moveIRdEONSt16remove_referenceIT_E4typeEOS2_>
 8001640:	4603      	mov	r3, r0
 8001642:	4619      	mov	r1, r3
 8001644:	4620      	mov	r0, r4
 8001646:	f000 f9e6 	bl	8001a16 <_ZNSt5dequeIdSaIdEE9push_backEOd>
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	bd90      	pop	{r4, r7, pc}

08001652 <_ZNSt5queueIsSt5dequeIsSaIsEEE4pushEOs>:
      push(value_type&& __x)
 8001652:	b590      	push	{r4, r7, lr}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
 800165a:	6039      	str	r1, [r7, #0]
      { c.push_back(std::move(__x)); }
 800165c:	687c      	ldr	r4, [r7, #4]
 800165e:	6838      	ldr	r0, [r7, #0]
 8001660:	f000 f9ea 	bl	8001a38 <_ZSt4moveIRsEONSt16remove_referenceIT_E4typeEOS2_>
 8001664:	4603      	mov	r3, r0
 8001666:	4619      	mov	r1, r3
 8001668:	4620      	mov	r0, r4
 800166a:	f000 f9ef 	bl	8001a4c <_ZNSt5dequeIsSaIsEE9push_backEOs>
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	bd90      	pop	{r4, r7, pc}

08001676 <_ZNSt5dequeIdSaIdEEC1ERKS1_>:
      deque(const deque& __x)
 8001676:	b590      	push	{r4, r7, lr}
 8001678:	b097      	sub	sp, #92	; 0x5c
 800167a:	af02      	add	r7, sp, #8
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	6039      	str	r1, [r7, #0]
	      __x.size())
 8001680:	687c      	ldr	r4, [r7, #4]
      : _Base(_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()),
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f000 fa00 	bl	8001a8a <_ZNKSt11_Deque_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 800168a:	4602      	mov	r2, r0
	      __x.size())
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	4611      	mov	r1, r2
 8001692:	4618      	mov	r0, r3
 8001694:	f000 f9eb 	bl	8001a6e <_ZN9__gnu_cxx14__alloc_traitsISaIdEdE17_S_select_on_copyERKS1_>
 8001698:	6838      	ldr	r0, [r7, #0]
 800169a:	f000 fa0c 	bl	8001ab6 <_ZNKSt5dequeIdSaIdEE4sizeEv>
 800169e:	4602      	mov	r2, r0
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	4619      	mov	r1, r3
 80016a6:	4620      	mov	r0, r4
 80016a8:	f000 fa17 	bl	8001ada <_ZNSt11_Deque_baseIdSaIdEEC1ERKS0_j>
 80016ac:	f107 030c 	add.w	r3, r7, #12
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 f9f4 	bl	8001a9e <_ZNSaIdED1Ev>
      { std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80016b6:	f107 0320 	add.w	r3, r7, #32
 80016ba:	6839      	ldr	r1, [r7, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f000 fa20 	bl	8001b02 <_ZNKSt5dequeIdSaIdEE5beginEv>
 80016c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016c6:	6839      	ldr	r1, [r7, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 fa29 	bl	8001b20 <_ZNKSt5dequeIdSaIdEE3endEv>
				    this->_M_impl._M_start,
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f103 0208 	add.w	r2, r3, #8
      { std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80016d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016d8:	4611      	mov	r1, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 f896 	bl	800180c <_ZNSt15_Deque_iteratorIdRdPdEC1ERKS2_>
				    _M_get_Tp_allocator()); }
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 f888 	bl	80017f8 <_ZNSt11_Deque_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 80016e8:	4604      	mov	r4, r0
      { std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80016ea:	f107 0010 	add.w	r0, r7, #16
 80016ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016f2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80016f6:	f107 0120 	add.w	r1, r7, #32
 80016fa:	9400      	str	r4, [sp, #0]
 80016fc:	f000 fa3a 	bl	8001b74 <_ZSt22__uninitialized_copy_aISt15_Deque_iteratorIdRKdPS1_ES0_IdRdPdEdET0_T_S9_S8_RSaIT1_E>
				    _M_get_Tp_allocator()); }
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4618      	mov	r0, r3
 8001704:	3754      	adds	r7, #84	; 0x54
 8001706:	46bd      	mov	sp, r7
 8001708:	bd90      	pop	{r4, r7, pc}

0800170a <_ZNSt5queueIdSt5dequeIdSaIdEEE5frontEv>:
      front()
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
	return c.front();
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4618      	mov	r0, r3
 8001716:	f000 fa53 	bl	8001bc0 <_ZNSt5dequeIdSaIdEE5frontEv>
 800171a:	4603      	mov	r3, r0
      }
 800171c:	4618      	mov	r0, r3
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <_ZNSt5queueIdSt5dequeIdSaIdEEE4backEv>:
      back()
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	return c.back();
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4618      	mov	r0, r3
 8001730:	f000 fa5a 	bl	8001be8 <_ZNSt5dequeIdSaIdEE4backEv>
 8001734:	4603      	mov	r3, r0
      }
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <_ZNSt11_Deque_baseIdSaIdEE11_Deque_implD1Ev>:
      struct _Deque_impl
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 f9a9 	bl	8001a9e <_ZNSaIdED1Ev>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <_ZNSt11_Deque_baseIdSaIdEEC1Ev>:
      _Deque_base()
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
      : _M_impl()
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4618      	mov	r0, r3
 8001762:	f000 fa5a 	bl	8001c1a <_ZNSt11_Deque_baseIdSaIdEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8001766:	2100      	movs	r1, #0
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 fa66 	bl	8001c3a <_ZNSt11_Deque_baseIdSaIdEE17_M_initialize_mapEj>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <_ZNSt11_Deque_baseIdSaIdEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d010      	beq.n	80017aa <_ZNSt11_Deque_baseIdSaIdEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8001790:	3304      	adds	r3, #4
 8001792:	461a      	mov	r2, r3
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 fab3 	bl	8001d00 <_ZNSt11_Deque_baseIdSaIdEE16_M_destroy_nodesEPPdS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6819      	ldr	r1, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	461a      	mov	r2, r3
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 fac5 	bl	8001d34 <_ZNSt11_Deque_baseIdSaIdEE17_M_deallocate_mapEPPdj>
    }
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ffc6 	bl	800173e <_ZNSt11_Deque_baseIdSaIdEE11_Deque_implD1Ev>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <_ZNSt5dequeIdSaIdEE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	3308      	adds	r3, #8
 80017ca:	4619      	mov	r1, r3
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f000 f81d 	bl	800180c <_ZNSt15_Deque_iteratorIdRdPdEC1ERKS2_>
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <_ZNSt5dequeIdSaIdEE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	3318      	adds	r3, #24
 80017e8:	4619      	mov	r1, r3
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f80e 	bl	800180c <_ZNSt15_Deque_iteratorIdRdPdEC1ERKS2_>
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <_ZNSt11_Deque_baseIdSaIdEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr

0800180c <_ZNSt15_Deque_iteratorIdRdPdEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	68da      	ldr	r2, [r3, #12]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4618      	mov	r0, r3
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr

08001842 <_ZNSt5dequeIdSaIdEE15_M_destroy_dataESt15_Deque_iteratorIdRdPdES5_RKS0_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 8001842:	b480      	push	{r7}
 8001844:	b08d      	sub	sp, #52	; 0x34
 8001846:	af00      	add	r7, sp, #0
 8001848:	60f8      	str	r0, [r7, #12]
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
 800184e:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 8001850:	bf00      	nop
 8001852:	3734      	adds	r7, #52	; 0x34
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr

0800185a <_ZNSt11_Deque_baseIsSaIsEE11_Deque_implD1Ev>:
      struct _Deque_impl
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 fa92 	bl	8001d8c <_ZNSaIsED1Ev>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <_ZNSt11_Deque_baseIsSaIsEEC1Ev>:
      _Deque_base()
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
      : _M_impl()
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4618      	mov	r0, r3
 800187e:	f000 fa75 	bl	8001d6c <_ZNSt11_Deque_baseIsSaIsEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8001882:	2100      	movs	r1, #0
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 fa8d 	bl	8001da4 <_ZNSt11_Deque_baseIsSaIsEE17_M_initialize_mapEj>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4618      	mov	r0, r3
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <_ZNSt11_Deque_baseIsSaIsEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d010      	beq.n	80018c6 <_ZNSt11_Deque_baseIsSaIsEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80018ac:	3304      	adds	r3, #4
 80018ae:	461a      	mov	r2, r3
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f000 fada 	bl	8001e6a <_ZNSt11_Deque_baseIsSaIsEE16_M_destroy_nodesEPPsS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6819      	ldr	r1, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	461a      	mov	r2, r3
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 faec 	bl	8001e9e <_ZNSt11_Deque_baseIsSaIsEE17_M_deallocate_mapEPPsj>
    }
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ffc6 	bl	800185a <_ZNSt11_Deque_baseIsSaIsEE11_Deque_implD1Ev>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <_ZNSt5dequeIsSaIsEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	3308      	adds	r3, #8
 80018e6:	4619      	mov	r1, r3
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f000 f81d 	bl	8001928 <_ZNSt15_Deque_iteratorIsRsPsEC1ERKS2_>
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <_ZNSt5dequeIsSaIsEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	3318      	adds	r3, #24
 8001904:	4619      	mov	r1, r3
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 f80e 	bl	8001928 <_ZNSt15_Deque_iteratorIsRsPsEC1ERKS2_>
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <_ZNSt11_Deque_baseIsSaIsEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4618      	mov	r0, r3
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr

08001928 <_ZNSt15_Deque_iteratorIsRsPsEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	689a      	ldr	r2, [r3, #8]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	68da      	ldr	r2, [r3, #12]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4618      	mov	r0, r3
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr

0800195e <_ZNSt5dequeIsSaIsEE15_M_destroy_dataESt15_Deque_iteratorIsRsPsES5_RKS0_>:
      _M_destroy_data(iterator __first, iterator __last,
 800195e:	b480      	push	{r7}
 8001960:	b08d      	sub	sp, #52	; 0x34
 8001962:	af00      	add	r7, sp, #0
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	603b      	str	r3, [r7, #0]
      }
 800196c:	bf00      	nop
 800196e:	3734      	adds	r7, #52	; 0x34
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr

08001976 <_ZNSt5dequeIdSaIdEE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	3b08      	subs	r3, #8
	if (this->_M_impl._M_start._M_cur
 8001988:	429a      	cmp	r2, r3
 800198a:	d011      	beq.n	80019b0 <_ZNSt5dequeIdSaIdEE9pop_frontEv+0x3a>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff ff32 	bl	80017f8 <_ZNSt11_Deque_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8001994:	4602      	mov	r2, r0
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	4619      	mov	r1, r3
 800199c:	4610      	mov	r0, r2
 800199e:	f000 fa9a 	bl	8001ed6 <_ZNSt16allocator_traitsISaIdEE7destroyIdEEvRS0_PT_>
	    ++this->_M_impl._M_start._M_cur;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f103 0208 	add.w	r2, r3, #8
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	609a      	str	r2, [r3, #8]
      }
 80019ae:	e002      	b.n	80019b6 <_ZNSt5dequeIdSaIdEE9pop_frontEv+0x40>
	  _M_pop_front_aux();
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 fa9d 	bl	8001ef0 <_ZNSt5dequeIdSaIdEE16_M_pop_front_auxEv>
      }
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <_ZNSt5dequeIdSaIdEE9push_backERKd>:
      push_back(const value_type& __x)
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
 80019c6:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	3b08      	subs	r3, #8
	if (this->_M_impl._M_finish._M_cur
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d00d      	beq.n	80019f2 <_ZNSt5dequeIdSaIdEE9push_backERKd+0x34>
	    _Alloc_traits::construct(this->_M_impl,
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	4619      	mov	r1, r3
 80019e0:	f000 faae 	bl	8001f40 <_ZNSt16allocator_traitsISaIdEE9constructIdJRKdEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	f103 0208 	add.w	r2, r3, #8
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	619a      	str	r2, [r3, #24]
      }
 80019f0:	e003      	b.n	80019fa <_ZNSt5dequeIdSaIdEE9push_backERKd+0x3c>
	  _M_push_back_aux(__x);
 80019f2:	6839      	ldr	r1, [r7, #0]
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 fab7 	bl	8001f68 <_ZNSt5dequeIdSaIdEE16_M_push_back_auxIJRKdEEEvDpOT_>
      }
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <_ZSt4moveIRdEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr

08001a16 <_ZNSt5dequeIdSaIdEE9push_backEOd>:
      push_back(value_type&& __x)
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
 8001a1e:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8001a20:	6838      	ldr	r0, [r7, #0]
 8001a22:	f7ff ffee 	bl	8001a02 <_ZSt4moveIRdEONSt16remove_referenceIT_E4typeEOS2_>
 8001a26:	4603      	mov	r3, r0
 8001a28:	4619      	mov	r1, r3
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 fae0 	bl	8001ff0 <_ZNSt5dequeIdSaIdEE12emplace_backIJdEEEvDpOT_>
 8001a30:	bf00      	nop
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <_ZSt4moveIRsEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4618      	mov	r0, r3
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <_ZNSt5dequeIsSaIsEE9push_backEOs>:
      push_back(value_type&& __x)
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8001a56:	6838      	ldr	r0, [r7, #0]
 8001a58:	f7ff ffee 	bl	8001a38 <_ZSt4moveIRsEONSt16remove_referenceIT_E4typeEOS2_>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	4619      	mov	r1, r3
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 faf0 	bl	8002046 <_ZNSt5dequeIsSaIsEE12emplace_backIJsEEEvDpOT_>
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <_ZN9__gnu_cxx14__alloc_traitsISaIdEdE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
 8001a76:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6839      	ldr	r1, [r7, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f000 fb0c 	bl	800209a <_ZNSt16allocator_traitsISaIdEE37select_on_container_copy_constructionERKS0_>
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <_ZNKSt11_Deque_baseIdSaIdEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr

08001a9e <_ZNSaIdED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 fb12 	bl	80020d0 <_ZN9__gnu_cxx13new_allocatorIdED1Ev>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <_ZNKSt5dequeIdSaIdEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f103 0218 	add.w	r2, r3, #24
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3308      	adds	r3, #8
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4610      	mov	r0, r2
 8001acc:	f000 fb0a 	bl	80020e4 <_ZStmiRKSt15_Deque_iteratorIdRdPdES4_>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <_ZNSt11_Deque_baseIdSaIdEEC1ERKS0_j>:
      _Deque_base(const allocator_type& __a, size_t __num_elements)
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b084      	sub	sp, #16
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	60f8      	str	r0, [r7, #12]
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	68b9      	ldr	r1, [r7, #8]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 fb1e 	bl	800212c <_ZNSt11_Deque_baseIdSaIdEE11_Deque_implC1ERKS0_>
      { _M_initialize_map(__num_elements); }
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f000 f8a1 	bl	8001c3a <_ZNSt11_Deque_baseIdSaIdEE17_M_initialize_mapEj>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <_ZNKSt5dequeIdSaIdEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
 8001b0a:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	3308      	adds	r3, #8
 8001b10:	4619      	mov	r1, r3
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 fb1c 	bl	8002150 <_ZNSt15_Deque_iteratorIdRKdPS0_EC1IS_IdRdPdEvEERKT_>
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <_ZNKSt5dequeIdSaIdEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	3318      	adds	r3, #24
 8001b2e:	4619      	mov	r1, r3
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 fb0d 	bl	8002150 <_ZNSt15_Deque_iteratorIdRKdPS0_EC1IS_IdRdPdEvEERKT_>
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <_ZNSt15_Deque_iteratorIdRKdPS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	68da      	ldr	r2, [r3, #12]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	60da      	str	r2, [r3, #12]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <_ZSt22__uninitialized_copy_aISt15_Deque_iteratorIdRKdPS1_ES0_IdRdPdEdET0_T_S9_S8_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b090      	sub	sp, #64	; 0x40
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
 8001b80:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8001b82:	f107 0310 	add.w	r3, r7, #16
 8001b86:	68b9      	ldr	r1, [r7, #8]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ffd8 	bl	8001b3e <_ZNSt15_Deque_iteratorIdRKdPS0_EC1ERKS3_>
 8001b8e:	f107 0320 	add.w	r3, r7, #32
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ffd2 	bl	8001b3e <_ZNSt15_Deque_iteratorIdRKdPS0_EC1ERKS3_>
 8001b9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b9e:	6839      	ldr	r1, [r7, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fe33 	bl	800180c <_ZNSt15_Deque_iteratorIdRdPdEC1ERKS2_>
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bac:	f107 0220 	add.w	r2, r7, #32
 8001bb0:	f107 0110 	add.w	r1, r7, #16
 8001bb4:	f000 fae7 	bl	8002186 <_ZSt18uninitialized_copyISt15_Deque_iteratorIdRKdPS1_ES0_IdRdPdEET0_T_S9_S8_>
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	3740      	adds	r7, #64	; 0x40
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <_ZNSt5dequeIdSaIdEE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	return *begin();
 8001bc8:	f107 0308 	add.w	r3, r7, #8
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fdf4 	bl	80017bc <_ZNSt5dequeIdSaIdEE5beginEv>
 8001bd4:	f107 0308 	add.w	r3, r7, #8
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 fafd 	bl	80021d8 <_ZNKSt15_Deque_iteratorIdRdPdEdeEv>
 8001bde:	4603      	mov	r3, r0
      }
 8001be0:	4618      	mov	r0, r3
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <_ZNSt5dequeIdSaIdEE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
	iterator __tmp = end();
 8001bf0:	f107 0308 	add.w	r3, r7, #8
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff fdef 	bl	80017da <_ZNSt5dequeIdSaIdEE3endEv>
	--__tmp;
 8001bfc:	f107 0308 	add.w	r3, r7, #8
 8001c00:	4618      	mov	r0, r3
 8001c02:	f000 faf4 	bl	80021ee <_ZNSt15_Deque_iteratorIdRdPdEmmEv>
	return *__tmp;
 8001c06:	f107 0308 	add.w	r3, r7, #8
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 fae4 	bl	80021d8 <_ZNKSt15_Deque_iteratorIdRdPdEdeEv>
 8001c10:	4603      	mov	r3, r0
      }
 8001c12:	4618      	mov	r0, r3
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <_ZNSt11_Deque_baseIdSaIdEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 fb03 	bl	800222e <_ZNSaIdEC1Ev>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 fb0b 	bl	8002246 <_ZNSt11_Deque_baseIdSaIdEE16_Deque_impl_dataC1Ev>
	{ }
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <_ZNSt11_Deque_baseIdSaIdEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8001c3a:	b590      	push	{r4, r7, lr}
 8001c3c:	b089      	sub	sp, #36	; 0x24
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8001c44:	2008      	movs	r0, #8
 8001c46:	f7ff f810 	bl	8000c6a <_ZSt16__deque_buf_sizej>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c52:	3301      	adds	r3, #1
 8001c54:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8001c56:	2308      	movs	r3, #8
 8001c58:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3302      	adds	r3, #2
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	f107 0210 	add.w	r2, r7, #16
 8001c64:	f107 030c 	add.w	r3, r7, #12
 8001c68:	4611      	mov	r1, r2
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f000 fb04 	bl	8002278 <_ZSt3maxIjERKT_S2_S2_>
 8001c70:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 fb0d 	bl	800229e <_ZNSt11_Deque_baseIdSaIdEE15_M_allocate_mapEj>
 8001c84:	4602      	mov	r2, r0
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6859      	ldr	r1, [r3, #4]
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	1acb      	subs	r3, r1, r3
 8001c96:	085b      	lsrs	r3, r3, #1
 8001c98:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8001c9a:	4413      	add	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	69b9      	ldr	r1, [r7, #24]
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 fb13 	bl	80022d8 <_ZNSt11_Deque_baseIdSaIdEE15_M_create_nodesEPPdS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3308      	adds	r3, #8
 8001cb6:	69b9      	ldr	r1, [r7, #24]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 fb27 	bl	800230c <_ZNSt15_Deque_iteratorIdRdPdE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f103 0218 	add.w	r2, r3, #24
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	3b04      	subs	r3, #4
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4610      	mov	r0, r2
 8001ccc:	f000 fb1e 	bl	800230c <_ZNSt15_Deque_iteratorIdRdPdE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68da      	ldr	r2, [r3, #12]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8001cdc:	2008      	movs	r0, #8
 8001cde:	f7fe ffc4 	bl	8000c6a <_ZSt16__deque_buf_sizej>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	fbb3 f1f2 	udiv	r1, r3, r2
 8001cea:	fb01 f202 	mul.w	r2, r1, r2
 8001cee:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	619a      	str	r2, [r3, #24]
    }
 8001cf8:	bf00      	nop
 8001cfa:	3724      	adds	r7, #36	; 0x24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd90      	pop	{r4, r7, pc}

08001d00 <_ZNSt11_Deque_baseIdSaIdEE16_M_destroy_nodesEPPdS3_>:
    _Deque_base<_Tp, _Alloc>::
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d209      	bcs.n	8001d2c <_ZNSt11_Deque_baseIdSaIdEE16_M_destroy_nodesEPPdS3_+0x2c>
	_M_deallocate_node(*__n);
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f000 fb0d 	bl	800233e <_ZNSt11_Deque_baseIdSaIdEE18_M_deallocate_nodeEPd>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	3304      	adds	r3, #4
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	e7f1      	b.n	8001d10 <_ZNSt11_Deque_baseIdSaIdEE16_M_destroy_nodesEPPdS3_+0x10>
    }
 8001d2c:	bf00      	nop
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <_ZNSt11_Deque_baseIdSaIdEE17_M_deallocate_mapEPPdj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8001d40:	f107 0314 	add.w	r3, r7, #20
 8001d44:	68f9      	ldr	r1, [r7, #12]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 fb0c 	bl	8002364 <_ZNKSt11_Deque_baseIdSaIdEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	68b9      	ldr	r1, [r7, #8]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f000 fb22 	bl	800239e <_ZNSt16allocator_traitsISaIPdEE10deallocateERS1_PS0_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8001d5a:	f107 0314 	add.w	r3, r7, #20
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 fb11 	bl	8002386 <_ZNSaIPdED1Ev>
      }
 8001d64:	bf00      	nop
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <_ZNSt11_Deque_baseIsSaIsEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 fb21 	bl	80023bc <_ZNSaIsEC1Ev>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f000 fb29 	bl	80023d4 <_ZNSt11_Deque_baseIsSaIsEE16_Deque_impl_dataC1Ev>
	{ }
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4618      	mov	r0, r3
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <_ZNSaIsED1Ev>:
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 fb36 	bl	8002406 <_ZN9__gnu_cxx13new_allocatorIsED1Ev>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <_ZNSt11_Deque_baseIsSaIsEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8001da4:	b590      	push	{r4, r7, lr}
 8001da6:	b089      	sub	sp, #36	; 0x24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8001dae:	2002      	movs	r0, #2
 8001db0:	f7fe ff5b 	bl	8000c6a <_ZSt16__deque_buf_sizej>
 8001db4:	4602      	mov	r2, r0
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	fbb3 f3f2 	udiv	r3, r3, r2
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8001dc0:	2308      	movs	r3, #8
 8001dc2:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	3302      	adds	r3, #2
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	f107 0210 	add.w	r2, r7, #16
 8001dce:	f107 030c 	add.w	r3, r7, #12
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f000 fa4f 	bl	8002278 <_ZSt3maxIjERKT_S2_S2_>
 8001dda:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	4619      	mov	r1, r3
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 fb16 	bl	800241a <_ZNSt11_Deque_baseIsSaIsEE15_M_allocate_mapEj>
 8001dee:	4602      	mov	r2, r0
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6859      	ldr	r1, [r3, #4]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	1acb      	subs	r3, r1, r3
 8001e00:	085b      	lsrs	r3, r3, #1
 8001e02:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8001e04:	4413      	add	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4413      	add	r3, r2
 8001e10:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	69b9      	ldr	r1, [r7, #24]
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 fb1c 	bl	8002454 <_ZNSt11_Deque_baseIsSaIsEE15_M_create_nodesEPPsS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3308      	adds	r3, #8
 8001e20:	69b9      	ldr	r1, [r7, #24]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 fb30 	bl	8002488 <_ZNSt15_Deque_iteratorIsRsPsE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f103 0218 	add.w	r2, r3, #24
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	3b04      	subs	r3, #4
 8001e32:	4619      	mov	r1, r3
 8001e34:	4610      	mov	r0, r2
 8001e36:	f000 fb27 	bl	8002488 <_ZNSt15_Deque_iteratorIsRsPsE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8001e46:	2002      	movs	r0, #2
 8001e48:	f7fe ff0f 	bl	8000c6a <_ZSt16__deque_buf_sizej>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e54:	fb01 f202 	mul.w	r2, r1, r2
 8001e58:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	619a      	str	r2, [r3, #24]
    }
 8001e62:	bf00      	nop
 8001e64:	3724      	adds	r7, #36	; 0x24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd90      	pop	{r4, r7, pc}

08001e6a <_ZNSt11_Deque_baseIsSaIsEE16_M_destroy_nodesEPPsS3_>:
    _Deque_base<_Tp, _Alloc>::
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d209      	bcs.n	8001e96 <_ZNSt11_Deque_baseIsSaIsEE16_M_destroy_nodesEPPsS3_+0x2c>
	_M_deallocate_node(*__n);
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4619      	mov	r1, r3
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f000 fb16 	bl	80024ba <_ZNSt11_Deque_baseIsSaIsEE18_M_deallocate_nodeEPs>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	3304      	adds	r3, #4
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	e7f1      	b.n	8001e7a <_ZNSt11_Deque_baseIsSaIsEE16_M_destroy_nodesEPPsS3_+0x10>
    }
 8001e96:	bf00      	nop
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <_ZNSt11_Deque_baseIsSaIsEE17_M_deallocate_mapEPPsj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b086      	sub	sp, #24
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	60f8      	str	r0, [r7, #12]
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8001eaa:	f107 0314 	add.w	r3, r7, #20
 8001eae:	68f9      	ldr	r1, [r7, #12]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f000 fb15 	bl	80024e0 <_ZNKSt11_Deque_baseIsSaIsEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8001eb6:	f107 0314 	add.w	r3, r7, #20
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 fb2b 	bl	800251a <_ZNSt16allocator_traitsISaIPsEE10deallocateERS1_PS0_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f000 fb1a 	bl	8002502 <_ZNSaIPsED1Ev>
      }
 8001ece:	bf00      	nop
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <_ZNSt16allocator_traitsISaIdEE7destroyIdEEvRS0_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8001ee0:	6839      	ldr	r1, [r7, #0]
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 fb28 	bl	8002538 <_ZN9__gnu_cxx13new_allocatorIdE7destroyIdEEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 8001ee8:	bf00      	nop
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <_ZNSt5dequeIdSaIdEE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fc7c 	bl	80017f8 <_ZNSt11_Deque_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8001f00:	4602      	mov	r2, r0
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	4619      	mov	r1, r3
 8001f08:	4610      	mov	r0, r2
 8001f0a:	f7ff ffe4 	bl	8001ed6 <_ZNSt16allocator_traitsISaIdEE7destroyIdEEvRS0_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	4619      	mov	r1, r3
 8001f16:	4610      	mov	r0, r2
 8001f18:	f000 fa11 	bl	800233e <_ZNSt11_Deque_baseIdSaIdEE18_M_deallocate_nodeEPd>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f103 0208 	add.w	r2, r3, #8
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	3304      	adds	r3, #4
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	f000 f9ee 	bl	800230c <_ZNSt15_Deque_iteratorIdRdPdE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68da      	ldr	r2, [r3, #12]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	609a      	str	r2, [r3, #8]
    }
 8001f38:	bf00      	nop
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <_ZNSt16allocator_traitsISaIdEE9constructIdJRKdEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 fafd 	bl	800254c <_ZSt7forwardIRKdEOT_RNSt16remove_referenceIS2_E4typeE>
 8001f52:	4603      	mov	r3, r0
 8001f54:	461a      	mov	r2, r3
 8001f56:	68b9      	ldr	r1, [r7, #8]
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f000 fb01 	bl	8002560 <_ZN9__gnu_cxx13new_allocatorIdE9constructIdJRKdEEEvPT_DpOT0_>
	}
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <_ZNSt5dequeIdSaIdEE16_M_push_back_auxIJRKdEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8001f68:	b5b0      	push	{r4, r5, r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff fd9f 	bl	8001ab6 <_ZNKSt5dequeIdSaIdEE4sizeEv>
 8001f78:	4604      	mov	r4, r0
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 fb08 	bl	8002590 <_ZNKSt5dequeIdSaIdEE8max_sizeEv>
 8001f80:	4603      	mov	r3, r0
 8001f82:	429c      	cmp	r4, r3
 8001f84:	bf0c      	ite	eq
 8001f86:	2301      	moveq	r3, #1
 8001f88:	2300      	movne	r3, #0
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <_ZNSt5dequeIdSaIdEE16_M_push_back_auxIJRKdEEEvDpOT_+0x2e>
	  __throw_length_error(
 8001f90:	4816      	ldr	r0, [pc, #88]	; (8001fec <_ZNSt5dequeIdSaIdEE16_M_push_back_auxIJRKdEEEvDpOT_+0x84>)
 8001f92:	f006 fb79 	bl	8008688 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8001f96:	2101      	movs	r1, #1
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 fb0a 	bl	80025b2 <_ZNSt5dequeIdSaIdEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	1d1c      	adds	r4, r3, #4
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	f000 fb1e 	bl	80025e8 <_ZNSt11_Deque_baseIdSaIdEE16_M_allocate_nodeEv>
 8001fac:	4603      	mov	r3, r0
 8001fae:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8001fb0:	687c      	ldr	r4, [r7, #4]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	699d      	ldr	r5, [r3, #24]
 8001fb6:	6838      	ldr	r0, [r7, #0]
 8001fb8:	f000 fac8 	bl	800254c <_ZSt7forwardIRKdEOT_RNSt16remove_referenceIS2_E4typeE>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4629      	mov	r1, r5
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	f7ff ffbc 	bl	8001f40 <_ZNSt16allocator_traitsISaIdEE9constructIdJRKdEEEvRS0_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f103 0218 	add.w	r2, r3, #24
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	3304      	adds	r3, #4
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	f000 f998 	bl	800230c <_ZNSt15_Deque_iteratorIdRdPdE11_M_set_nodeEPS1_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69da      	ldr	r2, [r3, #28]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	619a      	str	r2, [r3, #24]
      }
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bdb0      	pop	{r4, r5, r7, pc}
 8001fec:	08008eb0 	.word	0x08008eb0

08001ff0 <_ZNSt5dequeIdSaIdEE12emplace_backIJdEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8001ff0:	b5b0      	push	{r4, r5, r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	3b08      	subs	r3, #8
	if (this->_M_impl._M_finish._M_cur
 8002004:	429a      	cmp	r2, r3
 8002006:	d012      	beq.n	800202e <_ZNSt5dequeIdSaIdEE12emplace_backIJdEEEvDpOT_+0x3e>
	    _Alloc_traits::construct(this->_M_impl,
 8002008:	687c      	ldr	r4, [r7, #4]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699d      	ldr	r5, [r3, #24]
 800200e:	6838      	ldr	r0, [r7, #0]
 8002010:	f000 fafc 	bl	800260c <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 8002014:	4603      	mov	r3, r0
 8002016:	461a      	mov	r2, r3
 8002018:	4629      	mov	r1, r5
 800201a:	4620      	mov	r0, r4
 800201c:	f000 fb00 	bl	8002620 <_ZNSt16allocator_traitsISaIdEE9constructIdJdEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	f103 0208 	add.w	r2, r3, #8
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	619a      	str	r2, [r3, #24]
      }
 800202c:	e007      	b.n	800203e <_ZNSt5dequeIdSaIdEE12emplace_backIJdEEEvDpOT_+0x4e>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 800202e:	6838      	ldr	r0, [r7, #0]
 8002030:	f000 faec 	bl	800260c <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 8002034:	4603      	mov	r3, r0
 8002036:	4619      	mov	r1, r3
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 fb05 	bl	8002648 <_ZNSt5dequeIdSaIdEE16_M_push_back_auxIJdEEEvDpOT_>
      }
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bdb0      	pop	{r4, r5, r7, pc}

08002046 <_ZNSt5dequeIsSaIsEE12emplace_backIJsEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8002046:	b5b0      	push	{r4, r5, r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	3b02      	subs	r3, #2
	if (this->_M_impl._M_finish._M_cur
 800205a:	429a      	cmp	r2, r3
 800205c:	d011      	beq.n	8002082 <_ZNSt5dequeIsSaIsEE12emplace_backIJsEEEvDpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl,
 800205e:	687c      	ldr	r4, [r7, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	699d      	ldr	r5, [r3, #24]
 8002064:	6838      	ldr	r0, [r7, #0]
 8002066:	f000 fb33 	bl	80026d0 <_ZSt7forwardIsEOT_RNSt16remove_referenceIS0_E4typeE>
 800206a:	4603      	mov	r3, r0
 800206c:	461a      	mov	r2, r3
 800206e:	4629      	mov	r1, r5
 8002070:	4620      	mov	r0, r4
 8002072:	f000 fb37 	bl	80026e4 <_ZNSt16allocator_traitsISaIsEE9constructIsJsEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	1c9a      	adds	r2, r3, #2
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	619a      	str	r2, [r3, #24]
      }
 8002080:	e007      	b.n	8002092 <_ZNSt5dequeIsSaIsEE12emplace_backIJsEEEvDpOT_+0x4c>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 8002082:	6838      	ldr	r0, [r7, #0]
 8002084:	f000 fb24 	bl	80026d0 <_ZSt7forwardIsEOT_RNSt16remove_referenceIS0_E4typeE>
 8002088:	4603      	mov	r3, r0
 800208a:	4619      	mov	r1, r3
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 fb3d 	bl	800270c <_ZNSt5dequeIsSaIsEE16_M_push_back_auxIJsEEEvDpOT_>
      }
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bdb0      	pop	{r4, r5, r7, pc}

0800209a <_ZNSt16allocator_traitsISaIdEE37select_on_container_copy_constructionERKS0_>:
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */
      static _GLIBCXX20_CONSTEXPR allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 80020a4:	6839      	ldr	r1, [r7, #0]
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f804 	bl	80020b4 <_ZNSaIdEC1ERKS_>
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <_ZNSaIdEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80020be:	6839      	ldr	r1, [r7, #0]
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 fb67 	bl	8002794 <_ZN9__gnu_cxx13new_allocatorIdEC1ERKS1_>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <_ZN9__gnu_cxx13new_allocatorIdED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4618      	mov	r0, r3
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr

080020e4 <_ZStmiRKSt15_Deque_iteratorIdRdPdES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 80020ee:	f000 fb5c 	bl	80027aa <_ZNSt15_Deque_iteratorIdRdPdE14_S_buffer_sizeEv>
 80020f2:	4603      	mov	r3, r0
 80020f4:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	109b      	asrs	r3, r3, #2
 8002102:	3b01      	subs	r3, #1
 8002104:	fb01 f303 	mul.w	r3, r1, r3
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	6811      	ldr	r1, [r2, #0]
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6852      	ldr	r2, [r2, #4]
 8002110:	1a8a      	subs	r2, r1, r2
 8002112:	10d2      	asrs	r2, r2, #3
 8002114:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	6891      	ldr	r1, [r2, #8]
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	1a8a      	subs	r2, r1, r2
 8002120:	10d2      	asrs	r2, r2, #3
 8002122:	4413      	add	r3, r2
      }
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <_ZNSt11_Deque_baseIdSaIdEE11_Deque_implC1ERKS0_>:
	_Deque_impl(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8002136:	6839      	ldr	r1, [r7, #0]
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff ffbb 	bl	80020b4 <_ZNSaIdEC1ERKS_>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4618      	mov	r0, r3
 8002142:	f000 f880 	bl	8002246 <_ZNSt11_Deque_baseIdSaIdEE16_Deque_impl_dataC1Ev>
	{ }
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4618      	mov	r0, r3
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <_ZNSt15_Deque_iteratorIdRKdPS0_EC1IS_IdRdPdEvEERKT_>:
       _Deque_iterator(const _Iter& __x) noexcept
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	609a      	str	r2, [r3, #8]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr

08002186 <_ZSt18uninitialized_copyISt15_Deque_iteratorIdRKdPS1_ES0_IdRdPdEET0_T_S9_S8_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8002186:	b580      	push	{r7, lr}
 8002188:	b092      	sub	sp, #72	; 0x48
 800218a:	af00      	add	r7, sp, #0
 800218c:	60f8      	str	r0, [r7, #12]
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	607a      	str	r2, [r7, #4]
 8002192:	603b      	str	r3, [r7, #0]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8002194:	2301      	movs	r3, #1
 8002196:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	__uninit_copy(__first, __last, __result);
 800219a:	f107 0314 	add.w	r3, r7, #20
 800219e:	68b9      	ldr	r1, [r7, #8]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fccc 	bl	8001b3e <_ZNSt15_Deque_iteratorIdRKdPS0_EC1ERKS3_>
 80021a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fcc6 	bl	8001b3e <_ZNSt15_Deque_iteratorIdRKdPS0_EC1ERKS3_>
 80021b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021b6:	6839      	ldr	r1, [r7, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff fb27 	bl	800180c <_ZNSt15_Deque_iteratorIdRdPdEC1ERKS2_>
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021c4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80021c8:	f107 0114 	add.w	r1, r7, #20
 80021cc:	f000 faf5 	bl	80027ba <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt15_Deque_iteratorIdRKdPS3_ES2_IdRdPdEEET0_T_SB_SA_>
    }
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	3748      	adds	r7, #72	; 0x48
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <_ZNKSt15_Deque_iteratorIdRdPdEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr

080021ee <_ZNSt15_Deque_iteratorIdRdPdEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
	if (_M_cur == _M_first)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d10a      	bne.n	8002218 <_ZNSt15_Deque_iteratorIdRdPdEmmEv+0x2a>
	    _M_set_node(_M_node - 1);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	3b04      	subs	r3, #4
 8002208:	4619      	mov	r1, r3
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f87e 	bl	800230c <_ZNSt15_Deque_iteratorIdRdPdE11_M_set_nodeEPS1_>
	    _M_cur = _M_last;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	601a      	str	r2, [r3, #0]
	--_M_cur;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f1a3 0208 	sub.w	r2, r3, #8
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	601a      	str	r2, [r3, #0]
	return *this;
 8002224:	687b      	ldr	r3, [r7, #4]
      }
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <_ZNSaIdEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 fb35 	bl	80028a6 <_ZN9__gnu_cxx13new_allocatorIdEC1Ev>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <_ZNSt11_Deque_baseIdSaIdEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3308      	adds	r3, #8
 800225e:	4618      	mov	r0, r3
 8002260:	f000 fb2b 	bl	80028ba <_ZNSt15_Deque_iteratorIdRdPdEC1Ev>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3318      	adds	r3, #24
 8002268:	4618      	mov	r0, r3
 800226a:	f000 fb26 	bl	80028ba <_ZNSt15_Deque_iteratorIdRdPdEC1Ev>
	{ }
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4618      	mov	r0, r3
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d201      	bcs.n	8002292 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	e000      	b.n	8002294 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8002292:	687b      	ldr	r3, [r7, #4]
    }
 8002294:	4618      	mov	r0, r3
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr

0800229e <_ZNSt11_Deque_baseIdSaIdEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 800229e:	b590      	push	{r4, r7, lr}
 80022a0:	b085      	sub	sp, #20
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80022a8:	f107 030c 	add.w	r3, r7, #12
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 f858 	bl	8002364 <_ZNKSt11_Deque_baseIdSaIdEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80022b4:	f107 030c 	add.w	r3, r7, #12
 80022b8:	6839      	ldr	r1, [r7, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 fb13 	bl	80028e6 <_ZNSt16allocator_traitsISaIPdEE8allocateERS1_j>
 80022c0:	4604      	mov	r4, r0
 80022c2:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80022c4:	f107 030c 	add.w	r3, r7, #12
 80022c8:	4618      	mov	r0, r3
 80022ca:	f000 f85c 	bl	8002386 <_ZNSaIPdED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80022ce:	4623      	mov	r3, r4
      }
 80022d0:	4618      	mov	r0, r3
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd90      	pop	{r4, r7, pc}

080022d8 <_ZNSt11_Deque_baseIdSaIdEE15_M_create_nodesEPPdS3_>:
    _Deque_base<_Tp, _Alloc>::
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d209      	bcs.n	8002304 <_ZNSt11_Deque_baseIdSaIdEE15_M_create_nodesEPPdS3_+0x2c>
	    *__cur = this->_M_allocate_node();
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 f979 	bl	80025e8 <_ZNSt11_Deque_baseIdSaIdEE16_M_allocate_nodeEv>
 80022f6:	4602      	mov	r2, r0
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	3304      	adds	r3, #4
 8002300:	617b      	str	r3, [r7, #20]
 8002302:	e7f1      	b.n	80022e8 <_ZNSt11_Deque_baseIdSaIdEE15_M_create_nodesEPPdS3_+0x10>
    }
 8002304:	bf00      	nop
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <_ZNSt15_Deque_iteratorIdRdPdE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 800230c:	b590      	push	{r4, r7, lr}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685c      	ldr	r4, [r3, #4]
 8002328:	f000 fa3f 	bl	80027aa <_ZNSt15_Deque_iteratorIdRdPdE14_S_buffer_sizeEv>
 800232c:	4603      	mov	r3, r0
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	18e2      	adds	r2, r4, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	609a      	str	r2, [r3, #8]
      }
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	bd90      	pop	{r4, r7, pc}

0800233e <_ZNSt11_Deque_baseIdSaIdEE18_M_deallocate_nodeEPd>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 800233e:	b590      	push	{r4, r7, lr}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
 8002346:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8002348:	687c      	ldr	r4, [r7, #4]
 800234a:	2008      	movs	r0, #8
 800234c:	f7fe fc8d 	bl	8000c6a <_ZSt16__deque_buf_sizej>
 8002350:	4603      	mov	r3, r0
 8002352:	461a      	mov	r2, r3
 8002354:	6839      	ldr	r1, [r7, #0]
 8002356:	4620      	mov	r0, r4
 8002358:	f000 fad4 	bl	8002904 <_ZNSt16allocator_traitsISaIdEE10deallocateERS0_Pdj>
      }
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	bd90      	pop	{r4, r7, pc}

08002364 <_ZNKSt11_Deque_baseIdSaIdEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 800236e:	6838      	ldr	r0, [r7, #0]
 8002370:	f7ff fb8b 	bl	8001a8a <_ZNKSt11_Deque_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8002374:	4603      	mov	r3, r0
 8002376:	4619      	mov	r1, r3
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 fad2 	bl	8002922 <_ZNSaIPdEC1IdEERKSaIT_E>
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <_ZNSaIPdED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 fad4 	bl	800293c <_ZN9__gnu_cxx13new_allocatorIPdED1Ev>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <_ZNSt16allocator_traitsISaIPdEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800239e:	b580      	push	{r7, lr}
 80023a0:	b084      	sub	sp, #16
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	60f8      	str	r0, [r7, #12]
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68b9      	ldr	r1, [r7, #8]
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 face 	bl	8002950 <_ZN9__gnu_cxx13new_allocatorIPdE10deallocateEPS1_j>
 80023b4:	bf00      	nop
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <_ZNSaIsEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 fad3 	bl	8002970 <_ZN9__gnu_cxx13new_allocatorIsEC1Ev>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4618      	mov	r0, r3
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <_ZNSt11_Deque_baseIsSaIsEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	605a      	str	r2, [r3, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3308      	adds	r3, #8
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 fac9 	bl	8002984 <_ZNSt15_Deque_iteratorIsRsPsEC1Ev>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3318      	adds	r3, #24
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 fac4 	bl	8002984 <_ZNSt15_Deque_iteratorIsRsPsEC1Ev>
	{ }
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <_ZN9__gnu_cxx13new_allocatorIsED1Ev>:
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4618      	mov	r0, r3
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr

0800241a <_ZNSt11_Deque_baseIsSaIsEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 800241a:	b590      	push	{r4, r7, lr}
 800241c:	b085      	sub	sp, #20
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002424:	f107 030c 	add.w	r3, r7, #12
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	4618      	mov	r0, r3
 800242c:	f000 f858 	bl	80024e0 <_ZNKSt11_Deque_baseIsSaIsEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8002430:	f107 030c 	add.w	r3, r7, #12
 8002434:	6839      	ldr	r1, [r7, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f000 faba 	bl	80029b0 <_ZNSt16allocator_traitsISaIPsEE8allocateERS1_j>
 800243c:	4604      	mov	r4, r0
 800243e:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002440:	f107 030c 	add.w	r3, r7, #12
 8002444:	4618      	mov	r0, r3
 8002446:	f000 f85c 	bl	8002502 <_ZNSaIPsED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800244a:	4623      	mov	r3, r4
      }
 800244c:	4618      	mov	r0, r3
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	bd90      	pop	{r4, r7, pc}

08002454 <_ZNSt11_Deque_baseIsSaIsEE15_M_create_nodesEPPsS3_>:
    _Deque_base<_Tp, _Alloc>::
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	429a      	cmp	r2, r3
 800246a:	d209      	bcs.n	8002480 <_ZNSt11_Deque_baseIsSaIsEE15_M_create_nodesEPPsS3_+0x2c>
	    *__cur = this->_M_allocate_node();
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 fa08 	bl	8002882 <_ZNSt11_Deque_baseIsSaIsEE16_M_allocate_nodeEv>
 8002472:	4602      	mov	r2, r0
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	3304      	adds	r3, #4
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	e7f1      	b.n	8002464 <_ZNSt11_Deque_baseIsSaIsEE15_M_create_nodesEPPsS3_+0x10>
    }
 8002480:	bf00      	nop
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <_ZNSt15_Deque_iteratorIsRsPsE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8002488:	b590      	push	{r4, r7, lr}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685c      	ldr	r4, [r3, #4]
 80024a4:	f000 fa93 	bl	80029ce <_ZNSt15_Deque_iteratorIsRsPsE14_S_buffer_sizeEv>
 80024a8:	4603      	mov	r3, r0
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	18e2      	adds	r2, r4, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	609a      	str	r2, [r3, #8]
      }
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd90      	pop	{r4, r7, pc}

080024ba <_ZNSt11_Deque_baseIsSaIsEE18_M_deallocate_nodeEPs>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 80024ba:	b590      	push	{r4, r7, lr}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 80024c4:	687c      	ldr	r4, [r7, #4]
 80024c6:	2002      	movs	r0, #2
 80024c8:	f7fe fbcf 	bl	8000c6a <_ZSt16__deque_buf_sizej>
 80024cc:	4603      	mov	r3, r0
 80024ce:	461a      	mov	r2, r3
 80024d0:	6839      	ldr	r1, [r7, #0]
 80024d2:	4620      	mov	r0, r4
 80024d4:	f000 fa83 	bl	80029de <_ZNSt16allocator_traitsISaIsEE10deallocateERS0_Psj>
      }
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd90      	pop	{r4, r7, pc}

080024e0 <_ZNKSt11_Deque_baseIsSaIsEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 80024ea:	6838      	ldr	r0, [r7, #0]
 80024ec:	f000 fa86 	bl	80029fc <_ZNKSt11_Deque_baseIsSaIsEE19_M_get_Tp_allocatorEv>
 80024f0:	4603      	mov	r3, r0
 80024f2:	4619      	mov	r1, r3
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 fa8b 	bl	8002a10 <_ZNSaIPsEC1IsEERKSaIT_E>
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <_ZNSaIPsED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 fa8d 	bl	8002a2a <_ZN9__gnu_cxx13new_allocatorIPsED1Ev>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <_ZNSt16allocator_traitsISaIPsEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800251a:	b580      	push	{r7, lr}
 800251c:	b084      	sub	sp, #16
 800251e:	af00      	add	r7, sp, #0
 8002520:	60f8      	str	r0, [r7, #12]
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	68b9      	ldr	r1, [r7, #8]
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 fa87 	bl	8002a3e <_ZN9__gnu_cxx13new_allocatorIPsE10deallocateEPS1_j>
 8002530:	bf00      	nop
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <_ZN9__gnu_cxx13new_allocatorIdE7destroyIdEEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <_ZSt7forwardIRKdEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4618      	mov	r0, r3
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr

08002560 <_ZN9__gnu_cxx13new_allocatorIdE9constructIdJRKdEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002560:	b5b0      	push	{r4, r5, r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff ffed 	bl	800254c <_ZSt7forwardIRKdEOT_RNSt16remove_referenceIS2_E4typeE>
 8002572:	4603      	mov	r3, r0
 8002574:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	4619      	mov	r1, r3
 800257c:	2008      	movs	r0, #8
 800257e:	f7fe fb69 	bl	8000c54 <_ZnwjPv>
 8002582:	4603      	mov	r3, r0
 8002584:	e9c3 4500 	strd	r4, r5, [r3]
 8002588:	bf00      	nop
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bdb0      	pop	{r4, r5, r7, pc}

08002590 <_ZNKSt5dequeIdSaIdEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff fa75 	bl	8001a8a <_ZNKSt11_Deque_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 80025a0:	4603      	mov	r3, r0
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 fa5b 	bl	8002a5e <_ZNSt5dequeIdSaIdEE11_S_max_sizeERKS0_>
 80025a8:	4603      	mov	r3, r0
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <_ZNSt5dequeIdSaIdEE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
 80025ba:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	1c5a      	adds	r2, r3, #1
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	6809      	ldr	r1, [r1, #0]
 80025cc:	1a41      	subs	r1, r0, r1
 80025ce:	1089      	asrs	r1, r1, #2
 80025d0:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d904      	bls.n	80025e0 <_ZNSt5dequeIdSaIdEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 80025d6:	2200      	movs	r2, #0
 80025d8:	6839      	ldr	r1, [r7, #0]
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 fa59 	bl	8002a92 <_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEjb>
      }
 80025e0:	bf00      	nop
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <_ZNSt11_Deque_baseIdSaIdEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 80025e8:	b590      	push	{r4, r7, lr}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 80025f0:	687c      	ldr	r4, [r7, #4]
 80025f2:	2008      	movs	r0, #8
 80025f4:	f7fe fb39 	bl	8000c6a <_ZSt16__deque_buf_sizej>
 80025f8:	4603      	mov	r3, r0
 80025fa:	4619      	mov	r1, r3
 80025fc:	4620      	mov	r0, r4
 80025fe:	f000 fae2 	bl	8002bc6 <_ZNSt16allocator_traitsISaIdEE8allocateERS0_j>
 8002602:	4603      	mov	r3, r0
      }
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	bd90      	pop	{r4, r7, pc}

0800260c <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4618      	mov	r0, r3
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <_ZNSt16allocator_traitsISaIdEE9constructIdJdEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff ffed 	bl	800260c <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 8002632:	4603      	mov	r3, r0
 8002634:	461a      	mov	r2, r3
 8002636:	68b9      	ldr	r1, [r7, #8]
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 fad3 	bl	8002be4 <_ZN9__gnu_cxx13new_allocatorIdE9constructIdJdEEEvPT_DpOT0_>
	}
 800263e:	bf00      	nop
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
	...

08002648 <_ZNSt5dequeIdSaIdEE16_M_push_back_auxIJdEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8002648:	b5b0      	push	{r4, r5, r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff fa2f 	bl	8001ab6 <_ZNKSt5dequeIdSaIdEE4sizeEv>
 8002658:	4604      	mov	r4, r0
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7ff ff98 	bl	8002590 <_ZNKSt5dequeIdSaIdEE8max_sizeEv>
 8002660:	4603      	mov	r3, r0
 8002662:	429c      	cmp	r4, r3
 8002664:	bf0c      	ite	eq
 8002666:	2301      	moveq	r3, #1
 8002668:	2300      	movne	r3, #0
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d002      	beq.n	8002676 <_ZNSt5dequeIdSaIdEE16_M_push_back_auxIJdEEEvDpOT_+0x2e>
	  __throw_length_error(
 8002670:	4816      	ldr	r0, [pc, #88]	; (80026cc <_ZNSt5dequeIdSaIdEE16_M_push_back_auxIJdEEEvDpOT_+0x84>)
 8002672:	f006 f809 	bl	8008688 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8002676:	2101      	movs	r1, #1
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff ff9a 	bl	80025b2 <_ZNSt5dequeIdSaIdEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	1d1c      	adds	r4, r3, #4
 8002686:	4610      	mov	r0, r2
 8002688:	f7ff ffae 	bl	80025e8 <_ZNSt11_Deque_baseIdSaIdEE16_M_allocate_nodeEv>
 800268c:	4603      	mov	r3, r0
 800268e:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8002690:	687c      	ldr	r4, [r7, #4]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	699d      	ldr	r5, [r3, #24]
 8002696:	6838      	ldr	r0, [r7, #0]
 8002698:	f7ff ffb8 	bl	800260c <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 800269c:	4603      	mov	r3, r0
 800269e:	461a      	mov	r2, r3
 80026a0:	4629      	mov	r1, r5
 80026a2:	4620      	mov	r0, r4
 80026a4:	f7ff ffbc 	bl	8002620 <_ZNSt16allocator_traitsISaIdEE9constructIdJdEEEvRS0_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f103 0218 	add.w	r2, r3, #24
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	3304      	adds	r3, #4
 80026b4:	4619      	mov	r1, r3
 80026b6:	4610      	mov	r0, r2
 80026b8:	f7ff fe28 	bl	800230c <_ZNSt15_Deque_iteratorIdRdPdE11_M_set_nodeEPS1_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69da      	ldr	r2, [r3, #28]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	619a      	str	r2, [r3, #24]
      }
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bdb0      	pop	{r4, r5, r7, pc}
 80026cc:	08008eb0 	.word	0x08008eb0

080026d0 <_ZSt7forwardIsEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4618      	mov	r0, r3
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr

080026e4 <_ZNSt16allocator_traitsISaIsEE9constructIsJsEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7ff ffed 	bl	80026d0 <_ZSt7forwardIsEOT_RNSt16remove_referenceIS0_E4typeE>
 80026f6:	4603      	mov	r3, r0
 80026f8:	461a      	mov	r2, r3
 80026fa:	68b9      	ldr	r1, [r7, #8]
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 fa89 	bl	8002c14 <_ZN9__gnu_cxx13new_allocatorIsE9constructIsJsEEEvPT_DpOT0_>
	}
 8002702:	bf00      	nop
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <_ZNSt5dequeIsSaIsEE16_M_push_back_auxIJsEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 800270c:	b5b0      	push	{r4, r5, r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f875 	bl	8002806 <_ZNKSt5dequeIsSaIsEE4sizeEv>
 800271c:	4604      	mov	r4, r0
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f883 	bl	800282a <_ZNKSt5dequeIsSaIsEE8max_sizeEv>
 8002724:	4603      	mov	r3, r0
 8002726:	429c      	cmp	r4, r3
 8002728:	bf0c      	ite	eq
 800272a:	2301      	moveq	r3, #1
 800272c:	2300      	movne	r3, #0
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d002      	beq.n	800273a <_ZNSt5dequeIsSaIsEE16_M_push_back_auxIJsEEEvDpOT_+0x2e>
	  __throw_length_error(
 8002734:	4816      	ldr	r0, [pc, #88]	; (8002790 <_ZNSt5dequeIsSaIsEE16_M_push_back_auxIJsEEEvDpOT_+0x84>)
 8002736:	f005 ffa7 	bl	8008688 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 800273a:	2101      	movs	r1, #1
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f885 	bl	800284c <_ZNSt5dequeIsSaIsEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	1d1c      	adds	r4, r3, #4
 800274a:	4610      	mov	r0, r2
 800274c:	f000 f899 	bl	8002882 <_ZNSt11_Deque_baseIsSaIsEE16_M_allocate_nodeEv>
 8002750:	4603      	mov	r3, r0
 8002752:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8002754:	687c      	ldr	r4, [r7, #4]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699d      	ldr	r5, [r3, #24]
 800275a:	6838      	ldr	r0, [r7, #0]
 800275c:	f7ff ffb8 	bl	80026d0 <_ZSt7forwardIsEOT_RNSt16remove_referenceIS0_E4typeE>
 8002760:	4603      	mov	r3, r0
 8002762:	461a      	mov	r2, r3
 8002764:	4629      	mov	r1, r5
 8002766:	4620      	mov	r0, r4
 8002768:	f7ff ffbc 	bl	80026e4 <_ZNSt16allocator_traitsISaIsEE9constructIsJsEEEvRS0_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f103 0218 	add.w	r2, r3, #24
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	3304      	adds	r3, #4
 8002778:	4619      	mov	r1, r3
 800277a:	4610      	mov	r0, r2
 800277c:	f7ff fe84 	bl	8002488 <_ZNSt15_Deque_iteratorIsRsPsE11_M_set_nodeEPS1_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69da      	ldr	r2, [r3, #28]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	619a      	str	r2, [r3, #24]
      }
 8002788:	bf00      	nop
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bdb0      	pop	{r4, r5, r7, pc}
 8002790:	08008eb0 	.word	0x08008eb0

08002794 <_ZN9__gnu_cxx13new_allocatorIdEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4618      	mov	r0, r3
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bc80      	pop	{r7}
 80027a8:	4770      	bx	lr

080027aa <_ZNSt15_Deque_iteratorIdRdPdE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80027aa:	b580      	push	{r7, lr}
 80027ac:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80027ae:	2008      	movs	r0, #8
 80027b0:	f7fe fa5b 	bl	8000c6a <_ZSt16__deque_buf_sizej>
 80027b4:	4603      	mov	r3, r0
 80027b6:	4618      	mov	r0, r3
 80027b8:	bd80      	pop	{r7, pc}

080027ba <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt15_Deque_iteratorIdRKdPS3_ES2_IdRdPdEEET0_T_SB_SA_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b090      	sub	sp, #64	; 0x40
 80027be:	af00      	add	r7, sp, #0
 80027c0:	60f8      	str	r0, [r7, #12]
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	607a      	str	r2, [r7, #4]
 80027c6:	603b      	str	r3, [r7, #0]
        { return std::copy(__first, __last, __result); }
 80027c8:	f107 0310 	add.w	r3, r7, #16
 80027cc:	68b9      	ldr	r1, [r7, #8]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff f9b5 	bl	8001b3e <_ZNSt15_Deque_iteratorIdRKdPS0_EC1ERKS3_>
 80027d4:	f107 0320 	add.w	r3, r7, #32
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff f9af 	bl	8001b3e <_ZNSt15_Deque_iteratorIdRKdPS0_EC1ERKS3_>
 80027e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027e4:	6839      	ldr	r1, [r7, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff f810 	bl	800180c <_ZNSt15_Deque_iteratorIdRdPdEC1ERKS2_>
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027f2:	f107 0220 	add.w	r2, r7, #32
 80027f6:	f107 0110 	add.w	r1, r7, #16
 80027fa:	f000 fa23 	bl	8002c44 <_ZSt4copyISt15_Deque_iteratorIdRKdPS1_ES0_IdRdPdEET0_T_S9_S8_>
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	3740      	adds	r7, #64	; 0x40
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <_ZNKSt5dequeIsSaIsEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f103 0218 	add.w	r2, r3, #24
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3308      	adds	r3, #8
 8002818:	4619      	mov	r1, r3
 800281a:	4610      	mov	r0, r2
 800281c:	f000 fa48 	bl	8002cb0 <_ZStmiRKSt15_Deque_iteratorIsRsPsES4_>
 8002820:	4603      	mov	r3, r0
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <_ZNKSt5dequeIsSaIsEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4618      	mov	r0, r3
 8002836:	f000 f8e1 	bl	80029fc <_ZNKSt11_Deque_baseIsSaIsEE19_M_get_Tp_allocatorEv>
 800283a:	4603      	mov	r3, r0
 800283c:	4618      	mov	r0, r3
 800283e:	f000 fa5b 	bl	8002cf8 <_ZNSt5dequeIsSaIsEE11_S_max_sizeERKS0_>
 8002842:	4603      	mov	r3, r0
 8002844:	4618      	mov	r0, r3
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <_ZNSt5dequeIsSaIsEE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	6809      	ldr	r1, [r1, #0]
 8002866:	1a41      	subs	r1, r0, r1
 8002868:	1089      	asrs	r1, r1, #2
 800286a:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800286c:	429a      	cmp	r2, r3
 800286e:	d904      	bls.n	800287a <_ZNSt5dequeIsSaIsEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8002870:	2200      	movs	r2, #0
 8002872:	6839      	ldr	r1, [r7, #0]
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 fa59 	bl	8002d2c <_ZNSt5dequeIsSaIsEE17_M_reallocate_mapEjb>
      }
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <_ZNSt11_Deque_baseIsSaIsEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8002882:	b590      	push	{r4, r7, lr}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 800288a:	687c      	ldr	r4, [r7, #4]
 800288c:	2002      	movs	r0, #2
 800288e:	f7fe f9ec 	bl	8000c6a <_ZSt16__deque_buf_sizej>
 8002892:	4603      	mov	r3, r0
 8002894:	4619      	mov	r1, r3
 8002896:	4620      	mov	r0, r4
 8002898:	f000 fae2 	bl	8002e60 <_ZNSt16allocator_traitsISaIsEE8allocateERS0_j>
 800289c:	4603      	mov	r3, r0
      }
 800289e:	4618      	mov	r0, r3
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd90      	pop	{r4, r7, pc}

080028a6 <_ZN9__gnu_cxx13new_allocatorIdEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4618      	mov	r0, r3
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc80      	pop	{r7}
 80028b8:	4770      	bx	lr

080028ba <_ZNSt15_Deque_iteratorIdRdPdEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	60da      	str	r2, [r3, #12]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4618      	mov	r0, r3
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr

080028e6 <_ZNSt16allocator_traitsISaIPdEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
 80028ee:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80028f0:	2200      	movs	r2, #0
 80028f2:	6839      	ldr	r1, [r7, #0]
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 fac2 	bl	8002e7e <_ZN9__gnu_cxx13new_allocatorIPdE8allocateEjPKv>
 80028fa:	4603      	mov	r3, r0
 80028fc:	4618      	mov	r0, r3
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <_ZNSt16allocator_traitsISaIdEE10deallocateERS0_Pdj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	68b9      	ldr	r1, [r7, #8]
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 fad0 	bl	8002eba <_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdj>
 800291a:	bf00      	nop
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <_ZNSaIPdEC1IdEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8002922:	b580      	push	{r7, lr}
 8002924:	b082      	sub	sp, #8
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	6039      	str	r1, [r7, #0]
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 fad4 	bl	8002eda <_ZN9__gnu_cxx13new_allocatorIPdEC1Ev>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4618      	mov	r0, r3
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <_ZN9__gnu_cxx13new_allocatorIPdED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4618      	mov	r0, r3
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr

08002950 <_ZN9__gnu_cxx13new_allocatorIPdE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4619      	mov	r1, r3
 8002962:	68b8      	ldr	r0, [r7, #8]
 8002964:	f005 fe7a 	bl	800865c <_ZdlPvj>
      }
 8002968:	bf00      	nop
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <_ZN9__gnu_cxx13new_allocatorIsEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4618      	mov	r0, r3
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <_ZNSt15_Deque_iteratorIsRsPsEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	605a      	str	r2, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	609a      	str	r2, [r3, #8]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	60da      	str	r2, [r3, #12]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4618      	mov	r0, r3
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr

080029b0 <_ZNSt16allocator_traitsISaIPsEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80029ba:	2200      	movs	r2, #0
 80029bc:	6839      	ldr	r1, [r7, #0]
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 fa95 	bl	8002eee <_ZN9__gnu_cxx13new_allocatorIPsE8allocateEjPKv>
 80029c4:	4603      	mov	r3, r0
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <_ZNSt15_Deque_iteratorIsRsPsE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80029ce:	b580      	push	{r7, lr}
 80029d0:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80029d2:	2002      	movs	r0, #2
 80029d4:	f7fe f949 	bl	8000c6a <_ZSt16__deque_buf_sizej>
 80029d8:	4603      	mov	r3, r0
 80029da:	4618      	mov	r0, r3
 80029dc:	bd80      	pop	{r7, pc}

080029de <_ZNSt16allocator_traitsISaIsEE10deallocateERS0_Psj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80029de:	b580      	push	{r7, lr}
 80029e0:	b084      	sub	sp, #16
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	60f8      	str	r0, [r7, #12]
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	68b9      	ldr	r1, [r7, #8]
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 fa9b 	bl	8002f2a <_ZN9__gnu_cxx13new_allocatorIsE10deallocateEPsj>
 80029f4:	bf00      	nop
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <_ZNKSt11_Deque_baseIsSaIsEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4618      	mov	r0, r3
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr

08002a10 <_ZNSaIPsEC1IsEERKSaIT_E>:
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fa95 	bl	8002f4a <_ZN9__gnu_cxx13new_allocatorIPsEC1Ev>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <_ZN9__gnu_cxx13new_allocatorIPsED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4618      	mov	r0, r3
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr

08002a3e <_ZN9__gnu_cxx13new_allocatorIPsE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b084      	sub	sp, #16
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	60f8      	str	r0, [r7, #12]
 8002a46:	60b9      	str	r1, [r7, #8]
 8002a48:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4619      	mov	r1, r3
 8002a50:	68b8      	ldr	r0, [r7, #8]
 8002a52:	f005 fe03 	bl	800865c <_ZdlPvj>
      }
 8002a56:	bf00      	nop
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <_ZNSt5dequeIdSaIdEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b084      	sub	sp, #16
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8002a66:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002a6a:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 fa76 	bl	8002f5e <_ZNSt16allocator_traitsISaIdEE8max_sizeERKS0_>
 8002a72:	4603      	mov	r3, r0
 8002a74:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002a76:	f107 0208 	add.w	r2, r7, #8
 8002a7a:	f107 030c 	add.w	r3, r7, #12
 8002a7e:	4611      	mov	r1, r2
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 fa78 	bl	8002f76 <_ZSt3minIjERKT_S2_S2_>
 8002a86:	4603      	mov	r3, r0
 8002a88:	681b      	ldr	r3, [r3, #0]
      }
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8002a92:	b590      	push	{r4, r7, lr}
 8002a94:	b08b      	sub	sp, #44	; 0x2c
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	109b      	asrs	r3, r3, #2
 8002aac:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8002aae:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	6a3a      	ldr	r2, [r7, #32]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d92d      	bls.n	8002b20 <_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	1acb      	subs	r3, r1, r3
 8002ad0:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002ad2:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d002      	beq.n	8002ae0 <_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEjb+0x4e>
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	e000      	b.n	8002ae2 <_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEjb+0x50>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002ae4:	4413      	add	r3, r2
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d209      	bcs.n	8002b06 <_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8002afa:	3304      	adds	r3, #4
 8002afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afe:	4619      	mov	r1, r3
 8002b00:	f000 fa4c 	bl	8002f9c <_ZSt4copyIPPdS1_ET0_T_S3_S2_>
 8002b04:	e048      	b.n	8002b98 <_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002b0e:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8002b10:	6a3b      	ldr	r3, [r7, #32]
 8002b12:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b16:	4413      	add	r3, r2
 8002b18:	461a      	mov	r2, r3
 8002b1a:	f000 fa57 	bl	8002fcc <_ZSt13copy_backwardIPPdS1_ET0_T_S3_S2_>
 8002b1e:	e03b      	b.n	8002b98 <_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	3304      	adds	r3, #4
 8002b28:	f107 0208 	add.w	r2, r7, #8
 8002b2c:	4611      	mov	r1, r2
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff fba2 	bl	8002278 <_ZSt3maxIjERKT_S2_S2_>
 8002b34:	4603      	mov	r3, r0
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8002b3a:	3302      	adds	r3, #2
 8002b3c:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	69b9      	ldr	r1, [r7, #24]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff fbab 	bl	800229e <_ZNSt11_Deque_baseIdSaIdEE15_M_allocate_mapEj>
 8002b48:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	085b      	lsrs	r3, r3, #1
 8002b52:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d002      	beq.n	8002b60 <_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEjb+0xce>
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	e000      	b.n	8002b62 <_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEjb+0xd0>
 8002b60:	2300      	movs	r3, #0
 8002b62:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	4413      	add	r3, r2
 8002b68:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8002b72:	3304      	adds	r3, #4
 8002b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b76:	4619      	mov	r1, r3
 8002b78:	f000 fa10 	bl	8002f9c <_ZSt4copyIPPdS1_ET0_T_S3_S2_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6819      	ldr	r1, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	461a      	mov	r2, r3
 8002b88:	f7ff f8d4 	bl	8001d34 <_ZNSt11_Deque_baseIdSaIdEE17_M_deallocate_mapEPPdj>

	  this->_M_impl._M_map = __new_map;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	3308      	adds	r3, #8
 8002b9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff fbb4 	bl	800230c <_ZNSt15_Deque_iteratorIdRdPdE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f103 0018 	add.w	r0, r3, #24
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb6:	4413      	add	r3, r2
 8002bb8:	4619      	mov	r1, r3
 8002bba:	f7ff fba7 	bl	800230c <_ZNSt15_Deque_iteratorIdRdPdE11_M_set_nodeEPS1_>
    }
 8002bbe:	bf00      	nop
 8002bc0:	372c      	adds	r7, #44	; 0x2c
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd90      	pop	{r4, r7, pc}

08002bc6 <_ZNSt16allocator_traitsISaIdEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b082      	sub	sp, #8
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
 8002bce:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	6839      	ldr	r1, [r7, #0]
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 fa11 	bl	8002ffc <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <_ZN9__gnu_cxx13new_allocatorIdE9constructIdJdEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002be4:	b5b0      	push	{r4, r5, r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff fd0b 	bl	800260c <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	4619      	mov	r1, r3
 8002c00:	2008      	movs	r0, #8
 8002c02:	f7fe f827 	bl	8000c54 <_ZnwjPv>
 8002c06:	4603      	mov	r3, r0
 8002c08:	e9c3 4500 	strd	r4, r5, [r3]
 8002c0c:	bf00      	nop
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bdb0      	pop	{r4, r5, r7, pc}

08002c14 <_ZN9__gnu_cxx13new_allocatorIsE9constructIsJsEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002c14:	b590      	push	{r4, r7, lr}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7ff fd55 	bl	80026d0 <_ZSt7forwardIsEOT_RNSt16remove_referenceIS0_E4typeE>
 8002c26:	4603      	mov	r3, r0
 8002c28:	f9b3 4000 	ldrsh.w	r4, [r3]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	4619      	mov	r1, r3
 8002c30:	2002      	movs	r0, #2
 8002c32:	f7fe f80f 	bl	8000c54 <_ZnwjPv>
 8002c36:	4603      	mov	r3, r0
 8002c38:	4622      	mov	r2, r4
 8002c3a:	801a      	strh	r2, [r3, #0]
 8002c3c:	bf00      	nop
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd90      	pop	{r4, r7, pc}

08002c44 <_ZSt4copyISt15_Deque_iteratorIdRKdPS1_ES0_IdRdPdEET0_T_S9_S8_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b098      	sub	sp, #96	; 0x60
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
 8002c50:	603b      	str	r3, [r7, #0]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8002c52:	f107 0320 	add.w	r3, r7, #32
 8002c56:	68b9      	ldr	r1, [r7, #8]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fe ff70 	bl	8001b3e <_ZNSt15_Deque_iteratorIdRKdPS0_EC1ERKS3_>
 8002c5e:	f107 0310 	add.w	r3, r7, #16
 8002c62:	f107 0220 	add.w	r2, r7, #32
 8002c66:	4611      	mov	r1, r2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f000 f9e5 	bl	8003038 <_ZSt12__miter_baseISt15_Deque_iteratorIdRKdPS1_EET_S5_>
 8002c6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7fe ff62 	bl	8001b3e <_ZNSt15_Deque_iteratorIdRKdPS0_EC1ERKS3_>
 8002c7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c7e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002c82:	4611      	mov	r1, r2
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 f9d7 	bl	8003038 <_ZSt12__miter_baseISt15_Deque_iteratorIdRKdPS1_EET_S5_>
 8002c8a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c8e:	6839      	ldr	r1, [r7, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fe fdbb 	bl	800180c <_ZNSt15_Deque_iteratorIdRdPdEC1ERKS2_>
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c9c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002ca0:	f107 0110 	add.w	r1, r7, #16
 8002ca4:	f000 f9d5 	bl	8003052 <_ZSt13__copy_move_aILb0ESt15_Deque_iteratorIdRKdPS1_ES0_IdRdPdEET1_T0_S9_S8_>
    }
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	3760      	adds	r7, #96	; 0x60
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <_ZStmiRKSt15_Deque_iteratorIsRsPsES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8002cba:	f7ff fe88 	bl	80029ce <_ZNSt15_Deque_iteratorIsRsPsE14_S_buffer_sizeEv>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	109b      	asrs	r3, r3, #2
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	fb01 f303 	mul.w	r3, r1, r3
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6811      	ldr	r1, [r2, #0]
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6852      	ldr	r2, [r2, #4]
 8002cdc:	1a8a      	subs	r2, r1, r2
 8002cde:	1052      	asrs	r2, r2, #1
 8002ce0:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	6891      	ldr	r1, [r2, #8]
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	6812      	ldr	r2, [r2, #0]
 8002cea:	1a8a      	subs	r2, r1, r2
 8002cec:	1052      	asrs	r2, r2, #1
 8002cee:	4413      	add	r3, r2
      }
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <_ZNSt5dequeIsSaIsEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8002d00:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002d04:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f9e9 	bl	80030de <_ZNSt16allocator_traitsISaIsEE8max_sizeERKS0_>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002d10:	f107 0208 	add.w	r2, r7, #8
 8002d14:	f107 030c 	add.w	r3, r7, #12
 8002d18:	4611      	mov	r1, r2
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 f92b 	bl	8002f76 <_ZSt3minIjERKT_S2_S2_>
 8002d20:	4603      	mov	r3, r0
 8002d22:	681b      	ldr	r3, [r3, #0]
      }
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <_ZNSt5dequeIsSaIsEE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 8002d2c:	b590      	push	{r4, r7, lr}
 8002d2e:	b08b      	sub	sp, #44	; 0x2c
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	4613      	mov	r3, r2
 8002d38:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	109b      	asrs	r3, r3, #2
 8002d46:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8002d48:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	6a3a      	ldr	r2, [r7, #32]
 8002d4e:	4413      	add	r3, r2
 8002d50:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d92d      	bls.n	8002dba <_ZNSt5dequeIsSaIsEE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	1acb      	subs	r3, r1, r3
 8002d6a:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002d6c:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d002      	beq.n	8002d7a <_ZNSt5dequeIsSaIsEE17_M_reallocate_mapEjb+0x4e>
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	e000      	b.n	8002d7c <_ZNSt5dequeIsSaIsEE17_M_reallocate_mapEjb+0x50>
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002d7e:	4413      	add	r3, r2
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d209      	bcs.n	8002da0 <_ZNSt5dequeIsSaIsEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8002d94:	3304      	adds	r3, #4
 8002d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d98:	4619      	mov	r1, r3
 8002d9a:	f000 f9ac 	bl	80030f6 <_ZSt4copyIPPsS1_ET0_T_S3_S2_>
 8002d9e:	e048      	b.n	8002e32 <_ZNSt5dequeIsSaIsEE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002da8:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db0:	4413      	add	r3, r2
 8002db2:	461a      	mov	r2, r3
 8002db4:	f000 f9b7 	bl	8003126 <_ZSt13copy_backwardIPPsS1_ET0_T_S3_S2_>
 8002db8:	e03b      	b.n	8002e32 <_ZNSt5dequeIsSaIsEE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	f107 0208 	add.w	r2, r7, #8
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff fa55 	bl	8002278 <_ZSt3maxIjERKT_S2_S2_>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8002dd4:	3302      	adds	r3, #2
 8002dd6:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	69b9      	ldr	r1, [r7, #24]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff fb1c 	bl	800241a <_ZNSt11_Deque_baseIsSaIsEE15_M_allocate_mapEj>
 8002de2:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	085b      	lsrs	r3, r3, #1
 8002dec:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d002      	beq.n	8002dfa <_ZNSt5dequeIsSaIsEE17_M_reallocate_mapEjb+0xce>
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	e000      	b.n	8002dfc <_ZNSt5dequeIsSaIsEE17_M_reallocate_mapEjb+0xd0>
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	4413      	add	r3, r2
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e10:	4619      	mov	r1, r3
 8002e12:	f000 f970 	bl	80030f6 <_ZSt4copyIPPsS1_ET0_T_S3_S2_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6819      	ldr	r1, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	461a      	mov	r2, r3
 8002e22:	f7ff f83c 	bl	8001e9e <_ZNSt11_Deque_baseIsSaIsEE17_M_deallocate_mapEPPsj>
	  this->_M_impl._M_map = __new_map;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	3308      	adds	r3, #8
 8002e36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff fb25 	bl	8002488 <_ZNSt15_Deque_iteratorIsRsPsE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f103 0018 	add.w	r0, r3, #24
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e50:	4413      	add	r3, r2
 8002e52:	4619      	mov	r1, r3
 8002e54:	f7ff fb18 	bl	8002488 <_ZNSt15_Deque_iteratorIsRsPsE11_M_set_nodeEPS1_>
    }
 8002e58:	bf00      	nop
 8002e5a:	372c      	adds	r7, #44	; 0x2c
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd90      	pop	{r4, r7, pc}

08002e60 <_ZNSt16allocator_traitsISaIsEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	6839      	ldr	r1, [r7, #0]
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f971 	bl	8003156 <_ZN9__gnu_cxx13new_allocatorIsE8allocateEjPKv>
 8002e74:	4603      	mov	r3, r0
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <_ZN9__gnu_cxx13new_allocatorIPdE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b084      	sub	sp, #16
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 f981 	bl	8003192 <_ZNK9__gnu_cxx13new_allocatorIPdE11_M_max_sizeEv>
 8002e90:	4602      	mov	r2, r0
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	4293      	cmp	r3, r2
 8002e96:	bf8c      	ite	hi
 8002e98:	2301      	movhi	r3, #1
 8002e9a:	2300      	movls	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <_ZN9__gnu_cxx13new_allocatorIPdE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002ea2:	f005 fbee 	bl	8008682 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f005 fbd8 	bl	8008660 <_Znwj>
 8002eb0:	4603      	mov	r3, r0
      }
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdj>:
      deallocate(_Tp* __p, size_type __t)
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b084      	sub	sp, #16
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	4619      	mov	r1, r3
 8002ecc:	68b8      	ldr	r0, [r7, #8]
 8002ece:	f005 fbc5 	bl	800865c <_ZdlPvj>
      }
 8002ed2:	bf00      	nop
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <_ZN9__gnu_cxx13new_allocatorIPdEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc80      	pop	{r7}
 8002eec:	4770      	bx	lr

08002eee <_ZN9__gnu_cxx13new_allocatorIPsE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b084      	sub	sp, #16
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	60f8      	str	r0, [r7, #12]
 8002ef6:	60b9      	str	r1, [r7, #8]
 8002ef8:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 f954 	bl	80031a8 <_ZNK9__gnu_cxx13new_allocatorIPsE11_M_max_sizeEv>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	4293      	cmp	r3, r2
 8002f06:	bf8c      	ite	hi
 8002f08:	2301      	movhi	r3, #1
 8002f0a:	2300      	movls	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <_ZN9__gnu_cxx13new_allocatorIPsE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002f12:	f005 fbb6 	bl	8008682 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f005 fba0 	bl	8008660 <_Znwj>
 8002f20:	4603      	mov	r3, r0
      }
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <_ZN9__gnu_cxx13new_allocatorIsE10deallocateEPsj>:
      deallocate(_Tp* __p, size_type __t)
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b084      	sub	sp, #16
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	60f8      	str	r0, [r7, #12]
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	68b8      	ldr	r0, [r7, #8]
 8002f3e:	f005 fb8d 	bl	800865c <_ZdlPvj>
      }
 8002f42:	bf00      	nop
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <_ZN9__gnu_cxx13new_allocatorIPsEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4618      	mov	r0, r3
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr

08002f5e <_ZNSt16allocator_traitsISaIdEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b082      	sub	sp, #8
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f929 	bl	80031be <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>
 8002f6c:	4603      	mov	r3, r0
      }
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8002f76:	b480      	push	{r7}
 8002f78:	b083      	sub	sp, #12
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
 8002f7e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d201      	bcs.n	8002f90 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	e000      	b.n	8002f92 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8002f90:	687b      	ldr	r3, [r7, #4]
    }
 8002f92:	4618      	mov	r0, r3
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <_ZSt4copyIPPdS1_ET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 8002f9c:	b590      	push	{r4, r7, lr}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 f914 	bl	80031d6 <_ZSt12__miter_baseIPPdET_S2_>
 8002fae:	4604      	mov	r4, r0
 8002fb0:	68b8      	ldr	r0, [r7, #8]
 8002fb2:	f000 f910 	bl	80031d6 <_ZSt12__miter_baseIPPdET_S2_>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	f000 f914 	bl	80031ea <_ZSt13__copy_move_aILb0EPPdS1_ET1_T0_S3_S2_>
 8002fc2:	4603      	mov	r3, r0
    }
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd90      	pop	{r4, r7, pc}

08002fcc <_ZSt13copy_backwardIPPdS1_ET0_T_S3_S2_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8002fcc:	b590      	push	{r4, r7, lr}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f8fc 	bl	80031d6 <_ZSt12__miter_baseIPPdET_S2_>
 8002fde:	4604      	mov	r4, r0
 8002fe0:	68b8      	ldr	r0, [r7, #8]
 8002fe2:	f000 f8f8 	bl	80031d6 <_ZSt12__miter_baseIPPdET_S2_>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	4619      	mov	r1, r3
 8002fec:	4620      	mov	r0, r4
 8002fee:	f000 f91f 	bl	8003230 <_ZSt22__copy_move_backward_aILb0EPPdS1_ET1_T0_S3_S2_>
 8002ff2:	4603      	mov	r3, r0
    }
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd90      	pop	{r4, r7, pc}

08002ffc <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 f934 	bl	8003276 <_ZNK9__gnu_cxx13new_allocatorIdE11_M_max_sizeEv>
 800300e:	4602      	mov	r2, r0
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	4293      	cmp	r3, r2
 8003014:	bf8c      	ite	hi
 8003016:	2301      	movhi	r3, #1
 8003018:	2300      	movls	r3, #0
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003020:	f005 fb2f 	bl	8008682 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	4618      	mov	r0, r3
 800302a:	f005 fb19 	bl	8008660 <_Znwj>
 800302e:	4603      	mov	r3, r0
      }
 8003030:	4618      	mov	r0, r3
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <_ZSt12__miter_baseISt15_Deque_iteratorIdRKdPS1_EET_S5_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
    { return __it; }
 8003042:	6839      	ldr	r1, [r7, #0]
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7fe fd7a 	bl	8001b3e <_ZNSt15_Deque_iteratorIdRKdPS0_EC1ERKS3_>
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <_ZSt13__copy_move_aILb0ESt15_Deque_iteratorIdRKdPS1_ES0_IdRdPdEET1_T0_S9_S8_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003052:	b580      	push	{r7, lr}
 8003054:	b0a0      	sub	sp, #128	; 0x80
 8003056:	af00      	add	r7, sp, #0
 8003058:	60f8      	str	r0, [r7, #12]
 800305a:	60b9      	str	r1, [r7, #8]
 800305c:	607a      	str	r2, [r7, #4]
 800305e:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 8003060:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003064:	68b9      	ldr	r1, [r7, #8]
 8003066:	4618      	mov	r0, r3
 8003068:	f7fe fd69 	bl	8001b3e <_ZNSt15_Deque_iteratorIdRKdPS0_EC1ERKS3_>
 800306c:	f107 0320 	add.w	r3, r7, #32
 8003070:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003074:	4611      	mov	r1, r2
 8003076:	4618      	mov	r0, r3
 8003078:	f000 f908 	bl	800328c <_ZSt12__niter_baseISt15_Deque_iteratorIdRKdPS1_EET_S5_>
 800307c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	4618      	mov	r0, r3
 8003084:	f7fe fd5b 	bl	8001b3e <_ZNSt15_Deque_iteratorIdRKdPS0_EC1ERKS3_>
 8003088:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800308c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003090:	4611      	mov	r1, r2
 8003092:	4618      	mov	r0, r3
 8003094:	f000 f8fa 	bl	800328c <_ZSt12__niter_baseISt15_Deque_iteratorIdRKdPS1_EET_S5_>
 8003098:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800309c:	6839      	ldr	r1, [r7, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fe fbb4 	bl	800180c <_ZNSt15_Deque_iteratorIdRdPdEC1ERKS2_>
 80030a4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80030a8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80030ac:	4611      	mov	r1, r2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 f8f9 	bl	80032a6 <_ZSt12__niter_baseISt15_Deque_iteratorIdRdPdEET_S4_>
 80030b4:	f107 0010 	add.w	r0, r7, #16
 80030b8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80030bc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80030c0:	f107 0120 	add.w	r1, r7, #32
 80030c4:	f000 f8fc 	bl	80032c0 <_ZSt14__copy_move_a1ILb0EdRKdPS0_dESt15_Deque_iteratorIT3_RS4_PS4_ES3_IT0_T1_T2_ESB_S7_>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f107 0210 	add.w	r2, r7, #16
 80030ce:	6839      	ldr	r1, [r7, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 f91b 	bl	800330c <_ZSt12__niter_wrapISt15_Deque_iteratorIdRdPdEET_RKS4_S4_>
    }
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	3780      	adds	r7, #128	; 0x80
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <_ZNSt16allocator_traitsISaIsEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80030de:	b580      	push	{r7, lr}
 80030e0:	b082      	sub	sp, #8
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f91e 	bl	8003328 <_ZNK9__gnu_cxx13new_allocatorIsE8max_sizeEv>
 80030ec:	4603      	mov	r3, r0
      }
 80030ee:	4618      	mov	r0, r3
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <_ZSt4copyIPPsS1_ET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 80030f6:	b590      	push	{r4, r7, lr}
 80030f8:	b085      	sub	sp, #20
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 f91c 	bl	8003340 <_ZSt12__miter_baseIPPsET_S2_>
 8003108:	4604      	mov	r4, r0
 800310a:	68b8      	ldr	r0, [r7, #8]
 800310c:	f000 f918 	bl	8003340 <_ZSt12__miter_baseIPPsET_S2_>
 8003110:	4603      	mov	r3, r0
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	4619      	mov	r1, r3
 8003116:	4620      	mov	r0, r4
 8003118:	f000 f91c 	bl	8003354 <_ZSt13__copy_move_aILb0EPPsS1_ET1_T0_S3_S2_>
 800311c:	4603      	mov	r3, r0
    }
 800311e:	4618      	mov	r0, r3
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	bd90      	pop	{r4, r7, pc}

08003126 <_ZSt13copy_backwardIPPsS1_ET0_T_S3_S2_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8003126:	b590      	push	{r4, r7, lr}
 8003128:	b085      	sub	sp, #20
 800312a:	af00      	add	r7, sp, #0
 800312c:	60f8      	str	r0, [r7, #12]
 800312e:	60b9      	str	r1, [r7, #8]
 8003130:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 f904 	bl	8003340 <_ZSt12__miter_baseIPPsET_S2_>
 8003138:	4604      	mov	r4, r0
 800313a:	68b8      	ldr	r0, [r7, #8]
 800313c:	f000 f900 	bl	8003340 <_ZSt12__miter_baseIPPsET_S2_>
 8003140:	4603      	mov	r3, r0
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	4619      	mov	r1, r3
 8003146:	4620      	mov	r0, r4
 8003148:	f000 f927 	bl	800339a <_ZSt22__copy_move_backward_aILb0EPPsS1_ET1_T0_S3_S2_>
 800314c:	4603      	mov	r3, r0
    }
 800314e:	4618      	mov	r0, r3
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	bd90      	pop	{r4, r7, pc}

08003156 <_ZN9__gnu_cxx13new_allocatorIsE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003156:	b580      	push	{r7, lr}
 8003158:	b084      	sub	sp, #16
 800315a:	af00      	add	r7, sp, #0
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 f93c 	bl	80033e0 <_ZNK9__gnu_cxx13new_allocatorIsE11_M_max_sizeEv>
 8003168:	4602      	mov	r2, r0
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	4293      	cmp	r3, r2
 800316e:	bf8c      	ite	hi
 8003170:	2301      	movhi	r3, #1
 8003172:	2300      	movls	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <_ZN9__gnu_cxx13new_allocatorIsE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800317a:	f005 fa82 	bl	8008682 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	4618      	mov	r0, r3
 8003184:	f005 fa6c 	bl	8008660 <_Znwj>
 8003188:	4603      	mov	r3, r0
      }
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <_ZNK9__gnu_cxx13new_allocatorIPdE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800319a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800319e:	4618      	mov	r0, r3
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr

080031a8 <_ZNK9__gnu_cxx13new_allocatorIPsE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80031b0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80031b4:	4618      	mov	r0, r3
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr

080031be <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f855 	bl	8003276 <_ZNK9__gnu_cxx13new_allocatorIdE11_M_max_sizeEv>
 80031cc:	4603      	mov	r3, r0
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <_ZSt12__miter_baseIPPdET_S2_>:
    __miter_base(_Iterator __it)
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
    { return __it; }
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4618      	mov	r0, r3
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr

080031ea <_ZSt13__copy_move_aILb0EPPdS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80031ea:	b5b0      	push	{r4, r5, r7, lr}
 80031ec:	b084      	sub	sp, #16
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	60f8      	str	r0, [r7, #12]
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 f8fd 	bl	80033f6 <_ZSt12__niter_baseIPPdET_S2_>
 80031fc:	4604      	mov	r4, r0
 80031fe:	68b8      	ldr	r0, [r7, #8]
 8003200:	f000 f8f9 	bl	80033f6 <_ZSt12__niter_baseIPPdET_S2_>
 8003204:	4605      	mov	r5, r0
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4618      	mov	r0, r3
 800320a:	f000 f8f4 	bl	80033f6 <_ZSt12__niter_baseIPPdET_S2_>
 800320e:	4603      	mov	r3, r0
 8003210:	461a      	mov	r2, r3
 8003212:	4629      	mov	r1, r5
 8003214:	4620      	mov	r0, r4
 8003216:	f000 f8f8 	bl	800340a <_ZSt14__copy_move_a1ILb0EPPdS1_ET1_T0_S3_S2_>
 800321a:	4602      	mov	r2, r0
 800321c:	1d3b      	adds	r3, r7, #4
 800321e:	4611      	mov	r1, r2
 8003220:	4618      	mov	r0, r3
 8003222:	f000 f902 	bl	800342a <_ZSt12__niter_wrapIPPdET_RKS2_S2_>
 8003226:	4603      	mov	r3, r0
    }
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bdb0      	pop	{r4, r5, r7, pc}

08003230 <_ZSt22__copy_move_backward_aILb0EPPdS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8003230:	b5b0      	push	{r4, r5, r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 f8da 	bl	80033f6 <_ZSt12__niter_baseIPPdET_S2_>
 8003242:	4604      	mov	r4, r0
 8003244:	68b8      	ldr	r0, [r7, #8]
 8003246:	f000 f8d6 	bl	80033f6 <_ZSt12__niter_baseIPPdET_S2_>
 800324a:	4605      	mov	r5, r0
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4618      	mov	r0, r3
 8003250:	f000 f8d1 	bl	80033f6 <_ZSt12__niter_baseIPPdET_S2_>
 8003254:	4603      	mov	r3, r0
 8003256:	461a      	mov	r2, r3
 8003258:	4629      	mov	r1, r5
 800325a:	4620      	mov	r0, r4
 800325c:	f000 f8f0 	bl	8003440 <_ZSt23__copy_move_backward_a1ILb0EPPdS1_ET1_T0_S3_S2_>
 8003260:	4602      	mov	r2, r0
 8003262:	1d3b      	adds	r3, r7, #4
 8003264:	4611      	mov	r1, r2
 8003266:	4618      	mov	r0, r3
 8003268:	f000 f8df 	bl	800342a <_ZSt12__niter_wrapIPPdET_RKS2_S2_>
 800326c:	4603      	mov	r3, r0
    }
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bdb0      	pop	{r4, r5, r7, pc}

08003276 <_ZNK9__gnu_cxx13new_allocatorIdE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800327e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 8003282:	4618      	mov	r0, r3
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr

0800328c <_ZSt12__niter_baseISt15_Deque_iteratorIdRKdPS1_EET_S5_>:
    __niter_base(_Iterator __it)
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
    { return __it; }
 8003296:	6839      	ldr	r1, [r7, #0]
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7fe fc50 	bl	8001b3e <_ZNSt15_Deque_iteratorIdRKdPS0_EC1ERKS3_>
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <_ZSt12__niter_baseISt15_Deque_iteratorIdRdPdEET_S4_>:
    __niter_base(_Iterator __it)
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b082      	sub	sp, #8
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	6039      	str	r1, [r7, #0]
    { return __it; }
 80032b0:	6839      	ldr	r1, [r7, #0]
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7fe faaa 	bl	800180c <_ZNSt15_Deque_iteratorIdRdPdEC1ERKS2_>
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <_ZSt14__copy_move_a1ILb0EdRKdPS0_dESt15_Deque_iteratorIT3_RS4_PS4_ES3_IT0_T1_T2_ESB_S7_>:
    { return __copy_move_dit<_IsMove>(__first, __last, __result); }

  template<bool _IsMove,
	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
    _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
    __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b090      	sub	sp, #64	; 0x40
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
 80032cc:	603b      	str	r3, [r7, #0]
		   _GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __last,
		   _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*> __result)
    { return __copy_move_dit<_IsMove>(__first, __last, __result); }
 80032ce:	f107 0310 	add.w	r3, r7, #16
 80032d2:	68b9      	ldr	r1, [r7, #8]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7fe fc32 	bl	8001b3e <_ZNSt15_Deque_iteratorIdRKdPS0_EC1ERKS3_>
 80032da:	f107 0320 	add.w	r3, r7, #32
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fe fc2c 	bl	8001b3e <_ZNSt15_Deque_iteratorIdRKdPS0_EC1ERKS3_>
 80032e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032ea:	6839      	ldr	r1, [r7, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fe fa8d 	bl	800180c <_ZNSt15_Deque_iteratorIdRdPdEC1ERKS2_>
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032f8:	f107 0220 	add.w	r2, r7, #32
 80032fc:	f107 0110 	add.w	r1, r7, #16
 8003300:	f000 f8ae 	bl	8003460 <_ZSt15__copy_move_ditILb0EdRKdPS0_St15_Deque_iteratorIdRdPdEET3_S3_IT0_T1_T2_ESB_S7_>
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	3740      	adds	r7, #64	; 0x40
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <_ZSt12__niter_wrapISt15_Deque_iteratorIdRdPdEET_RKS4_S4_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
    { return __res; }
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f7fe fa76 	bl	800180c <_ZNSt15_Deque_iteratorIdRdPdEC1ERKS2_>
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <_ZNK9__gnu_cxx13new_allocatorIsE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f855 	bl	80033e0 <_ZNK9__gnu_cxx13new_allocatorIsE11_M_max_sizeEv>
 8003336:	4603      	mov	r3, r0
 8003338:	4618      	mov	r0, r3
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <_ZSt12__miter_baseIPPsET_S2_>:
    __miter_base(_Iterator __it)
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4618      	mov	r0, r3
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr

08003354 <_ZSt13__copy_move_aILb0EPPsS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003354:	b5b0      	push	{r4, r5, r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 f8f5 	bl	8003550 <_ZSt12__niter_baseIPPsET_S2_>
 8003366:	4604      	mov	r4, r0
 8003368:	68b8      	ldr	r0, [r7, #8]
 800336a:	f000 f8f1 	bl	8003550 <_ZSt12__niter_baseIPPsET_S2_>
 800336e:	4605      	mov	r5, r0
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4618      	mov	r0, r3
 8003374:	f000 f8ec 	bl	8003550 <_ZSt12__niter_baseIPPsET_S2_>
 8003378:	4603      	mov	r3, r0
 800337a:	461a      	mov	r2, r3
 800337c:	4629      	mov	r1, r5
 800337e:	4620      	mov	r0, r4
 8003380:	f000 f8f0 	bl	8003564 <_ZSt14__copy_move_a1ILb0EPPsS1_ET1_T0_S3_S2_>
 8003384:	4602      	mov	r2, r0
 8003386:	1d3b      	adds	r3, r7, #4
 8003388:	4611      	mov	r1, r2
 800338a:	4618      	mov	r0, r3
 800338c:	f000 f8fa 	bl	8003584 <_ZSt12__niter_wrapIPPsET_RKS2_S2_>
 8003390:	4603      	mov	r3, r0
    }
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bdb0      	pop	{r4, r5, r7, pc}

0800339a <_ZSt22__copy_move_backward_aILb0EPPsS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800339a:	b5b0      	push	{r4, r5, r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 f8d2 	bl	8003550 <_ZSt12__niter_baseIPPsET_S2_>
 80033ac:	4604      	mov	r4, r0
 80033ae:	68b8      	ldr	r0, [r7, #8]
 80033b0:	f000 f8ce 	bl	8003550 <_ZSt12__niter_baseIPPsET_S2_>
 80033b4:	4605      	mov	r5, r0
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 f8c9 	bl	8003550 <_ZSt12__niter_baseIPPsET_S2_>
 80033be:	4603      	mov	r3, r0
 80033c0:	461a      	mov	r2, r3
 80033c2:	4629      	mov	r1, r5
 80033c4:	4620      	mov	r0, r4
 80033c6:	f000 f8e8 	bl	800359a <_ZSt23__copy_move_backward_a1ILb0EPPsS1_ET1_T0_S3_S2_>
 80033ca:	4602      	mov	r2, r0
 80033cc:	1d3b      	adds	r3, r7, #4
 80033ce:	4611      	mov	r1, r2
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 f8d7 	bl	8003584 <_ZSt12__niter_wrapIPPsET_RKS2_S2_>
 80033d6:	4603      	mov	r3, r0
    }
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bdb0      	pop	{r4, r5, r7, pc}

080033e0 <_ZNK9__gnu_cxx13new_allocatorIsE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80033e8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 80033ec:	4618      	mov	r0, r3
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bc80      	pop	{r7}
 80033f4:	4770      	bx	lr

080033f6 <_ZSt12__niter_baseIPPdET_S2_>:
    __niter_base(_Iterator __it)
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
    { return __it; }
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4618      	mov	r0, r3
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr

0800340a <_ZSt14__copy_move_a1ILb0EPPdS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800340a:	b580      	push	{r7, lr}
 800340c:	b084      	sub	sp, #16
 800340e:	af00      	add	r7, sp, #0
 8003410:	60f8      	str	r0, [r7, #12]
 8003412:	60b9      	str	r1, [r7, #8]
 8003414:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	68b9      	ldr	r1, [r7, #8]
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 f8cd 	bl	80035ba <_ZSt14__copy_move_a2ILb0EPPdS1_ET1_T0_S3_S2_>
 8003420:	4603      	mov	r3, r0
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <_ZSt12__niter_wrapIPPdET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
 8003432:	6039      	str	r1, [r7, #0]
    { return __res; }
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr

08003440 <_ZSt23__copy_move_backward_a1ILb0EPPdS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	68b9      	ldr	r1, [r7, #8]
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 f8c2 	bl	80035da <_ZSt23__copy_move_backward_a2ILb0EPPdS1_ET1_T0_S3_S2_>
 8003456:	4603      	mov	r3, r0
 8003458:	4618      	mov	r0, r3
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <_ZSt15__copy_move_ditILb0EdRKdPS0_St15_Deque_iteratorIdRdPdEET3_S3_IT0_T1_T2_ESB_S7_>:
    __copy_move_dit(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr> __first,
 8003460:	b5b0      	push	{r4, r5, r7, lr}
 8003462:	b09e      	sub	sp, #120	; 0x78
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
 800346c:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	68da      	ldr	r2, [r3, #12]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	429a      	cmp	r2, r3
 8003478:	d055      	beq.n	8003526 <_ZSt15__copy_move_ditILb0EdRKdPS0_St15_Deque_iteratorIdRdPdEET3_S3_IT0_T1_T2_ESB_S7_+0xc6>
	  __result
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	681c      	ldr	r4, [r3, #0]
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	689d      	ldr	r5, [r3, #8]
 8003482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003486:	6839      	ldr	r1, [r7, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f7fe f9bf 	bl	800180c <_ZNSt15_Deque_iteratorIdRdPdEC1ERKS2_>
 800348e:	f107 0014 	add.w	r0, r7, #20
 8003492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003496:	462a      	mov	r2, r5
 8003498:	4621      	mov	r1, r4
 800349a:	f000 f8c1 	bl	8003620 <_ZSt14__copy_move_a1ILb0EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	461c      	mov	r4, r3
 80034a2:	f107 0314 	add.w	r3, r7, #20
 80034a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	3304      	adds	r3, #4
 80034b2:	677b      	str	r3, [r7, #116]	; 0x74
	       __node != __last._M_node; ++__node)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d021      	beq.n	8003502 <_ZSt15__copy_move_ditILb0EdRKdPS0_St15_Deque_iteratorIdRdPdEET3_S3_IT0_T1_T2_ESB_S7_+0xa2>
	    __result
 80034be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034c0:	681d      	ldr	r5, [r3, #0]
 80034c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034c4:	681c      	ldr	r4, [r3, #0]
					     *__node + _Iter::_S_buffer_size(),
 80034c6:	f000 f8ec 	bl	80036a2 <_ZNSt15_Deque_iteratorIdRKdPS0_E14_S_buffer_sizeEv>
 80034ca:	4603      	mov	r3, r0
 80034cc:	00db      	lsls	r3, r3, #3
	    __result
 80034ce:	441c      	add	r4, r3
 80034d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80034d4:	6839      	ldr	r1, [r7, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fe f998 	bl	800180c <_ZNSt15_Deque_iteratorIdRdPdEC1ERKS2_>
 80034dc:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80034e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80034e4:	4622      	mov	r2, r4
 80034e6:	4629      	mov	r1, r5
 80034e8:	f000 f89a 	bl	8003620 <_ZSt14__copy_move_a1ILb0EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	461c      	mov	r4, r3
 80034f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80034f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 80034fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034fc:	3304      	adds	r3, #4
 80034fe:	677b      	str	r3, [r7, #116]	; 0x74
 8003500:	e7d8      	b.n	80034b4 <_ZSt15__copy_move_ditILb0EdRKdPS0_St15_Deque_iteratorIdRdPdEET3_S3_IT0_T1_T2_ESB_S7_+0x54>
					      __result);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685c      	ldr	r4, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681d      	ldr	r5, [r3, #0]
 800350a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800350e:	6839      	ldr	r1, [r7, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f7fe f97b 	bl	800180c <_ZNSt15_Deque_iteratorIdRdPdEC1ERKS2_>
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800351c:	462a      	mov	r2, r5
 800351e:	4621      	mov	r1, r4
 8003520:	f000 f87e 	bl	8003620 <_ZSt14__copy_move_a1ILb0EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_>
    }
 8003524:	e010      	b.n	8003548 <_ZSt15__copy_move_ditILb0EdRKdPS0_St15_Deque_iteratorIdRdPdEET3_S3_IT0_T1_T2_ESB_S7_+0xe8>
					  __result);
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	681c      	ldr	r4, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681d      	ldr	r5, [r3, #0]
 800352e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003532:	6839      	ldr	r1, [r7, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f7fe f969 	bl	800180c <_ZNSt15_Deque_iteratorIdRdPdEC1ERKS2_>
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003540:	462a      	mov	r2, r5
 8003542:	4621      	mov	r1, r4
 8003544:	f000 f86c 	bl	8003620 <_ZSt14__copy_move_a1ILb0EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_>
    }
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	3778      	adds	r7, #120	; 0x78
 800354c:	46bd      	mov	sp, r7
 800354e:	bdb0      	pop	{r4, r5, r7, pc}

08003550 <_ZSt12__niter_baseIPPsET_S2_>:
    __niter_base(_Iterator __it)
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4618      	mov	r0, r3
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	bc80      	pop	{r7}
 8003562:	4770      	bx	lr

08003564 <_ZSt14__copy_move_a1ILb0EPPsS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	68b9      	ldr	r1, [r7, #8]
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 f89c 	bl	80036b2 <_ZSt14__copy_move_a2ILb0EPPsS1_ET1_T0_S3_S2_>
 800357a:	4603      	mov	r3, r0
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <_ZSt12__niter_wrapIPPsET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
    { return __res; }
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	bc80      	pop	{r7}
 8003598:	4770      	bx	lr

0800359a <_ZSt23__copy_move_backward_a1ILb0EPPsS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800359a:	b580      	push	{r7, lr}
 800359c:	b084      	sub	sp, #16
 800359e:	af00      	add	r7, sp, #0
 80035a0:	60f8      	str	r0, [r7, #12]
 80035a2:	60b9      	str	r1, [r7, #8]
 80035a4:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	68b9      	ldr	r1, [r7, #8]
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 f891 	bl	80036d2 <_ZSt23__copy_move_backward_a2ILb0EPPsS1_ET1_T0_S3_S2_>
 80035b0:	4603      	mov	r3, r0
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <_ZSt14__copy_move_a2ILb0EPPdS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b084      	sub	sp, #16
 80035be:	af00      	add	r7, sp, #0
 80035c0:	60f8      	str	r0, [r7, #12]
 80035c2:	60b9      	str	r1, [r7, #8]
 80035c4:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 f891 	bl	80036f2 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPdEEPT_PKS4_S7_S5_>
 80035d0:	4603      	mov	r3, r0
    }
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <_ZSt23__copy_move_backward_a2ILb0EPPdS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80035da:	b580      	push	{r7, lr}
 80035dc:	b084      	sub	sp, #16
 80035de:	af00      	add	r7, sp, #0
 80035e0:	60f8      	str	r0, [r7, #12]
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	68b9      	ldr	r1, [r7, #8]
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 f89e 	bl	800372c <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPdEEPT_PKS4_S7_S5_>
 80035f0:	4603      	mov	r3, r0
    }
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	429a      	cmp	r2, r3
 800360e:	da01      	bge.n	8003614 <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	e000      	b.n	8003616 <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 8003614:	687b      	ldr	r3, [r7, #4]
    }
 8003616:	4618      	mov	r0, r3
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr

08003620 <_ZSt14__copy_move_a1ILb0EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_>:

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_a1(_II __first, _II __last,
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
 800362c:	603b      	str	r3, [r7, #0]
		   _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	10db      	asrs	r3, r3, #3
 8003636:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	2b00      	cmp	r3, #0
 800363c:	dd29      	ble.n	8003692 <_ZSt14__copy_move_a1ILb0EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_+0x72>
	{
	  const difference_type __clen
	    = std::min(__len, __result._M_last - __result._M_cur);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	10db      	asrs	r3, r3, #3
 800364a:	61bb      	str	r3, [r7, #24]
 800364c:	f107 0218 	add.w	r2, r7, #24
 8003650:	f107 0314 	add.w	r3, r7, #20
 8003654:	4611      	mov	r1, r2
 8003656:	4618      	mov	r0, r3
 8003658:	f7ff ffcf 	bl	80035fa <_ZSt3minIiERKT_S2_S2_>
 800365c:	4603      	mov	r3, r0
	  const difference_type __clen
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	18d1      	adds	r1, r2, r3
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	461a      	mov	r2, r3
 8003670:	68b8      	ldr	r0, [r7, #8]
 8003672:	f000 f87d 	bl	8003770 <_ZSt14__copy_move_a1ILb0EPdS0_ET1_T0_S2_S1_>
				       __result._M_cur);

	  __first += __clen;
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	4413      	add	r3, r2
 800367e:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 8003680:	69f9      	ldr	r1, [r7, #28]
 8003682:	6838      	ldr	r0, [r7, #0]
 8003684:	f000 f884 	bl	8003790 <_ZNSt15_Deque_iteratorIdRdPdEpLEi>
	  __len -= __clen;
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8003690:	e7d2      	b.n	8003638 <_ZSt14__copy_move_a1ILb0EPddEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_+0x18>
	}

      return __result;
 8003692:	6839      	ldr	r1, [r7, #0]
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f7fe f8b9 	bl	800180c <_ZNSt15_Deque_iteratorIdRdPdEC1ERKS2_>
    }
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	3720      	adds	r7, #32
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <_ZNSt15_Deque_iteratorIdRKdPS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80036a2:	b580      	push	{r7, lr}
 80036a4:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80036a6:	2008      	movs	r0, #8
 80036a8:	f7fd fadf 	bl	8000c6a <_ZSt16__deque_buf_sizej>
 80036ac:	4603      	mov	r3, r0
 80036ae:	4618      	mov	r0, r3
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <_ZSt14__copy_move_a2ILb0EPPsS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b084      	sub	sp, #16
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	60f8      	str	r0, [r7, #12]
 80036ba:	60b9      	str	r1, [r7, #8]
 80036bc:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	68b9      	ldr	r1, [r7, #8]
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 f8bb 	bl	800383e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPsEEPT_PKS4_S7_S5_>
 80036c8:	4603      	mov	r3, r0
    }
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <_ZSt23__copy_move_backward_a2ILb0EPPsS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b084      	sub	sp, #16
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	68b9      	ldr	r1, [r7, #8]
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 f8c8 	bl	8003878 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPsEEPT_PKS4_S7_S5_>
 80036e8:	4603      	mov	r3, r0
    }
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPdEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b086      	sub	sp, #24
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	60f8      	str	r0, [r7, #12]
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	109b      	asrs	r3, r3, #2
 8003706:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d006      	beq.n	800371c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPdEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	461a      	mov	r2, r3
 8003714:	68f9      	ldr	r1, [r7, #12]
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f005 f9a2 	bl	8008a60 <memmove>
	  return __result + _Num;
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	4413      	add	r3, r2
	}
 8003724:	4618      	mov	r0, r3
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPdEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	109b      	asrs	r3, r3, #2
 8003740:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00a      	beq.n	800375e <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPdEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	425b      	negs	r3, r3
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	18d0      	adds	r0, r2, r3
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	461a      	mov	r2, r3
 8003758:	68f9      	ldr	r1, [r7, #12]
 800375a:	f005 f981 	bl	8008a60 <memmove>
	  return __result - _Num;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	425b      	negs	r3, r3
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	4413      	add	r3, r2
	}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <_ZSt14__copy_move_a1ILb0EPdS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	68b9      	ldr	r1, [r7, #8]
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 f89b 	bl	80038bc <_ZSt14__copy_move_a2ILb0EPdS0_ET1_T0_S2_S1_>
 8003786:	4603      	mov	r3, r0
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <_ZNSt15_Deque_iteratorIdRdPdEpLEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 8003790:	b590      	push	{r4, r7, lr}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
	const difference_type __offset = __n + (_M_cur - _M_first);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	10db      	asrs	r3, r3, #3
 80037a6:	461a      	mov	r2, r3
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	4413      	add	r3, r2
 80037ac:	60fb      	str	r3, [r7, #12]
	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	db08      	blt.n	80037c6 <_ZNSt15_Deque_iteratorIdRdPdEpLEi+0x36>
 80037b4:	f7fe fff9 	bl	80027aa <_ZNSt15_Deque_iteratorIdRdPdE14_S_buffer_sizeEv>
 80037b8:	4603      	mov	r3, r0
 80037ba:	461a      	mov	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4293      	cmp	r3, r2
 80037c0:	da01      	bge.n	80037c6 <_ZNSt15_Deque_iteratorIdRdPdEpLEi+0x36>
 80037c2:	2301      	movs	r3, #1
 80037c4:	e000      	b.n	80037c8 <_ZNSt15_Deque_iteratorIdRdPdEpLEi+0x38>
 80037c6:	2300      	movs	r3, #0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d007      	beq.n	80037dc <_ZNSt15_Deque_iteratorIdRdPdEpLEi+0x4c>
	  _M_cur += __n;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	441a      	add	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	e02b      	b.n	8003834 <_ZNSt15_Deque_iteratorIdRdPdEpLEi+0xa4>
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	dd07      	ble.n	80037f2 <_ZNSt15_Deque_iteratorIdRdPdEpLEi+0x62>
 80037e2:	f7fe ffe2 	bl	80027aa <_ZNSt15_Deque_iteratorIdRdPdE14_S_buffer_sizeEv>
 80037e6:	4603      	mov	r3, r0
 80037e8:	461a      	mov	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80037f0:	e007      	b.n	8003802 <_ZNSt15_Deque_iteratorIdRdPdEpLEi+0x72>
			   : -difference_type((-__offset - 1)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	43dc      	mvns	r4, r3
					      / _S_buffer_size()) - 1;
 80037f6:	f7fe ffd8 	bl	80027aa <_ZNSt15_Deque_iteratorIdRdPdE14_S_buffer_sizeEv>
 80037fa:	4603      	mov	r3, r0
 80037fc:	fbb4 f3f3 	udiv	r3, r4, r3
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 8003800:	43db      	mvns	r3, r3
	    const difference_type __node_offset =
 8003802:	60bb      	str	r3, [r7, #8]
	    _M_set_node(_M_node + __node_offset);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	4619      	mov	r1, r3
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7fe fd7b 	bl	800230c <_ZNSt15_Deque_iteratorIdRdPdE11_M_set_nodeEPS1_>
	    _M_cur = _M_first + (__offset - __node_offset
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685c      	ldr	r4, [r3, #4]
				 * difference_type(_S_buffer_size()));
 800381a:	f7fe ffc6 	bl	80027aa <_ZNSt15_Deque_iteratorIdRdPdE14_S_buffer_sizeEv>
 800381e:	4603      	mov	r3, r0
 8003820:	461a      	mov	r2, r3
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	fb02 f303 	mul.w	r3, r2, r3
	    _M_cur = _M_first + (__offset - __node_offset
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	18e2      	adds	r2, r4, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	601a      	str	r2, [r3, #0]
	return *this;
 8003834:	687b      	ldr	r3, [r7, #4]
      }
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	bd90      	pop	{r4, r7, pc}

0800383e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPsEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800383e:	b580      	push	{r7, lr}
 8003840:	b086      	sub	sp, #24
 8003842:	af00      	add	r7, sp, #0
 8003844:	60f8      	str	r0, [r7, #12]
 8003846:	60b9      	str	r1, [r7, #8]
 8003848:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	109b      	asrs	r3, r3, #2
 8003852:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d006      	beq.n	8003868 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPsEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	461a      	mov	r2, r3
 8003860:	68f9      	ldr	r1, [r7, #12]
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f005 f8fc 	bl	8008a60 <memmove>
	  return __result + _Num;
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	4413      	add	r3, r2
	}
 8003870:	4618      	mov	r0, r3
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPsEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	109b      	asrs	r3, r3, #2
 800388c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00a      	beq.n	80038aa <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPsEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	425b      	negs	r3, r3
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	18d0      	adds	r0, r2, r3
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	461a      	mov	r2, r3
 80038a4:	68f9      	ldr	r1, [r7, #12]
 80038a6:	f005 f8db 	bl	8008a60 <memmove>
	  return __result - _Num;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	425b      	negs	r3, r3
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	4413      	add	r3, r2
	}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <_ZSt14__copy_move_a2ILb0EPdS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	68b9      	ldr	r1, [r7, #8]
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 f805 	bl	80038dc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>
 80038d2:	4603      	mov	r3, r0
    }
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	10db      	asrs	r3, r3, #3
 80038f0:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d006      	beq.n	8003906 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	461a      	mov	r2, r3
 80038fe:	68f9      	ldr	r1, [r7, #12]
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f005 f8ad 	bl	8008a60 <memmove>
	  return __result + _Num;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	4413      	add	r3, r2
	}
 800390e:	4618      	mov	r0, r3
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <_ZN12ControlClassD1Ev>:
 8003916:	b580      	push	{r7, lr}
 8003918:	b082      	sub	sp, #8
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003924:	4618      	mov	r0, r3
 8003926:	f7fd f9c1 	bl	8000cac <_ZNSt5queueIsSt5dequeIsSaIsEEED1Ev>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8003930:	4618      	mov	r0, r3
 8003932:	f7fd f9ae 	bl	8000c92 <_ZNSt5queueIdSt5dequeIdSaIdEEED1Ev>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4618      	mov	r0, r3
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <_Z41__static_initialization_and_destruction_0ii>:
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d107      	bne.n	8003960 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003956:	4293      	cmp	r3, r2
 8003958:	d102      	bne.n	8003960 <_Z41__static_initialization_and_destruction_0ii+0x20>
ControlClass ControlSystem;
 800395a:	4809      	ldr	r0, [pc, #36]	; (8003980 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800395c:	f7fd f9b4 	bl	8000cc8 <_ZN12ControlClassC1Ev>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d107      	bne.n	8003976 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800396c:	4293      	cmp	r3, r2
 800396e:	d102      	bne.n	8003976 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003970:	4803      	ldr	r0, [pc, #12]	; (8003980 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003972:	f7ff ffd0 	bl	8003916 <_ZN12ControlClassD1Ev>
}
 8003976:	bf00      	nop
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	200000a8 	.word	0x200000a8

08003984 <_GLOBAL__sub_I_ControlSystem>:
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
 8003988:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800398c:	2001      	movs	r0, #1
 800398e:	f7ff ffd7 	bl	8003940 <_Z41__static_initialization_and_destruction_0ii>
 8003992:	bd80      	pop	{r7, pc}

08003994 <_GLOBAL__sub_D_ControlSystem>:
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
 8003998:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800399c:	2000      	movs	r0, #0
 800399e:	f7ff ffcf 	bl	8003940 <_Z41__static_initialization_and_destruction_0ii>
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	e9c7 0100 	strd	r0, r1, [r7]
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80039b6:	4610      	mov	r0, r2
 80039b8:	4619      	mov	r1, r3
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	bc80      	pop	{r7}
 80039c0:	4770      	bx	lr
 80039c2:	0000      	movs	r0, r0
 80039c4:	0000      	movs	r0, r0
	...

080039c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039c8:	b5b0      	push	{r4, r5, r7, lr}
 80039ca:	b0ac      	sub	sp, #176	; 0xb0
 80039cc:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039ce:	f001 fcc1 	bl	8005354 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039d2:	f000 fe2d 	bl	8004630 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039d6:	f001 f95f 	bl	8004c98 <_ZL12MX_GPIO_Initv>
  MX_ADC2_Init();
 80039da:	f000 fedb 	bl	8004794 <_ZL12MX_ADC2_Initv>
  MX_SPI1_Init();
 80039de:	f000 ff4b 	bl	8004878 <_ZL12MX_SPI1_Initv>
  MX_TIM1_Init();
 80039e2:	f000 ffc1 	bl	8004968 <_ZL12MX_TIM1_Initv>
  MX_USART2_UART_Init();
 80039e6:	f001 f8fb 	bl	8004be0 <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 80039ea:	f001 f927 	bl	8004c3c <_ZL19MX_USART3_UART_Initv>
  MX_ADC1_Init();
 80039ee:	f000 fe89 	bl	8004704 <_ZL12MX_ADC1_Initv>
  MX_SPI2_Init();
 80039f2:	f000 ff7d 	bl	80048f0 <_ZL12MX_SPI2_Initv>
  MX_TIM2_Init();
 80039f6:	f001 f897 	bl	8004b28 <_ZL12MX_TIM2_Initv>
  uint8_t zData [2];
//  uint8_t motionFlagStatus;
//  uint8_t motionIrqStatus;

// TODO: implement sleep routine:
  uint16_t inactivity_counter = 0;
 80039fa:	2300      	movs	r3, #0
 80039fc:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
//  bool y_inactive = false;




  double x_theta = 0;
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  double delta_x_theta;
  double delta_x_theta_threshold = 2; // movement less than 1 degree  is assumed to be a stationary mug
 8003a0c:	f04f 0200 	mov.w	r2, #0
 8003a10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a14:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  int16_t x_nominal = 0;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  //  int16_t y_theta = 0;

  int8_t allowableAngle = 8;
 8003a1e:	2308      	movs	r3, #8
 8003a20:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  int16_t currentEncoderAngle;
//  int16_t deltaEncoderAngle = 0;
//  int16_t deltaEncoderAngleThreshold = 5; // movement of 5 degrees when delta x has remained less than 1 degree is assumed to be a stationary mug.
  int16_t encoderAngleOffset = 71;
 8003a24:	2347      	movs	r3, #71	; 0x47
 8003a26:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
  int16_t sineIndexAtZero = 275; // Phase angles when encoder is at 0 degrees in relation to the mug
 8003a2a:	f240 1313 	movw	r3, #275	; 0x113
 8003a2e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  uint8_t Simulink_Out[2] = {0};
  uint8_t Simulink_Packet[8] = {0};
#endif //__SIMULINK_EN//

  //Configure Accelerometer using PA4 for CSn, in SPI mode
  MC3479.setSerialSPI(&hspi1, GPIOA, SPI1_CSn_Pin);
 8003a32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a36:	4ad6      	ldr	r2, [pc, #856]	; (8003d90 <main+0x3c8>)
 8003a38:	49d6      	ldr	r1, [pc, #856]	; (8003d94 <main+0x3cc>)
 8003a3a:	48d7      	ldr	r0, [pc, #860]	; (8003d98 <main+0x3d0>)
 8003a3c:	f004 fc18 	bl	8008270 <_ZN11MC3479Class12setSerialSPIEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
  MC3479.configAccelerometer();
 8003a40:	48d5      	ldr	r0, [pc, #852]	; (8003d98 <main+0x3d0>)
 8003a42:	f004 fcd0 	bl	80083e6 <_ZN11MC3479Class19configAccelerometerEv>

  //Configure GPIO variables for x-axis
  MP6543H.x_configMotorController(TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, &htim1,
 8003a46:	2304      	movs	r3, #4
 8003a48:	930a      	str	r3, [sp, #40]	; 0x28
 8003a4a:	4bd4      	ldr	r3, [pc, #848]	; (8003d9c <main+0x3d4>)
 8003a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a52:	9308      	str	r3, [sp, #32]
 8003a54:	4bce      	ldr	r3, [pc, #824]	; (8003d90 <main+0x3c8>)
 8003a56:	9307      	str	r3, [sp, #28]
 8003a58:	2302      	movs	r3, #2
 8003a5a:	9306      	str	r3, [sp, #24]
 8003a5c:	4bcf      	ldr	r3, [pc, #828]	; (8003d9c <main+0x3d4>)
 8003a5e:	9305      	str	r3, [sp, #20]
 8003a60:	2301      	movs	r3, #1
 8003a62:	9304      	str	r3, [sp, #16]
 8003a64:	4bcd      	ldr	r3, [pc, #820]	; (8003d9c <main+0x3d4>)
 8003a66:	9303      	str	r3, [sp, #12]
 8003a68:	2380      	movs	r3, #128	; 0x80
 8003a6a:	9302      	str	r3, [sp, #8]
 8003a6c:	4bc8      	ldr	r3, [pc, #800]	; (8003d90 <main+0x3c8>)
 8003a6e:	9301      	str	r3, [sp, #4]
 8003a70:	4bcb      	ldr	r3, [pc, #812]	; (8003da0 <main+0x3d8>)
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	2308      	movs	r3, #8
 8003a76:	2204      	movs	r2, #4
 8003a78:	2100      	movs	r1, #0
 8003a7a:	48ca      	ldr	r0, [pc, #808]	; (8003da4 <main+0x3dc>)
 8003a7c:	f004 fd93 	bl	80085a6 <_ZN12MP6543HClass23x_configMotorControllerEtttP17TIM_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_tS3_t>
								  	  MP6543H_EN_B_GPIO_Port, MP6543H_EN_B_Pin,
									  	  MP6543H_EN_C_GPIO_Port, MP6543H_EN_C_Pin,
									  	  	  MP6543H_nSLEEP_X_GPIO_Port, MP6543H_nSLEEP_X_Pin,
											  	  MP6543H_nFAULT_X_GPIO_Port, MP6543H_nFAULT_X_Pin);

  ControlSystem.initControlSystem();
 8003a80:	48c9      	ldr	r0, [pc, #804]	; (8003da8 <main+0x3e0>)
 8003a82:	f7fd fa75 	bl	8000f70 <_ZN12ControlClass17initControlSystemEv>
  AS5048A.SPI_Init(&hspi2, SPI2_SCn_GPIO_Port, SPI2_SCn_Pin);
 8003a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a8a:	4ac4      	ldr	r2, [pc, #784]	; (8003d9c <main+0x3d4>)
 8003a8c:	49c7      	ldr	r1, [pc, #796]	; (8003dac <main+0x3e4>)
 8003a8e:	48c8      	ldr	r0, [pc, #800]	; (8003db0 <main+0x3e8>)
 8003a90:	f7fd f824 	bl	8000adc <_ZN13AS5048A_Class8SPI_InitEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>

  // Get first accelerometer position:
  MC3479.getXYZ(xData, yData, zData);
 8003a94:	1d3b      	adds	r3, r7, #4
 8003a96:	f107 0208 	add.w	r2, r7, #8
 8003a9a:	f107 010c 	add.w	r1, r7, #12
 8003a9e:	48be      	ldr	r0, [pc, #760]	; (8003d98 <main+0x3d0>)
 8003aa0:	f004 fd59 	bl	8008556 <_ZN11MC3479Class6getXYZEPhS0_S0_>
  x_theta = ControlSystem.x_normalizeTheta(xData[0], xData[1], zData[0], zData[1]);
 8003aa4:	7b39      	ldrb	r1, [r7, #12]
 8003aa6:	7b7a      	ldrb	r2, [r7, #13]
 8003aa8:	7938      	ldrb	r0, [r7, #4]
 8003aaa:	797b      	ldrb	r3, [r7, #5]
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	4603      	mov	r3, r0
 8003ab0:	48bd      	ldr	r0, [pc, #756]	; (8003da8 <main+0x3e0>)
 8003ab2:	f7fd fa0d 	bl	8000ed0 <_ZN12ControlClass16x_normalizeThetaEhhhh>
 8003ab6:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68



  // Initial encoder variables:
  currentEncoderAngle = (AS5048A.readAngleSequential() + (360 + encoderAngleOffset))%360 - 180;
 8003aba:	48bd      	ldr	r0, [pc, #756]	; (8003db0 <main+0x3e8>)
 8003abc:	f7fd f82e 	bl	8000b1c <_ZN13AS5048A_Class19readAngleSequentialEv>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8003ac8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003acc:	4413      	add	r3, r2
 8003ace:	4ab9      	ldr	r2, [pc, #740]	; (8003db4 <main+0x3ec>)
 8003ad0:	fb82 1203 	smull	r1, r2, r2, r3
 8003ad4:	441a      	add	r2, r3
 8003ad6:	1211      	asrs	r1, r2, #8
 8003ad8:	17da      	asrs	r2, r3, #31
 8003ada:	1a8a      	subs	r2, r1, r2
 8003adc:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003ae0:	fb01 f202 	mul.w	r2, r1, r2
 8003ae4:	1a9a      	subs	r2, r3, r2
 8003ae6:	b293      	uxth	r3, r2
 8003ae8:	3bb4      	subs	r3, #180	; 0xb4
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
  currentEncoderAngle = (AS5048A.readAngleSequential() + (360 + encoderAngleOffset))%360 - 180;
 8003af0:	48af      	ldr	r0, [pc, #700]	; (8003db0 <main+0x3e8>)
 8003af2:	f7fd f813 	bl	8000b1c <_ZN13AS5048A_Class19readAngleSequentialEv>
 8003af6:	4603      	mov	r3, r0
 8003af8:	461a      	mov	r2, r3
 8003afa:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8003afe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b02:	4413      	add	r3, r2
 8003b04:	4aab      	ldr	r2, [pc, #684]	; (8003db4 <main+0x3ec>)
 8003b06:	fb82 1203 	smull	r1, r2, r2, r3
 8003b0a:	441a      	add	r2, r3
 8003b0c:	1211      	asrs	r1, r2, #8
 8003b0e:	17da      	asrs	r2, r3, #31
 8003b10:	1a8a      	subs	r2, r1, r2
 8003b12:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003b16:	fb01 f202 	mul.w	r2, r1, r2
 8003b1a:	1a9a      	subs	r2, r3, r2
 8003b1c:	b293      	uxth	r3, r2
 8003b1e:	3bb4      	subs	r3, #180	; 0xb4
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c


// Initialize position variables:
  // Determine Initial Sine index based on accelerometer:
  uint8_t relativePhaseAngle = currentEncoderAngle % (360/N_POLE_PAIRS);
 8003b26:	f9b7 207c 	ldrsh.w	r2, [r7, #124]	; 0x7c
 8003b2a:	4ba3      	ldr	r3, [pc, #652]	; (8003db8 <main+0x3f0>)
 8003b2c:	fb83 1302 	smull	r1, r3, r3, r2
 8003b30:	10d9      	asrs	r1, r3, #3
 8003b32:	17d3      	asrs	r3, r2, #31
 8003b34:	1ac9      	subs	r1, r1, r3
 8003b36:	460b      	mov	r3, r1
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	440b      	add	r3, r1
 8003b3c:	0099      	lsls	r1, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	1ad1      	subs	r1, r2, r3
 8003b42:	460b      	mov	r3, r1
 8003b44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  // Initialize phase offsets:
  uint16_t phaseAindex = (sineIndexAtZero + (relativePhaseAngle / DEG_PER_PHASE_INC));
 8003b48:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fc fc51 	bl	80003f4 <__aeabi_i2d>
 8003b52:	4604      	mov	r4, r0
 8003b54:	460d      	mov	r5, r1
 8003b56:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fc fc4a 	bl	80003f4 <__aeabi_i2d>
 8003b60:	f04f 0200 	mov.w	r2, #0
 8003b64:	4b95      	ldr	r3, [pc, #596]	; (8003dbc <main+0x3f4>)
 8003b66:	f7fc fdd9 	bl	800071c <__aeabi_ddiv>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	4610      	mov	r0, r2
 8003b70:	4619      	mov	r1, r3
 8003b72:	a381      	add	r3, pc, #516	; (adr r3, 8003d78 <main+0x3b0>)
 8003b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b78:	f7fc fdd0 	bl	800071c <__aeabi_ddiv>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4620      	mov	r0, r4
 8003b82:	4629      	mov	r1, r5
 8003b84:	f7fc faea 	bl	800015c <__adddf3>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	4619      	mov	r1, r3
 8003b90:	f7fc ff5c 	bl	8000a4c <__aeabi_d2uiz>
 8003b94:	4603      	mov	r3, r0
 8003b96:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
  phaseAindex %= N_SINE_IDX;
 8003b9a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003b9e:	08da      	lsrs	r2, r3, #3
 8003ba0:	4987      	ldr	r1, [pc, #540]	; (8003dc0 <main+0x3f8>)
 8003ba2:	fba1 1202 	umull	r1, r2, r1, r2
 8003ba6:	0892      	lsrs	r2, r2, #2
 8003ba8:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003bac:	fb01 f202 	mul.w	r2, r1, r2
 8003bb0:	1a9b      	subs	r3, r3, r2
 8003bb2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
  uint16_t phaseBindex = (phaseAindex + 120)%N_SINE_IDX;
 8003bb6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003bba:	3378      	adds	r3, #120	; 0x78
 8003bbc:	4a7d      	ldr	r2, [pc, #500]	; (8003db4 <main+0x3ec>)
 8003bbe:	fb82 1203 	smull	r1, r2, r2, r3
 8003bc2:	441a      	add	r2, r3
 8003bc4:	1211      	asrs	r1, r2, #8
 8003bc6:	17da      	asrs	r2, r3, #31
 8003bc8:	1a8a      	subs	r2, r1, r2
 8003bca:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003bce:	fb01 f202 	mul.w	r2, r1, r2
 8003bd2:	1a9a      	subs	r2, r3, r2
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  uint16_t phaseCindex = (phaseAindex + 240)%N_SINE_IDX;
 8003bda:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003bde:	33f0      	adds	r3, #240	; 0xf0
 8003be0:	4a74      	ldr	r2, [pc, #464]	; (8003db4 <main+0x3ec>)
 8003be2:	fb82 1203 	smull	r1, r2, r2, r3
 8003be6:	441a      	add	r2, r3
 8003be8:	1211      	asrs	r1, r2, #8
 8003bea:	17da      	asrs	r2, r3, #31
 8003bec:	1a8a      	subs	r2, r1, r2
 8003bee:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003bf2:	fb01 f202 	mul.w	r2, r1, r2
 8003bf6:	1a9a      	subs	r2, r3, r2
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
  TIM1->CCR1 = 0.1*ControlSystem.sineWave[phaseAindex];
 8003bfe:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003c02:	4a69      	ldr	r2, [pc, #420]	; (8003da8 <main+0x3e0>)
 8003c04:	4413      	add	r3, r2
 8003c06:	7c1b      	ldrb	r3, [r3, #16]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fc fbf3 	bl	80003f4 <__aeabi_i2d>
 8003c0e:	a35c      	add	r3, pc, #368	; (adr r3, 8003d80 <main+0x3b8>)
 8003c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c14:	f7fc fc58 	bl	80004c8 <__aeabi_dmul>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4c69      	ldr	r4, [pc, #420]	; (8003dc4 <main+0x3fc>)
 8003c1e:	4610      	mov	r0, r2
 8003c20:	4619      	mov	r1, r3
 8003c22:	f7fc ff13 	bl	8000a4c <__aeabi_d2uiz>
 8003c26:	4603      	mov	r3, r0
 8003c28:	6363      	str	r3, [r4, #52]	; 0x34
  TIM1->CCR2 = 0.1*ControlSystem.sineWave[phaseBindex];
 8003c2a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8003c2e:	4a5e      	ldr	r2, [pc, #376]	; (8003da8 <main+0x3e0>)
 8003c30:	4413      	add	r3, r2
 8003c32:	7c1b      	ldrb	r3, [r3, #16]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7fc fbdd 	bl	80003f4 <__aeabi_i2d>
 8003c3a:	a351      	add	r3, pc, #324	; (adr r3, 8003d80 <main+0x3b8>)
 8003c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c40:	f7fc fc42 	bl	80004c8 <__aeabi_dmul>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4c5e      	ldr	r4, [pc, #376]	; (8003dc4 <main+0x3fc>)
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	f7fc fefd 	bl	8000a4c <__aeabi_d2uiz>
 8003c52:	4603      	mov	r3, r0
 8003c54:	63a3      	str	r3, [r4, #56]	; 0x38
  TIM1->CCR3 = 0.1*ControlSystem.sineWave[phaseCindex];
 8003c56:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8003c5a:	4a53      	ldr	r2, [pc, #332]	; (8003da8 <main+0x3e0>)
 8003c5c:	4413      	add	r3, r2
 8003c5e:	7c1b      	ldrb	r3, [r3, #16]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fc fbc7 	bl	80003f4 <__aeabi_i2d>
 8003c66:	a346      	add	r3, pc, #280	; (adr r3, 8003d80 <main+0x3b8>)
 8003c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6c:	f7fc fc2c 	bl	80004c8 <__aeabi_dmul>
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4c53      	ldr	r4, [pc, #332]	; (8003dc4 <main+0x3fc>)
 8003c76:	4610      	mov	r0, r2
 8003c78:	4619      	mov	r1, r3
 8003c7a:	f7fc fee7 	bl	8000a4c <__aeabi_d2uiz>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	63e3      	str	r3, [r4, #60]	; 0x3c

  //		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
  //		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
  //		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
  // Start all phase PWM signals
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003c82:	2100      	movs	r1, #0
 8003c84:	4846      	ldr	r0, [pc, #280]	; (8003da0 <main+0x3d8>)
 8003c86:	f003 fbc5 	bl	8007414 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003c8a:	2104      	movs	r1, #4
 8003c8c:	4844      	ldr	r0, [pc, #272]	; (8003da0 <main+0x3d8>)
 8003c8e:	f003 fbc1 	bl	8007414 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003c92:	2108      	movs	r1, #8
 8003c94:	4842      	ldr	r0, [pc, #264]	; (8003da0 <main+0x3d8>)
 8003c96:	f003 fbbd 	bl	8007414 <HAL_TIM_PWM_Start>
  // Enable all Phase outputs
  HAL_GPIO_WritePin(MP6543H_EN_A_GPIO_Port, MP6543H_EN_A_Pin, GPIO_PIN_SET);
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	2180      	movs	r1, #128	; 0x80
 8003c9e:	483c      	ldr	r0, [pc, #240]	; (8003d90 <main+0x3c8>)
 8003ca0:	f002 f86f 	bl	8005d82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MP6543H_EN_B_GPIO_Port, MP6543H_EN_B_Pin, GPIO_PIN_SET);
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	483c      	ldr	r0, [pc, #240]	; (8003d9c <main+0x3d4>)
 8003caa:	f002 f86a 	bl	8005d82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MP6543H_EN_C_GPIO_Port, MP6543H_EN_C_Pin, GPIO_PIN_SET);
 8003cae:	2201      	movs	r2, #1
 8003cb0:	2102      	movs	r1, #2
 8003cb2:	483a      	ldr	r0, [pc, #232]	; (8003d9c <main+0x3d4>)
 8003cb4:	f002 f865 	bl	8005d82 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003cb8:	2064      	movs	r0, #100	; 0x64
 8003cba:	f001 fbad 	bl	8005418 <HAL_Delay>
//	  TIM1->CCR3 = 0.2*ControlSystem.sineWave[phaseCindex];
//	  HAL_Delay(1);
//  }
   //END TEST LOL
//   Spin handle CW if mug is more than 2 degrees CW in relation to handle:
  while (currentEncoderAngle < -1){
 8003cbe:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 8003cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc6:	f280 80c4 	bge.w	8003e52 <main+0x48a>
	  phaseAindex = (phaseAindex + 361)%N_SINE_IDX;
 8003cca:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003cce:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003cd2:	4a38      	ldr	r2, [pc, #224]	; (8003db4 <main+0x3ec>)
 8003cd4:	fb82 1203 	smull	r1, r2, r2, r3
 8003cd8:	441a      	add	r2, r3
 8003cda:	1211      	asrs	r1, r2, #8
 8003cdc:	17da      	asrs	r2, r3, #31
 8003cde:	1a8a      	subs	r2, r1, r2
 8003ce0:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003ce4:	fb01 f202 	mul.w	r2, r1, r2
 8003ce8:	1a9a      	subs	r2, r3, r2
 8003cea:	4613      	mov	r3, r2
 8003cec:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	  phaseBindex = (phaseAindex + 120)%N_SINE_IDX;
 8003cf0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003cf4:	3378      	adds	r3, #120	; 0x78
 8003cf6:	4a2f      	ldr	r2, [pc, #188]	; (8003db4 <main+0x3ec>)
 8003cf8:	fb82 1203 	smull	r1, r2, r2, r3
 8003cfc:	441a      	add	r2, r3
 8003cfe:	1211      	asrs	r1, r2, #8
 8003d00:	17da      	asrs	r2, r3, #31
 8003d02:	1a8a      	subs	r2, r1, r2
 8003d04:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003d08:	fb01 f202 	mul.w	r2, r1, r2
 8003d0c:	1a9a      	subs	r2, r3, r2
 8003d0e:	4613      	mov	r3, r2
 8003d10:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
	  phaseCindex = (phaseAindex + 240)%N_SINE_IDX;
 8003d14:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003d18:	33f0      	adds	r3, #240	; 0xf0
 8003d1a:	4a26      	ldr	r2, [pc, #152]	; (8003db4 <main+0x3ec>)
 8003d1c:	fb82 1203 	smull	r1, r2, r2, r3
 8003d20:	441a      	add	r2, r3
 8003d22:	1211      	asrs	r1, r2, #8
 8003d24:	17da      	asrs	r2, r3, #31
 8003d26:	1a8a      	subs	r2, r1, r2
 8003d28:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003d2c:	fb01 f202 	mul.w	r2, r1, r2
 8003d30:	1a9a      	subs	r2, r3, r2
 8003d32:	4613      	mov	r3, r2
 8003d34:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	  TIM1->CCR1 = 0.6*ControlSystem.sineWave[phaseAindex];
 8003d38:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003d3c:	4a1a      	ldr	r2, [pc, #104]	; (8003da8 <main+0x3e0>)
 8003d3e:	4413      	add	r3, r2
 8003d40:	7c1b      	ldrb	r3, [r3, #16]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fc fb56 	bl	80003f4 <__aeabi_i2d>
 8003d48:	a30f      	add	r3, pc, #60	; (adr r3, 8003d88 <main+0x3c0>)
 8003d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4e:	f7fc fbbb 	bl	80004c8 <__aeabi_dmul>
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	4c1b      	ldr	r4, [pc, #108]	; (8003dc4 <main+0x3fc>)
 8003d58:	4610      	mov	r0, r2
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	f7fc fe76 	bl	8000a4c <__aeabi_d2uiz>
 8003d60:	4603      	mov	r3, r0
 8003d62:	6363      	str	r3, [r4, #52]	; 0x34
	  TIM1->CCR2 = 0.6*ControlSystem.sineWave[phaseBindex];
 8003d64:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8003d68:	4a0f      	ldr	r2, [pc, #60]	; (8003da8 <main+0x3e0>)
 8003d6a:	4413      	add	r3, r2
 8003d6c:	7c1b      	ldrb	r3, [r3, #16]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	e02a      	b.n	8003dc8 <main+0x400>
 8003d72:	bf00      	nop
 8003d74:	f3af 8000 	nop.w
 8003d78:	00000000 	.word	0x00000000
 8003d7c:	40a3b000 	.word	0x40a3b000
 8003d80:	9999999a 	.word	0x9999999a
 8003d84:	3fb99999 	.word	0x3fb99999
 8003d88:	33333333 	.word	0x33333333
 8003d8c:	3fe33333 	.word	0x3fe33333
 8003d90:	40010800 	.word	0x40010800
 8003d94:	20000378 	.word	0x20000378
 8003d98:	20000548 	.word	0x20000548
 8003d9c:	40010c00 	.word	0x40010c00
 8003da0:	20000428 	.word	0x20000428
 8003da4:	2000055c 	.word	0x2000055c
 8003da8:	200000a8 	.word	0x200000a8
 8003dac:	200003d0 	.word	0x200003d0
 8003db0:	2000008c 	.word	0x2000008c
 8003db4:	b60b60b7 	.word	0xb60b60b7
 8003db8:	51eb851f 	.word	0x51eb851f
 8003dbc:	40768000 	.word	0x40768000
 8003dc0:	16c16c17 	.word	0x16c16c17
 8003dc4:	40012c00 	.word	0x40012c00
 8003dc8:	f7fc fb14 	bl	80003f4 <__aeabi_i2d>
 8003dcc:	a3a6      	add	r3, pc, #664	; (adr r3, 8004068 <main+0x6a0>)
 8003dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd2:	f7fc fb79 	bl	80004c8 <__aeabi_dmul>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4ca7      	ldr	r4, [pc, #668]	; (8004078 <main+0x6b0>)
 8003ddc:	4610      	mov	r0, r2
 8003dde:	4619      	mov	r1, r3
 8003de0:	f7fc fe34 	bl	8000a4c <__aeabi_d2uiz>
 8003de4:	4603      	mov	r3, r0
 8003de6:	63a3      	str	r3, [r4, #56]	; 0x38
	  TIM1->CCR3 = 0.6*ControlSystem.sineWave[phaseCindex];
 8003de8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8003dec:	4aa3      	ldr	r2, [pc, #652]	; (800407c <main+0x6b4>)
 8003dee:	4413      	add	r3, r2
 8003df0:	7c1b      	ldrb	r3, [r3, #16]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fc fafe 	bl	80003f4 <__aeabi_i2d>
 8003df8:	a39b      	add	r3, pc, #620	; (adr r3, 8004068 <main+0x6a0>)
 8003dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfe:	f7fc fb63 	bl	80004c8 <__aeabi_dmul>
 8003e02:	4602      	mov	r2, r0
 8003e04:	460b      	mov	r3, r1
 8003e06:	4c9c      	ldr	r4, [pc, #624]	; (8004078 <main+0x6b0>)
 8003e08:	4610      	mov	r0, r2
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	f7fc fe1e 	bl	8000a4c <__aeabi_d2uiz>
 8003e10:	4603      	mov	r3, r0
 8003e12:	63e3      	str	r3, [r4, #60]	; 0x3c

	  currentEncoderAngle = (AS5048A.readAngleSequential() + (360 + encoderAngleOffset))%360 - 180;
 8003e14:	489a      	ldr	r0, [pc, #616]	; (8004080 <main+0x6b8>)
 8003e16:	f7fc fe81 	bl	8000b1c <_ZN13AS5048A_Class19readAngleSequentialEv>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8003e22:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e26:	4413      	add	r3, r2
 8003e28:	4a96      	ldr	r2, [pc, #600]	; (8004084 <main+0x6bc>)
 8003e2a:	fb82 1203 	smull	r1, r2, r2, r3
 8003e2e:	441a      	add	r2, r3
 8003e30:	1211      	asrs	r1, r2, #8
 8003e32:	17da      	asrs	r2, r3, #31
 8003e34:	1a8a      	subs	r2, r1, r2
 8003e36:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003e3a:	fb01 f202 	mul.w	r2, r1, r2
 8003e3e:	1a9a      	subs	r2, r3, r2
 8003e40:	b293      	uxth	r3, r2
 8003e42:	3bb4      	subs	r3, #180	; 0xb4
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
//	  HAL_UART_Transmit(&huart3, &phaseAindex, 1, 10);
//	  UART_Send_16bit(&huart3, currentEncoderAngle);
	  HAL_Delay(1);
 8003e4a:	2001      	movs	r0, #1
 8003e4c:	f001 fae4 	bl	8005418 <HAL_Delay>
  while (currentEncoderAngle < -1){
 8003e50:	e735      	b.n	8003cbe <main+0x2f6>
  }
  // Spin handle CCW if mug is more than 2 degrees CCW in relation to handle:
  while (currentEncoderAngle > 1){
 8003e52:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	f340 8098 	ble.w	8003f8c <main+0x5c4>
	  phaseAindex = (phaseAindex + 359)%N_SINE_IDX;
 8003e5c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003e60:	f203 1367 	addw	r3, r3, #359	; 0x167
 8003e64:	4a87      	ldr	r2, [pc, #540]	; (8004084 <main+0x6bc>)
 8003e66:	fb82 1203 	smull	r1, r2, r2, r3
 8003e6a:	441a      	add	r2, r3
 8003e6c:	1211      	asrs	r1, r2, #8
 8003e6e:	17da      	asrs	r2, r3, #31
 8003e70:	1a8a      	subs	r2, r1, r2
 8003e72:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003e76:	fb01 f202 	mul.w	r2, r1, r2
 8003e7a:	1a9a      	subs	r2, r3, r2
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	  phaseBindex = (phaseAindex + 120)%N_SINE_IDX;
 8003e82:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003e86:	3378      	adds	r3, #120	; 0x78
 8003e88:	4a7e      	ldr	r2, [pc, #504]	; (8004084 <main+0x6bc>)
 8003e8a:	fb82 1203 	smull	r1, r2, r2, r3
 8003e8e:	441a      	add	r2, r3
 8003e90:	1211      	asrs	r1, r2, #8
 8003e92:	17da      	asrs	r2, r3, #31
 8003e94:	1a8a      	subs	r2, r1, r2
 8003e96:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003e9a:	fb01 f202 	mul.w	r2, r1, r2
 8003e9e:	1a9a      	subs	r2, r3, r2
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
	  phaseCindex = (phaseAindex + 240)%N_SINE_IDX;
 8003ea6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003eaa:	33f0      	adds	r3, #240	; 0xf0
 8003eac:	4a75      	ldr	r2, [pc, #468]	; (8004084 <main+0x6bc>)
 8003eae:	fb82 1203 	smull	r1, r2, r2, r3
 8003eb2:	441a      	add	r2, r3
 8003eb4:	1211      	asrs	r1, r2, #8
 8003eb6:	17da      	asrs	r2, r3, #31
 8003eb8:	1a8a      	subs	r2, r1, r2
 8003eba:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003ebe:	fb01 f202 	mul.w	r2, r1, r2
 8003ec2:	1a9a      	subs	r2, r3, r2
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	  TIM1->CCR1 = 0.6*ControlSystem.sineWave[phaseAindex];
 8003eca:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003ece:	4a6b      	ldr	r2, [pc, #428]	; (800407c <main+0x6b4>)
 8003ed0:	4413      	add	r3, r2
 8003ed2:	7c1b      	ldrb	r3, [r3, #16]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fc fa8d 	bl	80003f4 <__aeabi_i2d>
 8003eda:	a363      	add	r3, pc, #396	; (adr r3, 8004068 <main+0x6a0>)
 8003edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee0:	f7fc faf2 	bl	80004c8 <__aeabi_dmul>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4c63      	ldr	r4, [pc, #396]	; (8004078 <main+0x6b0>)
 8003eea:	4610      	mov	r0, r2
 8003eec:	4619      	mov	r1, r3
 8003eee:	f7fc fdad 	bl	8000a4c <__aeabi_d2uiz>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	6363      	str	r3, [r4, #52]	; 0x34
	  TIM1->CCR2 = 0.6*ControlSystem.sineWave[phaseBindex];
 8003ef6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8003efa:	4a60      	ldr	r2, [pc, #384]	; (800407c <main+0x6b4>)
 8003efc:	4413      	add	r3, r2
 8003efe:	7c1b      	ldrb	r3, [r3, #16]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fc fa77 	bl	80003f4 <__aeabi_i2d>
 8003f06:	a358      	add	r3, pc, #352	; (adr r3, 8004068 <main+0x6a0>)
 8003f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0c:	f7fc fadc 	bl	80004c8 <__aeabi_dmul>
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	4c58      	ldr	r4, [pc, #352]	; (8004078 <main+0x6b0>)
 8003f16:	4610      	mov	r0, r2
 8003f18:	4619      	mov	r1, r3
 8003f1a:	f7fc fd97 	bl	8000a4c <__aeabi_d2uiz>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	63a3      	str	r3, [r4, #56]	; 0x38
	  TIM1->CCR3 = 0.6*ControlSystem.sineWave[phaseCindex];
 8003f22:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8003f26:	4a55      	ldr	r2, [pc, #340]	; (800407c <main+0x6b4>)
 8003f28:	4413      	add	r3, r2
 8003f2a:	7c1b      	ldrb	r3, [r3, #16]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7fc fa61 	bl	80003f4 <__aeabi_i2d>
 8003f32:	a34d      	add	r3, pc, #308	; (adr r3, 8004068 <main+0x6a0>)
 8003f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f38:	f7fc fac6 	bl	80004c8 <__aeabi_dmul>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	460b      	mov	r3, r1
 8003f40:	4c4d      	ldr	r4, [pc, #308]	; (8004078 <main+0x6b0>)
 8003f42:	4610      	mov	r0, r2
 8003f44:	4619      	mov	r1, r3
 8003f46:	f7fc fd81 	bl	8000a4c <__aeabi_d2uiz>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	63e3      	str	r3, [r4, #60]	; 0x3c

	  currentEncoderAngle = (AS5048A.readAngleSequential() + (360 + encoderAngleOffset))%360 - 180;
 8003f4e:	484c      	ldr	r0, [pc, #304]	; (8004080 <main+0x6b8>)
 8003f50:	f7fc fde4 	bl	8000b1c <_ZN13AS5048A_Class19readAngleSequentialEv>
 8003f54:	4603      	mov	r3, r0
 8003f56:	461a      	mov	r2, r3
 8003f58:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8003f5c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f60:	4413      	add	r3, r2
 8003f62:	4a48      	ldr	r2, [pc, #288]	; (8004084 <main+0x6bc>)
 8003f64:	fb82 1203 	smull	r1, r2, r2, r3
 8003f68:	441a      	add	r2, r3
 8003f6a:	1211      	asrs	r1, r2, #8
 8003f6c:	17da      	asrs	r2, r3, #31
 8003f6e:	1a8a      	subs	r2, r1, r2
 8003f70:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003f74:	fb01 f202 	mul.w	r2, r1, r2
 8003f78:	1a9a      	subs	r2, r3, r2
 8003f7a:	b293      	uxth	r3, r2
 8003f7c:	3bb4      	subs	r3, #180	; 0xb4
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
//	  HAL_UART_Transmit(&huart3, &phaseAindex, 1, 10);
//	  UART_Send_16bit(&huart3, currentEncoderAngle);
	  HAL_Delay(1);
 8003f84:	2001      	movs	r0, #1
 8003f86:	f001 fa47 	bl	8005418 <HAL_Delay>
  while (currentEncoderAngle > 1){
 8003f8a:	e762      	b.n	8003e52 <main+0x48a>
  }
  HAL_Delay(1000);
 8003f8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f90:	f001 fa42 	bl	8005418 <HAL_Delay>
  HAL_TIM_Base_Start(&htim2); // Start timer necessary for delay_ms() function.
 8003f94:	483c      	ldr	r0, [pc, #240]	; (8004088 <main+0x6c0>)
 8003f96:	f003 f99b 	bl	80072d0 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  // Brake if any motor fault or if tilt button is pressed.
	  while(HAL_GPIO_ReadPin(nTILT_BUTTON_GPIO_Port, nTILT_BUTTON_Pin) == 0){
 8003f9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f9e:	483b      	ldr	r0, [pc, #236]	; (800408c <main+0x6c4>)
 8003fa0:	f001 fed8 	bl	8005d54 <HAL_GPIO_ReadPin>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	bf0c      	ite	eq
 8003faa:	2301      	moveq	r3, #1
 8003fac:	2300      	movne	r3, #0
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d046      	beq.n	8004042 <main+0x67a>
		  TIM1->CCR1 = 0.7*ControlSystem.sineWave[phaseAindex];
 8003fb4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003fb8:	4a30      	ldr	r2, [pc, #192]	; (800407c <main+0x6b4>)
 8003fba:	4413      	add	r3, r2
 8003fbc:	7c1b      	ldrb	r3, [r3, #16]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fc fa18 	bl	80003f4 <__aeabi_i2d>
 8003fc4:	a32a      	add	r3, pc, #168	; (adr r3, 8004070 <main+0x6a8>)
 8003fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fca:	f7fc fa7d 	bl	80004c8 <__aeabi_dmul>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	4c29      	ldr	r4, [pc, #164]	; (8004078 <main+0x6b0>)
 8003fd4:	4610      	mov	r0, r2
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	f7fc fd38 	bl	8000a4c <__aeabi_d2uiz>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	6363      	str	r3, [r4, #52]	; 0x34
		  TIM1->CCR2 = 0.7*ControlSystem.sineWave[phaseBindex];
 8003fe0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8003fe4:	4a25      	ldr	r2, [pc, #148]	; (800407c <main+0x6b4>)
 8003fe6:	4413      	add	r3, r2
 8003fe8:	7c1b      	ldrb	r3, [r3, #16]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fc fa02 	bl	80003f4 <__aeabi_i2d>
 8003ff0:	a31f      	add	r3, pc, #124	; (adr r3, 8004070 <main+0x6a8>)
 8003ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff6:	f7fc fa67 	bl	80004c8 <__aeabi_dmul>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	4c1e      	ldr	r4, [pc, #120]	; (8004078 <main+0x6b0>)
 8004000:	4610      	mov	r0, r2
 8004002:	4619      	mov	r1, r3
 8004004:	f7fc fd22 	bl	8000a4c <__aeabi_d2uiz>
 8004008:	4603      	mov	r3, r0
 800400a:	63a3      	str	r3, [r4, #56]	; 0x38
		  TIM1->CCR3 = 0.7*ControlSystem.sineWave[phaseCindex];
 800400c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8004010:	4a1a      	ldr	r2, [pc, #104]	; (800407c <main+0x6b4>)
 8004012:	4413      	add	r3, r2
 8004014:	7c1b      	ldrb	r3, [r3, #16]
 8004016:	4618      	mov	r0, r3
 8004018:	f7fc f9ec 	bl	80003f4 <__aeabi_i2d>
 800401c:	a314      	add	r3, pc, #80	; (adr r3, 8004070 <main+0x6a8>)
 800401e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004022:	f7fc fa51 	bl	80004c8 <__aeabi_dmul>
 8004026:	4602      	mov	r2, r0
 8004028:	460b      	mov	r3, r1
 800402a:	4c13      	ldr	r4, [pc, #76]	; (8004078 <main+0x6b0>)
 800402c:	4610      	mov	r0, r2
 800402e:	4619      	mov	r1, r3
 8004030:	f7fc fd0c 	bl	8000a4c <__aeabi_d2uiz>
 8004034:	4603      	mov	r3, r0
 8004036:	63e3      	str	r3, [r4, #60]	; 0x3c
		  delay_us(1000);
 8004038:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800403c:	f000 fea8 	bl	8004d90 <_Z8delay_ust>
	  while(HAL_GPIO_ReadPin(nTILT_BUTTON_GPIO_Port, nTILT_BUTTON_Pin) == 0){
 8004040:	e7ab      	b.n	8003f9a <main+0x5d2>
	  }
	  while(MP6543H.x_motorFault()){
 8004042:	4813      	ldr	r0, [pc, #76]	; (8004090 <main+0x6c8>)
 8004044:	f004 faf4 	bl	8008630 <_ZN12MP6543HClass12x_motorFaultEv>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d024      	beq.n	8004098 <main+0x6d0>
		  HAL_UART_Transmit(&huart3, (uint8_t*)0xFFFF, sizeof(0xFFFF), 10);
 800404e:	230a      	movs	r3, #10
 8004050:	2204      	movs	r2, #4
 8004052:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004056:	480f      	ldr	r0, [pc, #60]	; (8004094 <main+0x6cc>)
 8004058:	f003 ffa0 	bl	8007f9c <HAL_UART_Transmit>
		  delay_us(100);
 800405c:	2064      	movs	r0, #100	; 0x64
 800405e:	f000 fe97 	bl	8004d90 <_Z8delay_ust>
	  while(MP6543H.x_motorFault()){
 8004062:	e7ee      	b.n	8004042 <main+0x67a>
 8004064:	f3af 8000 	nop.w
 8004068:	33333333 	.word	0x33333333
 800406c:	3fe33333 	.word	0x3fe33333
 8004070:	66666666 	.word	0x66666666
 8004074:	3fe66666 	.word	0x3fe66666
 8004078:	40012c00 	.word	0x40012c00
 800407c:	200000a8 	.word	0x200000a8
 8004080:	2000008c 	.word	0x2000008c
 8004084:	b60b60b7 	.word	0xb60b60b7
 8004088:	20000470 	.word	0x20000470
 800408c:	40010800 	.word	0x40010800
 8004090:	2000055c 	.word	0x2000055c
 8004094:	200004fc 	.word	0x200004fc
	  }

#ifdef __NORMAL_MODE_EN

	  // fetch and normalize theta:
	  MC3479.getXYZ(xData, yData, zData);
 8004098:	1d3b      	adds	r3, r7, #4
 800409a:	f107 0208 	add.w	r2, r7, #8
 800409e:	f107 010c 	add.w	r1, r7, #12
 80040a2:	483b      	ldr	r0, [pc, #236]	; (8004190 <main+0x7c8>)
 80040a4:	f004 fa57 	bl	8008556 <_ZN11MC3479Class6getXYZEPhS0_S0_>
	  x_theta = ControlSystem.x_normalizeTheta(xData[0], xData[1], zData[0], zData[1]);
 80040a8:	7b39      	ldrb	r1, [r7, #12]
 80040aa:	7b7a      	ldrb	r2, [r7, #13]
 80040ac:	7938      	ldrb	r0, [r7, #4]
 80040ae:	797b      	ldrb	r3, [r7, #5]
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	4603      	mov	r3, r0
 80040b4:	4837      	ldr	r0, [pc, #220]	; (8004194 <main+0x7cc>)
 80040b6:	f7fc ff0b 	bl	8000ed0 <_ZN12ControlClass16x_normalizeThetaEhhhh>
 80040ba:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
	  delta_x_theta = ControlSystem.calculateDelta(ControlSystem.x_previousAngles);
 80040be:	f107 0310 	add.w	r3, r7, #16
 80040c2:	4935      	ldr	r1, [pc, #212]	; (8004198 <main+0x7d0>)
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7fc ff7e 	bl	8000fc6 <_ZNSt5queueIdSt5dequeIdSaIdEEEC1ERKS3_>
 80040ca:	f107 0310 	add.w	r3, r7, #16
 80040ce:	4619      	mov	r1, r3
 80040d0:	4830      	ldr	r0, [pc, #192]	; (8004194 <main+0x7cc>)
 80040d2:	f7fd f8e1 	bl	8001298 <_ZN12ControlClass14calculateDeltaESt5queueIdSt5dequeIdSaIdEEE>
 80040d6:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 80040da:	f107 0310 	add.w	r3, r7, #16
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fc fdd7 	bl	8000c92 <_ZNSt5queueIdSt5dequeIdSaIdEEED1Ev>
	  // Code above replaced with a simple read and timeout to just keep the loop rolling.
	  HAL_UART_Receive(&huart2, &Simulink_Out[0], sizeof(Simulink_Out[0]),100);
	  int8_t P = Simulink_Out[0];
#else
	  // Simple P-Control for now...
	  int16_t PID = ControlSystem.getPID(x_theta, x_nominal); 	// Can be negative (INCREASE FOR FASTER MOVEMENT)
 80040e4:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80040ee:	4829      	ldr	r0, [pc, #164]	; (8004194 <main+0x7cc>)
 80040f0:	f7fd f8f6 	bl	80012e0 <_ZN12ControlClass6getPIDEds>
 80040f4:	4603      	mov	r3, r0
 80040f6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

#endif //__SIMULINK_EN//

	  // Check for inactivity:
	  if (abs(delta_x_theta) < delta_x_theta_threshold && abs(x_theta) < allowableAngle){
 80040fa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80040fe:	f7ff fc51 	bl	80039a4 <_ZSt3absd>
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800410a:	f7fc fc6d 	bl	80009e8 <__aeabi_dcmpgt>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d015      	beq.n	8004140 <main+0x778>
 8004114:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004118:	f7ff fc44 	bl	80039a4 <_ZSt3absd>
 800411c:	4604      	mov	r4, r0
 800411e:	460d      	mov	r5, r1
 8004120:	f997 305d 	ldrsb.w	r3, [r7, #93]	; 0x5d
 8004124:	4618      	mov	r0, r3
 8004126:	f7fc f965 	bl	80003f4 <__aeabi_i2d>
 800412a:	4602      	mov	r2, r0
 800412c:	460b      	mov	r3, r1
 800412e:	4620      	mov	r0, r4
 8004130:	4629      	mov	r1, r5
 8004132:	f7fc fc3b 	bl	80009ac <__aeabi_dcmplt>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <main+0x778>
 800413c:	2301      	movs	r3, #1
 800413e:	e000      	b.n	8004142 <main+0x77a>
 8004140:	2300      	movs	r3, #0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d005      	beq.n	8004152 <main+0x78a>
  		  inactivity_counter += 1;
 8004146:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800414a:	3301      	adds	r3, #1
 800414c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8004150:	e002      	b.n	8004158 <main+0x790>
  	  }
  	  else{
  		  inactivity_counter = 0;
 8004152:	2300      	movs	r3, #0
 8004154:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
  	  }


	  if (inactivity_counter < INACTIVITY_THRESHOLD){
 8004158:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800415c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004160:	f080 80a0 	bcs.w	80042a4 <main+0x8dc>
		  // Update FOC amplitude and phase variables
		  scalar = (abs(x_theta) < 10) ? 0.3 : 0.6;// 0.5 appears to be the minimum threshold where the motor resists skipping phases due to quick hand movements.
 8004164:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004168:	f7ff fc1c 	bl	80039a4 <_ZSt3absd>
 800416c:	f04f 0200 	mov.w	r2, #0
 8004170:	4b0a      	ldr	r3, [pc, #40]	; (800419c <main+0x7d4>)
 8004172:	f7fc fc1b 	bl	80009ac <__aeabi_dcmplt>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d011      	beq.n	80041a0 <main+0x7d8>
 800417c:	a302      	add	r3, pc, #8	; (adr r3, 8004188 <main+0x7c0>)
 800417e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004182:	e010      	b.n	80041a6 <main+0x7de>
 8004184:	f3af 8000 	nop.w
 8004188:	33333333 	.word	0x33333333
 800418c:	3fd33333 	.word	0x3fd33333
 8004190:	20000548 	.word	0x20000548
 8004194:	200000a8 	.word	0x200000a8
 8004198:	20000278 	.word	0x20000278
 800419c:	40240000 	.word	0x40240000
 80041a0:	a3a1      	add	r3, pc, #644	; (adr r3, 8004428 <main+0xa60>)
 80041a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		  phaseAindex = (phaseAindex + N_SINE_IDX + PID) % N_SINE_IDX;
 80041aa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80041ae:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 80041b2:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80041b6:	4413      	add	r3, r2
 80041b8:	4a9d      	ldr	r2, [pc, #628]	; (8004430 <main+0xa68>)
 80041ba:	fb82 1203 	smull	r1, r2, r2, r3
 80041be:	441a      	add	r2, r3
 80041c0:	1211      	asrs	r1, r2, #8
 80041c2:	17da      	asrs	r2, r3, #31
 80041c4:	1a8a      	subs	r2, r1, r2
 80041c6:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80041ca:	fb01 f202 	mul.w	r2, r1, r2
 80041ce:	1a9a      	subs	r2, r3, r2
 80041d0:	4613      	mov	r3, r2
 80041d2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
		  phaseBindex = (phaseAindex + 120) % N_SINE_IDX;
 80041d6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80041da:	3378      	adds	r3, #120	; 0x78
 80041dc:	4a94      	ldr	r2, [pc, #592]	; (8004430 <main+0xa68>)
 80041de:	fb82 1203 	smull	r1, r2, r2, r3
 80041e2:	441a      	add	r2, r3
 80041e4:	1211      	asrs	r1, r2, #8
 80041e6:	17da      	asrs	r2, r3, #31
 80041e8:	1a8a      	subs	r2, r1, r2
 80041ea:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80041ee:	fb01 f202 	mul.w	r2, r1, r2
 80041f2:	1a9a      	subs	r2, r3, r2
 80041f4:	4613      	mov	r3, r2
 80041f6:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
		  phaseCindex = (phaseAindex + 240) % N_SINE_IDX;
 80041fa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80041fe:	33f0      	adds	r3, #240	; 0xf0
 8004200:	4a8b      	ldr	r2, [pc, #556]	; (8004430 <main+0xa68>)
 8004202:	fb82 1203 	smull	r1, r2, r2, r3
 8004206:	441a      	add	r2, r3
 8004208:	1211      	asrs	r1, r2, #8
 800420a:	17da      	asrs	r2, r3, #31
 800420c:	1a8a      	subs	r2, r1, r2
 800420e:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8004212:	fb01 f202 	mul.w	r2, r1, r2
 8004216:	1a9a      	subs	r2, r3, r2
 8004218:	4613      	mov	r3, r2
 800421a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

		  // Update PWM registers with new phase/amplitude
		  //TODO: to compensate for imbalanced gimbal apply greater scalar to the more loaded direction of travel.
		  TIM1->CCR1 = scalar*ControlSystem.sineWave[phaseAindex];
 800421e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8004222:	4a84      	ldr	r2, [pc, #528]	; (8004434 <main+0xa6c>)
 8004224:	4413      	add	r3, r2
 8004226:	7c1b      	ldrb	r3, [r3, #16]
 8004228:	4618      	mov	r0, r3
 800422a:	f7fc f8e3 	bl	80003f4 <__aeabi_i2d>
 800422e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004232:	f7fc f949 	bl	80004c8 <__aeabi_dmul>
 8004236:	4602      	mov	r2, r0
 8004238:	460b      	mov	r3, r1
 800423a:	4c7f      	ldr	r4, [pc, #508]	; (8004438 <main+0xa70>)
 800423c:	4610      	mov	r0, r2
 800423e:	4619      	mov	r1, r3
 8004240:	f7fc fc04 	bl	8000a4c <__aeabi_d2uiz>
 8004244:	4603      	mov	r3, r0
 8004246:	6363      	str	r3, [r4, #52]	; 0x34
		  TIM1->CCR2 = scalar*ControlSystem.sineWave[phaseBindex];
 8004248:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800424c:	4a79      	ldr	r2, [pc, #484]	; (8004434 <main+0xa6c>)
 800424e:	4413      	add	r3, r2
 8004250:	7c1b      	ldrb	r3, [r3, #16]
 8004252:	4618      	mov	r0, r3
 8004254:	f7fc f8ce 	bl	80003f4 <__aeabi_i2d>
 8004258:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800425c:	f7fc f934 	bl	80004c8 <__aeabi_dmul>
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	4c74      	ldr	r4, [pc, #464]	; (8004438 <main+0xa70>)
 8004266:	4610      	mov	r0, r2
 8004268:	4619      	mov	r1, r3
 800426a:	f7fc fbef 	bl	8000a4c <__aeabi_d2uiz>
 800426e:	4603      	mov	r3, r0
 8004270:	63a3      	str	r3, [r4, #56]	; 0x38
		  TIM1->CCR3 = scalar*ControlSystem.sineWave[phaseCindex];
 8004272:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8004276:	4a6f      	ldr	r2, [pc, #444]	; (8004434 <main+0xa6c>)
 8004278:	4413      	add	r3, r2
 800427a:	7c1b      	ldrb	r3, [r3, #16]
 800427c:	4618      	mov	r0, r3
 800427e:	f7fc f8b9 	bl	80003f4 <__aeabi_i2d>
 8004282:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004286:	f7fc f91f 	bl	80004c8 <__aeabi_dmul>
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	4c6a      	ldr	r4, [pc, #424]	; (8004438 <main+0xa70>)
 8004290:	4610      	mov	r0, r2
 8004292:	4619      	mov	r1, r3
 8004294:	f7fc fbda 	bl	8000a4c <__aeabi_d2uiz>
 8004298:	4603      	mov	r3, r0
 800429a:	63e3      	str	r3, [r4, #60]	; 0x3c

		  // Arbitrary delay to regulate loop timing / smooth things out.
		  // TODO: final delay value following PID tuning.
		  delay_us(500); //750us vs 1000us does not appear to disrupt smooth motor operation.
 800429c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042a0:	f000 fd76 	bl	8004d90 <_Z8delay_ust>

	  // TEST CODE FOR ON-TABLE DETECTION:
	  // TODO: Introduce breaks into while loops with checks for delta_x in case mug is picked up mid-homing.


	  if (inactivity_counter >= INACTIVITY_THRESHOLD){
 80042a4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80042a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042ac:	f4ff ae75 	bcc.w	8003f9a <main+0x5d2>
		  // TODO: Do we even need encoder data checks to see if we are inactive?
	  	  currentEncoderAngle = (AS5048A.readAngleSequential() + (360 + encoderAngleOffset))%360 - 180;
 80042b0:	4862      	ldr	r0, [pc, #392]	; (800443c <main+0xa74>)
 80042b2:	f7fc fc33 	bl	8000b1c <_ZN13AS5048A_Class19readAngleSequentialEv>
 80042b6:	4603      	mov	r3, r0
 80042b8:	461a      	mov	r2, r3
 80042ba:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80042be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80042c2:	4413      	add	r3, r2
 80042c4:	4a5a      	ldr	r2, [pc, #360]	; (8004430 <main+0xa68>)
 80042c6:	fb82 1203 	smull	r1, r2, r2, r3
 80042ca:	441a      	add	r2, r3
 80042cc:	1211      	asrs	r1, r2, #8
 80042ce:	17da      	asrs	r2, r3, #31
 80042d0:	1a8a      	subs	r2, r1, r2
 80042d2:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80042d6:	fb01 f202 	mul.w	r2, r1, r2
 80042da:	1a9a      	subs	r2, r3, r2
 80042dc:	b293      	uxth	r3, r2
 80042de:	3bb4      	subs	r3, #180	; 0xb4
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
//	  	  deltaEncoderAngle = ControlSystem.calculateDeltaEncoder(currentEncoderAngle);
	  		  // Home Handle
	  		  // TODO: Make a handle homing function
	  		  // Spin handle CW if mug is more than 2 degrees CW in relation to handle:
	  		  while (currentEncoderAngle < -2){
 80042e6:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 80042ea:	f113 0f02 	cmn.w	r3, #2
 80042ee:	f280 80a7 	bge.w	8004440 <main+0xa78>
	  			  phaseAindex = (phaseAindex+N_SINE_IDX+1)%N_SINE_IDX;
 80042f2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80042f6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80042fa:	4a4d      	ldr	r2, [pc, #308]	; (8004430 <main+0xa68>)
 80042fc:	fb82 1203 	smull	r1, r2, r2, r3
 8004300:	441a      	add	r2, r3
 8004302:	1211      	asrs	r1, r2, #8
 8004304:	17da      	asrs	r2, r3, #31
 8004306:	1a8a      	subs	r2, r1, r2
 8004308:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800430c:	fb01 f202 	mul.w	r2, r1, r2
 8004310:	1a9a      	subs	r2, r3, r2
 8004312:	4613      	mov	r3, r2
 8004314:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	  			  phaseBindex = (phaseAindex + 120) % N_SINE_IDX;
 8004318:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800431c:	3378      	adds	r3, #120	; 0x78
 800431e:	4a44      	ldr	r2, [pc, #272]	; (8004430 <main+0xa68>)
 8004320:	fb82 1203 	smull	r1, r2, r2, r3
 8004324:	441a      	add	r2, r3
 8004326:	1211      	asrs	r1, r2, #8
 8004328:	17da      	asrs	r2, r3, #31
 800432a:	1a8a      	subs	r2, r1, r2
 800432c:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8004330:	fb01 f202 	mul.w	r2, r1, r2
 8004334:	1a9a      	subs	r2, r3, r2
 8004336:	4613      	mov	r3, r2
 8004338:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
	  			  phaseCindex = (phaseAindex + 240) % N_SINE_IDX;
 800433c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8004340:	33f0      	adds	r3, #240	; 0xf0
 8004342:	4a3b      	ldr	r2, [pc, #236]	; (8004430 <main+0xa68>)
 8004344:	fb82 1203 	smull	r1, r2, r2, r3
 8004348:	441a      	add	r2, r3
 800434a:	1211      	asrs	r1, r2, #8
 800434c:	17da      	asrs	r2, r3, #31
 800434e:	1a8a      	subs	r2, r1, r2
 8004350:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8004354:	fb01 f202 	mul.w	r2, r1, r2
 8004358:	1a9a      	subs	r2, r3, r2
 800435a:	4613      	mov	r3, r2
 800435c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	  			  TIM1->CCR1 = 0.6*ControlSystem.sineWave[phaseAindex];
 8004360:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8004364:	4a33      	ldr	r2, [pc, #204]	; (8004434 <main+0xa6c>)
 8004366:	4413      	add	r3, r2
 8004368:	7c1b      	ldrb	r3, [r3, #16]
 800436a:	4618      	mov	r0, r3
 800436c:	f7fc f842 	bl	80003f4 <__aeabi_i2d>
 8004370:	a32d      	add	r3, pc, #180	; (adr r3, 8004428 <main+0xa60>)
 8004372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004376:	f7fc f8a7 	bl	80004c8 <__aeabi_dmul>
 800437a:	4602      	mov	r2, r0
 800437c:	460b      	mov	r3, r1
 800437e:	4c2e      	ldr	r4, [pc, #184]	; (8004438 <main+0xa70>)
 8004380:	4610      	mov	r0, r2
 8004382:	4619      	mov	r1, r3
 8004384:	f7fc fb62 	bl	8000a4c <__aeabi_d2uiz>
 8004388:	4603      	mov	r3, r0
 800438a:	6363      	str	r3, [r4, #52]	; 0x34
	  			  TIM1->CCR2 = 0.6*ControlSystem.sineWave[phaseBindex];
 800438c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8004390:	4a28      	ldr	r2, [pc, #160]	; (8004434 <main+0xa6c>)
 8004392:	4413      	add	r3, r2
 8004394:	7c1b      	ldrb	r3, [r3, #16]
 8004396:	4618      	mov	r0, r3
 8004398:	f7fc f82c 	bl	80003f4 <__aeabi_i2d>
 800439c:	a322      	add	r3, pc, #136	; (adr r3, 8004428 <main+0xa60>)
 800439e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a2:	f7fc f891 	bl	80004c8 <__aeabi_dmul>
 80043a6:	4602      	mov	r2, r0
 80043a8:	460b      	mov	r3, r1
 80043aa:	4c23      	ldr	r4, [pc, #140]	; (8004438 <main+0xa70>)
 80043ac:	4610      	mov	r0, r2
 80043ae:	4619      	mov	r1, r3
 80043b0:	f7fc fb4c 	bl	8000a4c <__aeabi_d2uiz>
 80043b4:	4603      	mov	r3, r0
 80043b6:	63a3      	str	r3, [r4, #56]	; 0x38
	  			  TIM1->CCR3 = 0.6*ControlSystem.sineWave[phaseCindex];
 80043b8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80043bc:	4a1d      	ldr	r2, [pc, #116]	; (8004434 <main+0xa6c>)
 80043be:	4413      	add	r3, r2
 80043c0:	7c1b      	ldrb	r3, [r3, #16]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fc f816 	bl	80003f4 <__aeabi_i2d>
 80043c8:	a317      	add	r3, pc, #92	; (adr r3, 8004428 <main+0xa60>)
 80043ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ce:	f7fc f87b 	bl	80004c8 <__aeabi_dmul>
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	4c18      	ldr	r4, [pc, #96]	; (8004438 <main+0xa70>)
 80043d8:	4610      	mov	r0, r2
 80043da:	4619      	mov	r1, r3
 80043dc:	f7fc fb36 	bl	8000a4c <__aeabi_d2uiz>
 80043e0:	4603      	mov	r3, r0
 80043e2:	63e3      	str	r3, [r4, #60]	; 0x3c

	  			  currentEncoderAngle = (AS5048A.readAngleSequential() + (360 + encoderAngleOffset))%360 - 180;
 80043e4:	4815      	ldr	r0, [pc, #84]	; (800443c <main+0xa74>)
 80043e6:	f7fc fb99 	bl	8000b1c <_ZN13AS5048A_Class19readAngleSequentialEv>
 80043ea:	4603      	mov	r3, r0
 80043ec:	461a      	mov	r2, r3
 80043ee:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80043f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80043f6:	4413      	add	r3, r2
 80043f8:	4a0d      	ldr	r2, [pc, #52]	; (8004430 <main+0xa68>)
 80043fa:	fb82 1203 	smull	r1, r2, r2, r3
 80043fe:	441a      	add	r2, r3
 8004400:	1211      	asrs	r1, r2, #8
 8004402:	17da      	asrs	r2, r3, #31
 8004404:	1a8a      	subs	r2, r1, r2
 8004406:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800440a:	fb01 f202 	mul.w	r2, r1, r2
 800440e:	1a9a      	subs	r2, r3, r2
 8004410:	b293      	uxth	r3, r2
 8004412:	3bb4      	subs	r3, #180	; 0xb4
 8004414:	b29b      	uxth	r3, r3
 8004416:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
	  		//	  HAL_UART_Transmit(&huart3, &phaseAindex, 1, 10);
	  		//	  UART_Send_16bit(&huart3, currentEncoderAngle);
	  			  HAL_Delay(2);
 800441a:	2002      	movs	r0, #2
 800441c:	f000 fffc 	bl	8005418 <HAL_Delay>
	  		  while (currentEncoderAngle < -2){
 8004420:	e761      	b.n	80042e6 <main+0x91e>
 8004422:	bf00      	nop
 8004424:	f3af 8000 	nop.w
 8004428:	33333333 	.word	0x33333333
 800442c:	3fe33333 	.word	0x3fe33333
 8004430:	b60b60b7 	.word	0xb60b60b7
 8004434:	200000a8 	.word	0x200000a8
 8004438:	40012c00 	.word	0x40012c00
 800443c:	2000008c 	.word	0x2000008c
	  		  }
	  		  // Spin handle CCW if mug is more than 2 degrees CCW in relation to handle:
	  		  while (currentEncoderAngle > 2){
 8004440:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 8004444:	2b02      	cmp	r3, #2
 8004446:	f340 8098 	ble.w	800457a <main+0xbb2>
	  			phaseAindex = (phaseAindex+N_SINE_IDX-1)%N_SINE_IDX;
 800444a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800444e:	f203 1367 	addw	r3, r3, #359	; 0x167
 8004452:	4a73      	ldr	r2, [pc, #460]	; (8004620 <main+0xc58>)
 8004454:	fb82 1203 	smull	r1, r2, r2, r3
 8004458:	441a      	add	r2, r3
 800445a:	1211      	asrs	r1, r2, #8
 800445c:	17da      	asrs	r2, r3, #31
 800445e:	1a8a      	subs	r2, r1, r2
 8004460:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8004464:	fb01 f202 	mul.w	r2, r1, r2
 8004468:	1a9a      	subs	r2, r3, r2
 800446a:	4613      	mov	r3, r2
 800446c:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	  			phaseBindex = (phaseAindex + 120) % N_SINE_IDX;
 8004470:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8004474:	3378      	adds	r3, #120	; 0x78
 8004476:	4a6a      	ldr	r2, [pc, #424]	; (8004620 <main+0xc58>)
 8004478:	fb82 1203 	smull	r1, r2, r2, r3
 800447c:	441a      	add	r2, r3
 800447e:	1211      	asrs	r1, r2, #8
 8004480:	17da      	asrs	r2, r3, #31
 8004482:	1a8a      	subs	r2, r1, r2
 8004484:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8004488:	fb01 f202 	mul.w	r2, r1, r2
 800448c:	1a9a      	subs	r2, r3, r2
 800448e:	4613      	mov	r3, r2
 8004490:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
	  			phaseCindex = (phaseAindex + 240) % N_SINE_IDX;
 8004494:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8004498:	33f0      	adds	r3, #240	; 0xf0
 800449a:	4a61      	ldr	r2, [pc, #388]	; (8004620 <main+0xc58>)
 800449c:	fb82 1203 	smull	r1, r2, r2, r3
 80044a0:	441a      	add	r2, r3
 80044a2:	1211      	asrs	r1, r2, #8
 80044a4:	17da      	asrs	r2, r3, #31
 80044a6:	1a8a      	subs	r2, r1, r2
 80044a8:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80044ac:	fb01 f202 	mul.w	r2, r1, r2
 80044b0:	1a9a      	subs	r2, r3, r2
 80044b2:	4613      	mov	r3, r2
 80044b4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	  			  TIM1->CCR1 = 0.6*ControlSystem.sineWave[phaseAindex];
 80044b8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80044bc:	4a59      	ldr	r2, [pc, #356]	; (8004624 <main+0xc5c>)
 80044be:	4413      	add	r3, r2
 80044c0:	7c1b      	ldrb	r3, [r3, #16]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fb ff96 	bl	80003f4 <__aeabi_i2d>
 80044c8:	a351      	add	r3, pc, #324	; (adr r3, 8004610 <main+0xc48>)
 80044ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ce:	f7fb fffb 	bl	80004c8 <__aeabi_dmul>
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	4c54      	ldr	r4, [pc, #336]	; (8004628 <main+0xc60>)
 80044d8:	4610      	mov	r0, r2
 80044da:	4619      	mov	r1, r3
 80044dc:	f7fc fab6 	bl	8000a4c <__aeabi_d2uiz>
 80044e0:	4603      	mov	r3, r0
 80044e2:	6363      	str	r3, [r4, #52]	; 0x34
	  			  TIM1->CCR2 = 0.6*ControlSystem.sineWave[phaseBindex];
 80044e4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80044e8:	4a4e      	ldr	r2, [pc, #312]	; (8004624 <main+0xc5c>)
 80044ea:	4413      	add	r3, r2
 80044ec:	7c1b      	ldrb	r3, [r3, #16]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fb ff80 	bl	80003f4 <__aeabi_i2d>
 80044f4:	a346      	add	r3, pc, #280	; (adr r3, 8004610 <main+0xc48>)
 80044f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fa:	f7fb ffe5 	bl	80004c8 <__aeabi_dmul>
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	4c49      	ldr	r4, [pc, #292]	; (8004628 <main+0xc60>)
 8004504:	4610      	mov	r0, r2
 8004506:	4619      	mov	r1, r3
 8004508:	f7fc faa0 	bl	8000a4c <__aeabi_d2uiz>
 800450c:	4603      	mov	r3, r0
 800450e:	63a3      	str	r3, [r4, #56]	; 0x38
	  			  TIM1->CCR3 = 0.6*ControlSystem.sineWave[phaseCindex];
 8004510:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8004514:	4a43      	ldr	r2, [pc, #268]	; (8004624 <main+0xc5c>)
 8004516:	4413      	add	r3, r2
 8004518:	7c1b      	ldrb	r3, [r3, #16]
 800451a:	4618      	mov	r0, r3
 800451c:	f7fb ff6a 	bl	80003f4 <__aeabi_i2d>
 8004520:	a33b      	add	r3, pc, #236	; (adr r3, 8004610 <main+0xc48>)
 8004522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004526:	f7fb ffcf 	bl	80004c8 <__aeabi_dmul>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4c3e      	ldr	r4, [pc, #248]	; (8004628 <main+0xc60>)
 8004530:	4610      	mov	r0, r2
 8004532:	4619      	mov	r1, r3
 8004534:	f7fc fa8a 	bl	8000a4c <__aeabi_d2uiz>
 8004538:	4603      	mov	r3, r0
 800453a:	63e3      	str	r3, [r4, #60]	; 0x3c

	  			  currentEncoderAngle = (AS5048A.readAngleSequential() + (360 + encoderAngleOffset))%360 - 180;
 800453c:	483b      	ldr	r0, [pc, #236]	; (800462c <main+0xc64>)
 800453e:	f7fc faed 	bl	8000b1c <_ZN13AS5048A_Class19readAngleSequentialEv>
 8004542:	4603      	mov	r3, r0
 8004544:	461a      	mov	r2, r3
 8004546:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800454a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800454e:	4413      	add	r3, r2
 8004550:	4a33      	ldr	r2, [pc, #204]	; (8004620 <main+0xc58>)
 8004552:	fb82 1203 	smull	r1, r2, r2, r3
 8004556:	441a      	add	r2, r3
 8004558:	1211      	asrs	r1, r2, #8
 800455a:	17da      	asrs	r2, r3, #31
 800455c:	1a8a      	subs	r2, r1, r2
 800455e:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8004562:	fb01 f202 	mul.w	r2, r1, r2
 8004566:	1a9a      	subs	r2, r3, r2
 8004568:	b293      	uxth	r3, r2
 800456a:	3bb4      	subs	r3, #180	; 0xb4
 800456c:	b29b      	uxth	r3, r3
 800456e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
	  		//	  HAL_UART_Transmit(&huart3, &phaseAindex, 1, 10);
	  		//	  UART_Send_16bit(&huart3, currentEncoderAngle);
	  			  HAL_Delay(2);
 8004572:	2002      	movs	r0, #2
 8004574:	f000 ff50 	bl	8005418 <HAL_Delay>
	  		  while (currentEncoderAngle > 2){
 8004578:	e762      	b.n	8004440 <main+0xa78>
	  		  }
	  		  scalar = 0.2;
 800457a:	a327      	add	r3, pc, #156	; (adr r3, 8004618 <main+0xc50>)
 800457c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004580:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			  TIM1->CCR1 = scalar*ControlSystem.sineWave[phaseAindex];
 8004584:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8004588:	4a26      	ldr	r2, [pc, #152]	; (8004624 <main+0xc5c>)
 800458a:	4413      	add	r3, r2
 800458c:	7c1b      	ldrb	r3, [r3, #16]
 800458e:	4618      	mov	r0, r3
 8004590:	f7fb ff30 	bl	80003f4 <__aeabi_i2d>
 8004594:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004598:	f7fb ff96 	bl	80004c8 <__aeabi_dmul>
 800459c:	4602      	mov	r2, r0
 800459e:	460b      	mov	r3, r1
 80045a0:	4c21      	ldr	r4, [pc, #132]	; (8004628 <main+0xc60>)
 80045a2:	4610      	mov	r0, r2
 80045a4:	4619      	mov	r1, r3
 80045a6:	f7fc fa51 	bl	8000a4c <__aeabi_d2uiz>
 80045aa:	4603      	mov	r3, r0
 80045ac:	6363      	str	r3, [r4, #52]	; 0x34
			  TIM1->CCR2 = scalar*ControlSystem.sineWave[phaseBindex];
 80045ae:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80045b2:	4a1c      	ldr	r2, [pc, #112]	; (8004624 <main+0xc5c>)
 80045b4:	4413      	add	r3, r2
 80045b6:	7c1b      	ldrb	r3, [r3, #16]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7fb ff1b 	bl	80003f4 <__aeabi_i2d>
 80045be:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045c2:	f7fb ff81 	bl	80004c8 <__aeabi_dmul>
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	4c17      	ldr	r4, [pc, #92]	; (8004628 <main+0xc60>)
 80045cc:	4610      	mov	r0, r2
 80045ce:	4619      	mov	r1, r3
 80045d0:	f7fc fa3c 	bl	8000a4c <__aeabi_d2uiz>
 80045d4:	4603      	mov	r3, r0
 80045d6:	63a3      	str	r3, [r4, #56]	; 0x38
			  TIM1->CCR3 = scalar*ControlSystem.sineWave[phaseCindex];
 80045d8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80045dc:	4a11      	ldr	r2, [pc, #68]	; (8004624 <main+0xc5c>)
 80045de:	4413      	add	r3, r2
 80045e0:	7c1b      	ldrb	r3, [r3, #16]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fb ff06 	bl	80003f4 <__aeabi_i2d>
 80045e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045ec:	f7fb ff6c 	bl	80004c8 <__aeabi_dmul>
 80045f0:	4602      	mov	r2, r0
 80045f2:	460b      	mov	r3, r1
 80045f4:	4c0c      	ldr	r4, [pc, #48]	; (8004628 <main+0xc60>)
 80045f6:	4610      	mov	r0, r2
 80045f8:	4619      	mov	r1, r3
 80045fa:	f7fc fa27 	bl	8000a4c <__aeabi_d2uiz>
 80045fe:	4603      	mov	r3, r0
 8004600:	63e3      	str	r3, [r4, #60]	; 0x3c
//			  UART_Send_16bit(&huart3, (int16_t)x_theta);
//			  UART_Send_16bit(&huart3, (int16_t)delta_x_theta);
			  ControlSystem.resetPID();
 8004602:	4808      	ldr	r0, [pc, #32]	; (8004624 <main+0xc5c>)
 8004604:	f7fc ff4e 	bl	80014a4 <_ZN12ControlClass8resetPIDEv>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8004608:	e4c7      	b.n	8003f9a <main+0x5d2>
 800460a:	bf00      	nop
 800460c:	f3af 8000 	nop.w
 8004610:	33333333 	.word	0x33333333
 8004614:	3fe33333 	.word	0x3fe33333
 8004618:	9999999a 	.word	0x9999999a
 800461c:	3fc99999 	.word	0x3fc99999
 8004620:	b60b60b7 	.word	0xb60b60b7
 8004624:	200000a8 	.word	0x200000a8
 8004628:	40012c00 	.word	0x40012c00
 800462c:	2000008c 	.word	0x2000008c

08004630 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b094      	sub	sp, #80	; 0x50
 8004634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004636:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800463a:	2228      	movs	r2, #40	; 0x28
 800463c:	2100      	movs	r1, #0
 800463e:	4618      	mov	r0, r3
 8004640:	f004 fa28 	bl	8008a94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004644:	f107 0314 	add.w	r3, r7, #20
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	605a      	str	r2, [r3, #4]
 800464e:	609a      	str	r2, [r3, #8]
 8004650:	60da      	str	r2, [r3, #12]
 8004652:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004654:	1d3b      	adds	r3, r7, #4
 8004656:	2200      	movs	r2, #0
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	605a      	str	r2, [r3, #4]
 800465c:	609a      	str	r2, [r3, #8]
 800465e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004660:	2301      	movs	r3, #1
 8004662:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004664:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004668:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800466a:	2300      	movs	r3, #0
 800466c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800466e:	2301      	movs	r3, #1
 8004670:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004672:	2302      	movs	r3, #2
 8004674:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004676:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800467a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 800467c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004680:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004682:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004686:	4618      	mov	r0, r3
 8004688:	f001 fb94 	bl	8005db4 <HAL_RCC_OscConfig>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	bf14      	ite	ne
 8004692:	2301      	movne	r3, #1
 8004694:	2300      	moveq	r3, #0
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	d001      	beq.n	80046a0 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 800469c:	f000 fb94 	bl	8004dc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80046a0:	230f      	movs	r3, #15
 80046a2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80046a4:	2302      	movs	r3, #2
 80046a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80046a8:	2300      	movs	r3, #0
 80046aa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80046ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046b0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80046b2:	2300      	movs	r3, #0
 80046b4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80046b6:	f107 0314 	add.w	r3, r7, #20
 80046ba:	2101      	movs	r1, #1
 80046bc:	4618      	mov	r0, r3
 80046be:	f001 fdfb 	bl	80062b8 <HAL_RCC_ClockConfig>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	bf14      	ite	ne
 80046c8:	2301      	movne	r3, #1
 80046ca:	2300      	moveq	r3, #0
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 80046d2:	f000 fb79 	bl	8004dc8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80046d6:	2302      	movs	r3, #2
 80046d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80046da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046de:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80046e0:	1d3b      	adds	r3, r7, #4
 80046e2:	4618      	mov	r0, r3
 80046e4:	f001 ff82 	bl	80065ec <HAL_RCCEx_PeriphCLKConfig>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	bf14      	ite	ne
 80046ee:	2301      	movne	r3, #1
 80046f0:	2300      	moveq	r3, #0
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <_Z18SystemClock_Configv+0xcc>
  {
    Error_Handler();
 80046f8:	f000 fb66 	bl	8004dc8 <Error_Handler>
  }
}
 80046fc:	bf00      	nop
 80046fe:	3750      	adds	r7, #80	; 0x50
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800470a:	1d3b      	adds	r3, r7, #4
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	605a      	str	r2, [r3, #4]
 8004712:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8004714:	4b1d      	ldr	r3, [pc, #116]	; (800478c <_ZL12MX_ADC1_Initv+0x88>)
 8004716:	4a1e      	ldr	r2, [pc, #120]	; (8004790 <_ZL12MX_ADC1_Initv+0x8c>)
 8004718:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800471a:	4b1c      	ldr	r3, [pc, #112]	; (800478c <_ZL12MX_ADC1_Initv+0x88>)
 800471c:	2200      	movs	r2, #0
 800471e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004720:	4b1a      	ldr	r3, [pc, #104]	; (800478c <_ZL12MX_ADC1_Initv+0x88>)
 8004722:	2200      	movs	r2, #0
 8004724:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004726:	4b19      	ldr	r3, [pc, #100]	; (800478c <_ZL12MX_ADC1_Initv+0x88>)
 8004728:	2200      	movs	r2, #0
 800472a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800472c:	4b17      	ldr	r3, [pc, #92]	; (800478c <_ZL12MX_ADC1_Initv+0x88>)
 800472e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8004732:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004734:	4b15      	ldr	r3, [pc, #84]	; (800478c <_ZL12MX_ADC1_Initv+0x88>)
 8004736:	2200      	movs	r2, #0
 8004738:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800473a:	4b14      	ldr	r3, [pc, #80]	; (800478c <_ZL12MX_ADC1_Initv+0x88>)
 800473c:	2201      	movs	r2, #1
 800473e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004740:	4812      	ldr	r0, [pc, #72]	; (800478c <_ZL12MX_ADC1_Initv+0x88>)
 8004742:	f000 fe8d 	bl	8005460 <HAL_ADC_Init>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	bf14      	ite	ne
 800474c:	2301      	movne	r3, #1
 800474e:	2300      	moveq	r3, #0
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <_ZL12MX_ADC1_Initv+0x56>
  {
    Error_Handler();
 8004756:	f000 fb37 	bl	8004dc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800475a:	2301      	movs	r3, #1
 800475c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800475e:	2301      	movs	r3, #1
 8004760:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004762:	2300      	movs	r3, #0
 8004764:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004766:	1d3b      	adds	r3, r7, #4
 8004768:	4619      	mov	r1, r3
 800476a:	4808      	ldr	r0, [pc, #32]	; (800478c <_ZL12MX_ADC1_Initv+0x88>)
 800476c:	f000 ff50 	bl	8005610 <HAL_ADC_ConfigChannel>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	bf14      	ite	ne
 8004776:	2301      	movne	r3, #1
 8004778:	2300      	moveq	r3, #0
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <_ZL12MX_ADC1_Initv+0x80>
  {
    Error_Handler();
 8004780:	f000 fb22 	bl	8004dc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004784:	bf00      	nop
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	20000318 	.word	0x20000318
 8004790:	40012400 	.word	0x40012400

08004794 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800479a:	1d3b      	adds	r3, r7, #4
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	605a      	str	r2, [r3, #4]
 80047a2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80047a4:	4b32      	ldr	r3, [pc, #200]	; (8004870 <_ZL12MX_ADC2_Initv+0xdc>)
 80047a6:	4a33      	ldr	r2, [pc, #204]	; (8004874 <_ZL12MX_ADC2_Initv+0xe0>)
 80047a8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80047aa:	4b31      	ldr	r3, [pc, #196]	; (8004870 <_ZL12MX_ADC2_Initv+0xdc>)
 80047ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047b0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80047b2:	4b2f      	ldr	r3, [pc, #188]	; (8004870 <_ZL12MX_ADC2_Initv+0xdc>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = ENABLE;
 80047b8:	4b2d      	ldr	r3, [pc, #180]	; (8004870 <_ZL12MX_ADC2_Initv+0xdc>)
 80047ba:	2201      	movs	r2, #1
 80047bc:	751a      	strb	r2, [r3, #20]
  hadc2.Init.NbrOfDiscConversion = 3;
 80047be:	4b2c      	ldr	r3, [pc, #176]	; (8004870 <_ZL12MX_ADC2_Initv+0xdc>)
 80047c0:	2203      	movs	r2, #3
 80047c2:	619a      	str	r2, [r3, #24]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80047c4:	4b2a      	ldr	r3, [pc, #168]	; (8004870 <_ZL12MX_ADC2_Initv+0xdc>)
 80047c6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80047ca:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80047cc:	4b28      	ldr	r3, [pc, #160]	; (8004870 <_ZL12MX_ADC2_Initv+0xdc>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 3;
 80047d2:	4b27      	ldr	r3, [pc, #156]	; (8004870 <_ZL12MX_ADC2_Initv+0xdc>)
 80047d4:	2203      	movs	r2, #3
 80047d6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80047d8:	4825      	ldr	r0, [pc, #148]	; (8004870 <_ZL12MX_ADC2_Initv+0xdc>)
 80047da:	f000 fe41 	bl	8005460 <HAL_ADC_Init>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	bf14      	ite	ne
 80047e4:	2301      	movne	r3, #1
 80047e6:	2300      	moveq	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <_ZL12MX_ADC2_Initv+0x5e>
  {
    Error_Handler();
 80047ee:	f000 faeb 	bl	8004dc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80047f2:	2304      	movs	r3, #4
 80047f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80047f6:	2301      	movs	r3, #1
 80047f8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80047fa:	2300      	movs	r3, #0
 80047fc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80047fe:	1d3b      	adds	r3, r7, #4
 8004800:	4619      	mov	r1, r3
 8004802:	481b      	ldr	r0, [pc, #108]	; (8004870 <_ZL12MX_ADC2_Initv+0xdc>)
 8004804:	f000 ff04 	bl	8005610 <HAL_ADC_ConfigChannel>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	bf14      	ite	ne
 800480e:	2301      	movne	r3, #1
 8004810:	2300      	moveq	r3, #0
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <_ZL12MX_ADC2_Initv+0x88>
  {
    Error_Handler();
 8004818:	f000 fad6 	bl	8004dc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800481c:	2305      	movs	r3, #5
 800481e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004820:	2302      	movs	r3, #2
 8004822:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004824:	1d3b      	adds	r3, r7, #4
 8004826:	4619      	mov	r1, r3
 8004828:	4811      	ldr	r0, [pc, #68]	; (8004870 <_ZL12MX_ADC2_Initv+0xdc>)
 800482a:	f000 fef1 	bl	8005610 <HAL_ADC_ConfigChannel>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	bf14      	ite	ne
 8004834:	2301      	movne	r3, #1
 8004836:	2300      	moveq	r3, #0
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <_ZL12MX_ADC2_Initv+0xae>
  {
    Error_Handler();
 800483e:	f000 fac3 	bl	8004dc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004842:	2306      	movs	r3, #6
 8004844:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004846:	2303      	movs	r3, #3
 8004848:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800484a:	1d3b      	adds	r3, r7, #4
 800484c:	4619      	mov	r1, r3
 800484e:	4808      	ldr	r0, [pc, #32]	; (8004870 <_ZL12MX_ADC2_Initv+0xdc>)
 8004850:	f000 fede 	bl	8005610 <HAL_ADC_ConfigChannel>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	bf14      	ite	ne
 800485a:	2301      	movne	r3, #1
 800485c:	2300      	moveq	r3, #0
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <_ZL12MX_ADC2_Initv+0xd4>
  {
    Error_Handler();
 8004864:	f000 fab0 	bl	8004dc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004868:	bf00      	nop
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	20000348 	.word	0x20000348
 8004874:	40012800 	.word	0x40012800

08004878 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800487c:	4b1a      	ldr	r3, [pc, #104]	; (80048e8 <_ZL12MX_SPI1_Initv+0x70>)
 800487e:	4a1b      	ldr	r2, [pc, #108]	; (80048ec <_ZL12MX_SPI1_Initv+0x74>)
 8004880:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004882:	4b19      	ldr	r3, [pc, #100]	; (80048e8 <_ZL12MX_SPI1_Initv+0x70>)
 8004884:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004888:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800488a:	4b17      	ldr	r3, [pc, #92]	; (80048e8 <_ZL12MX_SPI1_Initv+0x70>)
 800488c:	2200      	movs	r2, #0
 800488e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004890:	4b15      	ldr	r3, [pc, #84]	; (80048e8 <_ZL12MX_SPI1_Initv+0x70>)
 8004892:	2200      	movs	r2, #0
 8004894:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004896:	4b14      	ldr	r3, [pc, #80]	; (80048e8 <_ZL12MX_SPI1_Initv+0x70>)
 8004898:	2200      	movs	r2, #0
 800489a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800489c:	4b12      	ldr	r3, [pc, #72]	; (80048e8 <_ZL12MX_SPI1_Initv+0x70>)
 800489e:	2200      	movs	r2, #0
 80048a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80048a2:	4b11      	ldr	r3, [pc, #68]	; (80048e8 <_ZL12MX_SPI1_Initv+0x70>)
 80048a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80048aa:	4b0f      	ldr	r3, [pc, #60]	; (80048e8 <_ZL12MX_SPI1_Initv+0x70>)
 80048ac:	2210      	movs	r2, #16
 80048ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80048b0:	4b0d      	ldr	r3, [pc, #52]	; (80048e8 <_ZL12MX_SPI1_Initv+0x70>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80048b6:	4b0c      	ldr	r3, [pc, #48]	; (80048e8 <_ZL12MX_SPI1_Initv+0x70>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048bc:	4b0a      	ldr	r3, [pc, #40]	; (80048e8 <_ZL12MX_SPI1_Initv+0x70>)
 80048be:	2200      	movs	r2, #0
 80048c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80048c2:	4b09      	ldr	r3, [pc, #36]	; (80048e8 <_ZL12MX_SPI1_Initv+0x70>)
 80048c4:	220a      	movs	r2, #10
 80048c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80048c8:	4807      	ldr	r0, [pc, #28]	; (80048e8 <_ZL12MX_SPI1_Initv+0x70>)
 80048ca:	f001 ff45 	bl	8006758 <HAL_SPI_Init>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	bf14      	ite	ne
 80048d4:	2301      	movne	r3, #1
 80048d6:	2300      	moveq	r3, #0
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 80048de:	f000 fa73 	bl	8004dc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80048e2:	bf00      	nop
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	20000378 	.word	0x20000378
 80048ec:	40013000 	.word	0x40013000

080048f0 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80048f4:	4b1a      	ldr	r3, [pc, #104]	; (8004960 <_ZL12MX_SPI2_Initv+0x70>)
 80048f6:	4a1b      	ldr	r2, [pc, #108]	; (8004964 <_ZL12MX_SPI2_Initv+0x74>)
 80048f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80048fa:	4b19      	ldr	r3, [pc, #100]	; (8004960 <_ZL12MX_SPI2_Initv+0x70>)
 80048fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004900:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004902:	4b17      	ldr	r3, [pc, #92]	; (8004960 <_ZL12MX_SPI2_Initv+0x70>)
 8004904:	2200      	movs	r2, #0
 8004906:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004908:	4b15      	ldr	r3, [pc, #84]	; (8004960 <_ZL12MX_SPI2_Initv+0x70>)
 800490a:	2200      	movs	r2, #0
 800490c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800490e:	4b14      	ldr	r3, [pc, #80]	; (8004960 <_ZL12MX_SPI2_Initv+0x70>)
 8004910:	2200      	movs	r2, #0
 8004912:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004914:	4b12      	ldr	r3, [pc, #72]	; (8004960 <_ZL12MX_SPI2_Initv+0x70>)
 8004916:	2200      	movs	r2, #0
 8004918:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800491a:	4b11      	ldr	r3, [pc, #68]	; (8004960 <_ZL12MX_SPI2_Initv+0x70>)
 800491c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004920:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004922:	4b0f      	ldr	r3, [pc, #60]	; (8004960 <_ZL12MX_SPI2_Initv+0x70>)
 8004924:	2208      	movs	r2, #8
 8004926:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004928:	4b0d      	ldr	r3, [pc, #52]	; (8004960 <_ZL12MX_SPI2_Initv+0x70>)
 800492a:	2200      	movs	r2, #0
 800492c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800492e:	4b0c      	ldr	r3, [pc, #48]	; (8004960 <_ZL12MX_SPI2_Initv+0x70>)
 8004930:	2200      	movs	r2, #0
 8004932:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004934:	4b0a      	ldr	r3, [pc, #40]	; (8004960 <_ZL12MX_SPI2_Initv+0x70>)
 8004936:	2200      	movs	r2, #0
 8004938:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800493a:	4b09      	ldr	r3, [pc, #36]	; (8004960 <_ZL12MX_SPI2_Initv+0x70>)
 800493c:	220a      	movs	r2, #10
 800493e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004940:	4807      	ldr	r0, [pc, #28]	; (8004960 <_ZL12MX_SPI2_Initv+0x70>)
 8004942:	f001 ff09 	bl	8006758 <HAL_SPI_Init>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	bf14      	ite	ne
 800494c:	2301      	movne	r3, #1
 800494e:	2300      	moveq	r3, #0
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 8004956:	f000 fa37 	bl	8004dc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800495a:	bf00      	nop
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	200003d0 	.word	0x200003d0
 8004964:	40003800 	.word	0x40003800

08004968 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b096      	sub	sp, #88	; 0x58
 800496c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800496e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	605a      	str	r2, [r3, #4]
 8004978:	609a      	str	r2, [r3, #8]
 800497a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800497c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004980:	2200      	movs	r2, #0
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800498a:	2200      	movs	r2, #0
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	605a      	str	r2, [r3, #4]
 8004990:	609a      	str	r2, [r3, #8]
 8004992:	60da      	str	r2, [r3, #12]
 8004994:	611a      	str	r2, [r3, #16]
 8004996:	615a      	str	r2, [r3, #20]
 8004998:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800499a:	1d3b      	adds	r3, r7, #4
 800499c:	2220      	movs	r2, #32
 800499e:	2100      	movs	r1, #0
 80049a0:	4618      	mov	r0, r3
 80049a2:	f004 f877 	bl	8008a94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80049a6:	4b5e      	ldr	r3, [pc, #376]	; (8004b20 <_ZL12MX_TIM1_Initv+0x1b8>)
 80049a8:	4a5e      	ldr	r2, [pc, #376]	; (8004b24 <_ZL12MX_TIM1_Initv+0x1bc>)
 80049aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80049ac:	4b5c      	ldr	r3, [pc, #368]	; (8004b20 <_ZL12MX_TIM1_Initv+0x1b8>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049b2:	4b5b      	ldr	r3, [pc, #364]	; (8004b20 <_ZL12MX_TIM1_Initv+0x1b8>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 80049b8:	4b59      	ldr	r3, [pc, #356]	; (8004b20 <_ZL12MX_TIM1_Initv+0x1b8>)
 80049ba:	22ff      	movs	r2, #255	; 0xff
 80049bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049be:	4b58      	ldr	r3, [pc, #352]	; (8004b20 <_ZL12MX_TIM1_Initv+0x1b8>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80049c4:	4b56      	ldr	r3, [pc, #344]	; (8004b20 <_ZL12MX_TIM1_Initv+0x1b8>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80049ca:	4b55      	ldr	r3, [pc, #340]	; (8004b20 <_ZL12MX_TIM1_Initv+0x1b8>)
 80049cc:	2280      	movs	r2, #128	; 0x80
 80049ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80049d0:	4853      	ldr	r0, [pc, #332]	; (8004b20 <_ZL12MX_TIM1_Initv+0x1b8>)
 80049d2:	f002 fc2d 	bl	8007230 <HAL_TIM_Base_Init>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	bf14      	ite	ne
 80049dc:	2301      	movne	r3, #1
 80049de:	2300      	moveq	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <_ZL12MX_TIM1_Initv+0x82>
  {
    Error_Handler();
 80049e6:	f000 f9ef 	bl	8004dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049ee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80049f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80049f4:	4619      	mov	r1, r3
 80049f6:	484a      	ldr	r0, [pc, #296]	; (8004b20 <_ZL12MX_TIM1_Initv+0x1b8>)
 80049f8:	f002 fe6c 	bl	80076d4 <HAL_TIM_ConfigClockSource>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	bf14      	ite	ne
 8004a02:	2301      	movne	r3, #1
 8004a04:	2300      	moveq	r3, #0
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <_ZL12MX_TIM1_Initv+0xa8>
  {
    Error_Handler();
 8004a0c:	f000 f9dc 	bl	8004dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004a10:	4843      	ldr	r0, [pc, #268]	; (8004b20 <_ZL12MX_TIM1_Initv+0x1b8>)
 8004a12:	f002 fca7 	bl	8007364 <HAL_TIM_PWM_Init>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	bf14      	ite	ne
 8004a1c:	2301      	movne	r3, #1
 8004a1e:	2300      	moveq	r3, #0
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <_ZL12MX_TIM1_Initv+0xc2>
  {
    Error_Handler();
 8004a26:	f000 f9cf 	bl	8004dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004a32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004a36:	4619      	mov	r1, r3
 8004a38:	4839      	ldr	r0, [pc, #228]	; (8004b20 <_ZL12MX_TIM1_Initv+0x1b8>)
 8004a3a:	f003 f9b3 	bl	8007da4 <HAL_TIMEx_MasterConfigSynchronization>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	bf14      	ite	ne
 8004a44:	2301      	movne	r3, #1
 8004a46:	2300      	moveq	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <_ZL12MX_TIM1_Initv+0xea>
  {
    Error_Handler();
 8004a4e:	f000 f9bb 	bl	8004dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a52:	2360      	movs	r3, #96	; 0x60
 8004a54:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004a56:	2300      	movs	r3, #0
 8004a58:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a62:	2300      	movs	r3, #0
 8004a64:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004a66:	2300      	movs	r3, #0
 8004a68:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a72:	2200      	movs	r2, #0
 8004a74:	4619      	mov	r1, r3
 8004a76:	482a      	ldr	r0, [pc, #168]	; (8004b20 <_ZL12MX_TIM1_Initv+0x1b8>)
 8004a78:	f002 fd6e 	bl	8007558 <HAL_TIM_PWM_ConfigChannel>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	bf14      	ite	ne
 8004a82:	2301      	movne	r3, #1
 8004a84:	2300      	moveq	r3, #0
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d001      	beq.n	8004a90 <_ZL12MX_TIM1_Initv+0x128>
  {
    Error_Handler();
 8004a8c:	f000 f99c 	bl	8004dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a94:	2204      	movs	r2, #4
 8004a96:	4619      	mov	r1, r3
 8004a98:	4821      	ldr	r0, [pc, #132]	; (8004b20 <_ZL12MX_TIM1_Initv+0x1b8>)
 8004a9a:	f002 fd5d 	bl	8007558 <HAL_TIM_PWM_ConfigChannel>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	bf14      	ite	ne
 8004aa4:	2301      	movne	r3, #1
 8004aa6:	2300      	moveq	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <_ZL12MX_TIM1_Initv+0x14a>
  {
    Error_Handler();
 8004aae:	f000 f98b 	bl	8004dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ab6:	2208      	movs	r2, #8
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4819      	ldr	r0, [pc, #100]	; (8004b20 <_ZL12MX_TIM1_Initv+0x1b8>)
 8004abc:	f002 fd4c 	bl	8007558 <HAL_TIM_PWM_ConfigChannel>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	bf14      	ite	ne
 8004ac6:	2301      	movne	r3, #1
 8004ac8:	2300      	moveq	r3, #0
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <_ZL12MX_TIM1_Initv+0x16c>
  {
    Error_Handler();
 8004ad0:	f000 f97a 	bl	8004dc8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004adc:	2300      	movs	r3, #0
 8004ade:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004ae8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004aec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004aee:	2300      	movs	r3, #0
 8004af0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004af2:	1d3b      	adds	r3, r7, #4
 8004af4:	4619      	mov	r1, r3
 8004af6:	480a      	ldr	r0, [pc, #40]	; (8004b20 <_ZL12MX_TIM1_Initv+0x1b8>)
 8004af8:	f003 f9b2 	bl	8007e60 <HAL_TIMEx_ConfigBreakDeadTime>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	bf14      	ite	ne
 8004b02:	2301      	movne	r3, #1
 8004b04:	2300      	moveq	r3, #0
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d001      	beq.n	8004b10 <_ZL12MX_TIM1_Initv+0x1a8>
  {
    Error_Handler();
 8004b0c:	f000 f95c 	bl	8004dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004b10:	4803      	ldr	r0, [pc, #12]	; (8004b20 <_ZL12MX_TIM1_Initv+0x1b8>)
 8004b12:	f000 fabb 	bl	800508c <HAL_TIM_MspPostInit>

}
 8004b16:	bf00      	nop
 8004b18:	3758      	adds	r7, #88	; 0x58
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	20000428 	.word	0x20000428
 8004b24:	40012c00 	.word	0x40012c00

08004b28 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b2e:	f107 0308 	add.w	r3, r7, #8
 8004b32:	2200      	movs	r2, #0
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	605a      	str	r2, [r3, #4]
 8004b38:	609a      	str	r2, [r3, #8]
 8004b3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b3c:	463b      	mov	r3, r7
 8004b3e:	2200      	movs	r2, #0
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004b44:	4b25      	ldr	r3, [pc, #148]	; (8004bdc <_ZL12MX_TIM2_Initv+0xb4>)
 8004b46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004b4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8004b4c:	4b23      	ldr	r3, [pc, #140]	; (8004bdc <_ZL12MX_TIM2_Initv+0xb4>)
 8004b4e:	222f      	movs	r2, #47	; 0x2f
 8004b50:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b52:	4b22      	ldr	r3, [pc, #136]	; (8004bdc <_ZL12MX_TIM2_Initv+0xb4>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8004b58:	4b20      	ldr	r3, [pc, #128]	; (8004bdc <_ZL12MX_TIM2_Initv+0xb4>)
 8004b5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b5e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b60:	4b1e      	ldr	r3, [pc, #120]	; (8004bdc <_ZL12MX_TIM2_Initv+0xb4>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b66:	4b1d      	ldr	r3, [pc, #116]	; (8004bdc <_ZL12MX_TIM2_Initv+0xb4>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004b6c:	481b      	ldr	r0, [pc, #108]	; (8004bdc <_ZL12MX_TIM2_Initv+0xb4>)
 8004b6e:	f002 fb5f 	bl	8007230 <HAL_TIM_Base_Init>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	bf14      	ite	ne
 8004b78:	2301      	movne	r3, #1
 8004b7a:	2300      	moveq	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8004b82:	f000 f921 	bl	8004dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004b8c:	f107 0308 	add.w	r3, r7, #8
 8004b90:	4619      	mov	r1, r3
 8004b92:	4812      	ldr	r0, [pc, #72]	; (8004bdc <_ZL12MX_TIM2_Initv+0xb4>)
 8004b94:	f002 fd9e 	bl	80076d4 <HAL_TIM_ConfigClockSource>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	bf14      	ite	ne
 8004b9e:	2301      	movne	r3, #1
 8004ba0:	2300      	moveq	r3, #0
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d001      	beq.n	8004bac <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8004ba8:	f000 f90e 	bl	8004dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bac:	2300      	movs	r3, #0
 8004bae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004bb4:	463b      	mov	r3, r7
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	4808      	ldr	r0, [pc, #32]	; (8004bdc <_ZL12MX_TIM2_Initv+0xb4>)
 8004bba:	f003 f8f3 	bl	8007da4 <HAL_TIMEx_MasterConfigSynchronization>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	bf14      	ite	ne
 8004bc4:	2301      	movne	r3, #1
 8004bc6:	2300      	moveq	r3, #0
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8004bce:	f000 f8fb 	bl	8004dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004bd2:	bf00      	nop
 8004bd4:	3718      	adds	r7, #24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	20000470 	.word	0x20000470

08004be0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004be4:	4b13      	ldr	r3, [pc, #76]	; (8004c34 <_ZL19MX_USART2_UART_Initv+0x54>)
 8004be6:	4a14      	ldr	r2, [pc, #80]	; (8004c38 <_ZL19MX_USART2_UART_Initv+0x58>)
 8004be8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8004bea:	4b12      	ldr	r3, [pc, #72]	; (8004c34 <_ZL19MX_USART2_UART_Initv+0x54>)
 8004bec:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8004bf0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004bf2:	4b10      	ldr	r3, [pc, #64]	; (8004c34 <_ZL19MX_USART2_UART_Initv+0x54>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004bf8:	4b0e      	ldr	r3, [pc, #56]	; (8004c34 <_ZL19MX_USART2_UART_Initv+0x54>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004bfe:	4b0d      	ldr	r3, [pc, #52]	; (8004c34 <_ZL19MX_USART2_UART_Initv+0x54>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004c04:	4b0b      	ldr	r3, [pc, #44]	; (8004c34 <_ZL19MX_USART2_UART_Initv+0x54>)
 8004c06:	220c      	movs	r2, #12
 8004c08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c0a:	4b0a      	ldr	r3, [pc, #40]	; (8004c34 <_ZL19MX_USART2_UART_Initv+0x54>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c10:	4b08      	ldr	r3, [pc, #32]	; (8004c34 <_ZL19MX_USART2_UART_Initv+0x54>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004c16:	4807      	ldr	r0, [pc, #28]	; (8004c34 <_ZL19MX_USART2_UART_Initv+0x54>)
 8004c18:	f003 f973 	bl	8007f02 <HAL_UART_Init>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	bf14      	ite	ne
 8004c22:	2301      	movne	r3, #1
 8004c24:	2300      	moveq	r3, #0
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8004c2c:	f000 f8cc 	bl	8004dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004c30:	bf00      	nop
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	200004b8 	.word	0x200004b8
 8004c38:	40004400 	.word	0x40004400

08004c3c <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004c40:	4b13      	ldr	r3, [pc, #76]	; (8004c90 <_ZL19MX_USART3_UART_Initv+0x54>)
 8004c42:	4a14      	ldr	r2, [pc, #80]	; (8004c94 <_ZL19MX_USART3_UART_Initv+0x58>)
 8004c44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8004c46:	4b12      	ldr	r3, [pc, #72]	; (8004c90 <_ZL19MX_USART3_UART_Initv+0x54>)
 8004c48:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8004c4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004c4e:	4b10      	ldr	r3, [pc, #64]	; (8004c90 <_ZL19MX_USART3_UART_Initv+0x54>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004c54:	4b0e      	ldr	r3, [pc, #56]	; (8004c90 <_ZL19MX_USART3_UART_Initv+0x54>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004c5a:	4b0d      	ldr	r3, [pc, #52]	; (8004c90 <_ZL19MX_USART3_UART_Initv+0x54>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004c60:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <_ZL19MX_USART3_UART_Initv+0x54>)
 8004c62:	220c      	movs	r2, #12
 8004c64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c66:	4b0a      	ldr	r3, [pc, #40]	; (8004c90 <_ZL19MX_USART3_UART_Initv+0x54>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c6c:	4b08      	ldr	r3, [pc, #32]	; (8004c90 <_ZL19MX_USART3_UART_Initv+0x54>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004c72:	4807      	ldr	r0, [pc, #28]	; (8004c90 <_ZL19MX_USART3_UART_Initv+0x54>)
 8004c74:	f003 f945 	bl	8007f02 <HAL_UART_Init>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	bf14      	ite	ne
 8004c7e:	2301      	movne	r3, #1
 8004c80:	2300      	moveq	r3, #0
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d001      	beq.n	8004c8c <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8004c88:	f000 f89e 	bl	8004dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004c8c:	bf00      	nop
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	200004fc 	.word	0x200004fc
 8004c94:	40004800 	.word	0x40004800

08004c98 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c9e:	f107 0310 	add.w	r3, r7, #16
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	605a      	str	r2, [r3, #4]
 8004ca8:	609a      	str	r2, [r3, #8]
 8004caa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004cac:	4b35      	ldr	r3, [pc, #212]	; (8004d84 <_ZL12MX_GPIO_Initv+0xec>)
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	4a34      	ldr	r2, [pc, #208]	; (8004d84 <_ZL12MX_GPIO_Initv+0xec>)
 8004cb2:	f043 0320 	orr.w	r3, r3, #32
 8004cb6:	6193      	str	r3, [r2, #24]
 8004cb8:	4b32      	ldr	r3, [pc, #200]	; (8004d84 <_ZL12MX_GPIO_Initv+0xec>)
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	f003 0320 	and.w	r3, r3, #32
 8004cc0:	60fb      	str	r3, [r7, #12]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cc4:	4b2f      	ldr	r3, [pc, #188]	; (8004d84 <_ZL12MX_GPIO_Initv+0xec>)
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	4a2e      	ldr	r2, [pc, #184]	; (8004d84 <_ZL12MX_GPIO_Initv+0xec>)
 8004cca:	f043 0304 	orr.w	r3, r3, #4
 8004cce:	6193      	str	r3, [r2, #24]
 8004cd0:	4b2c      	ldr	r3, [pc, #176]	; (8004d84 <_ZL12MX_GPIO_Initv+0xec>)
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	f003 0304 	and.w	r3, r3, #4
 8004cd8:	60bb      	str	r3, [r7, #8]
 8004cda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cdc:	4b29      	ldr	r3, [pc, #164]	; (8004d84 <_ZL12MX_GPIO_Initv+0xec>)
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	4a28      	ldr	r2, [pc, #160]	; (8004d84 <_ZL12MX_GPIO_Initv+0xec>)
 8004ce2:	f043 0308 	orr.w	r3, r3, #8
 8004ce6:	6193      	str	r3, [r2, #24]
 8004ce8:	4b26      	ldr	r3, [pc, #152]	; (8004d84 <_ZL12MX_GPIO_Initv+0xec>)
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	f003 0308 	and.w	r3, r3, #8
 8004cf0:	607b      	str	r3, [r7, #4]
 8004cf2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MP6543H_EN_A_Pin|MP6543H_nSLEEP_X_Pin|SPI1_CSn_Pin, GPIO_PIN_RESET);
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f648 0180 	movw	r1, #34944	; 0x8880
 8004cfa:	4823      	ldr	r0, [pc, #140]	; (8004d88 <_ZL12MX_GPIO_Initv+0xf0>)
 8004cfc:	f001 f841 	bl	8005d82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MP6543H_EN_B_Pin|MP6543H_EN_C_Pin|SPI2_SCn_Pin, GPIO_PIN_RESET);
 8004d00:	2200      	movs	r2, #0
 8004d02:	f241 0103 	movw	r1, #4099	; 0x1003
 8004d06:	4821      	ldr	r0, [pc, #132]	; (8004d8c <_ZL12MX_GPIO_Initv+0xf4>)
 8004d08:	f001 f83b 	bl	8005d82 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MP6543H_EN_A_Pin MP6543H_nSLEEP_X_Pin SPI1_CSn_Pin */
  GPIO_InitStruct.Pin = MP6543H_EN_A_Pin|MP6543H_nSLEEP_X_Pin|SPI1_CSn_Pin;
 8004d0c:	f648 0380 	movw	r3, #34944	; 0x8880
 8004d10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d12:	2301      	movs	r3, #1
 8004d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d16:	2300      	movs	r3, #0
 8004d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d1e:	f107 0310 	add.w	r3, r7, #16
 8004d22:	4619      	mov	r1, r3
 8004d24:	4818      	ldr	r0, [pc, #96]	; (8004d88 <_ZL12MX_GPIO_Initv+0xf0>)
 8004d26:	f000 fe91 	bl	8005a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : MP6543H_EN_B_Pin MP6543H_EN_C_Pin SPI2_SCn_Pin */
  GPIO_InitStruct.Pin = MP6543H_EN_B_Pin|MP6543H_EN_C_Pin|SPI2_SCn_Pin;
 8004d2a:	f241 0303 	movw	r3, #4099	; 0x1003
 8004d2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d30:	2301      	movs	r3, #1
 8004d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d34:	2300      	movs	r3, #0
 8004d36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d38:	2302      	movs	r3, #2
 8004d3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d3c:	f107 0310 	add.w	r3, r7, #16
 8004d40:	4619      	mov	r1, r3
 8004d42:	4812      	ldr	r0, [pc, #72]	; (8004d8c <_ZL12MX_GPIO_Initv+0xf4>)
 8004d44:	f000 fe82 	bl	8005a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : MP6543H_nFAULT_X_Pin MC3479_INTN1_Pin MC3479_INTN2_Pin */
  GPIO_InitStruct.Pin = MP6543H_nFAULT_X_Pin|MC3479_INTN1_Pin|MC3479_INTN2_Pin;
 8004d48:	23c4      	movs	r3, #196	; 0xc4
 8004d4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d50:	2301      	movs	r3, #1
 8004d52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d54:	f107 0310 	add.w	r3, r7, #16
 8004d58:	4619      	mov	r1, r3
 8004d5a:	480c      	ldr	r0, [pc, #48]	; (8004d8c <_ZL12MX_GPIO_Initv+0xf4>)
 8004d5c:	f000 fe76 	bl	8005a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : nTILT_BUTTON_Pin */
  GPIO_InitStruct.Pin = nTILT_BUTTON_Pin;
 8004d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d66:	2300      	movs	r3, #0
 8004d68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(nTILT_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8004d6e:	f107 0310 	add.w	r3, r7, #16
 8004d72:	4619      	mov	r1, r3
 8004d74:	4804      	ldr	r0, [pc, #16]	; (8004d88 <_ZL12MX_GPIO_Initv+0xf0>)
 8004d76:	f000 fe69 	bl	8005a4c <HAL_GPIO_Init>

}
 8004d7a:	bf00      	nop
 8004d7c:	3720      	adds	r7, #32
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	40021000 	.word	0x40021000
 8004d88:	40010800 	.word	0x40010800
 8004d8c:	40010c00 	.word	0x40010c00

08004d90 <_Z8delay_ust>:
	uint8_t Data[2]= {(uint8_t)(data & 0xFF), (uint8_t)((data >> 8) & 0xFF)};
	return HAL_UART_Transmit(uart, &Data[0], sizeof(Data), 1);
}

void delay_us (uint16_t us)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	4603      	mov	r3, r0
 8004d98:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 8004d9a:	4b0a      	ldr	r3, [pc, #40]	; (8004dc4 <_Z8delay_ust+0x34>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 8004da2:	4b08      	ldr	r3, [pc, #32]	; (8004dc4 <_Z8delay_ust+0x34>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004da8:	88fb      	ldrh	r3, [r7, #6]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	bf34      	ite	cc
 8004dae:	2301      	movcc	r3, #1
 8004db0:	2300      	movcs	r3, #0
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d000      	beq.n	8004dba <_Z8delay_ust+0x2a>
 8004db8:	e7f3      	b.n	8004da2 <_Z8delay_ust+0x12>
	//TODO: add idle/sleep to this if desired.
}
 8004dba:	bf00      	nop
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bc80      	pop	{r7}
 8004dc2:	4770      	bx	lr
 8004dc4:	20000470 	.word	0x20000470

08004dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004dcc:	b672      	cpsid	i
}
 8004dce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004dd0:	e7fe      	b.n	8004dd0 <Error_Handler+0x8>
	...

08004dd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004dda:	4b15      	ldr	r3, [pc, #84]	; (8004e30 <HAL_MspInit+0x5c>)
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	4a14      	ldr	r2, [pc, #80]	; (8004e30 <HAL_MspInit+0x5c>)
 8004de0:	f043 0301 	orr.w	r3, r3, #1
 8004de4:	6193      	str	r3, [r2, #24]
 8004de6:	4b12      	ldr	r3, [pc, #72]	; (8004e30 <HAL_MspInit+0x5c>)
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	60bb      	str	r3, [r7, #8]
 8004df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004df2:	4b0f      	ldr	r3, [pc, #60]	; (8004e30 <HAL_MspInit+0x5c>)
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	4a0e      	ldr	r2, [pc, #56]	; (8004e30 <HAL_MspInit+0x5c>)
 8004df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dfc:	61d3      	str	r3, [r2, #28]
 8004dfe:	4b0c      	ldr	r3, [pc, #48]	; (8004e30 <HAL_MspInit+0x5c>)
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e06:	607b      	str	r3, [r7, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004e0a:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <HAL_MspInit+0x60>)
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	60fb      	str	r3, [r7, #12]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004e16:	60fb      	str	r3, [r7, #12]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	4a04      	ldr	r2, [pc, #16]	; (8004e34 <HAL_MspInit+0x60>)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e26:	bf00      	nop
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bc80      	pop	{r7}
 8004e2e:	4770      	bx	lr
 8004e30:	40021000 	.word	0x40021000
 8004e34:	40010000 	.word	0x40010000

08004e38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b08a      	sub	sp, #40	; 0x28
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e40:	f107 0318 	add.w	r3, r7, #24
 8004e44:	2200      	movs	r2, #0
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	605a      	str	r2, [r3, #4]
 8004e4a:	609a      	str	r2, [r3, #8]
 8004e4c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a28      	ldr	r2, [pc, #160]	; (8004ef4 <HAL_ADC_MspInit+0xbc>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d122      	bne.n	8004e9e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004e58:	4b27      	ldr	r3, [pc, #156]	; (8004ef8 <HAL_ADC_MspInit+0xc0>)
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	4a26      	ldr	r2, [pc, #152]	; (8004ef8 <HAL_ADC_MspInit+0xc0>)
 8004e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e62:	6193      	str	r3, [r2, #24]
 8004e64:	4b24      	ldr	r3, [pc, #144]	; (8004ef8 <HAL_ADC_MspInit+0xc0>)
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e6c:	617b      	str	r3, [r7, #20]
 8004e6e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e70:	4b21      	ldr	r3, [pc, #132]	; (8004ef8 <HAL_ADC_MspInit+0xc0>)
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	4a20      	ldr	r2, [pc, #128]	; (8004ef8 <HAL_ADC_MspInit+0xc0>)
 8004e76:	f043 0304 	orr.w	r3, r3, #4
 8004e7a:	6193      	str	r3, [r2, #24]
 8004e7c:	4b1e      	ldr	r3, [pc, #120]	; (8004ef8 <HAL_ADC_MspInit+0xc0>)
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	613b      	str	r3, [r7, #16]
 8004e86:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ENCODER_PWM_IN_Pin;
 8004e88:	2302      	movs	r3, #2
 8004e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ENCODER_PWM_IN_GPIO_Port, &GPIO_InitStruct);
 8004e90:	f107 0318 	add.w	r3, r7, #24
 8004e94:	4619      	mov	r1, r3
 8004e96:	4819      	ldr	r0, [pc, #100]	; (8004efc <HAL_ADC_MspInit+0xc4>)
 8004e98:	f000 fdd8 	bl	8005a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004e9c:	e026      	b.n	8004eec <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a17      	ldr	r2, [pc, #92]	; (8004f00 <HAL_ADC_MspInit+0xc8>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d121      	bne.n	8004eec <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004ea8:	4b13      	ldr	r3, [pc, #76]	; (8004ef8 <HAL_ADC_MspInit+0xc0>)
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	4a12      	ldr	r2, [pc, #72]	; (8004ef8 <HAL_ADC_MspInit+0xc0>)
 8004eae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004eb2:	6193      	str	r3, [r2, #24]
 8004eb4:	4b10      	ldr	r3, [pc, #64]	; (8004ef8 <HAL_ADC_MspInit+0xc0>)
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ebc:	60fb      	str	r3, [r7, #12]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ec0:	4b0d      	ldr	r3, [pc, #52]	; (8004ef8 <HAL_ADC_MspInit+0xc0>)
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	4a0c      	ldr	r2, [pc, #48]	; (8004ef8 <HAL_ADC_MspInit+0xc0>)
 8004ec6:	f043 0304 	orr.w	r3, r3, #4
 8004eca:	6193      	str	r3, [r2, #24]
 8004ecc:	4b0a      	ldr	r3, [pc, #40]	; (8004ef8 <HAL_ADC_MspInit+0xc0>)
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	60bb      	str	r3, [r7, #8]
 8004ed6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MP6543H_SOA_X_Pin|MP6543H_SOB_X_Pin|MP6543H_SOC_X_Pin;
 8004ed8:	2370      	movs	r3, #112	; 0x70
 8004eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004edc:	2303      	movs	r3, #3
 8004ede:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ee0:	f107 0318 	add.w	r3, r7, #24
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4805      	ldr	r0, [pc, #20]	; (8004efc <HAL_ADC_MspInit+0xc4>)
 8004ee8:	f000 fdb0 	bl	8005a4c <HAL_GPIO_Init>
}
 8004eec:	bf00      	nop
 8004eee:	3728      	adds	r7, #40	; 0x28
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	40012400 	.word	0x40012400
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	40010800 	.word	0x40010800
 8004f00:	40012800 	.word	0x40012800

08004f04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b08c      	sub	sp, #48	; 0x30
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f0c:	f107 031c 	add.w	r3, r7, #28
 8004f10:	2200      	movs	r2, #0
 8004f12:	601a      	str	r2, [r3, #0]
 8004f14:	605a      	str	r2, [r3, #4]
 8004f16:	609a      	str	r2, [r3, #8]
 8004f18:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a3e      	ldr	r2, [pc, #248]	; (8005018 <HAL_SPI_MspInit+0x114>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d13e      	bne.n	8004fa2 <HAL_SPI_MspInit+0x9e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004f24:	4b3d      	ldr	r3, [pc, #244]	; (800501c <HAL_SPI_MspInit+0x118>)
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	4a3c      	ldr	r2, [pc, #240]	; (800501c <HAL_SPI_MspInit+0x118>)
 8004f2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f2e:	6193      	str	r3, [r2, #24]
 8004f30:	4b3a      	ldr	r3, [pc, #232]	; (800501c <HAL_SPI_MspInit+0x118>)
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f38:	61bb      	str	r3, [r7, #24]
 8004f3a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f3c:	4b37      	ldr	r3, [pc, #220]	; (800501c <HAL_SPI_MspInit+0x118>)
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	4a36      	ldr	r2, [pc, #216]	; (800501c <HAL_SPI_MspInit+0x118>)
 8004f42:	f043 0308 	orr.w	r3, r3, #8
 8004f46:	6193      	str	r3, [r2, #24]
 8004f48:	4b34      	ldr	r3, [pc, #208]	; (800501c <HAL_SPI_MspInit+0x118>)
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	f003 0308 	and.w	r3, r3, #8
 8004f50:	617b      	str	r3, [r7, #20]
 8004f52:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8004f54:	2328      	movs	r3, #40	; 0x28
 8004f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f58:	2302      	movs	r3, #2
 8004f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f60:	f107 031c 	add.w	r3, r7, #28
 8004f64:	4619      	mov	r1, r3
 8004f66:	482e      	ldr	r0, [pc, #184]	; (8005020 <HAL_SPI_MspInit+0x11c>)
 8004f68:	f000 fd70 	bl	8005a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004f6c:	2310      	movs	r3, #16
 8004f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f70:	2300      	movs	r3, #0
 8004f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f74:	2301      	movs	r3, #1
 8004f76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f78:	f107 031c 	add.w	r3, r7, #28
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4828      	ldr	r0, [pc, #160]	; (8005020 <HAL_SPI_MspInit+0x11c>)
 8004f80:	f000 fd64 	bl	8005a4c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8004f84:	4b27      	ldr	r3, [pc, #156]	; (8005024 <HAL_SPI_MspInit+0x120>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004f90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f94:	f043 0301 	orr.w	r3, r3, #1
 8004f98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f9a:	4a22      	ldr	r2, [pc, #136]	; (8005024 <HAL_SPI_MspInit+0x120>)
 8004f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004fa0:	e036      	b.n	8005010 <HAL_SPI_MspInit+0x10c>
  else if(hspi->Instance==SPI2)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a20      	ldr	r2, [pc, #128]	; (8005028 <HAL_SPI_MspInit+0x124>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d131      	bne.n	8005010 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004fac:	4b1b      	ldr	r3, [pc, #108]	; (800501c <HAL_SPI_MspInit+0x118>)
 8004fae:	69db      	ldr	r3, [r3, #28]
 8004fb0:	4a1a      	ldr	r2, [pc, #104]	; (800501c <HAL_SPI_MspInit+0x118>)
 8004fb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fb6:	61d3      	str	r3, [r2, #28]
 8004fb8:	4b18      	ldr	r3, [pc, #96]	; (800501c <HAL_SPI_MspInit+0x118>)
 8004fba:	69db      	ldr	r3, [r3, #28]
 8004fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fc0:	613b      	str	r3, [r7, #16]
 8004fc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fc4:	4b15      	ldr	r3, [pc, #84]	; (800501c <HAL_SPI_MspInit+0x118>)
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	4a14      	ldr	r2, [pc, #80]	; (800501c <HAL_SPI_MspInit+0x118>)
 8004fca:	f043 0308 	orr.w	r3, r3, #8
 8004fce:	6193      	str	r3, [r2, #24]
 8004fd0:	4b12      	ldr	r3, [pc, #72]	; (800501c <HAL_SPI_MspInit+0x118>)
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	f003 0308 	and.w	r3, r3, #8
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004fdc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fea:	f107 031c 	add.w	r3, r7, #28
 8004fee:	4619      	mov	r1, r3
 8004ff0:	480b      	ldr	r0, [pc, #44]	; (8005020 <HAL_SPI_MspInit+0x11c>)
 8004ff2:	f000 fd2b 	bl	8005a4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004ff6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005000:	2300      	movs	r3, #0
 8005002:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005004:	f107 031c 	add.w	r3, r7, #28
 8005008:	4619      	mov	r1, r3
 800500a:	4805      	ldr	r0, [pc, #20]	; (8005020 <HAL_SPI_MspInit+0x11c>)
 800500c:	f000 fd1e 	bl	8005a4c <HAL_GPIO_Init>
}
 8005010:	bf00      	nop
 8005012:	3730      	adds	r7, #48	; 0x30
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	40013000 	.word	0x40013000
 800501c:	40021000 	.word	0x40021000
 8005020:	40010c00 	.word	0x40010c00
 8005024:	40010000 	.word	0x40010000
 8005028:	40003800 	.word	0x40003800

0800502c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a12      	ldr	r2, [pc, #72]	; (8005084 <HAL_TIM_Base_MspInit+0x58>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d10c      	bne.n	8005058 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800503e:	4b12      	ldr	r3, [pc, #72]	; (8005088 <HAL_TIM_Base_MspInit+0x5c>)
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	4a11      	ldr	r2, [pc, #68]	; (8005088 <HAL_TIM_Base_MspInit+0x5c>)
 8005044:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005048:	6193      	str	r3, [r2, #24]
 800504a:	4b0f      	ldr	r3, [pc, #60]	; (8005088 <HAL_TIM_Base_MspInit+0x5c>)
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005056:	e010      	b.n	800507a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005060:	d10b      	bne.n	800507a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005062:	4b09      	ldr	r3, [pc, #36]	; (8005088 <HAL_TIM_Base_MspInit+0x5c>)
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	4a08      	ldr	r2, [pc, #32]	; (8005088 <HAL_TIM_Base_MspInit+0x5c>)
 8005068:	f043 0301 	orr.w	r3, r3, #1
 800506c:	61d3      	str	r3, [r2, #28]
 800506e:	4b06      	ldr	r3, [pc, #24]	; (8005088 <HAL_TIM_Base_MspInit+0x5c>)
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	60bb      	str	r3, [r7, #8]
 8005078:	68bb      	ldr	r3, [r7, #8]
}
 800507a:	bf00      	nop
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	bc80      	pop	{r7}
 8005082:	4770      	bx	lr
 8005084:	40012c00 	.word	0x40012c00
 8005088:	40021000 	.word	0x40021000

0800508c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b088      	sub	sp, #32
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005094:	f107 0310 	add.w	r3, r7, #16
 8005098:	2200      	movs	r2, #0
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	605a      	str	r2, [r3, #4]
 800509e:	609a      	str	r2, [r3, #8]
 80050a0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a10      	ldr	r2, [pc, #64]	; (80050e8 <HAL_TIM_MspPostInit+0x5c>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d118      	bne.n	80050de <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050ac:	4b0f      	ldr	r3, [pc, #60]	; (80050ec <HAL_TIM_MspPostInit+0x60>)
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	4a0e      	ldr	r2, [pc, #56]	; (80050ec <HAL_TIM_MspPostInit+0x60>)
 80050b2:	f043 0304 	orr.w	r3, r3, #4
 80050b6:	6193      	str	r3, [r2, #24]
 80050b8:	4b0c      	ldr	r3, [pc, #48]	; (80050ec <HAL_TIM_MspPostInit+0x60>)
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	f003 0304 	and.w	r3, r3, #4
 80050c0:	60fb      	str	r3, [r7, #12]
 80050c2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = MP6543H_PWM_A_Pin|MP6543H_PWM_B_Pin|MP6543H_PWM_C_Pin;
 80050c4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80050c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ca:	2302      	movs	r3, #2
 80050cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050ce:	2302      	movs	r3, #2
 80050d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050d2:	f107 0310 	add.w	r3, r7, #16
 80050d6:	4619      	mov	r1, r3
 80050d8:	4805      	ldr	r0, [pc, #20]	; (80050f0 <HAL_TIM_MspPostInit+0x64>)
 80050da:	f000 fcb7 	bl	8005a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80050de:	bf00      	nop
 80050e0:	3720      	adds	r7, #32
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	40012c00 	.word	0x40012c00
 80050ec:	40021000 	.word	0x40021000
 80050f0:	40010800 	.word	0x40010800

080050f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b08a      	sub	sp, #40	; 0x28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050fc:	f107 0318 	add.w	r3, r7, #24
 8005100:	2200      	movs	r2, #0
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	605a      	str	r2, [r3, #4]
 8005106:	609a      	str	r2, [r3, #8]
 8005108:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a37      	ldr	r2, [pc, #220]	; (80051ec <HAL_UART_MspInit+0xf8>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d130      	bne.n	8005176 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005114:	4b36      	ldr	r3, [pc, #216]	; (80051f0 <HAL_UART_MspInit+0xfc>)
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	4a35      	ldr	r2, [pc, #212]	; (80051f0 <HAL_UART_MspInit+0xfc>)
 800511a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800511e:	61d3      	str	r3, [r2, #28]
 8005120:	4b33      	ldr	r3, [pc, #204]	; (80051f0 <HAL_UART_MspInit+0xfc>)
 8005122:	69db      	ldr	r3, [r3, #28]
 8005124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005128:	617b      	str	r3, [r7, #20]
 800512a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800512c:	4b30      	ldr	r3, [pc, #192]	; (80051f0 <HAL_UART_MspInit+0xfc>)
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	4a2f      	ldr	r2, [pc, #188]	; (80051f0 <HAL_UART_MspInit+0xfc>)
 8005132:	f043 0304 	orr.w	r3, r3, #4
 8005136:	6193      	str	r3, [r2, #24]
 8005138:	4b2d      	ldr	r3, [pc, #180]	; (80051f0 <HAL_UART_MspInit+0xfc>)
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	f003 0304 	and.w	r3, r3, #4
 8005140:	613b      	str	r3, [r7, #16]
 8005142:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005144:	2304      	movs	r3, #4
 8005146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005148:	2302      	movs	r3, #2
 800514a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800514c:	2303      	movs	r3, #3
 800514e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005150:	f107 0318 	add.w	r3, r7, #24
 8005154:	4619      	mov	r1, r3
 8005156:	4827      	ldr	r0, [pc, #156]	; (80051f4 <HAL_UART_MspInit+0x100>)
 8005158:	f000 fc78 	bl	8005a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800515c:	2308      	movs	r3, #8
 800515e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005160:	2300      	movs	r3, #0
 8005162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005164:	2300      	movs	r3, #0
 8005166:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005168:	f107 0318 	add.w	r3, r7, #24
 800516c:	4619      	mov	r1, r3
 800516e:	4821      	ldr	r0, [pc, #132]	; (80051f4 <HAL_UART_MspInit+0x100>)
 8005170:	f000 fc6c 	bl	8005a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005174:	e036      	b.n	80051e4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a1f      	ldr	r2, [pc, #124]	; (80051f8 <HAL_UART_MspInit+0x104>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d131      	bne.n	80051e4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005180:	4b1b      	ldr	r3, [pc, #108]	; (80051f0 <HAL_UART_MspInit+0xfc>)
 8005182:	69db      	ldr	r3, [r3, #28]
 8005184:	4a1a      	ldr	r2, [pc, #104]	; (80051f0 <HAL_UART_MspInit+0xfc>)
 8005186:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800518a:	61d3      	str	r3, [r2, #28]
 800518c:	4b18      	ldr	r3, [pc, #96]	; (80051f0 <HAL_UART_MspInit+0xfc>)
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005198:	4b15      	ldr	r3, [pc, #84]	; (80051f0 <HAL_UART_MspInit+0xfc>)
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	4a14      	ldr	r2, [pc, #80]	; (80051f0 <HAL_UART_MspInit+0xfc>)
 800519e:	f043 0308 	orr.w	r3, r3, #8
 80051a2:	6193      	str	r3, [r2, #24]
 80051a4:	4b12      	ldr	r3, [pc, #72]	; (80051f0 <HAL_UART_MspInit+0xfc>)
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	f003 0308 	and.w	r3, r3, #8
 80051ac:	60bb      	str	r3, [r7, #8]
 80051ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80051b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051b6:	2302      	movs	r3, #2
 80051b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80051ba:	2303      	movs	r3, #3
 80051bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051be:	f107 0318 	add.w	r3, r7, #24
 80051c2:	4619      	mov	r1, r3
 80051c4:	480d      	ldr	r0, [pc, #52]	; (80051fc <HAL_UART_MspInit+0x108>)
 80051c6:	f000 fc41 	bl	8005a4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80051ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80051ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051d0:	2300      	movs	r3, #0
 80051d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d4:	2300      	movs	r3, #0
 80051d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051d8:	f107 0318 	add.w	r3, r7, #24
 80051dc:	4619      	mov	r1, r3
 80051de:	4807      	ldr	r0, [pc, #28]	; (80051fc <HAL_UART_MspInit+0x108>)
 80051e0:	f000 fc34 	bl	8005a4c <HAL_GPIO_Init>
}
 80051e4:	bf00      	nop
 80051e6:	3728      	adds	r7, #40	; 0x28
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	40004400 	.word	0x40004400
 80051f0:	40021000 	.word	0x40021000
 80051f4:	40010800 	.word	0x40010800
 80051f8:	40004800 	.word	0x40004800
 80051fc:	40010c00 	.word	0x40010c00

08005200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005200:	b480      	push	{r7}
 8005202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005204:	e7fe      	b.n	8005204 <NMI_Handler+0x4>

08005206 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005206:	b480      	push	{r7}
 8005208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800520a:	e7fe      	b.n	800520a <HardFault_Handler+0x4>

0800520c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800520c:	b480      	push	{r7}
 800520e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005210:	e7fe      	b.n	8005210 <MemManage_Handler+0x4>

08005212 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005212:	b480      	push	{r7}
 8005214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005216:	e7fe      	b.n	8005216 <BusFault_Handler+0x4>

08005218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005218:	b480      	push	{r7}
 800521a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800521c:	e7fe      	b.n	800521c <UsageFault_Handler+0x4>

0800521e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800521e:	b480      	push	{r7}
 8005220:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005222:	bf00      	nop
 8005224:	46bd      	mov	sp, r7
 8005226:	bc80      	pop	{r7}
 8005228:	4770      	bx	lr

0800522a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800522a:	b480      	push	{r7}
 800522c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800522e:	bf00      	nop
 8005230:	46bd      	mov	sp, r7
 8005232:	bc80      	pop	{r7}
 8005234:	4770      	bx	lr

08005236 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005236:	b480      	push	{r7}
 8005238:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800523a:	bf00      	nop
 800523c:	46bd      	mov	sp, r7
 800523e:	bc80      	pop	{r7}
 8005240:	4770      	bx	lr

08005242 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005246:	f000 f8cb 	bl	80053e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800524a:	bf00      	nop
 800524c:	bd80      	pop	{r7, pc}

0800524e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800524e:	b480      	push	{r7}
 8005250:	af00      	add	r7, sp, #0
	return 1;
 8005252:	2301      	movs	r3, #1
}
 8005254:	4618      	mov	r0, r3
 8005256:	46bd      	mov	sp, r7
 8005258:	bc80      	pop	{r7}
 800525a:	4770      	bx	lr

0800525c <_kill>:

int _kill(int pid, int sig)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005266:	f003 fbb3 	bl	80089d0 <__errno>
 800526a:	4603      	mov	r3, r0
 800526c:	2216      	movs	r2, #22
 800526e:	601a      	str	r2, [r3, #0]
	return -1;
 8005270:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005274:	4618      	mov	r0, r3
 8005276:	3708      	adds	r7, #8
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <_exit>:

void _exit (int status)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005284:	f04f 31ff 	mov.w	r1, #4294967295
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f7ff ffe7 	bl	800525c <_kill>
	while (1) {}		/* Make sure we hang here */
 800528e:	e7fe      	b.n	800528e <_exit+0x12>

08005290 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005298:	4a14      	ldr	r2, [pc, #80]	; (80052ec <_sbrk+0x5c>)
 800529a:	4b15      	ldr	r3, [pc, #84]	; (80052f0 <_sbrk+0x60>)
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80052a4:	4b13      	ldr	r3, [pc, #76]	; (80052f4 <_sbrk+0x64>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d102      	bne.n	80052b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80052ac:	4b11      	ldr	r3, [pc, #68]	; (80052f4 <_sbrk+0x64>)
 80052ae:	4a12      	ldr	r2, [pc, #72]	; (80052f8 <_sbrk+0x68>)
 80052b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80052b2:	4b10      	ldr	r3, [pc, #64]	; (80052f4 <_sbrk+0x64>)
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4413      	add	r3, r2
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d207      	bcs.n	80052d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80052c0:	f003 fb86 	bl	80089d0 <__errno>
 80052c4:	4603      	mov	r3, r0
 80052c6:	220c      	movs	r2, #12
 80052c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80052ca:	f04f 33ff 	mov.w	r3, #4294967295
 80052ce:	e009      	b.n	80052e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80052d0:	4b08      	ldr	r3, [pc, #32]	; (80052f4 <_sbrk+0x64>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80052d6:	4b07      	ldr	r3, [pc, #28]	; (80052f4 <_sbrk+0x64>)
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4413      	add	r3, r2
 80052de:	4a05      	ldr	r2, [pc, #20]	; (80052f4 <_sbrk+0x64>)
 80052e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80052e2:	68fb      	ldr	r3, [r7, #12]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3718      	adds	r7, #24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	20005000 	.word	0x20005000
 80052f0:	00000400 	.word	0x00000400
 80052f4:	20000540 	.word	0x20000540
 80052f8:	20000598 	.word	0x20000598

080052fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80052fc:	b480      	push	{r7}
 80052fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005300:	bf00      	nop
 8005302:	46bd      	mov	sp, r7
 8005304:	bc80      	pop	{r7}
 8005306:	4770      	bx	lr

08005308 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005308:	480c      	ldr	r0, [pc, #48]	; (800533c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800530a:	490d      	ldr	r1, [pc, #52]	; (8005340 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800530c:	4a0d      	ldr	r2, [pc, #52]	; (8005344 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800530e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005310:	e002      	b.n	8005318 <LoopCopyDataInit>

08005312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005316:	3304      	adds	r3, #4

08005318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800531a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800531c:	d3f9      	bcc.n	8005312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800531e:	4a0a      	ldr	r2, [pc, #40]	; (8005348 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005320:	4c0a      	ldr	r4, [pc, #40]	; (800534c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005324:	e001      	b.n	800532a <LoopFillZerobss>

08005326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005328:	3204      	adds	r2, #4

0800532a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800532a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800532c:	d3fb      	bcc.n	8005326 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800532e:	f7ff ffe5 	bl	80052fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005332:	f003 fb53 	bl	80089dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005336:	f7fe fb47 	bl	80039c8 <main>
  bx lr
 800533a:	4770      	bx	lr
  ldr r0, =_sdata
 800533c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005340:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8005344:	08008f5c 	.word	0x08008f5c
  ldr r2, =_sbss
 8005348:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800534c:	20000598 	.word	0x20000598

08005350 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005350:	e7fe      	b.n	8005350 <ADC1_2_IRQHandler>
	...

08005354 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005358:	4b08      	ldr	r3, [pc, #32]	; (800537c <HAL_Init+0x28>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a07      	ldr	r2, [pc, #28]	; (800537c <HAL_Init+0x28>)
 800535e:	f043 0310 	orr.w	r3, r3, #16
 8005362:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005364:	2003      	movs	r0, #3
 8005366:	f000 fb3d 	bl	80059e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800536a:	200f      	movs	r0, #15
 800536c:	f000 f808 	bl	8005380 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005370:	f7ff fd30 	bl	8004dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	40022000 	.word	0x40022000

08005380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005388:	4b12      	ldr	r3, [pc, #72]	; (80053d4 <HAL_InitTick+0x54>)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	4b12      	ldr	r3, [pc, #72]	; (80053d8 <HAL_InitTick+0x58>)
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	4619      	mov	r1, r3
 8005392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005396:	fbb3 f3f1 	udiv	r3, r3, r1
 800539a:	fbb2 f3f3 	udiv	r3, r2, r3
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 fb47 	bl	8005a32 <HAL_SYSTICK_Config>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e00e      	b.n	80053cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b0f      	cmp	r3, #15
 80053b2:	d80a      	bhi.n	80053ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80053b4:	2200      	movs	r2, #0
 80053b6:	6879      	ldr	r1, [r7, #4]
 80053b8:	f04f 30ff 	mov.w	r0, #4294967295
 80053bc:	f000 fb1d 	bl	80059fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80053c0:	4a06      	ldr	r2, [pc, #24]	; (80053dc <HAL_InitTick+0x5c>)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	e000      	b.n	80053cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	20000000 	.word	0x20000000
 80053d8:	20000008 	.word	0x20000008
 80053dc:	20000004 	.word	0x20000004

080053e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80053e4:	4b05      	ldr	r3, [pc, #20]	; (80053fc <HAL_IncTick+0x1c>)
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	461a      	mov	r2, r3
 80053ea:	4b05      	ldr	r3, [pc, #20]	; (8005400 <HAL_IncTick+0x20>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4413      	add	r3, r2
 80053f0:	4a03      	ldr	r2, [pc, #12]	; (8005400 <HAL_IncTick+0x20>)
 80053f2:	6013      	str	r3, [r2, #0]
}
 80053f4:	bf00      	nop
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bc80      	pop	{r7}
 80053fa:	4770      	bx	lr
 80053fc:	20000008 	.word	0x20000008
 8005400:	20000544 	.word	0x20000544

08005404 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005404:	b480      	push	{r7}
 8005406:	af00      	add	r7, sp, #0
  return uwTick;
 8005408:	4b02      	ldr	r3, [pc, #8]	; (8005414 <HAL_GetTick+0x10>)
 800540a:	681b      	ldr	r3, [r3, #0]
}
 800540c:	4618      	mov	r0, r3
 800540e:	46bd      	mov	sp, r7
 8005410:	bc80      	pop	{r7}
 8005412:	4770      	bx	lr
 8005414:	20000544 	.word	0x20000544

08005418 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005420:	f7ff fff0 	bl	8005404 <HAL_GetTick>
 8005424:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005430:	d005      	beq.n	800543e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005432:	4b0a      	ldr	r3, [pc, #40]	; (800545c <HAL_Delay+0x44>)
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	461a      	mov	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	4413      	add	r3, r2
 800543c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800543e:	bf00      	nop
 8005440:	f7ff ffe0 	bl	8005404 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	429a      	cmp	r2, r3
 800544e:	d8f7      	bhi.n	8005440 <HAL_Delay+0x28>
  {
  }
}
 8005450:	bf00      	nop
 8005452:	bf00      	nop
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	20000008 	.word	0x20000008

08005460 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005468:	2300      	movs	r3, #0
 800546a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800546c:	2300      	movs	r3, #0
 800546e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8005474:	2300      	movs	r3, #0
 8005476:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e0be      	b.n	8005600 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548c:	2b00      	cmp	r3, #0
 800548e:	d109      	bne.n	80054a4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7ff fcca 	bl	8004e38 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 f9ab 	bl	8005800 <ADC_ConversionStop_Disable>
 80054aa:	4603      	mov	r3, r0
 80054ac:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b2:	f003 0310 	and.w	r3, r3, #16
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f040 8099 	bne.w	80055ee <HAL_ADC_Init+0x18e>
 80054bc:	7dfb      	ldrb	r3, [r7, #23]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f040 8095 	bne.w	80055ee <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80054cc:	f023 0302 	bic.w	r3, r3, #2
 80054d0:	f043 0202 	orr.w	r2, r3, #2
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80054e0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	7b1b      	ldrb	r3, [r3, #12]
 80054e6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80054e8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054f8:	d003      	beq.n	8005502 <HAL_ADC_Init+0xa2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d102      	bne.n	8005508 <HAL_ADC_Init+0xa8>
 8005502:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005506:	e000      	b.n	800550a <HAL_ADC_Init+0xaa>
 8005508:	2300      	movs	r3, #0
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	4313      	orrs	r3, r2
 800550e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	7d1b      	ldrb	r3, [r3, #20]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d119      	bne.n	800554c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	7b1b      	ldrb	r3, [r3, #12]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d109      	bne.n	8005534 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	3b01      	subs	r3, #1
 8005526:	035a      	lsls	r2, r3, #13
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	4313      	orrs	r3, r2
 800552c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005530:	613b      	str	r3, [r7, #16]
 8005532:	e00b      	b.n	800554c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005538:	f043 0220 	orr.w	r2, r3, #32
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005544:	f043 0201 	orr.w	r2, r3, #1
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	430a      	orrs	r2, r1
 800555e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689a      	ldr	r2, [r3, #8]
 8005566:	4b28      	ldr	r3, [pc, #160]	; (8005608 <HAL_ADC_Init+0x1a8>)
 8005568:	4013      	ands	r3, r2
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	6812      	ldr	r2, [r2, #0]
 800556e:	68b9      	ldr	r1, [r7, #8]
 8005570:	430b      	orrs	r3, r1
 8005572:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800557c:	d003      	beq.n	8005586 <HAL_ADC_Init+0x126>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d104      	bne.n	8005590 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	3b01      	subs	r3, #1
 800558c:	051b      	lsls	r3, r3, #20
 800558e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005596:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	430a      	orrs	r2, r1
 80055a2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689a      	ldr	r2, [r3, #8]
 80055aa:	4b18      	ldr	r3, [pc, #96]	; (800560c <HAL_ADC_Init+0x1ac>)
 80055ac:	4013      	ands	r3, r2
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d10b      	bne.n	80055cc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055be:	f023 0303 	bic.w	r3, r3, #3
 80055c2:	f043 0201 	orr.w	r2, r3, #1
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80055ca:	e018      	b.n	80055fe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d0:	f023 0312 	bic.w	r3, r3, #18
 80055d4:	f043 0210 	orr.w	r2, r3, #16
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e0:	f043 0201 	orr.w	r2, r3, #1
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80055ec:	e007      	b.n	80055fe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f2:	f043 0210 	orr.w	r2, r3, #16
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80055fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	ffe1f7fd 	.word	0xffe1f7fd
 800560c:	ff1f0efe 	.word	0xff1f0efe

08005610 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800561a:	2300      	movs	r3, #0
 800561c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800561e:	2300      	movs	r3, #0
 8005620:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005628:	2b01      	cmp	r3, #1
 800562a:	d101      	bne.n	8005630 <HAL_ADC_ConfigChannel+0x20>
 800562c:	2302      	movs	r3, #2
 800562e:	e0dc      	b.n	80057ea <HAL_ADC_ConfigChannel+0x1da>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	2b06      	cmp	r3, #6
 800563e:	d81c      	bhi.n	800567a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	4613      	mov	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	3b05      	subs	r3, #5
 8005652:	221f      	movs	r2, #31
 8005654:	fa02 f303 	lsl.w	r3, r2, r3
 8005658:	43db      	mvns	r3, r3
 800565a:	4019      	ands	r1, r3
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	6818      	ldr	r0, [r3, #0]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685a      	ldr	r2, [r3, #4]
 8005664:	4613      	mov	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	3b05      	subs	r3, #5
 800566c:	fa00 f203 	lsl.w	r2, r0, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	430a      	orrs	r2, r1
 8005676:	635a      	str	r2, [r3, #52]	; 0x34
 8005678:	e03c      	b.n	80056f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	2b0c      	cmp	r3, #12
 8005680:	d81c      	bhi.n	80056bc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	4613      	mov	r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	3b23      	subs	r3, #35	; 0x23
 8005694:	221f      	movs	r2, #31
 8005696:	fa02 f303 	lsl.w	r3, r2, r3
 800569a:	43db      	mvns	r3, r3
 800569c:	4019      	ands	r1, r3
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	6818      	ldr	r0, [r3, #0]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	4613      	mov	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4413      	add	r3, r2
 80056ac:	3b23      	subs	r3, #35	; 0x23
 80056ae:	fa00 f203 	lsl.w	r2, r0, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	631a      	str	r2, [r3, #48]	; 0x30
 80056ba:	e01b      	b.n	80056f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	4613      	mov	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	3b41      	subs	r3, #65	; 0x41
 80056ce:	221f      	movs	r2, #31
 80056d0:	fa02 f303 	lsl.w	r3, r2, r3
 80056d4:	43db      	mvns	r3, r3
 80056d6:	4019      	ands	r1, r3
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	6818      	ldr	r0, [r3, #0]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	4613      	mov	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4413      	add	r3, r2
 80056e6:	3b41      	subs	r3, #65	; 0x41
 80056e8:	fa00 f203 	lsl.w	r2, r0, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b09      	cmp	r3, #9
 80056fa:	d91c      	bls.n	8005736 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68d9      	ldr	r1, [r3, #12]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	4613      	mov	r3, r2
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	4413      	add	r3, r2
 800570c:	3b1e      	subs	r3, #30
 800570e:	2207      	movs	r2, #7
 8005710:	fa02 f303 	lsl.w	r3, r2, r3
 8005714:	43db      	mvns	r3, r3
 8005716:	4019      	ands	r1, r3
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	6898      	ldr	r0, [r3, #8]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	4613      	mov	r3, r2
 8005722:	005b      	lsls	r3, r3, #1
 8005724:	4413      	add	r3, r2
 8005726:	3b1e      	subs	r3, #30
 8005728:	fa00 f203 	lsl.w	r2, r0, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	60da      	str	r2, [r3, #12]
 8005734:	e019      	b.n	800576a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	6919      	ldr	r1, [r3, #16]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	4613      	mov	r3, r2
 8005742:	005b      	lsls	r3, r3, #1
 8005744:	4413      	add	r3, r2
 8005746:	2207      	movs	r2, #7
 8005748:	fa02 f303 	lsl.w	r3, r2, r3
 800574c:	43db      	mvns	r3, r3
 800574e:	4019      	ands	r1, r3
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	6898      	ldr	r0, [r3, #8]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	4613      	mov	r3, r2
 800575a:	005b      	lsls	r3, r3, #1
 800575c:	4413      	add	r3, r2
 800575e:	fa00 f203 	lsl.w	r2, r0, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b10      	cmp	r3, #16
 8005770:	d003      	beq.n	800577a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005776:	2b11      	cmp	r3, #17
 8005778:	d132      	bne.n	80057e0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a1d      	ldr	r2, [pc, #116]	; (80057f4 <HAL_ADC_ConfigChannel+0x1e4>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d125      	bne.n	80057d0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d126      	bne.n	80057e0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	689a      	ldr	r2, [r3, #8]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80057a0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2b10      	cmp	r3, #16
 80057a8:	d11a      	bne.n	80057e0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80057aa:	4b13      	ldr	r3, [pc, #76]	; (80057f8 <HAL_ADC_ConfigChannel+0x1e8>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a13      	ldr	r2, [pc, #76]	; (80057fc <HAL_ADC_ConfigChannel+0x1ec>)
 80057b0:	fba2 2303 	umull	r2, r3, r2, r3
 80057b4:	0c9a      	lsrs	r2, r3, #18
 80057b6:	4613      	mov	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4413      	add	r3, r2
 80057bc:	005b      	lsls	r3, r3, #1
 80057be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80057c0:	e002      	b.n	80057c8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	3b01      	subs	r3, #1
 80057c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1f9      	bne.n	80057c2 <HAL_ADC_ConfigChannel+0x1b2>
 80057ce:	e007      	b.n	80057e0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d4:	f043 0220 	orr.w	r2, r3, #32
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bc80      	pop	{r7}
 80057f2:	4770      	bx	lr
 80057f4:	40012400 	.word	0x40012400
 80057f8:	20000000 	.word	0x20000000
 80057fc:	431bde83 	.word	0x431bde83

08005800 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005808:	2300      	movs	r3, #0
 800580a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b01      	cmp	r3, #1
 8005818:	d12e      	bne.n	8005878 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	689a      	ldr	r2, [r3, #8]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 0201 	bic.w	r2, r2, #1
 8005828:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800582a:	f7ff fdeb 	bl	8005404 <HAL_GetTick>
 800582e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005830:	e01b      	b.n	800586a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005832:	f7ff fde7 	bl	8005404 <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	2b02      	cmp	r3, #2
 800583e:	d914      	bls.n	800586a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b01      	cmp	r3, #1
 800584c:	d10d      	bne.n	800586a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005852:	f043 0210 	orr.w	r2, r3, #16
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585e:	f043 0201 	orr.w	r2, r3, #1
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e007      	b.n	800587a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	2b01      	cmp	r3, #1
 8005876:	d0dc      	beq.n	8005832 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
	...

08005884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f003 0307 	and.w	r3, r3, #7
 8005892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005894:	4b0c      	ldr	r3, [pc, #48]	; (80058c8 <__NVIC_SetPriorityGrouping+0x44>)
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80058a0:	4013      	ands	r3, r2
 80058a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80058ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80058b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058b6:	4a04      	ldr	r2, [pc, #16]	; (80058c8 <__NVIC_SetPriorityGrouping+0x44>)
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	60d3      	str	r3, [r2, #12]
}
 80058bc:	bf00      	nop
 80058be:	3714      	adds	r7, #20
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bc80      	pop	{r7}
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	e000ed00 	.word	0xe000ed00

080058cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80058cc:	b480      	push	{r7}
 80058ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058d0:	4b04      	ldr	r3, [pc, #16]	; (80058e4 <__NVIC_GetPriorityGrouping+0x18>)
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	0a1b      	lsrs	r3, r3, #8
 80058d6:	f003 0307 	and.w	r3, r3, #7
}
 80058da:	4618      	mov	r0, r3
 80058dc:	46bd      	mov	sp, r7
 80058de:	bc80      	pop	{r7}
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	e000ed00 	.word	0xe000ed00

080058e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	4603      	mov	r3, r0
 80058f0:	6039      	str	r1, [r7, #0]
 80058f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	db0a      	blt.n	8005912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	b2da      	uxtb	r2, r3
 8005900:	490c      	ldr	r1, [pc, #48]	; (8005934 <__NVIC_SetPriority+0x4c>)
 8005902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005906:	0112      	lsls	r2, r2, #4
 8005908:	b2d2      	uxtb	r2, r2
 800590a:	440b      	add	r3, r1
 800590c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005910:	e00a      	b.n	8005928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	b2da      	uxtb	r2, r3
 8005916:	4908      	ldr	r1, [pc, #32]	; (8005938 <__NVIC_SetPriority+0x50>)
 8005918:	79fb      	ldrb	r3, [r7, #7]
 800591a:	f003 030f 	and.w	r3, r3, #15
 800591e:	3b04      	subs	r3, #4
 8005920:	0112      	lsls	r2, r2, #4
 8005922:	b2d2      	uxtb	r2, r2
 8005924:	440b      	add	r3, r1
 8005926:	761a      	strb	r2, [r3, #24]
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	bc80      	pop	{r7}
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	e000e100 	.word	0xe000e100
 8005938:	e000ed00 	.word	0xe000ed00

0800593c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800593c:	b480      	push	{r7}
 800593e:	b089      	sub	sp, #36	; 0x24
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f003 0307 	and.w	r3, r3, #7
 800594e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	f1c3 0307 	rsb	r3, r3, #7
 8005956:	2b04      	cmp	r3, #4
 8005958:	bf28      	it	cs
 800595a:	2304      	movcs	r3, #4
 800595c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	3304      	adds	r3, #4
 8005962:	2b06      	cmp	r3, #6
 8005964:	d902      	bls.n	800596c <NVIC_EncodePriority+0x30>
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	3b03      	subs	r3, #3
 800596a:	e000      	b.n	800596e <NVIC_EncodePriority+0x32>
 800596c:	2300      	movs	r3, #0
 800596e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005970:	f04f 32ff 	mov.w	r2, #4294967295
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	fa02 f303 	lsl.w	r3, r2, r3
 800597a:	43da      	mvns	r2, r3
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	401a      	ands	r2, r3
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005984:	f04f 31ff 	mov.w	r1, #4294967295
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	fa01 f303 	lsl.w	r3, r1, r3
 800598e:	43d9      	mvns	r1, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005994:	4313      	orrs	r3, r2
         );
}
 8005996:	4618      	mov	r0, r3
 8005998:	3724      	adds	r7, #36	; 0x24
 800599a:	46bd      	mov	sp, r7
 800599c:	bc80      	pop	{r7}
 800599e:	4770      	bx	lr

080059a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	3b01      	subs	r3, #1
 80059ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059b0:	d301      	bcc.n	80059b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80059b2:	2301      	movs	r3, #1
 80059b4:	e00f      	b.n	80059d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80059b6:	4a0a      	ldr	r2, [pc, #40]	; (80059e0 <SysTick_Config+0x40>)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	3b01      	subs	r3, #1
 80059bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80059be:	210f      	movs	r1, #15
 80059c0:	f04f 30ff 	mov.w	r0, #4294967295
 80059c4:	f7ff ff90 	bl	80058e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80059c8:	4b05      	ldr	r3, [pc, #20]	; (80059e0 <SysTick_Config+0x40>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059ce:	4b04      	ldr	r3, [pc, #16]	; (80059e0 <SysTick_Config+0x40>)
 80059d0:	2207      	movs	r2, #7
 80059d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3708      	adds	r7, #8
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	e000e010 	.word	0xe000e010

080059e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f7ff ff49 	bl	8005884 <__NVIC_SetPriorityGrouping>
}
 80059f2:	bf00      	nop
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b086      	sub	sp, #24
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	4603      	mov	r3, r0
 8005a02:	60b9      	str	r1, [r7, #8]
 8005a04:	607a      	str	r2, [r7, #4]
 8005a06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005a0c:	f7ff ff5e 	bl	80058cc <__NVIC_GetPriorityGrouping>
 8005a10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	68b9      	ldr	r1, [r7, #8]
 8005a16:	6978      	ldr	r0, [r7, #20]
 8005a18:	f7ff ff90 	bl	800593c <NVIC_EncodePriority>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a22:	4611      	mov	r1, r2
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7ff ff5f 	bl	80058e8 <__NVIC_SetPriority>
}
 8005a2a:	bf00      	nop
 8005a2c:	3718      	adds	r7, #24
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b082      	sub	sp, #8
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7ff ffb0 	bl	80059a0 <SysTick_Config>
 8005a40:	4603      	mov	r3, r0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3708      	adds	r7, #8
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
	...

08005a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b08b      	sub	sp, #44	; 0x2c
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005a56:	2300      	movs	r3, #0
 8005a58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a5e:	e169      	b.n	8005d34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005a60:	2201      	movs	r2, #1
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	fa02 f303 	lsl.w	r3, r2, r3
 8005a68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69fa      	ldr	r2, [r7, #28]
 8005a70:	4013      	ands	r3, r2
 8005a72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	f040 8158 	bne.w	8005d2e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	4a9a      	ldr	r2, [pc, #616]	; (8005cec <HAL_GPIO_Init+0x2a0>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d05e      	beq.n	8005b46 <HAL_GPIO_Init+0xfa>
 8005a88:	4a98      	ldr	r2, [pc, #608]	; (8005cec <HAL_GPIO_Init+0x2a0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d875      	bhi.n	8005b7a <HAL_GPIO_Init+0x12e>
 8005a8e:	4a98      	ldr	r2, [pc, #608]	; (8005cf0 <HAL_GPIO_Init+0x2a4>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d058      	beq.n	8005b46 <HAL_GPIO_Init+0xfa>
 8005a94:	4a96      	ldr	r2, [pc, #600]	; (8005cf0 <HAL_GPIO_Init+0x2a4>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d86f      	bhi.n	8005b7a <HAL_GPIO_Init+0x12e>
 8005a9a:	4a96      	ldr	r2, [pc, #600]	; (8005cf4 <HAL_GPIO_Init+0x2a8>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d052      	beq.n	8005b46 <HAL_GPIO_Init+0xfa>
 8005aa0:	4a94      	ldr	r2, [pc, #592]	; (8005cf4 <HAL_GPIO_Init+0x2a8>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d869      	bhi.n	8005b7a <HAL_GPIO_Init+0x12e>
 8005aa6:	4a94      	ldr	r2, [pc, #592]	; (8005cf8 <HAL_GPIO_Init+0x2ac>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d04c      	beq.n	8005b46 <HAL_GPIO_Init+0xfa>
 8005aac:	4a92      	ldr	r2, [pc, #584]	; (8005cf8 <HAL_GPIO_Init+0x2ac>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d863      	bhi.n	8005b7a <HAL_GPIO_Init+0x12e>
 8005ab2:	4a92      	ldr	r2, [pc, #584]	; (8005cfc <HAL_GPIO_Init+0x2b0>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d046      	beq.n	8005b46 <HAL_GPIO_Init+0xfa>
 8005ab8:	4a90      	ldr	r2, [pc, #576]	; (8005cfc <HAL_GPIO_Init+0x2b0>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d85d      	bhi.n	8005b7a <HAL_GPIO_Init+0x12e>
 8005abe:	2b12      	cmp	r3, #18
 8005ac0:	d82a      	bhi.n	8005b18 <HAL_GPIO_Init+0xcc>
 8005ac2:	2b12      	cmp	r3, #18
 8005ac4:	d859      	bhi.n	8005b7a <HAL_GPIO_Init+0x12e>
 8005ac6:	a201      	add	r2, pc, #4	; (adr r2, 8005acc <HAL_GPIO_Init+0x80>)
 8005ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005acc:	08005b47 	.word	0x08005b47
 8005ad0:	08005b21 	.word	0x08005b21
 8005ad4:	08005b33 	.word	0x08005b33
 8005ad8:	08005b75 	.word	0x08005b75
 8005adc:	08005b7b 	.word	0x08005b7b
 8005ae0:	08005b7b 	.word	0x08005b7b
 8005ae4:	08005b7b 	.word	0x08005b7b
 8005ae8:	08005b7b 	.word	0x08005b7b
 8005aec:	08005b7b 	.word	0x08005b7b
 8005af0:	08005b7b 	.word	0x08005b7b
 8005af4:	08005b7b 	.word	0x08005b7b
 8005af8:	08005b7b 	.word	0x08005b7b
 8005afc:	08005b7b 	.word	0x08005b7b
 8005b00:	08005b7b 	.word	0x08005b7b
 8005b04:	08005b7b 	.word	0x08005b7b
 8005b08:	08005b7b 	.word	0x08005b7b
 8005b0c:	08005b7b 	.word	0x08005b7b
 8005b10:	08005b29 	.word	0x08005b29
 8005b14:	08005b3d 	.word	0x08005b3d
 8005b18:	4a79      	ldr	r2, [pc, #484]	; (8005d00 <HAL_GPIO_Init+0x2b4>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d013      	beq.n	8005b46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005b1e:	e02c      	b.n	8005b7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	623b      	str	r3, [r7, #32]
          break;
 8005b26:	e029      	b.n	8005b7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	623b      	str	r3, [r7, #32]
          break;
 8005b30:	e024      	b.n	8005b7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	3308      	adds	r3, #8
 8005b38:	623b      	str	r3, [r7, #32]
          break;
 8005b3a:	e01f      	b.n	8005b7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	330c      	adds	r3, #12
 8005b42:	623b      	str	r3, [r7, #32]
          break;
 8005b44:	e01a      	b.n	8005b7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d102      	bne.n	8005b54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005b4e:	2304      	movs	r3, #4
 8005b50:	623b      	str	r3, [r7, #32]
          break;
 8005b52:	e013      	b.n	8005b7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d105      	bne.n	8005b68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005b5c:	2308      	movs	r3, #8
 8005b5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	69fa      	ldr	r2, [r7, #28]
 8005b64:	611a      	str	r2, [r3, #16]
          break;
 8005b66:	e009      	b.n	8005b7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005b68:	2308      	movs	r3, #8
 8005b6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	69fa      	ldr	r2, [r7, #28]
 8005b70:	615a      	str	r2, [r3, #20]
          break;
 8005b72:	e003      	b.n	8005b7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005b74:	2300      	movs	r3, #0
 8005b76:	623b      	str	r3, [r7, #32]
          break;
 8005b78:	e000      	b.n	8005b7c <HAL_GPIO_Init+0x130>
          break;
 8005b7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	2bff      	cmp	r3, #255	; 0xff
 8005b80:	d801      	bhi.n	8005b86 <HAL_GPIO_Init+0x13a>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	e001      	b.n	8005b8a <HAL_GPIO_Init+0x13e>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	3304      	adds	r3, #4
 8005b8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	2bff      	cmp	r3, #255	; 0xff
 8005b90:	d802      	bhi.n	8005b98 <HAL_GPIO_Init+0x14c>
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	e002      	b.n	8005b9e <HAL_GPIO_Init+0x152>
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	3b08      	subs	r3, #8
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	210f      	movs	r1, #15
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bac:	43db      	mvns	r3, r3
 8005bae:	401a      	ands	r2, r3
 8005bb0:	6a39      	ldr	r1, [r7, #32]
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f000 80b1 	beq.w	8005d2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005bcc:	4b4d      	ldr	r3, [pc, #308]	; (8005d04 <HAL_GPIO_Init+0x2b8>)
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	4a4c      	ldr	r2, [pc, #304]	; (8005d04 <HAL_GPIO_Init+0x2b8>)
 8005bd2:	f043 0301 	orr.w	r3, r3, #1
 8005bd6:	6193      	str	r3, [r2, #24]
 8005bd8:	4b4a      	ldr	r3, [pc, #296]	; (8005d04 <HAL_GPIO_Init+0x2b8>)
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	60bb      	str	r3, [r7, #8]
 8005be2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005be4:	4a48      	ldr	r2, [pc, #288]	; (8005d08 <HAL_GPIO_Init+0x2bc>)
 8005be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be8:	089b      	lsrs	r3, r3, #2
 8005bea:	3302      	adds	r3, #2
 8005bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bf0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf4:	f003 0303 	and.w	r3, r3, #3
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	220f      	movs	r2, #15
 8005bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005c00:	43db      	mvns	r3, r3
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	4013      	ands	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a40      	ldr	r2, [pc, #256]	; (8005d0c <HAL_GPIO_Init+0x2c0>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d013      	beq.n	8005c38 <HAL_GPIO_Init+0x1ec>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a3f      	ldr	r2, [pc, #252]	; (8005d10 <HAL_GPIO_Init+0x2c4>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d00d      	beq.n	8005c34 <HAL_GPIO_Init+0x1e8>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a3e      	ldr	r2, [pc, #248]	; (8005d14 <HAL_GPIO_Init+0x2c8>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d007      	beq.n	8005c30 <HAL_GPIO_Init+0x1e4>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a3d      	ldr	r2, [pc, #244]	; (8005d18 <HAL_GPIO_Init+0x2cc>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d101      	bne.n	8005c2c <HAL_GPIO_Init+0x1e0>
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e006      	b.n	8005c3a <HAL_GPIO_Init+0x1ee>
 8005c2c:	2304      	movs	r3, #4
 8005c2e:	e004      	b.n	8005c3a <HAL_GPIO_Init+0x1ee>
 8005c30:	2302      	movs	r3, #2
 8005c32:	e002      	b.n	8005c3a <HAL_GPIO_Init+0x1ee>
 8005c34:	2301      	movs	r3, #1
 8005c36:	e000      	b.n	8005c3a <HAL_GPIO_Init+0x1ee>
 8005c38:	2300      	movs	r3, #0
 8005c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c3c:	f002 0203 	and.w	r2, r2, #3
 8005c40:	0092      	lsls	r2, r2, #2
 8005c42:	4093      	lsls	r3, r2
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005c4a:	492f      	ldr	r1, [pc, #188]	; (8005d08 <HAL_GPIO_Init+0x2bc>)
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4e:	089b      	lsrs	r3, r3, #2
 8005c50:	3302      	adds	r3, #2
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d006      	beq.n	8005c72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005c64:	4b2d      	ldr	r3, [pc, #180]	; (8005d1c <HAL_GPIO_Init+0x2d0>)
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	492c      	ldr	r1, [pc, #176]	; (8005d1c <HAL_GPIO_Init+0x2d0>)
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	600b      	str	r3, [r1, #0]
 8005c70:	e006      	b.n	8005c80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005c72:	4b2a      	ldr	r3, [pc, #168]	; (8005d1c <HAL_GPIO_Init+0x2d0>)
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	43db      	mvns	r3, r3
 8005c7a:	4928      	ldr	r1, [pc, #160]	; (8005d1c <HAL_GPIO_Init+0x2d0>)
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d006      	beq.n	8005c9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005c8c:	4b23      	ldr	r3, [pc, #140]	; (8005d1c <HAL_GPIO_Init+0x2d0>)
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	4922      	ldr	r1, [pc, #136]	; (8005d1c <HAL_GPIO_Init+0x2d0>)
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	604b      	str	r3, [r1, #4]
 8005c98:	e006      	b.n	8005ca8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005c9a:	4b20      	ldr	r3, [pc, #128]	; (8005d1c <HAL_GPIO_Init+0x2d0>)
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	43db      	mvns	r3, r3
 8005ca2:	491e      	ldr	r1, [pc, #120]	; (8005d1c <HAL_GPIO_Init+0x2d0>)
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d006      	beq.n	8005cc2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005cb4:	4b19      	ldr	r3, [pc, #100]	; (8005d1c <HAL_GPIO_Init+0x2d0>)
 8005cb6:	689a      	ldr	r2, [r3, #8]
 8005cb8:	4918      	ldr	r1, [pc, #96]	; (8005d1c <HAL_GPIO_Init+0x2d0>)
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	608b      	str	r3, [r1, #8]
 8005cc0:	e006      	b.n	8005cd0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005cc2:	4b16      	ldr	r3, [pc, #88]	; (8005d1c <HAL_GPIO_Init+0x2d0>)
 8005cc4:	689a      	ldr	r2, [r3, #8]
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	43db      	mvns	r3, r3
 8005cca:	4914      	ldr	r1, [pc, #80]	; (8005d1c <HAL_GPIO_Init+0x2d0>)
 8005ccc:	4013      	ands	r3, r2
 8005cce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d021      	beq.n	8005d20 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005cdc:	4b0f      	ldr	r3, [pc, #60]	; (8005d1c <HAL_GPIO_Init+0x2d0>)
 8005cde:	68da      	ldr	r2, [r3, #12]
 8005ce0:	490e      	ldr	r1, [pc, #56]	; (8005d1c <HAL_GPIO_Init+0x2d0>)
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	60cb      	str	r3, [r1, #12]
 8005ce8:	e021      	b.n	8005d2e <HAL_GPIO_Init+0x2e2>
 8005cea:	bf00      	nop
 8005cec:	10320000 	.word	0x10320000
 8005cf0:	10310000 	.word	0x10310000
 8005cf4:	10220000 	.word	0x10220000
 8005cf8:	10210000 	.word	0x10210000
 8005cfc:	10120000 	.word	0x10120000
 8005d00:	10110000 	.word	0x10110000
 8005d04:	40021000 	.word	0x40021000
 8005d08:	40010000 	.word	0x40010000
 8005d0c:	40010800 	.word	0x40010800
 8005d10:	40010c00 	.word	0x40010c00
 8005d14:	40011000 	.word	0x40011000
 8005d18:	40011400 	.word	0x40011400
 8005d1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005d20:	4b0b      	ldr	r3, [pc, #44]	; (8005d50 <HAL_GPIO_Init+0x304>)
 8005d22:	68da      	ldr	r2, [r3, #12]
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	43db      	mvns	r3, r3
 8005d28:	4909      	ldr	r1, [pc, #36]	; (8005d50 <HAL_GPIO_Init+0x304>)
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d30:	3301      	adds	r3, #1
 8005d32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f47f ae8e 	bne.w	8005a60 <HAL_GPIO_Init+0x14>
  }
}
 8005d44:	bf00      	nop
 8005d46:	bf00      	nop
 8005d48:	372c      	adds	r7, #44	; 0x2c
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bc80      	pop	{r7}
 8005d4e:	4770      	bx	lr
 8005d50:	40010400 	.word	0x40010400

08005d54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689a      	ldr	r2, [r3, #8]
 8005d64:	887b      	ldrh	r3, [r7, #2]
 8005d66:	4013      	ands	r3, r2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d002      	beq.n	8005d72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	73fb      	strb	r3, [r7, #15]
 8005d70:	e001      	b.n	8005d76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d72:	2300      	movs	r3, #0
 8005d74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bc80      	pop	{r7}
 8005d80:	4770      	bx	lr

08005d82 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b083      	sub	sp, #12
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	807b      	strh	r3, [r7, #2]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d92:	787b      	ldrb	r3, [r7, #1]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d98:	887a      	ldrh	r2, [r7, #2]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005d9e:	e003      	b.n	8005da8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005da0:	887b      	ldrh	r3, [r7, #2]
 8005da2:	041a      	lsls	r2, r3, #16
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	611a      	str	r2, [r3, #16]
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bc80      	pop	{r7}
 8005db0:	4770      	bx	lr
	...

08005db4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e272      	b.n	80062ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f000 8087 	beq.w	8005ee2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005dd4:	4b92      	ldr	r3, [pc, #584]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f003 030c 	and.w	r3, r3, #12
 8005ddc:	2b04      	cmp	r3, #4
 8005dde:	d00c      	beq.n	8005dfa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005de0:	4b8f      	ldr	r3, [pc, #572]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f003 030c 	and.w	r3, r3, #12
 8005de8:	2b08      	cmp	r3, #8
 8005dea:	d112      	bne.n	8005e12 <HAL_RCC_OscConfig+0x5e>
 8005dec:	4b8c      	ldr	r3, [pc, #560]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df8:	d10b      	bne.n	8005e12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dfa:	4b89      	ldr	r3, [pc, #548]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d06c      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x12c>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d168      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e24c      	b.n	80062ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e1a:	d106      	bne.n	8005e2a <HAL_RCC_OscConfig+0x76>
 8005e1c:	4b80      	ldr	r3, [pc, #512]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a7f      	ldr	r2, [pc, #508]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e26:	6013      	str	r3, [r2, #0]
 8005e28:	e02e      	b.n	8005e88 <HAL_RCC_OscConfig+0xd4>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d10c      	bne.n	8005e4c <HAL_RCC_OscConfig+0x98>
 8005e32:	4b7b      	ldr	r3, [pc, #492]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a7a      	ldr	r2, [pc, #488]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e3c:	6013      	str	r3, [r2, #0]
 8005e3e:	4b78      	ldr	r3, [pc, #480]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a77      	ldr	r2, [pc, #476]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e48:	6013      	str	r3, [r2, #0]
 8005e4a:	e01d      	b.n	8005e88 <HAL_RCC_OscConfig+0xd4>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e54:	d10c      	bne.n	8005e70 <HAL_RCC_OscConfig+0xbc>
 8005e56:	4b72      	ldr	r3, [pc, #456]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a71      	ldr	r2, [pc, #452]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e60:	6013      	str	r3, [r2, #0]
 8005e62:	4b6f      	ldr	r3, [pc, #444]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a6e      	ldr	r2, [pc, #440]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e6c:	6013      	str	r3, [r2, #0]
 8005e6e:	e00b      	b.n	8005e88 <HAL_RCC_OscConfig+0xd4>
 8005e70:	4b6b      	ldr	r3, [pc, #428]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a6a      	ldr	r2, [pc, #424]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e7a:	6013      	str	r3, [r2, #0]
 8005e7c:	4b68      	ldr	r3, [pc, #416]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a67      	ldr	r2, [pc, #412]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d013      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e90:	f7ff fab8 	bl	8005404 <HAL_GetTick>
 8005e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e96:	e008      	b.n	8005eaa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e98:	f7ff fab4 	bl	8005404 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b64      	cmp	r3, #100	; 0x64
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e200      	b.n	80062ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eaa:	4b5d      	ldr	r3, [pc, #372]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d0f0      	beq.n	8005e98 <HAL_RCC_OscConfig+0xe4>
 8005eb6:	e014      	b.n	8005ee2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eb8:	f7ff faa4 	bl	8005404 <HAL_GetTick>
 8005ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ebe:	e008      	b.n	8005ed2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ec0:	f7ff faa0 	bl	8005404 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b64      	cmp	r3, #100	; 0x64
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e1ec      	b.n	80062ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ed2:	4b53      	ldr	r3, [pc, #332]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1f0      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x10c>
 8005ede:	e000      	b.n	8005ee2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d063      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005eee:	4b4c      	ldr	r3, [pc, #304]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f003 030c 	and.w	r3, r3, #12
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00b      	beq.n	8005f12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005efa:	4b49      	ldr	r3, [pc, #292]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f003 030c 	and.w	r3, r3, #12
 8005f02:	2b08      	cmp	r3, #8
 8005f04:	d11c      	bne.n	8005f40 <HAL_RCC_OscConfig+0x18c>
 8005f06:	4b46      	ldr	r3, [pc, #280]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d116      	bne.n	8005f40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f12:	4b43      	ldr	r3, [pc, #268]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0302 	and.w	r3, r3, #2
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d005      	beq.n	8005f2a <HAL_RCC_OscConfig+0x176>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d001      	beq.n	8005f2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e1c0      	b.n	80062ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f2a:	4b3d      	ldr	r3, [pc, #244]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	00db      	lsls	r3, r3, #3
 8005f38:	4939      	ldr	r1, [pc, #228]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f3e:	e03a      	b.n	8005fb6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d020      	beq.n	8005f8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f48:	4b36      	ldr	r3, [pc, #216]	; (8006024 <HAL_RCC_OscConfig+0x270>)
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f4e:	f7ff fa59 	bl	8005404 <HAL_GetTick>
 8005f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f54:	e008      	b.n	8005f68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f56:	f7ff fa55 	bl	8005404 <HAL_GetTick>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d901      	bls.n	8005f68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e1a1      	b.n	80062ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f68:	4b2d      	ldr	r3, [pc, #180]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0302 	and.w	r3, r3, #2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d0f0      	beq.n	8005f56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f74:	4b2a      	ldr	r3, [pc, #168]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	00db      	lsls	r3, r3, #3
 8005f82:	4927      	ldr	r1, [pc, #156]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	600b      	str	r3, [r1, #0]
 8005f88:	e015      	b.n	8005fb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f8a:	4b26      	ldr	r3, [pc, #152]	; (8006024 <HAL_RCC_OscConfig+0x270>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f90:	f7ff fa38 	bl	8005404 <HAL_GetTick>
 8005f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f96:	e008      	b.n	8005faa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f98:	f7ff fa34 	bl	8005404 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d901      	bls.n	8005faa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e180      	b.n	80062ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005faa:	4b1d      	ldr	r3, [pc, #116]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1f0      	bne.n	8005f98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0308 	and.w	r3, r3, #8
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d03a      	beq.n	8006038 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d019      	beq.n	8005ffe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fca:	4b17      	ldr	r3, [pc, #92]	; (8006028 <HAL_RCC_OscConfig+0x274>)
 8005fcc:	2201      	movs	r2, #1
 8005fce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fd0:	f7ff fa18 	bl	8005404 <HAL_GetTick>
 8005fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fd6:	e008      	b.n	8005fea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fd8:	f7ff fa14 	bl	8005404 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e160      	b.n	80062ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fea:	4b0d      	ldr	r3, [pc, #52]	; (8006020 <HAL_RCC_OscConfig+0x26c>)
 8005fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d0f0      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005ff6:	2001      	movs	r0, #1
 8005ff8:	f000 fada 	bl	80065b0 <RCC_Delay>
 8005ffc:	e01c      	b.n	8006038 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ffe:	4b0a      	ldr	r3, [pc, #40]	; (8006028 <HAL_RCC_OscConfig+0x274>)
 8006000:	2200      	movs	r2, #0
 8006002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006004:	f7ff f9fe 	bl	8005404 <HAL_GetTick>
 8006008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800600a:	e00f      	b.n	800602c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800600c:	f7ff f9fa 	bl	8005404 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b02      	cmp	r3, #2
 8006018:	d908      	bls.n	800602c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e146      	b.n	80062ac <HAL_RCC_OscConfig+0x4f8>
 800601e:	bf00      	nop
 8006020:	40021000 	.word	0x40021000
 8006024:	42420000 	.word	0x42420000
 8006028:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800602c:	4b92      	ldr	r3, [pc, #584]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 800602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1e9      	bne.n	800600c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0304 	and.w	r3, r3, #4
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 80a6 	beq.w	8006192 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006046:	2300      	movs	r3, #0
 8006048:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800604a:	4b8b      	ldr	r3, [pc, #556]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 800604c:	69db      	ldr	r3, [r3, #28]
 800604e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10d      	bne.n	8006072 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006056:	4b88      	ldr	r3, [pc, #544]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	4a87      	ldr	r2, [pc, #540]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 800605c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006060:	61d3      	str	r3, [r2, #28]
 8006062:	4b85      	ldr	r3, [pc, #532]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800606a:	60bb      	str	r3, [r7, #8]
 800606c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800606e:	2301      	movs	r3, #1
 8006070:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006072:	4b82      	ldr	r3, [pc, #520]	; (800627c <HAL_RCC_OscConfig+0x4c8>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800607a:	2b00      	cmp	r3, #0
 800607c:	d118      	bne.n	80060b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800607e:	4b7f      	ldr	r3, [pc, #508]	; (800627c <HAL_RCC_OscConfig+0x4c8>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a7e      	ldr	r2, [pc, #504]	; (800627c <HAL_RCC_OscConfig+0x4c8>)
 8006084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006088:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800608a:	f7ff f9bb 	bl	8005404 <HAL_GetTick>
 800608e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006090:	e008      	b.n	80060a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006092:	f7ff f9b7 	bl	8005404 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	2b64      	cmp	r3, #100	; 0x64
 800609e:	d901      	bls.n	80060a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e103      	b.n	80062ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060a4:	4b75      	ldr	r3, [pc, #468]	; (800627c <HAL_RCC_OscConfig+0x4c8>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d0f0      	beq.n	8006092 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d106      	bne.n	80060c6 <HAL_RCC_OscConfig+0x312>
 80060b8:	4b6f      	ldr	r3, [pc, #444]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 80060ba:	6a1b      	ldr	r3, [r3, #32]
 80060bc:	4a6e      	ldr	r2, [pc, #440]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 80060be:	f043 0301 	orr.w	r3, r3, #1
 80060c2:	6213      	str	r3, [r2, #32]
 80060c4:	e02d      	b.n	8006122 <HAL_RCC_OscConfig+0x36e>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10c      	bne.n	80060e8 <HAL_RCC_OscConfig+0x334>
 80060ce:	4b6a      	ldr	r3, [pc, #424]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	4a69      	ldr	r2, [pc, #420]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 80060d4:	f023 0301 	bic.w	r3, r3, #1
 80060d8:	6213      	str	r3, [r2, #32]
 80060da:	4b67      	ldr	r3, [pc, #412]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	4a66      	ldr	r2, [pc, #408]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 80060e0:	f023 0304 	bic.w	r3, r3, #4
 80060e4:	6213      	str	r3, [r2, #32]
 80060e6:	e01c      	b.n	8006122 <HAL_RCC_OscConfig+0x36e>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	2b05      	cmp	r3, #5
 80060ee:	d10c      	bne.n	800610a <HAL_RCC_OscConfig+0x356>
 80060f0:	4b61      	ldr	r3, [pc, #388]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 80060f2:	6a1b      	ldr	r3, [r3, #32]
 80060f4:	4a60      	ldr	r2, [pc, #384]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 80060f6:	f043 0304 	orr.w	r3, r3, #4
 80060fa:	6213      	str	r3, [r2, #32]
 80060fc:	4b5e      	ldr	r3, [pc, #376]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 80060fe:	6a1b      	ldr	r3, [r3, #32]
 8006100:	4a5d      	ldr	r2, [pc, #372]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 8006102:	f043 0301 	orr.w	r3, r3, #1
 8006106:	6213      	str	r3, [r2, #32]
 8006108:	e00b      	b.n	8006122 <HAL_RCC_OscConfig+0x36e>
 800610a:	4b5b      	ldr	r3, [pc, #364]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	4a5a      	ldr	r2, [pc, #360]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 8006110:	f023 0301 	bic.w	r3, r3, #1
 8006114:	6213      	str	r3, [r2, #32]
 8006116:	4b58      	ldr	r3, [pc, #352]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	4a57      	ldr	r2, [pc, #348]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 800611c:	f023 0304 	bic.w	r3, r3, #4
 8006120:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d015      	beq.n	8006156 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800612a:	f7ff f96b 	bl	8005404 <HAL_GetTick>
 800612e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006130:	e00a      	b.n	8006148 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006132:	f7ff f967 	bl	8005404 <HAL_GetTick>
 8006136:	4602      	mov	r2, r0
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006140:	4293      	cmp	r3, r2
 8006142:	d901      	bls.n	8006148 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006144:	2303      	movs	r3, #3
 8006146:	e0b1      	b.n	80062ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006148:	4b4b      	ldr	r3, [pc, #300]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	f003 0302 	and.w	r3, r3, #2
 8006150:	2b00      	cmp	r3, #0
 8006152:	d0ee      	beq.n	8006132 <HAL_RCC_OscConfig+0x37e>
 8006154:	e014      	b.n	8006180 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006156:	f7ff f955 	bl	8005404 <HAL_GetTick>
 800615a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800615c:	e00a      	b.n	8006174 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800615e:	f7ff f951 	bl	8005404 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	f241 3288 	movw	r2, #5000	; 0x1388
 800616c:	4293      	cmp	r3, r2
 800616e:	d901      	bls.n	8006174 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e09b      	b.n	80062ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006174:	4b40      	ldr	r3, [pc, #256]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d1ee      	bne.n	800615e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006180:	7dfb      	ldrb	r3, [r7, #23]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d105      	bne.n	8006192 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006186:	4b3c      	ldr	r3, [pc, #240]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	4a3b      	ldr	r2, [pc, #236]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 800618c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006190:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 8087 	beq.w	80062aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800619c:	4b36      	ldr	r3, [pc, #216]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f003 030c 	and.w	r3, r3, #12
 80061a4:	2b08      	cmp	r3, #8
 80061a6:	d061      	beq.n	800626c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	69db      	ldr	r3, [r3, #28]
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d146      	bne.n	800623e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061b0:	4b33      	ldr	r3, [pc, #204]	; (8006280 <HAL_RCC_OscConfig+0x4cc>)
 80061b2:	2200      	movs	r2, #0
 80061b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061b6:	f7ff f925 	bl	8005404 <HAL_GetTick>
 80061ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061bc:	e008      	b.n	80061d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061be:	f7ff f921 	bl	8005404 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d901      	bls.n	80061d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e06d      	b.n	80062ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061d0:	4b29      	ldr	r3, [pc, #164]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1f0      	bne.n	80061be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061e4:	d108      	bne.n	80061f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80061e6:	4b24      	ldr	r3, [pc, #144]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	4921      	ldr	r1, [pc, #132]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061f8:	4b1f      	ldr	r3, [pc, #124]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a19      	ldr	r1, [r3, #32]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006208:	430b      	orrs	r3, r1
 800620a:	491b      	ldr	r1, [pc, #108]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 800620c:	4313      	orrs	r3, r2
 800620e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006210:	4b1b      	ldr	r3, [pc, #108]	; (8006280 <HAL_RCC_OscConfig+0x4cc>)
 8006212:	2201      	movs	r2, #1
 8006214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006216:	f7ff f8f5 	bl	8005404 <HAL_GetTick>
 800621a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800621c:	e008      	b.n	8006230 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800621e:	f7ff f8f1 	bl	8005404 <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	2b02      	cmp	r3, #2
 800622a:	d901      	bls.n	8006230 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e03d      	b.n	80062ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006230:	4b11      	ldr	r3, [pc, #68]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d0f0      	beq.n	800621e <HAL_RCC_OscConfig+0x46a>
 800623c:	e035      	b.n	80062aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800623e:	4b10      	ldr	r3, [pc, #64]	; (8006280 <HAL_RCC_OscConfig+0x4cc>)
 8006240:	2200      	movs	r2, #0
 8006242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006244:	f7ff f8de 	bl	8005404 <HAL_GetTick>
 8006248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800624a:	e008      	b.n	800625e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800624c:	f7ff f8da 	bl	8005404 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	2b02      	cmp	r3, #2
 8006258:	d901      	bls.n	800625e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e026      	b.n	80062ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800625e:	4b06      	ldr	r3, [pc, #24]	; (8006278 <HAL_RCC_OscConfig+0x4c4>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1f0      	bne.n	800624c <HAL_RCC_OscConfig+0x498>
 800626a:	e01e      	b.n	80062aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	69db      	ldr	r3, [r3, #28]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d107      	bne.n	8006284 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e019      	b.n	80062ac <HAL_RCC_OscConfig+0x4f8>
 8006278:	40021000 	.word	0x40021000
 800627c:	40007000 	.word	0x40007000
 8006280:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006284:	4b0b      	ldr	r3, [pc, #44]	; (80062b4 <HAL_RCC_OscConfig+0x500>)
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a1b      	ldr	r3, [r3, #32]
 8006294:	429a      	cmp	r2, r3
 8006296:	d106      	bne.n	80062a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d001      	beq.n	80062aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e000      	b.n	80062ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3718      	adds	r7, #24
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	40021000 	.word	0x40021000

080062b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e0d0      	b.n	800646e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062cc:	4b6a      	ldr	r3, [pc, #424]	; (8006478 <HAL_RCC_ClockConfig+0x1c0>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0307 	and.w	r3, r3, #7
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d910      	bls.n	80062fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062da:	4b67      	ldr	r3, [pc, #412]	; (8006478 <HAL_RCC_ClockConfig+0x1c0>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f023 0207 	bic.w	r2, r3, #7
 80062e2:	4965      	ldr	r1, [pc, #404]	; (8006478 <HAL_RCC_ClockConfig+0x1c0>)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ea:	4b63      	ldr	r3, [pc, #396]	; (8006478 <HAL_RCC_ClockConfig+0x1c0>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0307 	and.w	r3, r3, #7
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d001      	beq.n	80062fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e0b8      	b.n	800646e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0302 	and.w	r3, r3, #2
 8006304:	2b00      	cmp	r3, #0
 8006306:	d020      	beq.n	800634a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0304 	and.w	r3, r3, #4
 8006310:	2b00      	cmp	r3, #0
 8006312:	d005      	beq.n	8006320 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006314:	4b59      	ldr	r3, [pc, #356]	; (800647c <HAL_RCC_ClockConfig+0x1c4>)
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	4a58      	ldr	r2, [pc, #352]	; (800647c <HAL_RCC_ClockConfig+0x1c4>)
 800631a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800631e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0308 	and.w	r3, r3, #8
 8006328:	2b00      	cmp	r3, #0
 800632a:	d005      	beq.n	8006338 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800632c:	4b53      	ldr	r3, [pc, #332]	; (800647c <HAL_RCC_ClockConfig+0x1c4>)
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	4a52      	ldr	r2, [pc, #328]	; (800647c <HAL_RCC_ClockConfig+0x1c4>)
 8006332:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006336:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006338:	4b50      	ldr	r3, [pc, #320]	; (800647c <HAL_RCC_ClockConfig+0x1c4>)
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	494d      	ldr	r1, [pc, #308]	; (800647c <HAL_RCC_ClockConfig+0x1c4>)
 8006346:	4313      	orrs	r3, r2
 8006348:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d040      	beq.n	80063d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d107      	bne.n	800636e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800635e:	4b47      	ldr	r3, [pc, #284]	; (800647c <HAL_RCC_ClockConfig+0x1c4>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d115      	bne.n	8006396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e07f      	b.n	800646e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	2b02      	cmp	r3, #2
 8006374:	d107      	bne.n	8006386 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006376:	4b41      	ldr	r3, [pc, #260]	; (800647c <HAL_RCC_ClockConfig+0x1c4>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d109      	bne.n	8006396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e073      	b.n	800646e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006386:	4b3d      	ldr	r3, [pc, #244]	; (800647c <HAL_RCC_ClockConfig+0x1c4>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e06b      	b.n	800646e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006396:	4b39      	ldr	r3, [pc, #228]	; (800647c <HAL_RCC_ClockConfig+0x1c4>)
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f023 0203 	bic.w	r2, r3, #3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	4936      	ldr	r1, [pc, #216]	; (800647c <HAL_RCC_ClockConfig+0x1c4>)
 80063a4:	4313      	orrs	r3, r2
 80063a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063a8:	f7ff f82c 	bl	8005404 <HAL_GetTick>
 80063ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063ae:	e00a      	b.n	80063c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063b0:	f7ff f828 	bl	8005404 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80063be:	4293      	cmp	r3, r2
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e053      	b.n	800646e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063c6:	4b2d      	ldr	r3, [pc, #180]	; (800647c <HAL_RCC_ClockConfig+0x1c4>)
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f003 020c 	and.w	r2, r3, #12
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d1eb      	bne.n	80063b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063d8:	4b27      	ldr	r3, [pc, #156]	; (8006478 <HAL_RCC_ClockConfig+0x1c0>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0307 	and.w	r3, r3, #7
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d210      	bcs.n	8006408 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063e6:	4b24      	ldr	r3, [pc, #144]	; (8006478 <HAL_RCC_ClockConfig+0x1c0>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f023 0207 	bic.w	r2, r3, #7
 80063ee:	4922      	ldr	r1, [pc, #136]	; (8006478 <HAL_RCC_ClockConfig+0x1c0>)
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063f6:	4b20      	ldr	r3, [pc, #128]	; (8006478 <HAL_RCC_ClockConfig+0x1c0>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0307 	and.w	r3, r3, #7
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	429a      	cmp	r2, r3
 8006402:	d001      	beq.n	8006408 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e032      	b.n	800646e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0304 	and.w	r3, r3, #4
 8006410:	2b00      	cmp	r3, #0
 8006412:	d008      	beq.n	8006426 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006414:	4b19      	ldr	r3, [pc, #100]	; (800647c <HAL_RCC_ClockConfig+0x1c4>)
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	4916      	ldr	r1, [pc, #88]	; (800647c <HAL_RCC_ClockConfig+0x1c4>)
 8006422:	4313      	orrs	r3, r2
 8006424:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0308 	and.w	r3, r3, #8
 800642e:	2b00      	cmp	r3, #0
 8006430:	d009      	beq.n	8006446 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006432:	4b12      	ldr	r3, [pc, #72]	; (800647c <HAL_RCC_ClockConfig+0x1c4>)
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	00db      	lsls	r3, r3, #3
 8006440:	490e      	ldr	r1, [pc, #56]	; (800647c <HAL_RCC_ClockConfig+0x1c4>)
 8006442:	4313      	orrs	r3, r2
 8006444:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006446:	f000 f821 	bl	800648c <HAL_RCC_GetSysClockFreq>
 800644a:	4602      	mov	r2, r0
 800644c:	4b0b      	ldr	r3, [pc, #44]	; (800647c <HAL_RCC_ClockConfig+0x1c4>)
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	091b      	lsrs	r3, r3, #4
 8006452:	f003 030f 	and.w	r3, r3, #15
 8006456:	490a      	ldr	r1, [pc, #40]	; (8006480 <HAL_RCC_ClockConfig+0x1c8>)
 8006458:	5ccb      	ldrb	r3, [r1, r3]
 800645a:	fa22 f303 	lsr.w	r3, r2, r3
 800645e:	4a09      	ldr	r2, [pc, #36]	; (8006484 <HAL_RCC_ClockConfig+0x1cc>)
 8006460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006462:	4b09      	ldr	r3, [pc, #36]	; (8006488 <HAL_RCC_ClockConfig+0x1d0>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4618      	mov	r0, r3
 8006468:	f7fe ff8a 	bl	8005380 <HAL_InitTick>

  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	40022000 	.word	0x40022000
 800647c:	40021000 	.word	0x40021000
 8006480:	08008ef0 	.word	0x08008ef0
 8006484:	20000000 	.word	0x20000000
 8006488:	20000004 	.word	0x20000004

0800648c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800648c:	b490      	push	{r4, r7}
 800648e:	b08a      	sub	sp, #40	; 0x28
 8006490:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006492:	4b29      	ldr	r3, [pc, #164]	; (8006538 <HAL_RCC_GetSysClockFreq+0xac>)
 8006494:	1d3c      	adds	r4, r7, #4
 8006496:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006498:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800649c:	f240 2301 	movw	r3, #513	; 0x201
 80064a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80064a2:	2300      	movs	r3, #0
 80064a4:	61fb      	str	r3, [r7, #28]
 80064a6:	2300      	movs	r3, #0
 80064a8:	61bb      	str	r3, [r7, #24]
 80064aa:	2300      	movs	r3, #0
 80064ac:	627b      	str	r3, [r7, #36]	; 0x24
 80064ae:	2300      	movs	r3, #0
 80064b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80064b2:	2300      	movs	r3, #0
 80064b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80064b6:	4b21      	ldr	r3, [pc, #132]	; (800653c <HAL_RCC_GetSysClockFreq+0xb0>)
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	f003 030c 	and.w	r3, r3, #12
 80064c2:	2b04      	cmp	r3, #4
 80064c4:	d002      	beq.n	80064cc <HAL_RCC_GetSysClockFreq+0x40>
 80064c6:	2b08      	cmp	r3, #8
 80064c8:	d003      	beq.n	80064d2 <HAL_RCC_GetSysClockFreq+0x46>
 80064ca:	e02b      	b.n	8006524 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80064cc:	4b1c      	ldr	r3, [pc, #112]	; (8006540 <HAL_RCC_GetSysClockFreq+0xb4>)
 80064ce:	623b      	str	r3, [r7, #32]
      break;
 80064d0:	e02b      	b.n	800652a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	0c9b      	lsrs	r3, r3, #18
 80064d6:	f003 030f 	and.w	r3, r3, #15
 80064da:	3328      	adds	r3, #40	; 0x28
 80064dc:	443b      	add	r3, r7
 80064de:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80064e2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d012      	beq.n	8006514 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80064ee:	4b13      	ldr	r3, [pc, #76]	; (800653c <HAL_RCC_GetSysClockFreq+0xb0>)
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	0c5b      	lsrs	r3, r3, #17
 80064f4:	f003 0301 	and.w	r3, r3, #1
 80064f8:	3328      	adds	r3, #40	; 0x28
 80064fa:	443b      	add	r3, r7
 80064fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006500:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	4a0e      	ldr	r2, [pc, #56]	; (8006540 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006506:	fb03 f202 	mul.w	r2, r3, r2
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006510:	627b      	str	r3, [r7, #36]	; 0x24
 8006512:	e004      	b.n	800651e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	4a0b      	ldr	r2, [pc, #44]	; (8006544 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006518:	fb02 f303 	mul.w	r3, r2, r3
 800651c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006520:	623b      	str	r3, [r7, #32]
      break;
 8006522:	e002      	b.n	800652a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006524:	4b08      	ldr	r3, [pc, #32]	; (8006548 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006526:	623b      	str	r3, [r7, #32]
      break;
 8006528:	bf00      	nop
    }
  }
  return sysclockfreq;
 800652a:	6a3b      	ldr	r3, [r7, #32]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3728      	adds	r7, #40	; 0x28
 8006530:	46bd      	mov	sp, r7
 8006532:	bc90      	pop	{r4, r7}
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	08008ee0 	.word	0x08008ee0
 800653c:	40021000 	.word	0x40021000
 8006540:	00f42400 	.word	0x00f42400
 8006544:	003d0900 	.word	0x003d0900
 8006548:	007a1200 	.word	0x007a1200

0800654c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800654c:	b480      	push	{r7}
 800654e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006550:	4b02      	ldr	r3, [pc, #8]	; (800655c <HAL_RCC_GetHCLKFreq+0x10>)
 8006552:	681b      	ldr	r3, [r3, #0]
}
 8006554:	4618      	mov	r0, r3
 8006556:	46bd      	mov	sp, r7
 8006558:	bc80      	pop	{r7}
 800655a:	4770      	bx	lr
 800655c:	20000000 	.word	0x20000000

08006560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006564:	f7ff fff2 	bl	800654c <HAL_RCC_GetHCLKFreq>
 8006568:	4602      	mov	r2, r0
 800656a:	4b05      	ldr	r3, [pc, #20]	; (8006580 <HAL_RCC_GetPCLK1Freq+0x20>)
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	0a1b      	lsrs	r3, r3, #8
 8006570:	f003 0307 	and.w	r3, r3, #7
 8006574:	4903      	ldr	r1, [pc, #12]	; (8006584 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006576:	5ccb      	ldrb	r3, [r1, r3]
 8006578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800657c:	4618      	mov	r0, r3
 800657e:	bd80      	pop	{r7, pc}
 8006580:	40021000 	.word	0x40021000
 8006584:	08008f00 	.word	0x08008f00

08006588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800658c:	f7ff ffde 	bl	800654c <HAL_RCC_GetHCLKFreq>
 8006590:	4602      	mov	r2, r0
 8006592:	4b05      	ldr	r3, [pc, #20]	; (80065a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	0adb      	lsrs	r3, r3, #11
 8006598:	f003 0307 	and.w	r3, r3, #7
 800659c:	4903      	ldr	r1, [pc, #12]	; (80065ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800659e:	5ccb      	ldrb	r3, [r1, r3]
 80065a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	40021000 	.word	0x40021000
 80065ac:	08008f00 	.word	0x08008f00

080065b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80065b8:	4b0a      	ldr	r3, [pc, #40]	; (80065e4 <RCC_Delay+0x34>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a0a      	ldr	r2, [pc, #40]	; (80065e8 <RCC_Delay+0x38>)
 80065be:	fba2 2303 	umull	r2, r3, r2, r3
 80065c2:	0a5b      	lsrs	r3, r3, #9
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	fb02 f303 	mul.w	r3, r2, r3
 80065ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80065cc:	bf00      	nop
  }
  while (Delay --);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	1e5a      	subs	r2, r3, #1
 80065d2:	60fa      	str	r2, [r7, #12]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1f9      	bne.n	80065cc <RCC_Delay+0x1c>
}
 80065d8:	bf00      	nop
 80065da:	bf00      	nop
 80065dc:	3714      	adds	r7, #20
 80065de:	46bd      	mov	sp, r7
 80065e0:	bc80      	pop	{r7}
 80065e2:	4770      	bx	lr
 80065e4:	20000000 	.word	0x20000000
 80065e8:	10624dd3 	.word	0x10624dd3

080065ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80065f4:	2300      	movs	r3, #0
 80065f6:	613b      	str	r3, [r7, #16]
 80065f8:	2300      	movs	r3, #0
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	2b00      	cmp	r3, #0
 8006606:	d07d      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006608:	2300      	movs	r3, #0
 800660a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800660c:	4b4f      	ldr	r3, [pc, #316]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800660e:	69db      	ldr	r3, [r3, #28]
 8006610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10d      	bne.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006618:	4b4c      	ldr	r3, [pc, #304]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800661a:	69db      	ldr	r3, [r3, #28]
 800661c:	4a4b      	ldr	r2, [pc, #300]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800661e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006622:	61d3      	str	r3, [r2, #28]
 8006624:	4b49      	ldr	r3, [pc, #292]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006626:	69db      	ldr	r3, [r3, #28]
 8006628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800662c:	60bb      	str	r3, [r7, #8]
 800662e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006630:	2301      	movs	r3, #1
 8006632:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006634:	4b46      	ldr	r3, [pc, #280]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800663c:	2b00      	cmp	r3, #0
 800663e:	d118      	bne.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006640:	4b43      	ldr	r3, [pc, #268]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a42      	ldr	r2, [pc, #264]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800664a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800664c:	f7fe feda 	bl	8005404 <HAL_GetTick>
 8006650:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006652:	e008      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006654:	f7fe fed6 	bl	8005404 <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	2b64      	cmp	r3, #100	; 0x64
 8006660:	d901      	bls.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e06d      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006666:	4b3a      	ldr	r3, [pc, #232]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800666e:	2b00      	cmp	r3, #0
 8006670:	d0f0      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006672:	4b36      	ldr	r3, [pc, #216]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800667a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d02e      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	429a      	cmp	r2, r3
 800668e:	d027      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006690:	4b2e      	ldr	r3, [pc, #184]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006698:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800669a:	4b2e      	ldr	r3, [pc, #184]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800669c:	2201      	movs	r2, #1
 800669e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80066a0:	4b2c      	ldr	r3, [pc, #176]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80066a2:	2200      	movs	r2, #0
 80066a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80066a6:	4a29      	ldr	r2, [pc, #164]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f003 0301 	and.w	r3, r3, #1
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d014      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066b6:	f7fe fea5 	bl	8005404 <HAL_GetTick>
 80066ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066bc:	e00a      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066be:	f7fe fea1 	bl	8005404 <HAL_GetTick>
 80066c2:	4602      	mov	r2, r0
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d901      	bls.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e036      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066d4:	4b1d      	ldr	r3, [pc, #116]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066d6:	6a1b      	ldr	r3, [r3, #32]
 80066d8:	f003 0302 	and.w	r3, r3, #2
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d0ee      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066e0:	4b1a      	ldr	r3, [pc, #104]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	4917      	ldr	r1, [pc, #92]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066ee:	4313      	orrs	r3, r2
 80066f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80066f2:	7dfb      	ldrb	r3, [r7, #23]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d105      	bne.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066f8:	4b14      	ldr	r3, [pc, #80]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066fa:	69db      	ldr	r3, [r3, #28]
 80066fc:	4a13      	ldr	r2, [pc, #76]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006702:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0302 	and.w	r3, r3, #2
 800670c:	2b00      	cmp	r3, #0
 800670e:	d008      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006710:	4b0e      	ldr	r3, [pc, #56]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	490b      	ldr	r1, [pc, #44]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800671e:	4313      	orrs	r3, r2
 8006720:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0310 	and.w	r3, r3, #16
 800672a:	2b00      	cmp	r3, #0
 800672c:	d008      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800672e:	4b07      	ldr	r3, [pc, #28]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	4904      	ldr	r1, [pc, #16]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800673c:	4313      	orrs	r3, r2
 800673e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3718      	adds	r7, #24
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	40021000 	.word	0x40021000
 8006750:	40007000 	.word	0x40007000
 8006754:	42420440 	.word	0x42420440

08006758 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e076      	b.n	8006858 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676e:	2b00      	cmp	r3, #0
 8006770:	d108      	bne.n	8006784 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800677a:	d009      	beq.n	8006790 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	61da      	str	r2, [r3, #28]
 8006782:	e005      	b.n	8006790 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d106      	bne.n	80067b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7fe fbaa 	bl	8004f04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2202      	movs	r2, #2
 80067b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80067d8:	431a      	orrs	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067e2:	431a      	orrs	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	f003 0302 	and.w	r3, r3, #2
 80067ec:	431a      	orrs	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	431a      	orrs	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006800:	431a      	orrs	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800680a:	431a      	orrs	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006814:	ea42 0103 	orr.w	r1, r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	430a      	orrs	r2, r1
 8006826:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	699b      	ldr	r3, [r3, #24]
 800682c:	0c1a      	lsrs	r2, r3, #16
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f002 0204 	and.w	r2, r2, #4
 8006836:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	69da      	ldr	r2, [r3, #28]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006846:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3708      	adds	r7, #8
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b088      	sub	sp, #32
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	603b      	str	r3, [r7, #0]
 800686c:	4613      	mov	r3, r2
 800686e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006870:	2300      	movs	r3, #0
 8006872:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800687a:	2b01      	cmp	r3, #1
 800687c:	d101      	bne.n	8006882 <HAL_SPI_Transmit+0x22>
 800687e:	2302      	movs	r3, #2
 8006880:	e126      	b.n	8006ad0 <HAL_SPI_Transmit+0x270>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800688a:	f7fe fdbb 	bl	8005404 <HAL_GetTick>
 800688e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006890:	88fb      	ldrh	r3, [r7, #6]
 8006892:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b01      	cmp	r3, #1
 800689e:	d002      	beq.n	80068a6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80068a0:	2302      	movs	r3, #2
 80068a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80068a4:	e10b      	b.n	8006abe <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <HAL_SPI_Transmit+0x52>
 80068ac:	88fb      	ldrh	r3, [r7, #6]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d102      	bne.n	80068b8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80068b6:	e102      	b.n	8006abe <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2203      	movs	r2, #3
 80068bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	88fa      	ldrh	r2, [r7, #6]
 80068d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	88fa      	ldrh	r2, [r7, #6]
 80068d6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068fe:	d10f      	bne.n	8006920 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800690e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800691e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800692a:	2b40      	cmp	r3, #64	; 0x40
 800692c:	d007      	beq.n	800693e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800693c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006946:	d14b      	bne.n	80069e0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d002      	beq.n	8006956 <HAL_SPI_Transmit+0xf6>
 8006950:	8afb      	ldrh	r3, [r7, #22]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d13e      	bne.n	80069d4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695a:	881a      	ldrh	r2, [r3, #0]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006966:	1c9a      	adds	r2, r3, #2
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006970:	b29b      	uxth	r3, r3
 8006972:	3b01      	subs	r3, #1
 8006974:	b29a      	uxth	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800697a:	e02b      	b.n	80069d4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f003 0302 	and.w	r3, r3, #2
 8006986:	2b02      	cmp	r3, #2
 8006988:	d112      	bne.n	80069b0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698e:	881a      	ldrh	r2, [r3, #0]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699a:	1c9a      	adds	r2, r3, #2
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	3b01      	subs	r3, #1
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	86da      	strh	r2, [r3, #54]	; 0x36
 80069ae:	e011      	b.n	80069d4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069b0:	f7fe fd28 	bl	8005404 <HAL_GetTick>
 80069b4:	4602      	mov	r2, r0
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d803      	bhi.n	80069c8 <HAL_SPI_Transmit+0x168>
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c6:	d102      	bne.n	80069ce <HAL_SPI_Transmit+0x16e>
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d102      	bne.n	80069d4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80069d2:	e074      	b.n	8006abe <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069d8:	b29b      	uxth	r3, r3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1ce      	bne.n	800697c <HAL_SPI_Transmit+0x11c>
 80069de:	e04c      	b.n	8006a7a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d002      	beq.n	80069ee <HAL_SPI_Transmit+0x18e>
 80069e8:	8afb      	ldrh	r3, [r7, #22]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d140      	bne.n	8006a70 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	330c      	adds	r3, #12
 80069f8:	7812      	ldrb	r2, [r2, #0]
 80069fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a00:	1c5a      	adds	r2, r3, #1
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006a14:	e02c      	b.n	8006a70 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f003 0302 	and.w	r3, r3, #2
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d113      	bne.n	8006a4c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	330c      	adds	r3, #12
 8006a2e:	7812      	ldrb	r2, [r2, #0]
 8006a30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a36:	1c5a      	adds	r2, r3, #1
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	3b01      	subs	r3, #1
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	86da      	strh	r2, [r3, #54]	; 0x36
 8006a4a:	e011      	b.n	8006a70 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a4c:	f7fe fcda 	bl	8005404 <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	683a      	ldr	r2, [r7, #0]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d803      	bhi.n	8006a64 <HAL_SPI_Transmit+0x204>
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a62:	d102      	bne.n	8006a6a <HAL_SPI_Transmit+0x20a>
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d102      	bne.n	8006a70 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006a6e:	e026      	b.n	8006abe <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1cd      	bne.n	8006a16 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a7a:	69ba      	ldr	r2, [r7, #24]
 8006a7c:	6839      	ldr	r1, [r7, #0]
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f000 fbb8 	bl	80071f4 <SPI_EndRxTxTransaction>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d002      	beq.n	8006a90 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2220      	movs	r2, #32
 8006a8e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d10a      	bne.n	8006aae <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a98:	2300      	movs	r3, #0
 8006a9a:	613b      	str	r3, [r7, #16]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	613b      	str	r3, [r7, #16]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	613b      	str	r3, [r7, #16]
 8006aac:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d002      	beq.n	8006abc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	77fb      	strb	r3, [r7, #31]
 8006aba:	e000      	b.n	8006abe <HAL_SPI_Transmit+0x25e>
  }

error:
 8006abc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ace:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3720      	adds	r7, #32
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b088      	sub	sp, #32
 8006adc:	af02      	add	r7, sp, #8
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	603b      	str	r3, [r7, #0]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006af4:	d112      	bne.n	8006b1c <HAL_SPI_Receive+0x44>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10e      	bne.n	8006b1c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2204      	movs	r2, #4
 8006b02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006b06:	88fa      	ldrh	r2, [r7, #6]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	68b9      	ldr	r1, [r7, #8]
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 f8f1 	bl	8006cfa <HAL_SPI_TransmitReceive>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	e0ea      	b.n	8006cf2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d101      	bne.n	8006b2a <HAL_SPI_Receive+0x52>
 8006b26:	2302      	movs	r3, #2
 8006b28:	e0e3      	b.n	8006cf2 <HAL_SPI_Receive+0x21a>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b32:	f7fe fc67 	bl	8005404 <HAL_GetTick>
 8006b36:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d002      	beq.n	8006b4a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006b44:	2302      	movs	r3, #2
 8006b46:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b48:	e0ca      	b.n	8006ce0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d002      	beq.n	8006b56 <HAL_SPI_Receive+0x7e>
 8006b50:	88fb      	ldrh	r3, [r7, #6]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d102      	bne.n	8006b5c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b5a:	e0c1      	b.n	8006ce0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2204      	movs	r2, #4
 8006b60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	88fa      	ldrh	r2, [r7, #6]
 8006b74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	88fa      	ldrh	r2, [r7, #6]
 8006b7a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ba2:	d10f      	bne.n	8006bc4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bb2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006bc2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bce:	2b40      	cmp	r3, #64	; 0x40
 8006bd0:	d007      	beq.n	8006be2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006be0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d162      	bne.n	8006cb0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006bea:	e02e      	b.n	8006c4a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f003 0301 	and.w	r3, r3, #1
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d115      	bne.n	8006c26 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f103 020c 	add.w	r2, r3, #12
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c06:	7812      	ldrb	r2, [r2, #0]
 8006c08:	b2d2      	uxtb	r2, r2
 8006c0a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c10:	1c5a      	adds	r2, r3, #1
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c24:	e011      	b.n	8006c4a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c26:	f7fe fbed 	bl	8005404 <HAL_GetTick>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	683a      	ldr	r2, [r7, #0]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d803      	bhi.n	8006c3e <HAL_SPI_Receive+0x166>
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c3c:	d102      	bne.n	8006c44 <HAL_SPI_Receive+0x16c>
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d102      	bne.n	8006c4a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006c48:	e04a      	b.n	8006ce0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1cb      	bne.n	8006bec <HAL_SPI_Receive+0x114>
 8006c54:	e031      	b.n	8006cba <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f003 0301 	and.w	r3, r3, #1
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d113      	bne.n	8006c8c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68da      	ldr	r2, [r3, #12]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6e:	b292      	uxth	r2, r2
 8006c70:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c76:	1c9a      	adds	r2, r3, #2
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	3b01      	subs	r3, #1
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c8a:	e011      	b.n	8006cb0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c8c:	f7fe fbba 	bl	8005404 <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	683a      	ldr	r2, [r7, #0]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d803      	bhi.n	8006ca4 <HAL_SPI_Receive+0x1cc>
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca2:	d102      	bne.n	8006caa <HAL_SPI_Receive+0x1d2>
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d102      	bne.n	8006cb0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006cae:	e017      	b.n	8006ce0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1cd      	bne.n	8006c56 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	6839      	ldr	r1, [r7, #0]
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f000 fa46 	bl	8007150 <SPI_EndRxTransaction>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d002      	beq.n	8006cd0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2220      	movs	r2, #32
 8006cce:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d002      	beq.n	8006cde <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	75fb      	strb	r3, [r7, #23]
 8006cdc:	e000      	b.n	8006ce0 <HAL_SPI_Receive+0x208>
  }

error :
 8006cde:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3718      	adds	r7, #24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b08c      	sub	sp, #48	; 0x30
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	60f8      	str	r0, [r7, #12]
 8006d02:	60b9      	str	r1, [r7, #8]
 8006d04:	607a      	str	r2, [r7, #4]
 8006d06:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d101      	bne.n	8006d20 <HAL_SPI_TransmitReceive+0x26>
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	e18a      	b.n	8007036 <HAL_SPI_TransmitReceive+0x33c>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d28:	f7fe fb6c 	bl	8005404 <HAL_GetTick>
 8006d2c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006d3e:	887b      	ldrh	r3, [r7, #2]
 8006d40:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d00f      	beq.n	8006d6a <HAL_SPI_TransmitReceive+0x70>
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d50:	d107      	bne.n	8006d62 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d103      	bne.n	8006d62 <HAL_SPI_TransmitReceive+0x68>
 8006d5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d5e:	2b04      	cmp	r3, #4
 8006d60:	d003      	beq.n	8006d6a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006d62:	2302      	movs	r3, #2
 8006d64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006d68:	e15b      	b.n	8007022 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d005      	beq.n	8006d7c <HAL_SPI_TransmitReceive+0x82>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d002      	beq.n	8006d7c <HAL_SPI_TransmitReceive+0x82>
 8006d76:	887b      	ldrh	r3, [r7, #2]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d103      	bne.n	8006d84 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006d82:	e14e      	b.n	8007022 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	2b04      	cmp	r3, #4
 8006d8e:	d003      	beq.n	8006d98 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2205      	movs	r2, #5
 8006d94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	887a      	ldrh	r2, [r7, #2]
 8006da8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	887a      	ldrh	r2, [r7, #2]
 8006dae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	887a      	ldrh	r2, [r7, #2]
 8006dba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	887a      	ldrh	r2, [r7, #2]
 8006dc0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd8:	2b40      	cmp	r3, #64	; 0x40
 8006dda:	d007      	beq.n	8006dec <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006df4:	d178      	bne.n	8006ee8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d002      	beq.n	8006e04 <HAL_SPI_TransmitReceive+0x10a>
 8006dfe:	8b7b      	ldrh	r3, [r7, #26]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d166      	bne.n	8006ed2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e08:	881a      	ldrh	r2, [r3, #0]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e14:	1c9a      	adds	r2, r3, #2
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	3b01      	subs	r3, #1
 8006e22:	b29a      	uxth	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e28:	e053      	b.n	8006ed2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	f003 0302 	and.w	r3, r3, #2
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d11b      	bne.n	8006e70 <HAL_SPI_TransmitReceive+0x176>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d016      	beq.n	8006e70 <HAL_SPI_TransmitReceive+0x176>
 8006e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d113      	bne.n	8006e70 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4c:	881a      	ldrh	r2, [r3, #0]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e58:	1c9a      	adds	r2, r3, #2
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	3b01      	subs	r3, #1
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	f003 0301 	and.w	r3, r3, #1
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d119      	bne.n	8006eb2 <HAL_SPI_TransmitReceive+0x1b8>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d014      	beq.n	8006eb2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68da      	ldr	r2, [r3, #12]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e92:	b292      	uxth	r2, r2
 8006e94:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9a:	1c9a      	adds	r2, r3, #2
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006eb2:	f7fe faa7 	bl	8005404 <HAL_GetTick>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d807      	bhi.n	8006ed2 <HAL_SPI_TransmitReceive+0x1d8>
 8006ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec8:	d003      	beq.n	8006ed2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006ed0:	e0a7      	b.n	8007022 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1a6      	bne.n	8006e2a <HAL_SPI_TransmitReceive+0x130>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1a1      	bne.n	8006e2a <HAL_SPI_TransmitReceive+0x130>
 8006ee6:	e07c      	b.n	8006fe2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d002      	beq.n	8006ef6 <HAL_SPI_TransmitReceive+0x1fc>
 8006ef0:	8b7b      	ldrh	r3, [r7, #26]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d16b      	bne.n	8006fce <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	330c      	adds	r3, #12
 8006f00:	7812      	ldrb	r2, [r2, #0]
 8006f02:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f08:	1c5a      	adds	r2, r3, #1
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	3b01      	subs	r3, #1
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f1c:	e057      	b.n	8006fce <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f003 0302 	and.w	r3, r3, #2
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d11c      	bne.n	8006f66 <HAL_SPI_TransmitReceive+0x26c>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d017      	beq.n	8006f66 <HAL_SPI_TransmitReceive+0x26c>
 8006f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d114      	bne.n	8006f66 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	330c      	adds	r3, #12
 8006f46:	7812      	ldrb	r2, [r2, #0]
 8006f48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4e:	1c5a      	adds	r2, r3, #1
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f62:	2300      	movs	r3, #0
 8006f64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	f003 0301 	and.w	r3, r3, #1
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d119      	bne.n	8006fa8 <HAL_SPI_TransmitReceive+0x2ae>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d014      	beq.n	8006fa8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68da      	ldr	r2, [r3, #12]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f88:	b2d2      	uxtb	r2, r2
 8006f8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f90:	1c5a      	adds	r2, r3, #1
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006fa8:	f7fe fa2c 	bl	8005404 <HAL_GetTick>
 8006fac:	4602      	mov	r2, r0
 8006fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d803      	bhi.n	8006fc0 <HAL_SPI_TransmitReceive+0x2c6>
 8006fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fbe:	d102      	bne.n	8006fc6 <HAL_SPI_TransmitReceive+0x2cc>
 8006fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d103      	bne.n	8006fce <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006fcc:	e029      	b.n	8007022 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1a2      	bne.n	8006f1e <HAL_SPI_TransmitReceive+0x224>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d19d      	bne.n	8006f1e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fe4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f000 f904 	bl	80071f4 <SPI_EndRxTxTransaction>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d006      	beq.n	8007000 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2220      	movs	r2, #32
 8006ffc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006ffe:	e010      	b.n	8007022 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10b      	bne.n	8007020 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007008:	2300      	movs	r3, #0
 800700a:	617b      	str	r3, [r7, #20]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	617b      	str	r3, [r7, #20]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	617b      	str	r3, [r7, #20]
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	e000      	b.n	8007022 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007020:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007032:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007036:	4618      	mov	r0, r3
 8007038:	3730      	adds	r7, #48	; 0x30
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
	...

08007040 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b088      	sub	sp, #32
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	603b      	str	r3, [r7, #0]
 800704c:	4613      	mov	r3, r2
 800704e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007050:	f7fe f9d8 	bl	8005404 <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007058:	1a9b      	subs	r3, r3, r2
 800705a:	683a      	ldr	r2, [r7, #0]
 800705c:	4413      	add	r3, r2
 800705e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007060:	f7fe f9d0 	bl	8005404 <HAL_GetTick>
 8007064:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007066:	4b39      	ldr	r3, [pc, #228]	; (800714c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	015b      	lsls	r3, r3, #5
 800706c:	0d1b      	lsrs	r3, r3, #20
 800706e:	69fa      	ldr	r2, [r7, #28]
 8007070:	fb02 f303 	mul.w	r3, r2, r3
 8007074:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007076:	e054      	b.n	8007122 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800707e:	d050      	beq.n	8007122 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007080:	f7fe f9c0 	bl	8005404 <HAL_GetTick>
 8007084:	4602      	mov	r2, r0
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	69fa      	ldr	r2, [r7, #28]
 800708c:	429a      	cmp	r2, r3
 800708e:	d902      	bls.n	8007096 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d13d      	bne.n	8007112 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80070a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070ae:	d111      	bne.n	80070d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070b8:	d004      	beq.n	80070c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070c2:	d107      	bne.n	80070d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070dc:	d10f      	bne.n	80070fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070ec:	601a      	str	r2, [r3, #0]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800710e:	2303      	movs	r3, #3
 8007110:	e017      	b.n	8007142 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d101      	bne.n	800711c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007118:	2300      	movs	r3, #0
 800711a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	3b01      	subs	r3, #1
 8007120:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	689a      	ldr	r2, [r3, #8]
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	4013      	ands	r3, r2
 800712c:	68ba      	ldr	r2, [r7, #8]
 800712e:	429a      	cmp	r2, r3
 8007130:	bf0c      	ite	eq
 8007132:	2301      	moveq	r3, #1
 8007134:	2300      	movne	r3, #0
 8007136:	b2db      	uxtb	r3, r3
 8007138:	461a      	mov	r2, r3
 800713a:	79fb      	ldrb	r3, [r7, #7]
 800713c:	429a      	cmp	r2, r3
 800713e:	d19b      	bne.n	8007078 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3720      	adds	r7, #32
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	20000000 	.word	0x20000000

08007150 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af02      	add	r7, sp, #8
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007164:	d111      	bne.n	800718a <SPI_EndRxTransaction+0x3a>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800716e:	d004      	beq.n	800717a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007178:	d107      	bne.n	800718a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007188:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007192:	d117      	bne.n	80071c4 <SPI_EndRxTransaction+0x74>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800719c:	d112      	bne.n	80071c4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	9300      	str	r3, [sp, #0]
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	2200      	movs	r2, #0
 80071a6:	2101      	movs	r1, #1
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f7ff ff49 	bl	8007040 <SPI_WaitFlagStateUntilTimeout>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d01a      	beq.n	80071ea <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b8:	f043 0220 	orr.w	r2, r3, #32
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80071c0:	2303      	movs	r3, #3
 80071c2:	e013      	b.n	80071ec <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	2200      	movs	r2, #0
 80071cc:	2180      	movs	r1, #128	; 0x80
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f7ff ff36 	bl	8007040 <SPI_WaitFlagStateUntilTimeout>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d007      	beq.n	80071ea <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071de:	f043 0220 	orr.w	r2, r3, #32
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e000      	b.n	80071ec <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b086      	sub	sp, #24
 80071f8:	af02      	add	r7, sp, #8
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	9300      	str	r3, [sp, #0]
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	2200      	movs	r2, #0
 8007208:	2180      	movs	r1, #128	; 0x80
 800720a:	68f8      	ldr	r0, [r7, #12]
 800720c:	f7ff ff18 	bl	8007040 <SPI_WaitFlagStateUntilTimeout>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d007      	beq.n	8007226 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800721a:	f043 0220 	orr.w	r2, r3, #32
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	e000      	b.n	8007228 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d101      	bne.n	8007242 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e041      	b.n	80072c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007248:	b2db      	uxtb	r3, r3
 800724a:	2b00      	cmp	r3, #0
 800724c:	d106      	bne.n	800725c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f7fd fee8 	bl	800502c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2202      	movs	r2, #2
 8007260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	3304      	adds	r3, #4
 800726c:	4619      	mov	r1, r3
 800726e:	4610      	mov	r0, r2
 8007270:	f000 faf4 	bl	800785c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
	...

080072d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d001      	beq.n	80072e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e032      	b.n	800734e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2202      	movs	r2, #2
 80072ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a18      	ldr	r2, [pc, #96]	; (8007358 <HAL_TIM_Base_Start+0x88>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d00e      	beq.n	8007318 <HAL_TIM_Base_Start+0x48>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007302:	d009      	beq.n	8007318 <HAL_TIM_Base_Start+0x48>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a14      	ldr	r2, [pc, #80]	; (800735c <HAL_TIM_Base_Start+0x8c>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d004      	beq.n	8007318 <HAL_TIM_Base_Start+0x48>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a13      	ldr	r2, [pc, #76]	; (8007360 <HAL_TIM_Base_Start+0x90>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d111      	bne.n	800733c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	f003 0307 	and.w	r3, r3, #7
 8007322:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2b06      	cmp	r3, #6
 8007328:	d010      	beq.n	800734c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f042 0201 	orr.w	r2, r2, #1
 8007338:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800733a:	e007      	b.n	800734c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f042 0201 	orr.w	r2, r2, #1
 800734a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3714      	adds	r7, #20
 8007352:	46bd      	mov	sp, r7
 8007354:	bc80      	pop	{r7}
 8007356:	4770      	bx	lr
 8007358:	40012c00 	.word	0x40012c00
 800735c:	40000400 	.word	0x40000400
 8007360:	40000800 	.word	0x40000800

08007364 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d101      	bne.n	8007376 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e041      	b.n	80073fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800737c:	b2db      	uxtb	r3, r3
 800737e:	2b00      	cmp	r3, #0
 8007380:	d106      	bne.n	8007390 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f839 	bl	8007402 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2202      	movs	r2, #2
 8007394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	3304      	adds	r3, #4
 80073a0:	4619      	mov	r1, r3
 80073a2:	4610      	mov	r0, r2
 80073a4:	f000 fa5a 	bl	800785c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3708      	adds	r7, #8
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007402:	b480      	push	{r7}
 8007404:	b083      	sub	sp, #12
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800740a:	bf00      	nop
 800740c:	370c      	adds	r7, #12
 800740e:	46bd      	mov	sp, r7
 8007410:	bc80      	pop	{r7}
 8007412:	4770      	bx	lr

08007414 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d109      	bne.n	8007438 <HAL_TIM_PWM_Start+0x24>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800742a:	b2db      	uxtb	r3, r3
 800742c:	2b01      	cmp	r3, #1
 800742e:	bf14      	ite	ne
 8007430:	2301      	movne	r3, #1
 8007432:	2300      	moveq	r3, #0
 8007434:	b2db      	uxtb	r3, r3
 8007436:	e022      	b.n	800747e <HAL_TIM_PWM_Start+0x6a>
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2b04      	cmp	r3, #4
 800743c:	d109      	bne.n	8007452 <HAL_TIM_PWM_Start+0x3e>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b01      	cmp	r3, #1
 8007448:	bf14      	ite	ne
 800744a:	2301      	movne	r3, #1
 800744c:	2300      	moveq	r3, #0
 800744e:	b2db      	uxtb	r3, r3
 8007450:	e015      	b.n	800747e <HAL_TIM_PWM_Start+0x6a>
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	2b08      	cmp	r3, #8
 8007456:	d109      	bne.n	800746c <HAL_TIM_PWM_Start+0x58>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b01      	cmp	r3, #1
 8007462:	bf14      	ite	ne
 8007464:	2301      	movne	r3, #1
 8007466:	2300      	moveq	r3, #0
 8007468:	b2db      	uxtb	r3, r3
 800746a:	e008      	b.n	800747e <HAL_TIM_PWM_Start+0x6a>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007472:	b2db      	uxtb	r3, r3
 8007474:	2b01      	cmp	r3, #1
 8007476:	bf14      	ite	ne
 8007478:	2301      	movne	r3, #1
 800747a:	2300      	moveq	r3, #0
 800747c:	b2db      	uxtb	r3, r3
 800747e:	2b00      	cmp	r3, #0
 8007480:	d001      	beq.n	8007486 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	e05e      	b.n	8007544 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d104      	bne.n	8007496 <HAL_TIM_PWM_Start+0x82>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2202      	movs	r2, #2
 8007490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007494:	e013      	b.n	80074be <HAL_TIM_PWM_Start+0xaa>
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	2b04      	cmp	r3, #4
 800749a:	d104      	bne.n	80074a6 <HAL_TIM_PWM_Start+0x92>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2202      	movs	r2, #2
 80074a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074a4:	e00b      	b.n	80074be <HAL_TIM_PWM_Start+0xaa>
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	2b08      	cmp	r3, #8
 80074aa:	d104      	bne.n	80074b6 <HAL_TIM_PWM_Start+0xa2>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2202      	movs	r2, #2
 80074b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074b4:	e003      	b.n	80074be <HAL_TIM_PWM_Start+0xaa>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2202      	movs	r2, #2
 80074ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2201      	movs	r2, #1
 80074c4:	6839      	ldr	r1, [r7, #0]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 fc48 	bl	8007d5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a1e      	ldr	r2, [pc, #120]	; (800754c <HAL_TIM_PWM_Start+0x138>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d107      	bne.n	80074e6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a18      	ldr	r2, [pc, #96]	; (800754c <HAL_TIM_PWM_Start+0x138>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d00e      	beq.n	800750e <HAL_TIM_PWM_Start+0xfa>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074f8:	d009      	beq.n	800750e <HAL_TIM_PWM_Start+0xfa>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a14      	ldr	r2, [pc, #80]	; (8007550 <HAL_TIM_PWM_Start+0x13c>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d004      	beq.n	800750e <HAL_TIM_PWM_Start+0xfa>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a12      	ldr	r2, [pc, #72]	; (8007554 <HAL_TIM_PWM_Start+0x140>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d111      	bne.n	8007532 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	f003 0307 	and.w	r3, r3, #7
 8007518:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2b06      	cmp	r3, #6
 800751e:	d010      	beq.n	8007542 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f042 0201 	orr.w	r2, r2, #1
 800752e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007530:	e007      	b.n	8007542 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f042 0201 	orr.w	r2, r2, #1
 8007540:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	40012c00 	.word	0x40012c00
 8007550:	40000400 	.word	0x40000400
 8007554:	40000800 	.word	0x40000800

08007558 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800756a:	2b01      	cmp	r3, #1
 800756c:	d101      	bne.n	8007572 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800756e:	2302      	movs	r3, #2
 8007570:	e0ac      	b.n	80076cc <HAL_TIM_PWM_ConfigChannel+0x174>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b0c      	cmp	r3, #12
 800757e:	f200 809f 	bhi.w	80076c0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8007582:	a201      	add	r2, pc, #4	; (adr r2, 8007588 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007588:	080075bd 	.word	0x080075bd
 800758c:	080076c1 	.word	0x080076c1
 8007590:	080076c1 	.word	0x080076c1
 8007594:	080076c1 	.word	0x080076c1
 8007598:	080075fd 	.word	0x080075fd
 800759c:	080076c1 	.word	0x080076c1
 80075a0:	080076c1 	.word	0x080076c1
 80075a4:	080076c1 	.word	0x080076c1
 80075a8:	0800763f 	.word	0x0800763f
 80075ac:	080076c1 	.word	0x080076c1
 80075b0:	080076c1 	.word	0x080076c1
 80075b4:	080076c1 	.word	0x080076c1
 80075b8:	0800767f 	.word	0x0800767f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68b9      	ldr	r1, [r7, #8]
 80075c2:	4618      	mov	r0, r3
 80075c4:	f000 f9ac 	bl	8007920 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	699a      	ldr	r2, [r3, #24]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f042 0208 	orr.w	r2, r2, #8
 80075d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	699a      	ldr	r2, [r3, #24]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f022 0204 	bic.w	r2, r2, #4
 80075e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6999      	ldr	r1, [r3, #24]
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	691a      	ldr	r2, [r3, #16]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	430a      	orrs	r2, r1
 80075f8:	619a      	str	r2, [r3, #24]
      break;
 80075fa:	e062      	b.n	80076c2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68b9      	ldr	r1, [r7, #8]
 8007602:	4618      	mov	r0, r3
 8007604:	f000 f9f2 	bl	80079ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	699a      	ldr	r2, [r3, #24]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	699a      	ldr	r2, [r3, #24]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6999      	ldr	r1, [r3, #24]
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	021a      	lsls	r2, r3, #8
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	430a      	orrs	r2, r1
 800763a:	619a      	str	r2, [r3, #24]
      break;
 800763c:	e041      	b.n	80076c2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68b9      	ldr	r1, [r7, #8]
 8007644:	4618      	mov	r0, r3
 8007646:	f000 fa3b 	bl	8007ac0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	69da      	ldr	r2, [r3, #28]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f042 0208 	orr.w	r2, r2, #8
 8007658:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	69da      	ldr	r2, [r3, #28]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f022 0204 	bic.w	r2, r2, #4
 8007668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	69d9      	ldr	r1, [r3, #28]
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	691a      	ldr	r2, [r3, #16]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	430a      	orrs	r2, r1
 800767a:	61da      	str	r2, [r3, #28]
      break;
 800767c:	e021      	b.n	80076c2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68b9      	ldr	r1, [r7, #8]
 8007684:	4618      	mov	r0, r3
 8007686:	f000 fa85 	bl	8007b94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	69da      	ldr	r2, [r3, #28]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007698:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	69da      	ldr	r2, [r3, #28]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	69d9      	ldr	r1, [r3, #28]
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	021a      	lsls	r2, r3, #8
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	430a      	orrs	r2, r1
 80076bc:	61da      	str	r2, [r3, #28]
      break;
 80076be:	e000      	b.n	80076c2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80076c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d101      	bne.n	80076ec <HAL_TIM_ConfigClockSource+0x18>
 80076e8:	2302      	movs	r3, #2
 80076ea:	e0b3      	b.n	8007854 <HAL_TIM_ConfigClockSource+0x180>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2202      	movs	r2, #2
 80076f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800770a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007712:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007724:	d03e      	beq.n	80077a4 <HAL_TIM_ConfigClockSource+0xd0>
 8007726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800772a:	f200 8087 	bhi.w	800783c <HAL_TIM_ConfigClockSource+0x168>
 800772e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007732:	f000 8085 	beq.w	8007840 <HAL_TIM_ConfigClockSource+0x16c>
 8007736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800773a:	d87f      	bhi.n	800783c <HAL_TIM_ConfigClockSource+0x168>
 800773c:	2b70      	cmp	r3, #112	; 0x70
 800773e:	d01a      	beq.n	8007776 <HAL_TIM_ConfigClockSource+0xa2>
 8007740:	2b70      	cmp	r3, #112	; 0x70
 8007742:	d87b      	bhi.n	800783c <HAL_TIM_ConfigClockSource+0x168>
 8007744:	2b60      	cmp	r3, #96	; 0x60
 8007746:	d050      	beq.n	80077ea <HAL_TIM_ConfigClockSource+0x116>
 8007748:	2b60      	cmp	r3, #96	; 0x60
 800774a:	d877      	bhi.n	800783c <HAL_TIM_ConfigClockSource+0x168>
 800774c:	2b50      	cmp	r3, #80	; 0x50
 800774e:	d03c      	beq.n	80077ca <HAL_TIM_ConfigClockSource+0xf6>
 8007750:	2b50      	cmp	r3, #80	; 0x50
 8007752:	d873      	bhi.n	800783c <HAL_TIM_ConfigClockSource+0x168>
 8007754:	2b40      	cmp	r3, #64	; 0x40
 8007756:	d058      	beq.n	800780a <HAL_TIM_ConfigClockSource+0x136>
 8007758:	2b40      	cmp	r3, #64	; 0x40
 800775a:	d86f      	bhi.n	800783c <HAL_TIM_ConfigClockSource+0x168>
 800775c:	2b30      	cmp	r3, #48	; 0x30
 800775e:	d064      	beq.n	800782a <HAL_TIM_ConfigClockSource+0x156>
 8007760:	2b30      	cmp	r3, #48	; 0x30
 8007762:	d86b      	bhi.n	800783c <HAL_TIM_ConfigClockSource+0x168>
 8007764:	2b20      	cmp	r3, #32
 8007766:	d060      	beq.n	800782a <HAL_TIM_ConfigClockSource+0x156>
 8007768:	2b20      	cmp	r3, #32
 800776a:	d867      	bhi.n	800783c <HAL_TIM_ConfigClockSource+0x168>
 800776c:	2b00      	cmp	r3, #0
 800776e:	d05c      	beq.n	800782a <HAL_TIM_ConfigClockSource+0x156>
 8007770:	2b10      	cmp	r3, #16
 8007772:	d05a      	beq.n	800782a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007774:	e062      	b.n	800783c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6818      	ldr	r0, [r3, #0]
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	6899      	ldr	r1, [r3, #8]
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	685a      	ldr	r2, [r3, #4]
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	f000 faca 	bl	8007d1e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007798:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	609a      	str	r2, [r3, #8]
      break;
 80077a2:	e04e      	b.n	8007842 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6818      	ldr	r0, [r3, #0]
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	6899      	ldr	r1, [r3, #8]
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	685a      	ldr	r2, [r3, #4]
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	f000 fab3 	bl	8007d1e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	689a      	ldr	r2, [r3, #8]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077c6:	609a      	str	r2, [r3, #8]
      break;
 80077c8:	e03b      	b.n	8007842 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6818      	ldr	r0, [r3, #0]
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	6859      	ldr	r1, [r3, #4]
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	461a      	mov	r2, r3
 80077d8:	f000 fa2a 	bl	8007c30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2150      	movs	r1, #80	; 0x50
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 fa81 	bl	8007cea <TIM_ITRx_SetConfig>
      break;
 80077e8:	e02b      	b.n	8007842 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6818      	ldr	r0, [r3, #0]
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	6859      	ldr	r1, [r3, #4]
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	461a      	mov	r2, r3
 80077f8:	f000 fa48 	bl	8007c8c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2160      	movs	r1, #96	; 0x60
 8007802:	4618      	mov	r0, r3
 8007804:	f000 fa71 	bl	8007cea <TIM_ITRx_SetConfig>
      break;
 8007808:	e01b      	b.n	8007842 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6818      	ldr	r0, [r3, #0]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	6859      	ldr	r1, [r3, #4]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	461a      	mov	r2, r3
 8007818:	f000 fa0a 	bl	8007c30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2140      	movs	r1, #64	; 0x40
 8007822:	4618      	mov	r0, r3
 8007824:	f000 fa61 	bl	8007cea <TIM_ITRx_SetConfig>
      break;
 8007828:	e00b      	b.n	8007842 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4619      	mov	r1, r3
 8007834:	4610      	mov	r0, r2
 8007836:	f000 fa58 	bl	8007cea <TIM_ITRx_SetConfig>
        break;
 800783a:	e002      	b.n	8007842 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800783c:	bf00      	nop
 800783e:	e000      	b.n	8007842 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007840:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2201      	movs	r2, #1
 8007846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a29      	ldr	r2, [pc, #164]	; (8007914 <TIM_Base_SetConfig+0xb8>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d00b      	beq.n	800788c <TIM_Base_SetConfig+0x30>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800787a:	d007      	beq.n	800788c <TIM_Base_SetConfig+0x30>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a26      	ldr	r2, [pc, #152]	; (8007918 <TIM_Base_SetConfig+0xbc>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d003      	beq.n	800788c <TIM_Base_SetConfig+0x30>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4a25      	ldr	r2, [pc, #148]	; (800791c <TIM_Base_SetConfig+0xc0>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d108      	bne.n	800789e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	4313      	orrs	r3, r2
 800789c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a1c      	ldr	r2, [pc, #112]	; (8007914 <TIM_Base_SetConfig+0xb8>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d00b      	beq.n	80078be <TIM_Base_SetConfig+0x62>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ac:	d007      	beq.n	80078be <TIM_Base_SetConfig+0x62>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a19      	ldr	r2, [pc, #100]	; (8007918 <TIM_Base_SetConfig+0xbc>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d003      	beq.n	80078be <TIM_Base_SetConfig+0x62>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a18      	ldr	r2, [pc, #96]	; (800791c <TIM_Base_SetConfig+0xc0>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d108      	bne.n	80078d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	695b      	ldr	r3, [r3, #20]
 80078da:	4313      	orrs	r3, r2
 80078dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	68fa      	ldr	r2, [r7, #12]
 80078e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	689a      	ldr	r2, [r3, #8]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a07      	ldr	r2, [pc, #28]	; (8007914 <TIM_Base_SetConfig+0xb8>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d103      	bne.n	8007904 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	691a      	ldr	r2, [r3, #16]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	615a      	str	r2, [r3, #20]
}
 800790a:	bf00      	nop
 800790c:	3714      	adds	r7, #20
 800790e:	46bd      	mov	sp, r7
 8007910:	bc80      	pop	{r7}
 8007912:	4770      	bx	lr
 8007914:	40012c00 	.word	0x40012c00
 8007918:	40000400 	.word	0x40000400
 800791c:	40000800 	.word	0x40000800

08007920 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007920:	b480      	push	{r7}
 8007922:	b087      	sub	sp, #28
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	f023 0201 	bic.w	r2, r3, #1
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800794e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f023 0303 	bic.w	r3, r3, #3
 8007956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	4313      	orrs	r3, r2
 8007960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	f023 0302 	bic.w	r3, r3, #2
 8007968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	697a      	ldr	r2, [r7, #20]
 8007970:	4313      	orrs	r3, r2
 8007972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a1c      	ldr	r2, [pc, #112]	; (80079e8 <TIM_OC1_SetConfig+0xc8>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d10c      	bne.n	8007996 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	f023 0308 	bic.w	r3, r3, #8
 8007982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	4313      	orrs	r3, r2
 800798c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	f023 0304 	bic.w	r3, r3, #4
 8007994:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a13      	ldr	r2, [pc, #76]	; (80079e8 <TIM_OC1_SetConfig+0xc8>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d111      	bne.n	80079c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	695b      	ldr	r3, [r3, #20]
 80079b2:	693a      	ldr	r2, [r7, #16]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	699b      	ldr	r3, [r3, #24]
 80079bc:	693a      	ldr	r2, [r7, #16]
 80079be:	4313      	orrs	r3, r2
 80079c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	693a      	ldr	r2, [r7, #16]
 80079c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	685a      	ldr	r2, [r3, #4]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	697a      	ldr	r2, [r7, #20]
 80079da:	621a      	str	r2, [r3, #32]
}
 80079dc:	bf00      	nop
 80079de:	371c      	adds	r7, #28
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bc80      	pop	{r7}
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	40012c00 	.word	0x40012c00

080079ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b087      	sub	sp, #28
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a1b      	ldr	r3, [r3, #32]
 80079fa:	f023 0210 	bic.w	r2, r3, #16
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a1b      	ldr	r3, [r3, #32]
 8007a06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	021b      	lsls	r3, r3, #8
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	f023 0320 	bic.w	r3, r3, #32
 8007a36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	011b      	lsls	r3, r3, #4
 8007a3e:	697a      	ldr	r2, [r7, #20]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a1d      	ldr	r2, [pc, #116]	; (8007abc <TIM_OC2_SetConfig+0xd0>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d10d      	bne.n	8007a68 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	011b      	lsls	r3, r3, #4
 8007a5a:	697a      	ldr	r2, [r7, #20]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a14      	ldr	r2, [pc, #80]	; (8007abc <TIM_OC2_SetConfig+0xd0>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d113      	bne.n	8007a98 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	695b      	ldr	r3, [r3, #20]
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	693a      	ldr	r2, [r7, #16]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	699b      	ldr	r3, [r3, #24]
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	693a      	ldr	r2, [r7, #16]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	693a      	ldr	r2, [r7, #16]
 8007a9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	685a      	ldr	r2, [r3, #4]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	697a      	ldr	r2, [r7, #20]
 8007ab0:	621a      	str	r2, [r3, #32]
}
 8007ab2:	bf00      	nop
 8007ab4:	371c      	adds	r7, #28
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bc80      	pop	{r7}
 8007aba:	4770      	bx	lr
 8007abc:	40012c00 	.word	0x40012c00

08007ac0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b087      	sub	sp, #28
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a1b      	ldr	r3, [r3, #32]
 8007ace:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a1b      	ldr	r3, [r3, #32]
 8007ada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	69db      	ldr	r3, [r3, #28]
 8007ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f023 0303 	bic.w	r3, r3, #3
 8007af6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68fa      	ldr	r2, [r7, #12]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	021b      	lsls	r3, r3, #8
 8007b10:	697a      	ldr	r2, [r7, #20]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a1d      	ldr	r2, [pc, #116]	; (8007b90 <TIM_OC3_SetConfig+0xd0>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d10d      	bne.n	8007b3a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	021b      	lsls	r3, r3, #8
 8007b2c:	697a      	ldr	r2, [r7, #20]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a14      	ldr	r2, [pc, #80]	; (8007b90 <TIM_OC3_SetConfig+0xd0>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d113      	bne.n	8007b6a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	695b      	ldr	r3, [r3, #20]
 8007b56:	011b      	lsls	r3, r3, #4
 8007b58:	693a      	ldr	r2, [r7, #16]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	011b      	lsls	r3, r3, #4
 8007b64:	693a      	ldr	r2, [r7, #16]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	693a      	ldr	r2, [r7, #16]
 8007b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	685a      	ldr	r2, [r3, #4]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	697a      	ldr	r2, [r7, #20]
 8007b82:	621a      	str	r2, [r3, #32]
}
 8007b84:	bf00      	nop
 8007b86:	371c      	adds	r7, #28
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bc80      	pop	{r7}
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	40012c00 	.word	0x40012c00

08007b94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b087      	sub	sp, #28
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a1b      	ldr	r3, [r3, #32]
 8007ba2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a1b      	ldr	r3, [r3, #32]
 8007bae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	69db      	ldr	r3, [r3, #28]
 8007bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	021b      	lsls	r3, r3, #8
 8007bd2:	68fa      	ldr	r2, [r7, #12]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	031b      	lsls	r3, r3, #12
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a0f      	ldr	r2, [pc, #60]	; (8007c2c <TIM_OC4_SetConfig+0x98>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d109      	bne.n	8007c08 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	695b      	ldr	r3, [r3, #20]
 8007c00:	019b      	lsls	r3, r3, #6
 8007c02:	697a      	ldr	r2, [r7, #20]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	697a      	ldr	r2, [r7, #20]
 8007c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	685a      	ldr	r2, [r3, #4]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	693a      	ldr	r2, [r7, #16]
 8007c20:	621a      	str	r2, [r3, #32]
}
 8007c22:	bf00      	nop
 8007c24:	371c      	adds	r7, #28
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bc80      	pop	{r7}
 8007c2a:	4770      	bx	lr
 8007c2c:	40012c00 	.word	0x40012c00

08007c30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b087      	sub	sp, #28
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6a1b      	ldr	r3, [r3, #32]
 8007c40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6a1b      	ldr	r3, [r3, #32]
 8007c46:	f023 0201 	bic.w	r2, r3, #1
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	011b      	lsls	r3, r3, #4
 8007c60:	693a      	ldr	r2, [r7, #16]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	f023 030a 	bic.w	r3, r3, #10
 8007c6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c6e:	697a      	ldr	r2, [r7, #20]
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	693a      	ldr	r2, [r7, #16]
 8007c7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	697a      	ldr	r2, [r7, #20]
 8007c80:	621a      	str	r2, [r3, #32]
}
 8007c82:	bf00      	nop
 8007c84:	371c      	adds	r7, #28
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bc80      	pop	{r7}
 8007c8a:	4770      	bx	lr

08007c8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b087      	sub	sp, #28
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6a1b      	ldr	r3, [r3, #32]
 8007c9c:	f023 0210 	bic.w	r2, r3, #16
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6a1b      	ldr	r3, [r3, #32]
 8007cae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007cb6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	031b      	lsls	r3, r3, #12
 8007cbc:	697a      	ldr	r2, [r7, #20]
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007cc8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	011b      	lsls	r3, r3, #4
 8007cce:	693a      	ldr	r2, [r7, #16]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	697a      	ldr	r2, [r7, #20]
 8007cd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	693a      	ldr	r2, [r7, #16]
 8007cde:	621a      	str	r2, [r3, #32]
}
 8007ce0:	bf00      	nop
 8007ce2:	371c      	adds	r7, #28
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bc80      	pop	{r7}
 8007ce8:	4770      	bx	lr

08007cea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007cea:	b480      	push	{r7}
 8007cec:	b085      	sub	sp, #20
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
 8007cf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	f043 0307 	orr.w	r3, r3, #7
 8007d0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	609a      	str	r2, [r3, #8]
}
 8007d14:	bf00      	nop
 8007d16:	3714      	adds	r7, #20
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bc80      	pop	{r7}
 8007d1c:	4770      	bx	lr

08007d1e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b087      	sub	sp, #28
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	60f8      	str	r0, [r7, #12]
 8007d26:	60b9      	str	r1, [r7, #8]
 8007d28:	607a      	str	r2, [r7, #4]
 8007d2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d38:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	021a      	lsls	r2, r3, #8
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	431a      	orrs	r2, r3
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	697a      	ldr	r2, [r7, #20]
 8007d50:	609a      	str	r2, [r3, #8]
}
 8007d52:	bf00      	nop
 8007d54:	371c      	adds	r7, #28
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bc80      	pop	{r7}
 8007d5a:	4770      	bx	lr

08007d5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b087      	sub	sp, #28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	f003 031f 	and.w	r3, r3, #31
 8007d6e:	2201      	movs	r2, #1
 8007d70:	fa02 f303 	lsl.w	r3, r2, r3
 8007d74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6a1a      	ldr	r2, [r3, #32]
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	43db      	mvns	r3, r3
 8007d7e:	401a      	ands	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6a1a      	ldr	r2, [r3, #32]
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	f003 031f 	and.w	r3, r3, #31
 8007d8e:	6879      	ldr	r1, [r7, #4]
 8007d90:	fa01 f303 	lsl.w	r3, r1, r3
 8007d94:	431a      	orrs	r2, r3
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	621a      	str	r2, [r3, #32]
}
 8007d9a:	bf00      	nop
 8007d9c:	371c      	adds	r7, #28
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bc80      	pop	{r7}
 8007da2:	4770      	bx	lr

08007da4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d101      	bne.n	8007dbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007db8:	2302      	movs	r3, #2
 8007dba:	e046      	b.n	8007e4a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2202      	movs	r2, #2
 8007dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007de2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a16      	ldr	r2, [pc, #88]	; (8007e54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d00e      	beq.n	8007e1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e08:	d009      	beq.n	8007e1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a12      	ldr	r2, [pc, #72]	; (8007e58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d004      	beq.n	8007e1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a10      	ldr	r2, [pc, #64]	; (8007e5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d10c      	bne.n	8007e38 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68ba      	ldr	r2, [r7, #8]
 8007e36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3714      	adds	r7, #20
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bc80      	pop	{r7}
 8007e52:	4770      	bx	lr
 8007e54:	40012c00 	.word	0x40012c00
 8007e58:	40000400 	.word	0x40000400
 8007e5c:	40000800 	.word	0x40000800

08007e60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d101      	bne.n	8007e7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007e78:	2302      	movs	r3, #2
 8007e7a:	e03d      	b.n	8007ef8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	695b      	ldr	r3, [r3, #20]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	69db      	ldr	r3, [r3, #28]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3714      	adds	r7, #20
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bc80      	pop	{r7}
 8007f00:	4770      	bx	lr

08007f02 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b082      	sub	sp, #8
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d101      	bne.n	8007f14 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	e03f      	b.n	8007f94 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d106      	bne.n	8007f2e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f7fd f8e3 	bl	80050f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2224      	movs	r2, #36	; 0x24
 8007f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68da      	ldr	r2, [r3, #12]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f44:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 f904 	bl	8008154 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	691a      	ldr	r2, [r3, #16]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f5a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	695a      	ldr	r2, [r3, #20]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f6a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68da      	ldr	r2, [r3, #12]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f7a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2220      	movs	r2, #32
 8007f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2220      	movs	r2, #32
 8007f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3708      	adds	r7, #8
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b08a      	sub	sp, #40	; 0x28
 8007fa0:	af02      	add	r7, sp, #8
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	603b      	str	r3, [r7, #0]
 8007fa8:	4613      	mov	r3, r2
 8007faa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007fac:	2300      	movs	r3, #0
 8007fae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	2b20      	cmp	r3, #32
 8007fba:	d17c      	bne.n	80080b6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d002      	beq.n	8007fc8 <HAL_UART_Transmit+0x2c>
 8007fc2:	88fb      	ldrh	r3, [r7, #6]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d101      	bne.n	8007fcc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e075      	b.n	80080b8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d101      	bne.n	8007fda <HAL_UART_Transmit+0x3e>
 8007fd6:	2302      	movs	r3, #2
 8007fd8:	e06e      	b.n	80080b8 <HAL_UART_Transmit+0x11c>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2221      	movs	r2, #33	; 0x21
 8007fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ff0:	f7fd fa08 	bl	8005404 <HAL_GetTick>
 8007ff4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	88fa      	ldrh	r2, [r7, #6]
 8007ffa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	88fa      	ldrh	r2, [r7, #6]
 8008000:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800800a:	d108      	bne.n	800801e <HAL_UART_Transmit+0x82>
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d104      	bne.n	800801e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008014:	2300      	movs	r3, #0
 8008016:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	61bb      	str	r3, [r7, #24]
 800801c:	e003      	b.n	8008026 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008022:	2300      	movs	r3, #0
 8008024:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800802e:	e02a      	b.n	8008086 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	9300      	str	r3, [sp, #0]
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	2200      	movs	r2, #0
 8008038:	2180      	movs	r1, #128	; 0x80
 800803a:	68f8      	ldr	r0, [r7, #12]
 800803c:	f000 f840 	bl	80080c0 <UART_WaitOnFlagUntilTimeout>
 8008040:	4603      	mov	r3, r0
 8008042:	2b00      	cmp	r3, #0
 8008044:	d001      	beq.n	800804a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008046:	2303      	movs	r3, #3
 8008048:	e036      	b.n	80080b8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d10b      	bne.n	8008068 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	881b      	ldrh	r3, [r3, #0]
 8008054:	461a      	mov	r2, r3
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800805e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	3302      	adds	r3, #2
 8008064:	61bb      	str	r3, [r7, #24]
 8008066:	e007      	b.n	8008078 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	781a      	ldrb	r2, [r3, #0]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	3301      	adds	r3, #1
 8008076:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800807c:	b29b      	uxth	r3, r3
 800807e:	3b01      	subs	r3, #1
 8008080:	b29a      	uxth	r2, r3
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800808a:	b29b      	uxth	r3, r3
 800808c:	2b00      	cmp	r3, #0
 800808e:	d1cf      	bne.n	8008030 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	9300      	str	r3, [sp, #0]
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	2200      	movs	r2, #0
 8008098:	2140      	movs	r1, #64	; 0x40
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f000 f810 	bl	80080c0 <UART_WaitOnFlagUntilTimeout>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d001      	beq.n	80080aa <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80080a6:	2303      	movs	r3, #3
 80080a8:	e006      	b.n	80080b8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2220      	movs	r2, #32
 80080ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80080b2:	2300      	movs	r3, #0
 80080b4:	e000      	b.n	80080b8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80080b6:	2302      	movs	r3, #2
  }
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3720      	adds	r7, #32
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	603b      	str	r3, [r7, #0]
 80080cc:	4613      	mov	r3, r2
 80080ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080d0:	e02c      	b.n	800812c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d8:	d028      	beq.n	800812c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80080da:	69bb      	ldr	r3, [r7, #24]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d007      	beq.n	80080f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80080e0:	f7fd f990 	bl	8005404 <HAL_GetTick>
 80080e4:	4602      	mov	r2, r0
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	69ba      	ldr	r2, [r7, #24]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d21d      	bcs.n	800812c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68da      	ldr	r2, [r3, #12]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80080fe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	695a      	ldr	r2, [r3, #20]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f022 0201 	bic.w	r2, r2, #1
 800810e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2220      	movs	r2, #32
 8008114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2220      	movs	r2, #32
 800811c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2200      	movs	r2, #0
 8008124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008128:	2303      	movs	r3, #3
 800812a:	e00f      	b.n	800814c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	4013      	ands	r3, r2
 8008136:	68ba      	ldr	r2, [r7, #8]
 8008138:	429a      	cmp	r2, r3
 800813a:	bf0c      	ite	eq
 800813c:	2301      	moveq	r3, #1
 800813e:	2300      	movne	r3, #0
 8008140:	b2db      	uxtb	r3, r3
 8008142:	461a      	mov	r2, r3
 8008144:	79fb      	ldrb	r3, [r7, #7]
 8008146:	429a      	cmp	r2, r3
 8008148:	d0c3      	beq.n	80080d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3710      	adds	r7, #16
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	68da      	ldr	r2, [r3, #12]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	430a      	orrs	r2, r1
 8008170:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	689a      	ldr	r2, [r3, #8]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	431a      	orrs	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	695b      	ldr	r3, [r3, #20]
 8008180:	4313      	orrs	r3, r2
 8008182:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800818e:	f023 030c 	bic.w	r3, r3, #12
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	6812      	ldr	r2, [r2, #0]
 8008196:	68b9      	ldr	r1, [r7, #8]
 8008198:	430b      	orrs	r3, r1
 800819a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	695b      	ldr	r3, [r3, #20]
 80081a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	699a      	ldr	r2, [r3, #24]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	430a      	orrs	r2, r1
 80081b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a2c      	ldr	r2, [pc, #176]	; (8008268 <UART_SetConfig+0x114>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d103      	bne.n	80081c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80081bc:	f7fe f9e4 	bl	8006588 <HAL_RCC_GetPCLK2Freq>
 80081c0:	60f8      	str	r0, [r7, #12]
 80081c2:	e002      	b.n	80081ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80081c4:	f7fe f9cc 	bl	8006560 <HAL_RCC_GetPCLK1Freq>
 80081c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	4613      	mov	r3, r2
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	4413      	add	r3, r2
 80081d2:	009a      	lsls	r2, r3, #2
 80081d4:	441a      	add	r2, r3
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80081e0:	4a22      	ldr	r2, [pc, #136]	; (800826c <UART_SetConfig+0x118>)
 80081e2:	fba2 2303 	umull	r2, r3, r2, r3
 80081e6:	095b      	lsrs	r3, r3, #5
 80081e8:	0119      	lsls	r1, r3, #4
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	4613      	mov	r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	4413      	add	r3, r2
 80081f2:	009a      	lsls	r2, r3, #2
 80081f4:	441a      	add	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8008200:	4b1a      	ldr	r3, [pc, #104]	; (800826c <UART_SetConfig+0x118>)
 8008202:	fba3 0302 	umull	r0, r3, r3, r2
 8008206:	095b      	lsrs	r3, r3, #5
 8008208:	2064      	movs	r0, #100	; 0x64
 800820a:	fb00 f303 	mul.w	r3, r0, r3
 800820e:	1ad3      	subs	r3, r2, r3
 8008210:	011b      	lsls	r3, r3, #4
 8008212:	3332      	adds	r3, #50	; 0x32
 8008214:	4a15      	ldr	r2, [pc, #84]	; (800826c <UART_SetConfig+0x118>)
 8008216:	fba2 2303 	umull	r2, r3, r2, r3
 800821a:	095b      	lsrs	r3, r3, #5
 800821c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008220:	4419      	add	r1, r3
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	4613      	mov	r3, r2
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	4413      	add	r3, r2
 800822a:	009a      	lsls	r2, r3, #2
 800822c:	441a      	add	r2, r3
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	fbb2 f2f3 	udiv	r2, r2, r3
 8008238:	4b0c      	ldr	r3, [pc, #48]	; (800826c <UART_SetConfig+0x118>)
 800823a:	fba3 0302 	umull	r0, r3, r3, r2
 800823e:	095b      	lsrs	r3, r3, #5
 8008240:	2064      	movs	r0, #100	; 0x64
 8008242:	fb00 f303 	mul.w	r3, r0, r3
 8008246:	1ad3      	subs	r3, r2, r3
 8008248:	011b      	lsls	r3, r3, #4
 800824a:	3332      	adds	r3, #50	; 0x32
 800824c:	4a07      	ldr	r2, [pc, #28]	; (800826c <UART_SetConfig+0x118>)
 800824e:	fba2 2303 	umull	r2, r3, r2, r3
 8008252:	095b      	lsrs	r3, r3, #5
 8008254:	f003 020f 	and.w	r2, r3, #15
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	440a      	add	r2, r1
 800825e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008260:	bf00      	nop
 8008262:	3710      	adds	r7, #16
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	40013800 	.word	0x40013800
 800826c:	51eb851f 	.word	0x51eb851f

08008270 <_ZN11MC3479Class12setSerialSPIEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:



// Set the MC3479's SPI object
bool MC3479Class::setSerialSPI(SPI_HandleTypeDef * spi,GPIO_TypeDef * csn_GPIO, uint16_t csn_PIN )
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	607a      	str	r2, [r7, #4]
 800827c:	807b      	strh	r3, [r7, #2]
	this->_SPI1 = spi;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	601a      	str	r2, [r3, #0]
	this->_CSN_GPIO = csn_GPIO;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	609a      	str	r2, [r3, #8]
	this->_CSN_PIN = csn_PIN;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	887a      	ldrh	r2, [r7, #2]
 800828e:	819a      	strh	r2, [r3, #12]
	return 1; // Return Success
 8008290:	2301      	movs	r3, #1
}
 8008292:	4618      	mov	r0, r3
 8008294:	3714      	adds	r7, #20
 8008296:	46bd      	mov	sp, r7
 8008298:	bc80      	pop	{r7}
 800829a:	4770      	bx	lr

0800829c <_ZN11MC3479Class16SPI_readRegisterEhPh>:

// Read from a register using SPI
bool MC3479Class::SPI_readRegister(uint8_t reg,  uint8_t* data)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b086      	sub	sp, #24
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	460b      	mov	r3, r1
 80082a6:	607a      	str	r2, [r7, #4]
 80082a8:	72fb      	strb	r3, [r7, #11]

	uint8_t spiBytes[2];
	spiBytes[0] = SPIread_REG | reg;
 80082aa:	7afb      	ldrb	r3, [r7, #11]
 80082ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	753b      	strb	r3, [r7, #20]
	spiBytes[1] = SPIread_BYTE2;
 80082b4:	2300      	movs	r3, #0
 80082b6:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_RESET);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6898      	ldr	r0, [r3, #8]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	899b      	ldrh	r3, [r3, #12]
 80082c0:	2200      	movs	r2, #0
 80082c2:	4619      	mov	r1, r3
 80082c4:	f7fd fd5d 	bl	8005d82 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_SPI1, &spiBytes[0], sizeof(spiBytes), 10);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6818      	ldr	r0, [r3, #0]
 80082cc:	f107 0114 	add.w	r1, r7, #20
 80082d0:	230a      	movs	r3, #10
 80082d2:	2202      	movs	r2, #2
 80082d4:	f7fe fac4 	bl	8006860 <HAL_SPI_Transmit>
	HAL_SPI_Receive(this->_SPI1, data, REG_BYTES_LEN, 10);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6818      	ldr	r0, [r3, #0]
 80082dc:	230a      	movs	r3, #10
 80082de:	2201      	movs	r2, #1
 80082e0:	6879      	ldr	r1, [r7, #4]
 80082e2:	f7fe fbf9 	bl	8006ad8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_SET);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6898      	ldr	r0, [r3, #8]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	899b      	ldrh	r3, [r3, #12]
 80082ee:	2201      	movs	r2, #1
 80082f0:	4619      	mov	r1, r3
 80082f2:	f7fd fd46 	bl	8005d82 <HAL_GPIO_WritePin>
	return 1;
 80082f6:	2301      	movs	r3, #1
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3718      	adds	r7, #24
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <_ZN11MC3479Class17SPI_writeRegisterEhh>:

// Write to a register using SPI
uint8_t MC3479Class::SPI_writeRegister(uint8_t reg, uint8_t data)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	460b      	mov	r3, r1
 800830a:	70fb      	strb	r3, [r7, #3]
 800830c:	4613      	mov	r3, r2
 800830e:	70bb      	strb	r3, [r7, #2]
	// Write data to reg:
	uint8_t spiBytes[2];
	spiBytes[0] = SPIwrite_REG | reg;
 8008310:	78fb      	ldrb	r3, [r7, #3]
 8008312:	733b      	strb	r3, [r7, #12]
	spiBytes[1] = data;
 8008314:	78bb      	ldrb	r3, [r7, #2]
 8008316:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_RESET);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6898      	ldr	r0, [r3, #8]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	899b      	ldrh	r3, [r3, #12]
 8008320:	2200      	movs	r2, #0
 8008322:	4619      	mov	r1, r3
 8008324:	f7fd fd2d 	bl	8005d82 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_SPI1, &spiBytes[0], sizeof(spiBytes), 10);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6818      	ldr	r0, [r3, #0]
 800832c:	f107 010c 	add.w	r1, r7, #12
 8008330:	230a      	movs	r3, #10
 8008332:	2202      	movs	r2, #2
 8008334:	f7fe fa94 	bl	8006860 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_SET);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6898      	ldr	r0, [r3, #8]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	899b      	ldrh	r3, [r3, #12]
 8008340:	2201      	movs	r2, #1
 8008342:	4619      	mov	r1, r3
 8008344:	f7fd fd1d 	bl	8005d82 <HAL_GPIO_WritePin>

	// Read back the register and return the bytes:
	uint8_t regReadBack = 0;
 8008348:	2300      	movs	r3, #0
 800834a:	72fb      	strb	r3, [r7, #11]
	MC3479Class::SPI_readRegister(reg, &regReadBack);
 800834c:	f107 020b 	add.w	r2, r7, #11
 8008350:	78fb      	ldrb	r3, [r7, #3]
 8008352:	4619      	mov	r1, r3
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f7ff ffa1 	bl	800829c <_ZN11MC3479Class16SPI_readRegisterEhPh>
	return regReadBack;
 800835a:	7afb      	ldrb	r3, [r7, #11]
}
 800835c:	4618      	mov	r0, r3
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <_ZN11MC3479Class21burstSPI_readRegisterEhPhh>:

// Read from a register using SPI
bool MC3479Class::burstSPI_readRegister(uint8_t reg, uint8_t* data, uint8_t reg_count)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	607a      	str	r2, [r7, #4]
 800836e:	461a      	mov	r2, r3
 8008370:	460b      	mov	r3, r1
 8008372:	72fb      	strb	r3, [r7, #11]
 8008374:	4613      	mov	r3, r2
 8008376:	72bb      	strb	r3, [r7, #10]
	uint8_t spiBytes[2];
	spiBytes[0] = SPIread_REG | reg;
 8008378:	7afb      	ldrb	r3, [r7, #11]
 800837a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800837e:	b2db      	uxtb	r3, r3
 8008380:	753b      	strb	r3, [r7, #20]
	spiBytes[1] = SPIread_BYTE2;
 8008382:	2300      	movs	r3, #0
 8008384:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_RESET);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6898      	ldr	r0, [r3, #8]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	899b      	ldrh	r3, [r3, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	4619      	mov	r1, r3
 8008392:	f7fd fcf6 	bl	8005d82 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_SPI1, spiBytes, sizeof(spiBytes), 10);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6818      	ldr	r0, [r3, #0]
 800839a:	f107 0114 	add.w	r1, r7, #20
 800839e:	230a      	movs	r3, #10
 80083a0:	2202      	movs	r2, #2
 80083a2:	f7fe fa5d 	bl	8006860 <HAL_SPI_Transmit>

	for (uint8_t i=0; i<reg_count; i++)
 80083a6:	2300      	movs	r3, #0
 80083a8:	75fb      	strb	r3, [r7, #23]
 80083aa:	7dfa      	ldrb	r2, [r7, #23]
 80083ac:	7abb      	ldrb	r3, [r7, #10]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d20c      	bcs.n	80083cc <_ZN11MC3479Class21burstSPI_readRegisterEhPhh+0x68>
	{
		//TODO: Validate that data[0] will be Xdata LSB
		HAL_SPI_Receive(this->_SPI1, &data[i], REG_BYTES_LEN, 10);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6818      	ldr	r0, [r3, #0]
 80083b6:	7dfb      	ldrb	r3, [r7, #23]
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	18d1      	adds	r1, r2, r3
 80083bc:	230a      	movs	r3, #10
 80083be:	2201      	movs	r2, #1
 80083c0:	f7fe fb8a 	bl	8006ad8 <HAL_SPI_Receive>
	for (uint8_t i=0; i<reg_count; i++)
 80083c4:	7dfb      	ldrb	r3, [r7, #23]
 80083c6:	3301      	adds	r3, #1
 80083c8:	75fb      	strb	r3, [r7, #23]
 80083ca:	e7ee      	b.n	80083aa <_ZN11MC3479Class21burstSPI_readRegisterEhPhh+0x46>
	}
	HAL_GPIO_WritePin(this->_CSN_GPIO, this->_CSN_PIN, GPIO_PIN_SET);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6898      	ldr	r0, [r3, #8]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	899b      	ldrh	r3, [r3, #12]
 80083d4:	2201      	movs	r2, #1
 80083d6:	4619      	mov	r1, r3
 80083d8:	f7fd fcd3 	bl	8005d82 <HAL_GPIO_WritePin>
	return 1;
 80083dc:	2301      	movs	r3, #1

}
 80083de:	4618      	mov	r0, r3
 80083e0:	3718      	adds	r7, #24
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <_ZN11MC3479Class19configAccelerometerEv>:
	return 1;
}
#endif

// Perform the initial MC3479 hard-coded configuration
void MC3479Class::configAccelerometer(){
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b084      	sub	sp, #16
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]

#ifdef _SPI_COM_ENABLED
		//Configuration using SPI:

		// Register 0x06 (interrupt enable)
		data = 0xFF & ACQ_INT_EN; //only activates interrupts after each sample
 80083ee:	2380      	movs	r3, #128	; 0x80
 80083f0:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_INTR_CTRL, data);
 80083f2:	7bfb      	ldrb	r3, [r7, #15]
 80083f4:	461a      	mov	r2, r3
 80083f6:	2106      	movs	r1, #6
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f7ff ff81 	bl	8008300 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x07 (MODE)
		data = 0xFF & WAKE; // clocks running, X,Y,Z axis sampled @ data rate
 80083fe:	2301      	movs	r3, #1
 8008400:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_MODE, data);
 8008402:	7bfb      	ldrb	r3, [r7, #15]
 8008404:	461a      	mov	r2, r3
 8008406:	2107      	movs	r1, #7
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f7ff ff79 	bl	8008300 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x08 (Sample  Rate)
		data = 0xFF & RATE7_2000Hz; // sample x,y,z @ 100Hz
 800840e:	230f      	movs	r3, #15
 8008410:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_SR, data);
 8008412:	7bfb      	ldrb	r3, [r7, #15]
 8008414:	461a      	mov	r2, r3
 8008416:	2108      	movs	r1, #8
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f7ff ff71 	bl	8008300 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x09 (Motion Control)
		data = 0xFF & 0x00; //No motion detection enabled Z-axis positive through top of package
 800841e:	2300      	movs	r3, #0
 8008420:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_MOTION_CTRL, data);
 8008422:	7bfb      	ldrb	r3, [r7, #15]
 8008424:	461a      	mov	r2, r3
 8008426:	2109      	movs	r1, #9
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f7ff ff69 	bl	8008300 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x20 (Range Select Control)
		data = 0xFF & 0x00; // No resolution range change, no LPF
 800842e:	2300      	movs	r3, #0
 8008430:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_RANGE, data);
 8008432:	7bfb      	ldrb	r3, [r7, #15]
 8008434:	461a      	mov	r2, r3
 8008436:	2120      	movs	r1, #32
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f7ff ff61 	bl	8008300 <_ZN11MC3479Class17SPI_writeRegisterEhh>
//		MC3479Class::SPI_readRegister(MC3479_ZGAIN, &data);
//		data = data & 0xFF; //no GAIN
//		MC3479Class::SPI_writeRegister(MC3479_ZGAIN, data);

		// RegisteO 0x2D (FIFO Control)
		data = 0XFF & FIFO_TH_INT_EN & FIFO_FULL_INT_EN; // FIFO TH/Full IRQ set on INTN2 pin.
 800843e:	2300      	movs	r3, #0
 8008440:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_FIFO_CTRL, data);
 8008442:	7bfb      	ldrb	r3, [r7, #15]
 8008444:	461a      	mov	r2, r3
 8008446:	212d      	movs	r1, #45	; 0x2d
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f7ff ff59 	bl	8008300 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x2E (FIFO Threshold)
		data = 0xFF & 0x10; //FIFO IRQ threshold set to 50%
 800844e:	2310      	movs	r3, #16
 8008450:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_FIFO_TH, data);
 8008452:	7bfb      	ldrb	r3, [r7, #15]
 8008454:	461a      	mov	r2, r3
 8008456:	212e      	movs	r1, #46	; 0x2e
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f7ff ff51 	bl	8008300 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x30 (FIFO Control 2, Sample Rate 2)
		//Burst-read cycle that includes XOUT[15:0], YOUT[15:0],
		//ZOUT[15:0], annd NOTTTT: STATUS[7:0], and INTR_STATUS[7:0]:
		data = 0xFF & 0x00;
 800845e:	2300      	movs	r3, #0
 8008460:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_FIFO_CTRL2_SR2, data);
 8008462:	7bfb      	ldrb	r3, [r7, #15]
 8008464:	461a      	mov	r2, r3
 8008466:	2130      	movs	r1, #48	; 0x30
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f7ff ff49 	bl	8008300 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x31 (Communication Control)
		data = 0xFF & 0x00; //0x14 interrupts are cleared simultaneously, 4bit SPI, default Interrupt pins
 800846e:	2300      	movs	r3, #0
 8008470:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_COMM_CTRL, data);
 8008472:	7bfb      	ldrb	r3, [r7, #15]
 8008474:	461a      	mov	r2, r3
 8008476:	2131      	movs	r1, #49	; 0x31
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f7ff ff41 	bl	8008300 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x33 (GPIO Control)
		data = 0xFF & GPIO1_INTN1_IPP & GPIO2_INTN2_IPP; // interrupt pins are push-pull, active low
 800847e:	2300      	movs	r3, #0
 8008480:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_GPIO_CTRL, data);
 8008482:	7bfb      	ldrb	r3, [r7, #15]
 8008484:	461a      	mov	r2, r3
 8008486:	2133      	movs	r1, #51	; 0x33
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f7ff ff39 	bl	8008300 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x40 (Tilt/Flip threshold LSB)
		data = 0xFF & 0x0F; // 15/255 Tilt/Flip Threshold LSB
 800848e:	230f      	movs	r3, #15
 8008490:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_TF_THRESH_LSB, data);
 8008492:	7bfb      	ldrb	r3, [r7, #15]
 8008494:	461a      	mov	r2, r3
 8008496:	2140      	movs	r1, #64	; 0x40
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f7ff ff31 	bl	8008300 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x41 (Tilt/Flip threshold MSB)
		data = 0xFF & 0x00; // 0/255 Tilt/Flip Threshold MSB
 800849e:	2300      	movs	r3, #0
 80084a0:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_TF_THRESH_MSB, data);
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
 80084a4:	461a      	mov	r2, r3
 80084a6:	2141      	movs	r1, #65	; 0x41
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f7ff ff29 	bl	8008300 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x42 (Tilt/Flip De-bounce)
		data = 0xFF & 0x0F; // Tilt/Flip de-bounce duration to 15/255 before triggering IRQ
 80084ae:	230f      	movs	r3, #15
 80084b0:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_TF_DB, data);
 80084b2:	7bfb      	ldrb	r3, [r7, #15]
 80084b4:	461a      	mov	r2, r3
 80084b6:	2142      	movs	r1, #66	; 0x42
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f7ff ff21 	bl	8008300 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x43 (AnyMotion Threshold LSB)
		data = 0xFF & 0x0F; // 15/255 AnyMotionThreshold LSB
 80084be:	230f      	movs	r3, #15
 80084c0:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_AM_THRESH_LSB, data);
 80084c2:	7bfb      	ldrb	r3, [r7, #15]
 80084c4:	461a      	mov	r2, r3
 80084c6:	2143      	movs	r1, #67	; 0x43
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f7ff ff19 	bl	8008300 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x44 (AnyMotion Threshold MSB)
		data = 0xFF & 0x00; // 0/255 AnyMotionThreshold MSB
 80084ce:	2300      	movs	r3, #0
 80084d0:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_AM_THRESH_MSB, data);
 80084d2:	7bfb      	ldrb	r3, [r7, #15]
 80084d4:	461a      	mov	r2, r3
 80084d6:	2144      	movs	r1, #68	; 0x44
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f7ff ff11 	bl	8008300 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x45 (AnyMotion De-bounce)
		data = 0xFF & 0x0F; // AnyMotion de-bounce duration to 15/255 before triggering IRQ
 80084de:	230f      	movs	r3, #15
 80084e0:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_AM_DB, data);
 80084e2:	7bfb      	ldrb	r3, [r7, #15]
 80084e4:	461a      	mov	r2, r3
 80084e6:	2145      	movs	r1, #69	; 0x45
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f7ff ff09 	bl	8008300 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x46 (Shake Threshold LSB)
		data = 0xFF & 0x0F; // 15/255 Shake Threshold LSB
 80084ee:	230f      	movs	r3, #15
 80084f0:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_SHK_THRESH_LSB, data);
 80084f2:	7bfb      	ldrb	r3, [r7, #15]
 80084f4:	461a      	mov	r2, r3
 80084f6:	2146      	movs	r1, #70	; 0x46
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f7ff ff01 	bl	8008300 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x47 (Shake Threshold MSB)
		data = 0xFF & 0x00; // 0/255 Shake Threshold MSB
 80084fe:	2300      	movs	r3, #0
 8008500:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_SHK_THRESH_MSB, data);
 8008502:	7bfb      	ldrb	r3, [r7, #15]
 8008504:	461a      	mov	r2, r3
 8008506:	2147      	movs	r1, #71	; 0x47
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f7ff fef9 	bl	8008300 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x48 (Peak-to-Peak Duration LSB)
		data = 0xFF & 0x00; // Minimum duration to trigger a shake interrupt - unused???
 800850e:	2300      	movs	r3, #0
 8008510:	73fb      	strb	r3, [r7, #15]
		//TODO: are we using p2p or shake counter thresholds for interrupts??
		MC3479Class::SPI_writeRegister(MC3479_PK_P2P_DUR_THRESH_LSB, data);
 8008512:	7bfb      	ldrb	r3, [r7, #15]
 8008514:	461a      	mov	r2, r3
 8008516:	2148      	movs	r1, #72	; 0x48
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f7ff fef1 	bl	8008300 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x49 (Shake/Peak-to-Peak Duration MSB)
		data = 0xFF & 0x00; // Minimum duration to trigger a shake interrupt - unused???
 800851e:	2300      	movs	r3, #0
 8008520:	73fb      	strb	r3, [r7, #15]
		//TODO: are we using p2p or shake counter thresholds for interrupts??
		MC3479Class::SPI_writeRegister(MC3479_PK_P2P_DUR_THRESH_MSB, data);
 8008522:	7bfb      	ldrb	r3, [r7, #15]
 8008524:	461a      	mov	r2, r3
 8008526:	2149      	movs	r1, #73	; 0x49
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f7ff fee9 	bl	8008300 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x4A (Timer control)
		data = 0xFF & 0x00; //Tilt-35 latch disabled,tilt-35 angle detection duration = 1.6s (default)
 800852e:	2300      	movs	r3, #0
 8008530:	73fb      	strb	r3, [r7, #15]
		//TODO: if Tilt35 duration is too large for our control system, can we ignore configuration?
		MC3479Class::SPI_writeRegister(MC3479_TIMER_CTRL, data);
 8008532:	7bfb      	ldrb	r3, [r7, #15]
 8008534:	461a      	mov	r2, r3
 8008536:	214a      	movs	r1, #74	; 0x4a
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f7ff fee1 	bl	8008300 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x4B (Read Count Register)
		data = 0xFF & 0x06; // default 6 reads when register 0x30 bit 7(FIFO_BURST) is enabled
 800853e:	2306      	movs	r3, #6
 8008540:	73fb      	strb	r3, [r7, #15]
		MC3479Class::SPI_writeRegister(MC3479_RD_CNT, data);
 8008542:	7bfb      	ldrb	r3, [r7, #15]
 8008544:	461a      	mov	r2, r3
 8008546:	214b      	movs	r1, #75	; 0x4b
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f7ff fed9 	bl	8008300 <_ZN11MC3479Class17SPI_writeRegisterEhh>

		// Register 0x4B (Read Count Register)

#endif /* _SPI_COM_ENABLED */

	return;
 800854e:	bf00      	nop
}
 8008550:	3710      	adds	r7, #16
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <_ZN11MC3479Class6getXYZEPhS0_S0_>:
		uint8_t data = 0xFF & rate; // sample x,y,z @ 100Hz
		return MC3479Class::SPI_writeRegister(MC3479_SR, data);
}

bool MC3479Class::getXYZ(uint8_t* xData, uint8_t* yData, uint8_t* zData)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b086      	sub	sp, #24
 800855a:	af00      	add	r7, sp, #0
 800855c:	60f8      	str	r0, [r7, #12]
 800855e:	60b9      	str	r1, [r7, #8]
 8008560:	607a      	str	r2, [r7, #4]
 8008562:	603b      	str	r3, [r7, #0]
	uint8_t Buffer[8];
	MC3479Class::burstSPI_readRegister(MC3479_XOUT_EX_L, &Buffer[0], 6);
 8008564:	f107 0210 	add.w	r2, r7, #16
 8008568:	2306      	movs	r3, #6
 800856a:	210d      	movs	r1, #13
 800856c:	68f8      	ldr	r0, [r7, #12]
 800856e:	f7ff fef9 	bl	8008364 <_ZN11MC3479Class21burstSPI_readRegisterEhPhh>
	xData[0] = Buffer[0];
 8008572:	7c3a      	ldrb	r2, [r7, #16]
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	701a      	strb	r2, [r3, #0]
	xData[1] = Buffer[1];
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	3301      	adds	r3, #1
 800857c:	7c7a      	ldrb	r2, [r7, #17]
 800857e:	701a      	strb	r2, [r3, #0]
	yData[0] = Buffer[2];
 8008580:	7cba      	ldrb	r2, [r7, #18]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	701a      	strb	r2, [r3, #0]
	yData[1] = Buffer[3];
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	3301      	adds	r3, #1
 800858a:	7cfa      	ldrb	r2, [r7, #19]
 800858c:	701a      	strb	r2, [r3, #0]
	zData[0] = Buffer[4];
 800858e:	7d3a      	ldrb	r2, [r7, #20]
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	701a      	strb	r2, [r3, #0]
	zData[1] = Buffer[5];
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	3301      	adds	r3, #1
 8008598:	7d7a      	ldrb	r2, [r7, #21]
 800859a:	701a      	strb	r2, [r3, #0]
	return 1;
 800859c:	2301      	movs	r3, #1
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3718      	adds	r7, #24
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <_ZN12MP6543HClass23x_configMotorControllerEtttP17TIM_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_tS3_t>:
											uint16_t xPwmChannelC, TIM_HandleTypeDef * xPwmTimer,
											GPIO_TypeDef* ENA, uint16_t ENA_Pin,
											GPIO_TypeDef* ENB, uint16_t ENB_Pin,
											GPIO_TypeDef* ENC, uint16_t ENC_Pin,
											GPIO_TypeDef* xSleep, uint16_t xSleepPin,
											GPIO_TypeDef* xFault, uint16_t xFaultPin){
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b084      	sub	sp, #16
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	60f8      	str	r0, [r7, #12]
 80085ae:	4608      	mov	r0, r1
 80085b0:	4611      	mov	r1, r2
 80085b2:	461a      	mov	r2, r3
 80085b4:	4603      	mov	r3, r0
 80085b6:	817b      	strh	r3, [r7, #10]
 80085b8:	460b      	mov	r3, r1
 80085ba:	813b      	strh	r3, [r7, #8]
 80085bc:	4613      	mov	r3, r2
 80085be:	80fb      	strh	r3, [r7, #6]
	this->_x_PWM = xPwmTimer;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	69ba      	ldr	r2, [r7, #24]
 80085c4:	625a      	str	r2, [r3, #36]	; 0x24
	this->_x_PWM_CHANNEL_A = xPwmChannelA;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	897a      	ldrh	r2, [r7, #10]
 80085ca:	83da      	strh	r2, [r3, #30]
	this->_x_PWM_CHANNEL_B = xPwmChannelB;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	893a      	ldrh	r2, [r7, #8]
 80085d0:	841a      	strh	r2, [r3, #32]
	this->_x_PWM_CHANNEL_C = xPwmChannelC;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	88fa      	ldrh	r2, [r7, #6]
 80085d6:	845a      	strh	r2, [r3, #34]	; 0x22
	this->_x_ENA = ENA;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	69fa      	ldr	r2, [r7, #28]
 80085dc:	609a      	str	r2, [r3, #8]
	this->_x_ENB = ENB;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085e2:	60da      	str	r2, [r3, #12]
	this->_x_ENC = ENC;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085e8:	611a      	str	r2, [r3, #16]
	this->_x_ENA_Pin = ENA_Pin;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	8c3a      	ldrh	r2, [r7, #32]
 80085ee:	831a      	strh	r2, [r3, #24]
	this->_x_ENB_Pin = ENB_Pin;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80085f4:	835a      	strh	r2, [r3, #26]
	this->_x_ENC_Pin = ENC_Pin;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80085fa:	839a      	strh	r2, [r3, #28]


	this->_x_nSLEEP_GPIO = xSleep;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008600:	601a      	str	r2, [r3, #0]
	this->_x_nSLEEP_PIN = xSleepPin;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8008606:	829a      	strh	r2, [r3, #20]
	HAL_GPIO_WritePin(_x_nSLEEP_GPIO, _x_nSLEEP_PIN, GPIO_PIN_SET);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6818      	ldr	r0, [r3, #0]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	8a9b      	ldrh	r3, [r3, #20]
 8008610:	2201      	movs	r2, #1
 8008612:	4619      	mov	r1, r3
 8008614:	f7fd fbb5 	bl	8005d82 <HAL_GPIO_WritePin>
	this->_x_nFAULT_GPIO = xFault;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800861c:	605a      	str	r2, [r3, #4]
	this->_x_nFAULT_PIN = xFaultPin;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8008624:	82da      	strh	r2, [r3, #22]

	return 1;
 8008626:	2301      	movs	r3, #1
}
 8008628:	4618      	mov	r0, r3
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <_ZN12MP6543HClass12x_motorFaultEv>:
//	MP6543H.y_motorBrake(true);
//	return 1;
//}

bool MP6543HClass::x_motorFault()
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
	return !HAL_GPIO_ReadPin(_x_nFAULT_GPIO, _x_nFAULT_PIN);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685a      	ldr	r2, [r3, #4]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	8adb      	ldrh	r3, [r3, #22]
 8008640:	4619      	mov	r1, r3
 8008642:	4610      	mov	r0, r2
 8008644:	f7fd fb86 	bl	8005d54 <HAL_GPIO_ReadPin>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	bf0c      	ite	eq
 800864e:	2301      	moveq	r3, #1
 8008650:	2300      	movne	r3, #0
 8008652:	b2db      	uxtb	r3, r3
}
 8008654:	4618      	mov	r0, r3
 8008656:	3708      	adds	r7, #8
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <_ZdlPvj>:
 800865c:	f000 b817 	b.w	800868e <_ZdlPv>

08008660 <_Znwj>:
 8008660:	2801      	cmp	r0, #1
 8008662:	bf38      	it	cc
 8008664:	2001      	movcc	r0, #1
 8008666:	b510      	push	{r4, lr}
 8008668:	4604      	mov	r4, r0
 800866a:	4620      	mov	r0, r4
 800866c:	f000 f9da 	bl	8008a24 <malloc>
 8008670:	b930      	cbnz	r0, 8008680 <_Znwj+0x20>
 8008672:	f000 f80f 	bl	8008694 <_ZSt15get_new_handlerv>
 8008676:	b908      	cbnz	r0, 800867c <_Znwj+0x1c>
 8008678:	f000 f9a3 	bl	80089c2 <abort>
 800867c:	4780      	blx	r0
 800867e:	e7f4      	b.n	800866a <_Znwj+0xa>
 8008680:	bd10      	pop	{r4, pc}

08008682 <_ZSt17__throw_bad_allocv>:
 8008682:	b508      	push	{r3, lr}
 8008684:	f000 f99d 	bl	80089c2 <abort>

08008688 <_ZSt20__throw_length_errorPKc>:
 8008688:	b508      	push	{r3, lr}
 800868a:	f000 f99a 	bl	80089c2 <abort>

0800868e <_ZdlPv>:
 800868e:	f000 b9d1 	b.w	8008a34 <free>
	...

08008694 <_ZSt15get_new_handlerv>:
 8008694:	4b02      	ldr	r3, [pc, #8]	; (80086a0 <_ZSt15get_new_handlerv+0xc>)
 8008696:	6818      	ldr	r0, [r3, #0]
 8008698:	f3bf 8f5b 	dmb	ish
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop
 80086a0:	20000584 	.word	0x20000584
 80086a4:	00000000 	.word	0x00000000

080086a8 <atan>:
 80086a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ac:	4bb6      	ldr	r3, [pc, #728]	; (8008988 <atan+0x2e0>)
 80086ae:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80086b2:	429e      	cmp	r6, r3
 80086b4:	4604      	mov	r4, r0
 80086b6:	460d      	mov	r5, r1
 80086b8:	468b      	mov	fp, r1
 80086ba:	dd17      	ble.n	80086ec <atan+0x44>
 80086bc:	4bb3      	ldr	r3, [pc, #716]	; (800898c <atan+0x2e4>)
 80086be:	429e      	cmp	r6, r3
 80086c0:	dc01      	bgt.n	80086c6 <atan+0x1e>
 80086c2:	d109      	bne.n	80086d8 <atan+0x30>
 80086c4:	b140      	cbz	r0, 80086d8 <atan+0x30>
 80086c6:	4622      	mov	r2, r4
 80086c8:	462b      	mov	r3, r5
 80086ca:	4620      	mov	r0, r4
 80086cc:	4629      	mov	r1, r5
 80086ce:	f7f7 fd45 	bl	800015c <__adddf3>
 80086d2:	4604      	mov	r4, r0
 80086d4:	460d      	mov	r5, r1
 80086d6:	e005      	b.n	80086e4 <atan+0x3c>
 80086d8:	f1bb 0f00 	cmp.w	fp, #0
 80086dc:	4cac      	ldr	r4, [pc, #688]	; (8008990 <atan+0x2e8>)
 80086de:	f300 8121 	bgt.w	8008924 <atan+0x27c>
 80086e2:	4dac      	ldr	r5, [pc, #688]	; (8008994 <atan+0x2ec>)
 80086e4:	4620      	mov	r0, r4
 80086e6:	4629      	mov	r1, r5
 80086e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ec:	4baa      	ldr	r3, [pc, #680]	; (8008998 <atan+0x2f0>)
 80086ee:	429e      	cmp	r6, r3
 80086f0:	dc11      	bgt.n	8008716 <atan+0x6e>
 80086f2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80086f6:	429e      	cmp	r6, r3
 80086f8:	dc0a      	bgt.n	8008710 <atan+0x68>
 80086fa:	a38b      	add	r3, pc, #556	; (adr r3, 8008928 <atan+0x280>)
 80086fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008700:	f7f7 fd2c 	bl	800015c <__adddf3>
 8008704:	2200      	movs	r2, #0
 8008706:	4ba5      	ldr	r3, [pc, #660]	; (800899c <atan+0x2f4>)
 8008708:	f7f8 f96e 	bl	80009e8 <__aeabi_dcmpgt>
 800870c:	2800      	cmp	r0, #0
 800870e:	d1e9      	bne.n	80086e4 <atan+0x3c>
 8008710:	f04f 3aff 	mov.w	sl, #4294967295
 8008714:	e027      	b.n	8008766 <atan+0xbe>
 8008716:	f000 f951 	bl	80089bc <fabs>
 800871a:	4ba1      	ldr	r3, [pc, #644]	; (80089a0 <atan+0x2f8>)
 800871c:	4604      	mov	r4, r0
 800871e:	429e      	cmp	r6, r3
 8008720:	460d      	mov	r5, r1
 8008722:	f300 80b8 	bgt.w	8008896 <atan+0x1ee>
 8008726:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800872a:	429e      	cmp	r6, r3
 800872c:	f300 809c 	bgt.w	8008868 <atan+0x1c0>
 8008730:	4602      	mov	r2, r0
 8008732:	460b      	mov	r3, r1
 8008734:	f7f7 fd12 	bl	800015c <__adddf3>
 8008738:	2200      	movs	r2, #0
 800873a:	4b98      	ldr	r3, [pc, #608]	; (800899c <atan+0x2f4>)
 800873c:	f7f7 fd0c 	bl	8000158 <__aeabi_dsub>
 8008740:	2200      	movs	r2, #0
 8008742:	4606      	mov	r6, r0
 8008744:	460f      	mov	r7, r1
 8008746:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800874a:	4620      	mov	r0, r4
 800874c:	4629      	mov	r1, r5
 800874e:	f7f7 fd05 	bl	800015c <__adddf3>
 8008752:	4602      	mov	r2, r0
 8008754:	460b      	mov	r3, r1
 8008756:	4630      	mov	r0, r6
 8008758:	4639      	mov	r1, r7
 800875a:	f7f7 ffdf 	bl	800071c <__aeabi_ddiv>
 800875e:	f04f 0a00 	mov.w	sl, #0
 8008762:	4604      	mov	r4, r0
 8008764:	460d      	mov	r5, r1
 8008766:	4622      	mov	r2, r4
 8008768:	462b      	mov	r3, r5
 800876a:	4620      	mov	r0, r4
 800876c:	4629      	mov	r1, r5
 800876e:	f7f7 feab 	bl	80004c8 <__aeabi_dmul>
 8008772:	4602      	mov	r2, r0
 8008774:	460b      	mov	r3, r1
 8008776:	4680      	mov	r8, r0
 8008778:	4689      	mov	r9, r1
 800877a:	f7f7 fea5 	bl	80004c8 <__aeabi_dmul>
 800877e:	a36c      	add	r3, pc, #432	; (adr r3, 8008930 <atan+0x288>)
 8008780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008784:	4606      	mov	r6, r0
 8008786:	460f      	mov	r7, r1
 8008788:	f7f7 fe9e 	bl	80004c8 <__aeabi_dmul>
 800878c:	a36a      	add	r3, pc, #424	; (adr r3, 8008938 <atan+0x290>)
 800878e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008792:	f7f7 fce3 	bl	800015c <__adddf3>
 8008796:	4632      	mov	r2, r6
 8008798:	463b      	mov	r3, r7
 800879a:	f7f7 fe95 	bl	80004c8 <__aeabi_dmul>
 800879e:	a368      	add	r3, pc, #416	; (adr r3, 8008940 <atan+0x298>)
 80087a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a4:	f7f7 fcda 	bl	800015c <__adddf3>
 80087a8:	4632      	mov	r2, r6
 80087aa:	463b      	mov	r3, r7
 80087ac:	f7f7 fe8c 	bl	80004c8 <__aeabi_dmul>
 80087b0:	a365      	add	r3, pc, #404	; (adr r3, 8008948 <atan+0x2a0>)
 80087b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b6:	f7f7 fcd1 	bl	800015c <__adddf3>
 80087ba:	4632      	mov	r2, r6
 80087bc:	463b      	mov	r3, r7
 80087be:	f7f7 fe83 	bl	80004c8 <__aeabi_dmul>
 80087c2:	a363      	add	r3, pc, #396	; (adr r3, 8008950 <atan+0x2a8>)
 80087c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c8:	f7f7 fcc8 	bl	800015c <__adddf3>
 80087cc:	4632      	mov	r2, r6
 80087ce:	463b      	mov	r3, r7
 80087d0:	f7f7 fe7a 	bl	80004c8 <__aeabi_dmul>
 80087d4:	a360      	add	r3, pc, #384	; (adr r3, 8008958 <atan+0x2b0>)
 80087d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087da:	f7f7 fcbf 	bl	800015c <__adddf3>
 80087de:	4642      	mov	r2, r8
 80087e0:	464b      	mov	r3, r9
 80087e2:	f7f7 fe71 	bl	80004c8 <__aeabi_dmul>
 80087e6:	a35e      	add	r3, pc, #376	; (adr r3, 8008960 <atan+0x2b8>)
 80087e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ec:	4680      	mov	r8, r0
 80087ee:	4689      	mov	r9, r1
 80087f0:	4630      	mov	r0, r6
 80087f2:	4639      	mov	r1, r7
 80087f4:	f7f7 fe68 	bl	80004c8 <__aeabi_dmul>
 80087f8:	a35b      	add	r3, pc, #364	; (adr r3, 8008968 <atan+0x2c0>)
 80087fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fe:	f7f7 fcab 	bl	8000158 <__aeabi_dsub>
 8008802:	4632      	mov	r2, r6
 8008804:	463b      	mov	r3, r7
 8008806:	f7f7 fe5f 	bl	80004c8 <__aeabi_dmul>
 800880a:	a359      	add	r3, pc, #356	; (adr r3, 8008970 <atan+0x2c8>)
 800880c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008810:	f7f7 fca2 	bl	8000158 <__aeabi_dsub>
 8008814:	4632      	mov	r2, r6
 8008816:	463b      	mov	r3, r7
 8008818:	f7f7 fe56 	bl	80004c8 <__aeabi_dmul>
 800881c:	a356      	add	r3, pc, #344	; (adr r3, 8008978 <atan+0x2d0>)
 800881e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008822:	f7f7 fc99 	bl	8000158 <__aeabi_dsub>
 8008826:	4632      	mov	r2, r6
 8008828:	463b      	mov	r3, r7
 800882a:	f7f7 fe4d 	bl	80004c8 <__aeabi_dmul>
 800882e:	a354      	add	r3, pc, #336	; (adr r3, 8008980 <atan+0x2d8>)
 8008830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008834:	f7f7 fc90 	bl	8000158 <__aeabi_dsub>
 8008838:	4632      	mov	r2, r6
 800883a:	463b      	mov	r3, r7
 800883c:	f7f7 fe44 	bl	80004c8 <__aeabi_dmul>
 8008840:	4602      	mov	r2, r0
 8008842:	460b      	mov	r3, r1
 8008844:	4640      	mov	r0, r8
 8008846:	4649      	mov	r1, r9
 8008848:	f7f7 fc88 	bl	800015c <__adddf3>
 800884c:	4622      	mov	r2, r4
 800884e:	462b      	mov	r3, r5
 8008850:	f7f7 fe3a 	bl	80004c8 <__aeabi_dmul>
 8008854:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008858:	4602      	mov	r2, r0
 800885a:	460b      	mov	r3, r1
 800885c:	d144      	bne.n	80088e8 <atan+0x240>
 800885e:	4620      	mov	r0, r4
 8008860:	4629      	mov	r1, r5
 8008862:	f7f7 fc79 	bl	8000158 <__aeabi_dsub>
 8008866:	e734      	b.n	80086d2 <atan+0x2a>
 8008868:	2200      	movs	r2, #0
 800886a:	4b4c      	ldr	r3, [pc, #304]	; (800899c <atan+0x2f4>)
 800886c:	f7f7 fc74 	bl	8000158 <__aeabi_dsub>
 8008870:	2200      	movs	r2, #0
 8008872:	4606      	mov	r6, r0
 8008874:	460f      	mov	r7, r1
 8008876:	4620      	mov	r0, r4
 8008878:	4629      	mov	r1, r5
 800887a:	4b48      	ldr	r3, [pc, #288]	; (800899c <atan+0x2f4>)
 800887c:	f7f7 fc6e 	bl	800015c <__adddf3>
 8008880:	4602      	mov	r2, r0
 8008882:	460b      	mov	r3, r1
 8008884:	4630      	mov	r0, r6
 8008886:	4639      	mov	r1, r7
 8008888:	f7f7 ff48 	bl	800071c <__aeabi_ddiv>
 800888c:	f04f 0a01 	mov.w	sl, #1
 8008890:	4604      	mov	r4, r0
 8008892:	460d      	mov	r5, r1
 8008894:	e767      	b.n	8008766 <atan+0xbe>
 8008896:	4b43      	ldr	r3, [pc, #268]	; (80089a4 <atan+0x2fc>)
 8008898:	429e      	cmp	r6, r3
 800889a:	da1a      	bge.n	80088d2 <atan+0x22a>
 800889c:	2200      	movs	r2, #0
 800889e:	4b42      	ldr	r3, [pc, #264]	; (80089a8 <atan+0x300>)
 80088a0:	f7f7 fc5a 	bl	8000158 <__aeabi_dsub>
 80088a4:	2200      	movs	r2, #0
 80088a6:	4606      	mov	r6, r0
 80088a8:	460f      	mov	r7, r1
 80088aa:	4620      	mov	r0, r4
 80088ac:	4629      	mov	r1, r5
 80088ae:	4b3e      	ldr	r3, [pc, #248]	; (80089a8 <atan+0x300>)
 80088b0:	f7f7 fe0a 	bl	80004c8 <__aeabi_dmul>
 80088b4:	2200      	movs	r2, #0
 80088b6:	4b39      	ldr	r3, [pc, #228]	; (800899c <atan+0x2f4>)
 80088b8:	f7f7 fc50 	bl	800015c <__adddf3>
 80088bc:	4602      	mov	r2, r0
 80088be:	460b      	mov	r3, r1
 80088c0:	4630      	mov	r0, r6
 80088c2:	4639      	mov	r1, r7
 80088c4:	f7f7 ff2a 	bl	800071c <__aeabi_ddiv>
 80088c8:	f04f 0a02 	mov.w	sl, #2
 80088cc:	4604      	mov	r4, r0
 80088ce:	460d      	mov	r5, r1
 80088d0:	e749      	b.n	8008766 <atan+0xbe>
 80088d2:	4602      	mov	r2, r0
 80088d4:	460b      	mov	r3, r1
 80088d6:	2000      	movs	r0, #0
 80088d8:	4934      	ldr	r1, [pc, #208]	; (80089ac <atan+0x304>)
 80088da:	f7f7 ff1f 	bl	800071c <__aeabi_ddiv>
 80088de:	f04f 0a03 	mov.w	sl, #3
 80088e2:	4604      	mov	r4, r0
 80088e4:	460d      	mov	r5, r1
 80088e6:	e73e      	b.n	8008766 <atan+0xbe>
 80088e8:	4b31      	ldr	r3, [pc, #196]	; (80089b0 <atan+0x308>)
 80088ea:	4e32      	ldr	r6, [pc, #200]	; (80089b4 <atan+0x30c>)
 80088ec:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80088f0:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80088f4:	e9da 2300 	ldrd	r2, r3, [sl]
 80088f8:	f7f7 fc2e 	bl	8000158 <__aeabi_dsub>
 80088fc:	4622      	mov	r2, r4
 80088fe:	462b      	mov	r3, r5
 8008900:	f7f7 fc2a 	bl	8000158 <__aeabi_dsub>
 8008904:	4602      	mov	r2, r0
 8008906:	460b      	mov	r3, r1
 8008908:	e9d6 0100 	ldrd	r0, r1, [r6]
 800890c:	f7f7 fc24 	bl	8000158 <__aeabi_dsub>
 8008910:	f1bb 0f00 	cmp.w	fp, #0
 8008914:	4604      	mov	r4, r0
 8008916:	460d      	mov	r5, r1
 8008918:	f6bf aee4 	bge.w	80086e4 <atan+0x3c>
 800891c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008920:	461d      	mov	r5, r3
 8008922:	e6df      	b.n	80086e4 <atan+0x3c>
 8008924:	4d24      	ldr	r5, [pc, #144]	; (80089b8 <atan+0x310>)
 8008926:	e6dd      	b.n	80086e4 <atan+0x3c>
 8008928:	8800759c 	.word	0x8800759c
 800892c:	7e37e43c 	.word	0x7e37e43c
 8008930:	e322da11 	.word	0xe322da11
 8008934:	3f90ad3a 	.word	0x3f90ad3a
 8008938:	24760deb 	.word	0x24760deb
 800893c:	3fa97b4b 	.word	0x3fa97b4b
 8008940:	a0d03d51 	.word	0xa0d03d51
 8008944:	3fb10d66 	.word	0x3fb10d66
 8008948:	c54c206e 	.word	0xc54c206e
 800894c:	3fb745cd 	.word	0x3fb745cd
 8008950:	920083ff 	.word	0x920083ff
 8008954:	3fc24924 	.word	0x3fc24924
 8008958:	5555550d 	.word	0x5555550d
 800895c:	3fd55555 	.word	0x3fd55555
 8008960:	2c6a6c2f 	.word	0x2c6a6c2f
 8008964:	bfa2b444 	.word	0xbfa2b444
 8008968:	52defd9a 	.word	0x52defd9a
 800896c:	3fadde2d 	.word	0x3fadde2d
 8008970:	af749a6d 	.word	0xaf749a6d
 8008974:	3fb3b0f2 	.word	0x3fb3b0f2
 8008978:	fe231671 	.word	0xfe231671
 800897c:	3fbc71c6 	.word	0x3fbc71c6
 8008980:	9998ebc4 	.word	0x9998ebc4
 8008984:	3fc99999 	.word	0x3fc99999
 8008988:	440fffff 	.word	0x440fffff
 800898c:	7ff00000 	.word	0x7ff00000
 8008990:	54442d18 	.word	0x54442d18
 8008994:	bff921fb 	.word	0xbff921fb
 8008998:	3fdbffff 	.word	0x3fdbffff
 800899c:	3ff00000 	.word	0x3ff00000
 80089a0:	3ff2ffff 	.word	0x3ff2ffff
 80089a4:	40038000 	.word	0x40038000
 80089a8:	3ff80000 	.word	0x3ff80000
 80089ac:	bff00000 	.word	0xbff00000
 80089b0:	08008f28 	.word	0x08008f28
 80089b4:	08008f08 	.word	0x08008f08
 80089b8:	3ff921fb 	.word	0x3ff921fb

080089bc <fabs>:
 80089bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80089c0:	4770      	bx	lr

080089c2 <abort>:
 80089c2:	2006      	movs	r0, #6
 80089c4:	b508      	push	{r3, lr}
 80089c6:	f000 f981 	bl	8008ccc <raise>
 80089ca:	2001      	movs	r0, #1
 80089cc:	f7fc fc56 	bl	800527c <_exit>

080089d0 <__errno>:
 80089d0:	4b01      	ldr	r3, [pc, #4]	; (80089d8 <__errno+0x8>)
 80089d2:	6818      	ldr	r0, [r3, #0]
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop
 80089d8:	2000000c 	.word	0x2000000c

080089dc <__libc_init_array>:
 80089dc:	b570      	push	{r4, r5, r6, lr}
 80089de:	2600      	movs	r6, #0
 80089e0:	4d0c      	ldr	r5, [pc, #48]	; (8008a14 <__libc_init_array+0x38>)
 80089e2:	4c0d      	ldr	r4, [pc, #52]	; (8008a18 <__libc_init_array+0x3c>)
 80089e4:	1b64      	subs	r4, r4, r5
 80089e6:	10a4      	asrs	r4, r4, #2
 80089e8:	42a6      	cmp	r6, r4
 80089ea:	d109      	bne.n	8008a00 <__libc_init_array+0x24>
 80089ec:	f000 f998 	bl	8008d20 <_init>
 80089f0:	2600      	movs	r6, #0
 80089f2:	4d0a      	ldr	r5, [pc, #40]	; (8008a1c <__libc_init_array+0x40>)
 80089f4:	4c0a      	ldr	r4, [pc, #40]	; (8008a20 <__libc_init_array+0x44>)
 80089f6:	1b64      	subs	r4, r4, r5
 80089f8:	10a4      	asrs	r4, r4, #2
 80089fa:	42a6      	cmp	r6, r4
 80089fc:	d105      	bne.n	8008a0a <__libc_init_array+0x2e>
 80089fe:	bd70      	pop	{r4, r5, r6, pc}
 8008a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a04:	4798      	blx	r3
 8008a06:	3601      	adds	r6, #1
 8008a08:	e7ee      	b.n	80089e8 <__libc_init_array+0xc>
 8008a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a0e:	4798      	blx	r3
 8008a10:	3601      	adds	r6, #1
 8008a12:	e7f2      	b.n	80089fa <__libc_init_array+0x1e>
 8008a14:	08008f48 	.word	0x08008f48
 8008a18:	08008f48 	.word	0x08008f48
 8008a1c:	08008f48 	.word	0x08008f48
 8008a20:	08008f54 	.word	0x08008f54

08008a24 <malloc>:
 8008a24:	4b02      	ldr	r3, [pc, #8]	; (8008a30 <malloc+0xc>)
 8008a26:	4601      	mov	r1, r0
 8008a28:	6818      	ldr	r0, [r3, #0]
 8008a2a:	f000 b8a3 	b.w	8008b74 <_malloc_r>
 8008a2e:	bf00      	nop
 8008a30:	2000000c 	.word	0x2000000c

08008a34 <free>:
 8008a34:	4b02      	ldr	r3, [pc, #8]	; (8008a40 <free+0xc>)
 8008a36:	4601      	mov	r1, r0
 8008a38:	6818      	ldr	r0, [r3, #0]
 8008a3a:	f000 b833 	b.w	8008aa4 <_free_r>
 8008a3e:	bf00      	nop
 8008a40:	2000000c 	.word	0x2000000c

08008a44 <memcpy>:
 8008a44:	440a      	add	r2, r1
 8008a46:	4291      	cmp	r1, r2
 8008a48:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a4c:	d100      	bne.n	8008a50 <memcpy+0xc>
 8008a4e:	4770      	bx	lr
 8008a50:	b510      	push	{r4, lr}
 8008a52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a56:	4291      	cmp	r1, r2
 8008a58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a5c:	d1f9      	bne.n	8008a52 <memcpy+0xe>
 8008a5e:	bd10      	pop	{r4, pc}

08008a60 <memmove>:
 8008a60:	4288      	cmp	r0, r1
 8008a62:	b510      	push	{r4, lr}
 8008a64:	eb01 0402 	add.w	r4, r1, r2
 8008a68:	d902      	bls.n	8008a70 <memmove+0x10>
 8008a6a:	4284      	cmp	r4, r0
 8008a6c:	4623      	mov	r3, r4
 8008a6e:	d807      	bhi.n	8008a80 <memmove+0x20>
 8008a70:	1e43      	subs	r3, r0, #1
 8008a72:	42a1      	cmp	r1, r4
 8008a74:	d008      	beq.n	8008a88 <memmove+0x28>
 8008a76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a7e:	e7f8      	b.n	8008a72 <memmove+0x12>
 8008a80:	4601      	mov	r1, r0
 8008a82:	4402      	add	r2, r0
 8008a84:	428a      	cmp	r2, r1
 8008a86:	d100      	bne.n	8008a8a <memmove+0x2a>
 8008a88:	bd10      	pop	{r4, pc}
 8008a8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a92:	e7f7      	b.n	8008a84 <memmove+0x24>

08008a94 <memset>:
 8008a94:	4603      	mov	r3, r0
 8008a96:	4402      	add	r2, r0
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d100      	bne.n	8008a9e <memset+0xa>
 8008a9c:	4770      	bx	lr
 8008a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8008aa2:	e7f9      	b.n	8008a98 <memset+0x4>

08008aa4 <_free_r>:
 8008aa4:	b538      	push	{r3, r4, r5, lr}
 8008aa6:	4605      	mov	r5, r0
 8008aa8:	2900      	cmp	r1, #0
 8008aaa:	d040      	beq.n	8008b2e <_free_r+0x8a>
 8008aac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ab0:	1f0c      	subs	r4, r1, #4
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	bfb8      	it	lt
 8008ab6:	18e4      	addlt	r4, r4, r3
 8008ab8:	f000 f924 	bl	8008d04 <__malloc_lock>
 8008abc:	4a1c      	ldr	r2, [pc, #112]	; (8008b30 <_free_r+0x8c>)
 8008abe:	6813      	ldr	r3, [r2, #0]
 8008ac0:	b933      	cbnz	r3, 8008ad0 <_free_r+0x2c>
 8008ac2:	6063      	str	r3, [r4, #4]
 8008ac4:	6014      	str	r4, [r2, #0]
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008acc:	f000 b920 	b.w	8008d10 <__malloc_unlock>
 8008ad0:	42a3      	cmp	r3, r4
 8008ad2:	d908      	bls.n	8008ae6 <_free_r+0x42>
 8008ad4:	6820      	ldr	r0, [r4, #0]
 8008ad6:	1821      	adds	r1, r4, r0
 8008ad8:	428b      	cmp	r3, r1
 8008ada:	bf01      	itttt	eq
 8008adc:	6819      	ldreq	r1, [r3, #0]
 8008ade:	685b      	ldreq	r3, [r3, #4]
 8008ae0:	1809      	addeq	r1, r1, r0
 8008ae2:	6021      	streq	r1, [r4, #0]
 8008ae4:	e7ed      	b.n	8008ac2 <_free_r+0x1e>
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	b10b      	cbz	r3, 8008af0 <_free_r+0x4c>
 8008aec:	42a3      	cmp	r3, r4
 8008aee:	d9fa      	bls.n	8008ae6 <_free_r+0x42>
 8008af0:	6811      	ldr	r1, [r2, #0]
 8008af2:	1850      	adds	r0, r2, r1
 8008af4:	42a0      	cmp	r0, r4
 8008af6:	d10b      	bne.n	8008b10 <_free_r+0x6c>
 8008af8:	6820      	ldr	r0, [r4, #0]
 8008afa:	4401      	add	r1, r0
 8008afc:	1850      	adds	r0, r2, r1
 8008afe:	4283      	cmp	r3, r0
 8008b00:	6011      	str	r1, [r2, #0]
 8008b02:	d1e0      	bne.n	8008ac6 <_free_r+0x22>
 8008b04:	6818      	ldr	r0, [r3, #0]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	4401      	add	r1, r0
 8008b0a:	6011      	str	r1, [r2, #0]
 8008b0c:	6053      	str	r3, [r2, #4]
 8008b0e:	e7da      	b.n	8008ac6 <_free_r+0x22>
 8008b10:	d902      	bls.n	8008b18 <_free_r+0x74>
 8008b12:	230c      	movs	r3, #12
 8008b14:	602b      	str	r3, [r5, #0]
 8008b16:	e7d6      	b.n	8008ac6 <_free_r+0x22>
 8008b18:	6820      	ldr	r0, [r4, #0]
 8008b1a:	1821      	adds	r1, r4, r0
 8008b1c:	428b      	cmp	r3, r1
 8008b1e:	bf01      	itttt	eq
 8008b20:	6819      	ldreq	r1, [r3, #0]
 8008b22:	685b      	ldreq	r3, [r3, #4]
 8008b24:	1809      	addeq	r1, r1, r0
 8008b26:	6021      	streq	r1, [r4, #0]
 8008b28:	6063      	str	r3, [r4, #4]
 8008b2a:	6054      	str	r4, [r2, #4]
 8008b2c:	e7cb      	b.n	8008ac6 <_free_r+0x22>
 8008b2e:	bd38      	pop	{r3, r4, r5, pc}
 8008b30:	20000588 	.word	0x20000588

08008b34 <sbrk_aligned>:
 8008b34:	b570      	push	{r4, r5, r6, lr}
 8008b36:	4e0e      	ldr	r6, [pc, #56]	; (8008b70 <sbrk_aligned+0x3c>)
 8008b38:	460c      	mov	r4, r1
 8008b3a:	6831      	ldr	r1, [r6, #0]
 8008b3c:	4605      	mov	r5, r0
 8008b3e:	b911      	cbnz	r1, 8008b46 <sbrk_aligned+0x12>
 8008b40:	f000 f88c 	bl	8008c5c <_sbrk_r>
 8008b44:	6030      	str	r0, [r6, #0]
 8008b46:	4621      	mov	r1, r4
 8008b48:	4628      	mov	r0, r5
 8008b4a:	f000 f887 	bl	8008c5c <_sbrk_r>
 8008b4e:	1c43      	adds	r3, r0, #1
 8008b50:	d00a      	beq.n	8008b68 <sbrk_aligned+0x34>
 8008b52:	1cc4      	adds	r4, r0, #3
 8008b54:	f024 0403 	bic.w	r4, r4, #3
 8008b58:	42a0      	cmp	r0, r4
 8008b5a:	d007      	beq.n	8008b6c <sbrk_aligned+0x38>
 8008b5c:	1a21      	subs	r1, r4, r0
 8008b5e:	4628      	mov	r0, r5
 8008b60:	f000 f87c 	bl	8008c5c <_sbrk_r>
 8008b64:	3001      	adds	r0, #1
 8008b66:	d101      	bne.n	8008b6c <sbrk_aligned+0x38>
 8008b68:	f04f 34ff 	mov.w	r4, #4294967295
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	bd70      	pop	{r4, r5, r6, pc}
 8008b70:	2000058c 	.word	0x2000058c

08008b74 <_malloc_r>:
 8008b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b78:	1ccd      	adds	r5, r1, #3
 8008b7a:	f025 0503 	bic.w	r5, r5, #3
 8008b7e:	3508      	adds	r5, #8
 8008b80:	2d0c      	cmp	r5, #12
 8008b82:	bf38      	it	cc
 8008b84:	250c      	movcc	r5, #12
 8008b86:	2d00      	cmp	r5, #0
 8008b88:	4607      	mov	r7, r0
 8008b8a:	db01      	blt.n	8008b90 <_malloc_r+0x1c>
 8008b8c:	42a9      	cmp	r1, r5
 8008b8e:	d905      	bls.n	8008b9c <_malloc_r+0x28>
 8008b90:	230c      	movs	r3, #12
 8008b92:	2600      	movs	r6, #0
 8008b94:	603b      	str	r3, [r7, #0]
 8008b96:	4630      	mov	r0, r6
 8008b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b9c:	4e2e      	ldr	r6, [pc, #184]	; (8008c58 <_malloc_r+0xe4>)
 8008b9e:	f000 f8b1 	bl	8008d04 <__malloc_lock>
 8008ba2:	6833      	ldr	r3, [r6, #0]
 8008ba4:	461c      	mov	r4, r3
 8008ba6:	bb34      	cbnz	r4, 8008bf6 <_malloc_r+0x82>
 8008ba8:	4629      	mov	r1, r5
 8008baa:	4638      	mov	r0, r7
 8008bac:	f7ff ffc2 	bl	8008b34 <sbrk_aligned>
 8008bb0:	1c43      	adds	r3, r0, #1
 8008bb2:	4604      	mov	r4, r0
 8008bb4:	d14d      	bne.n	8008c52 <_malloc_r+0xde>
 8008bb6:	6834      	ldr	r4, [r6, #0]
 8008bb8:	4626      	mov	r6, r4
 8008bba:	2e00      	cmp	r6, #0
 8008bbc:	d140      	bne.n	8008c40 <_malloc_r+0xcc>
 8008bbe:	6823      	ldr	r3, [r4, #0]
 8008bc0:	4631      	mov	r1, r6
 8008bc2:	4638      	mov	r0, r7
 8008bc4:	eb04 0803 	add.w	r8, r4, r3
 8008bc8:	f000 f848 	bl	8008c5c <_sbrk_r>
 8008bcc:	4580      	cmp	r8, r0
 8008bce:	d13a      	bne.n	8008c46 <_malloc_r+0xd2>
 8008bd0:	6821      	ldr	r1, [r4, #0]
 8008bd2:	3503      	adds	r5, #3
 8008bd4:	1a6d      	subs	r5, r5, r1
 8008bd6:	f025 0503 	bic.w	r5, r5, #3
 8008bda:	3508      	adds	r5, #8
 8008bdc:	2d0c      	cmp	r5, #12
 8008bde:	bf38      	it	cc
 8008be0:	250c      	movcc	r5, #12
 8008be2:	4638      	mov	r0, r7
 8008be4:	4629      	mov	r1, r5
 8008be6:	f7ff ffa5 	bl	8008b34 <sbrk_aligned>
 8008bea:	3001      	adds	r0, #1
 8008bec:	d02b      	beq.n	8008c46 <_malloc_r+0xd2>
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	442b      	add	r3, r5
 8008bf2:	6023      	str	r3, [r4, #0]
 8008bf4:	e00e      	b.n	8008c14 <_malloc_r+0xa0>
 8008bf6:	6822      	ldr	r2, [r4, #0]
 8008bf8:	1b52      	subs	r2, r2, r5
 8008bfa:	d41e      	bmi.n	8008c3a <_malloc_r+0xc6>
 8008bfc:	2a0b      	cmp	r2, #11
 8008bfe:	d916      	bls.n	8008c2e <_malloc_r+0xba>
 8008c00:	1961      	adds	r1, r4, r5
 8008c02:	42a3      	cmp	r3, r4
 8008c04:	6025      	str	r5, [r4, #0]
 8008c06:	bf18      	it	ne
 8008c08:	6059      	strne	r1, [r3, #4]
 8008c0a:	6863      	ldr	r3, [r4, #4]
 8008c0c:	bf08      	it	eq
 8008c0e:	6031      	streq	r1, [r6, #0]
 8008c10:	5162      	str	r2, [r4, r5]
 8008c12:	604b      	str	r3, [r1, #4]
 8008c14:	4638      	mov	r0, r7
 8008c16:	f104 060b 	add.w	r6, r4, #11
 8008c1a:	f000 f879 	bl	8008d10 <__malloc_unlock>
 8008c1e:	f026 0607 	bic.w	r6, r6, #7
 8008c22:	1d23      	adds	r3, r4, #4
 8008c24:	1af2      	subs	r2, r6, r3
 8008c26:	d0b6      	beq.n	8008b96 <_malloc_r+0x22>
 8008c28:	1b9b      	subs	r3, r3, r6
 8008c2a:	50a3      	str	r3, [r4, r2]
 8008c2c:	e7b3      	b.n	8008b96 <_malloc_r+0x22>
 8008c2e:	6862      	ldr	r2, [r4, #4]
 8008c30:	42a3      	cmp	r3, r4
 8008c32:	bf0c      	ite	eq
 8008c34:	6032      	streq	r2, [r6, #0]
 8008c36:	605a      	strne	r2, [r3, #4]
 8008c38:	e7ec      	b.n	8008c14 <_malloc_r+0xa0>
 8008c3a:	4623      	mov	r3, r4
 8008c3c:	6864      	ldr	r4, [r4, #4]
 8008c3e:	e7b2      	b.n	8008ba6 <_malloc_r+0x32>
 8008c40:	4634      	mov	r4, r6
 8008c42:	6876      	ldr	r6, [r6, #4]
 8008c44:	e7b9      	b.n	8008bba <_malloc_r+0x46>
 8008c46:	230c      	movs	r3, #12
 8008c48:	4638      	mov	r0, r7
 8008c4a:	603b      	str	r3, [r7, #0]
 8008c4c:	f000 f860 	bl	8008d10 <__malloc_unlock>
 8008c50:	e7a1      	b.n	8008b96 <_malloc_r+0x22>
 8008c52:	6025      	str	r5, [r4, #0]
 8008c54:	e7de      	b.n	8008c14 <_malloc_r+0xa0>
 8008c56:	bf00      	nop
 8008c58:	20000588 	.word	0x20000588

08008c5c <_sbrk_r>:
 8008c5c:	b538      	push	{r3, r4, r5, lr}
 8008c5e:	2300      	movs	r3, #0
 8008c60:	4d05      	ldr	r5, [pc, #20]	; (8008c78 <_sbrk_r+0x1c>)
 8008c62:	4604      	mov	r4, r0
 8008c64:	4608      	mov	r0, r1
 8008c66:	602b      	str	r3, [r5, #0]
 8008c68:	f7fc fb12 	bl	8005290 <_sbrk>
 8008c6c:	1c43      	adds	r3, r0, #1
 8008c6e:	d102      	bne.n	8008c76 <_sbrk_r+0x1a>
 8008c70:	682b      	ldr	r3, [r5, #0]
 8008c72:	b103      	cbz	r3, 8008c76 <_sbrk_r+0x1a>
 8008c74:	6023      	str	r3, [r4, #0]
 8008c76:	bd38      	pop	{r3, r4, r5, pc}
 8008c78:	20000590 	.word	0x20000590

08008c7c <_raise_r>:
 8008c7c:	291f      	cmp	r1, #31
 8008c7e:	b538      	push	{r3, r4, r5, lr}
 8008c80:	4604      	mov	r4, r0
 8008c82:	460d      	mov	r5, r1
 8008c84:	d904      	bls.n	8008c90 <_raise_r+0x14>
 8008c86:	2316      	movs	r3, #22
 8008c88:	6003      	str	r3, [r0, #0]
 8008c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c8e:	bd38      	pop	{r3, r4, r5, pc}
 8008c90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008c92:	b112      	cbz	r2, 8008c9a <_raise_r+0x1e>
 8008c94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c98:	b94b      	cbnz	r3, 8008cae <_raise_r+0x32>
 8008c9a:	4620      	mov	r0, r4
 8008c9c:	f000 f830 	bl	8008d00 <_getpid_r>
 8008ca0:	462a      	mov	r2, r5
 8008ca2:	4601      	mov	r1, r0
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008caa:	f000 b817 	b.w	8008cdc <_kill_r>
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d00a      	beq.n	8008cc8 <_raise_r+0x4c>
 8008cb2:	1c59      	adds	r1, r3, #1
 8008cb4:	d103      	bne.n	8008cbe <_raise_r+0x42>
 8008cb6:	2316      	movs	r3, #22
 8008cb8:	6003      	str	r3, [r0, #0]
 8008cba:	2001      	movs	r0, #1
 8008cbc:	e7e7      	b.n	8008c8e <_raise_r+0x12>
 8008cbe:	2400      	movs	r4, #0
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008cc6:	4798      	blx	r3
 8008cc8:	2000      	movs	r0, #0
 8008cca:	e7e0      	b.n	8008c8e <_raise_r+0x12>

08008ccc <raise>:
 8008ccc:	4b02      	ldr	r3, [pc, #8]	; (8008cd8 <raise+0xc>)
 8008cce:	4601      	mov	r1, r0
 8008cd0:	6818      	ldr	r0, [r3, #0]
 8008cd2:	f7ff bfd3 	b.w	8008c7c <_raise_r>
 8008cd6:	bf00      	nop
 8008cd8:	2000000c 	.word	0x2000000c

08008cdc <_kill_r>:
 8008cdc:	b538      	push	{r3, r4, r5, lr}
 8008cde:	2300      	movs	r3, #0
 8008ce0:	4d06      	ldr	r5, [pc, #24]	; (8008cfc <_kill_r+0x20>)
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	4608      	mov	r0, r1
 8008ce6:	4611      	mov	r1, r2
 8008ce8:	602b      	str	r3, [r5, #0]
 8008cea:	f7fc fab7 	bl	800525c <_kill>
 8008cee:	1c43      	adds	r3, r0, #1
 8008cf0:	d102      	bne.n	8008cf8 <_kill_r+0x1c>
 8008cf2:	682b      	ldr	r3, [r5, #0]
 8008cf4:	b103      	cbz	r3, 8008cf8 <_kill_r+0x1c>
 8008cf6:	6023      	str	r3, [r4, #0]
 8008cf8:	bd38      	pop	{r3, r4, r5, pc}
 8008cfa:	bf00      	nop
 8008cfc:	20000590 	.word	0x20000590

08008d00 <_getpid_r>:
 8008d00:	f7fc baa5 	b.w	800524e <_getpid>

08008d04 <__malloc_lock>:
 8008d04:	4801      	ldr	r0, [pc, #4]	; (8008d0c <__malloc_lock+0x8>)
 8008d06:	f000 b809 	b.w	8008d1c <__retarget_lock_acquire_recursive>
 8008d0a:	bf00      	nop
 8008d0c:	20000594 	.word	0x20000594

08008d10 <__malloc_unlock>:
 8008d10:	4801      	ldr	r0, [pc, #4]	; (8008d18 <__malloc_unlock+0x8>)
 8008d12:	f000 b804 	b.w	8008d1e <__retarget_lock_release_recursive>
 8008d16:	bf00      	nop
 8008d18:	20000594 	.word	0x20000594

08008d1c <__retarget_lock_acquire_recursive>:
 8008d1c:	4770      	bx	lr

08008d1e <__retarget_lock_release_recursive>:
 8008d1e:	4770      	bx	lr

08008d20 <_init>:
 8008d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d22:	bf00      	nop
 8008d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d26:	bc08      	pop	{r3}
 8008d28:	469e      	mov	lr, r3
 8008d2a:	4770      	bx	lr

08008d2c <_fini>:
 8008d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d2e:	bf00      	nop
 8008d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d32:	bc08      	pop	{r3}
 8008d34:	469e      	mov	lr, r3
 8008d36:	4770      	bx	lr

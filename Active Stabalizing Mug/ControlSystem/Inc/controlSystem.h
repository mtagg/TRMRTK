/*
 * controlSystem.h
 *
 *  Created on: Nov 10, 2022
 *      Author: mmmta
 *
 *      This file contains any logic around the control system, such as PID controls, normalizing and interpretting data.
 *      Many of the variables and decisions made within the ControlClass class will then be used to interface the MP6543H and MC3479 hardware.
 *
 */
#ifndef SRC_CONTROLSYSTEM_H_
#define SRC_CONTROLSYSTEM_H_
//Include HAL to allow passed-by-reference HAL objects
#include "stm32f1xx_hal.h"






class ControlClass{
public:
/*
 * Class Variables
 */
	int8_t x_allowableAngle = 10;
	int8_t y_allowableAngle = 10;
	int16_t x_nominalAngle = 0;
	int16_t y_nominalAngle = 0;

	// look-up table for determining theta based on :
	// arctan(theta) = z_acceleration/x/y_acceleration ratios
	// the index corresponding to a ratio is the angle in degrees from 0 to 89 degrees

	double angleTable [90] =
	{
			0.0, 0.0175, 0.0349, 0.0524, 0.0699, 0.0875, 0.1051, 0.1228, 0.1405, 0.1584, 		// 0 - 9 degrees
			0.1763, 0.1944, 0.2126, 0.2309, 0.2493, 0.2679, 0.2867, 0.3057, 0.3249, 0.3443,
			0.364, 0.3839, 0.404, 0.4245, 0.4452, 0.4663, 0.4877, 0.5095, 0.5317, 0.5543,
			0.5774, 0.6009, 0.6249, 0.6494, 0.6745, 0.7002, 0.7265, 0.7536, 0.7813, 0.8098,
			0.8391, 0.8693, 0.9004, 0.9325, 0.9657, 1.0, 1.0355, 1.0724, 1.1106, 1.1504,
			1.1918, 1.2349, 1.2799, 1.327, 1.3764, 1.4281, 1.4826, 1.5399, 1.6003, 1.6643,
			1.7321, 1.804, 1.8807, 1.9626, 2.0503, 2.1445, 2.246, 2.3559, 2.4751, 2.6051,
			2.7475, 2.9042, 3.0777, 3.2709, 3.4874, 3.7321, 4.0108, 4.3315, 4.7046, 5.1446,
			5.6713, 6.3138, 7.1154, 8.1443, 9.5144, 11.4301, 14.3007, 19.0811, 28.6363, 57.29	// 80-89 degrees
	};
//	double angleTable [900] =
//	{
//			0.0, 0.0017, 0.0035, 0.0052, 0.007, 0.0087, 0.0105, 0.0122, 0.014, 0.0157,			// 0 - 0.9 degrees
//			0.0175, 0.0192, 0.0209, 0.0227, 0.0244, 0.0262, 0.0279, 0.0297, 0.0314, 0.0332,
//			0.0349, 0.0367, 0.0384, 0.0402, 0.0419, 0.0437, 0.0454, 0.0472, 0.0489, 0.0507,
//			0.0524, 0.0542, 0.0559, 0.0577, 0.0594, 0.0612, 0.0629, 0.0647, 0.0664, 0.0682,
//			0.0699, 0.0717, 0.0734, 0.0752, 0.0769, 0.0787, 0.0805, 0.0822, 0.084, 0.0857,
//			0.0875, 0.0892, 0.091, 0.0928, 0.0945, 0.0963, 0.0981, 0.0998, 0.1016, 0.1033,
//			0.1051, 0.1069, 0.1086, 0.1104, 0.1122, 0.1139, 0.1157, 0.1175, 0.1192, 0.121,
//			0.1228, 0.1246, 0.1263, 0.1281, 0.1299, 0.1317, 0.1334, 0.1352, 0.137, 0.1388,
//			0.1405, 0.1423, 0.1441, 0.1459, 0.1477, 0.1495, 0.1512, 0.153, 0.1548, 0.1566,
//			0.1584, 0.1602, 0.162, 0.1638, 0.1655, 0.1673, 0.1691, 0.1709, 0.1727, 0.1745,
//			0.1763, 0.1781, 0.1799, 0.1817, 0.1835, 0.1853, 0.1871, 0.189, 0.1908, 0.1926,		// 10.0 - 10.9 degrees
//			0.1944, 0.1962, 0.198, 0.1998, 0.2016, 0.2035, 0.2053, 0.2071, 0.2089, 0.2107,
//			0.2126, 0.2144, 0.2162, 0.218, 0.2199, 0.2217, 0.2235, 0.2254, 0.2272, 0.229,
//			0.2309, 0.2327, 0.2345, 0.2364, 0.2382, 0.2401, 0.2419, 0.2438, 0.2456, 0.2475,
//			0.2493, 0.2512, 0.253, 0.2549, 0.2568, 0.2586, 0.2605, 0.2623, 0.2642, 0.2661,
//			0.2679, 0.2698, 0.2717, 0.2736, 0.2754, 0.2773, 0.2792, 0.2811, 0.283, 0.2849,
//			0.2867, 0.2886, 0.2905, 0.2924, 0.2943, 0.2962, 0.2981, 0.3, 0.3019, 0.3038,
//			0.3057, 0.3076, 0.3096, 0.3115, 0.3134, 0.3153, 0.3172, 0.3191, 0.3211, 0.323,
//			0.3249, 0.3269, 0.3288, 0.3307, 0.3327, 0.3346, 0.3365, 0.3385, 0.3404, 0.3424,
//			0.3443, 0.3463, 0.3482, 0.3502, 0.3522, 0.3541, 0.3561, 0.3581, 0.36, 0.362,
//			0.364, 0.3659, 0.3679, 0.3699, 0.3719, 0.3739, 0.3759, 0.3779, 0.3799, 0.3819,		// 20.0 - 20.9 degrees
//			0.3839, 0.3859, 0.3879, 0.3899, 0.3919, 0.3939, 0.3959, 0.3979, 0.4, 0.402,
//			0.404, 0.4061, 0.4081, 0.4101, 0.4122, 0.4142, 0.4163, 0.4183, 0.4204, 0.4224,
//			0.4245, 0.4265, 0.4286, 0.4307, 0.4327, 0.4348, 0.4369, 0.439, 0.4411, 0.4431,
//			0.4452, 0.4473, 0.4494, 0.4515, 0.4536, 0.4557, 0.4578, 0.4599, 0.4621, 0.4642,
//			0.4663, 0.4684, 0.4706, 0.4727, 0.4748, 0.477, 0.4791, 0.4813, 0.4834, 0.4856,
//			0.4877, 0.4899, 0.4921, 0.4942, 0.4964, 0.4986, 0.5008, 0.5029, 0.5051, 0.5073,
//			0.5095, 0.5117, 0.5139, 0.5161, 0.5184, 0.5206, 0.5228, 0.525, 0.5272, 0.5295,
//			0.5317, 0.534, 0.5362, 0.5384, 0.5407, 0.543, 0.5452, 0.5475, 0.5498, 0.552,
//			0.5543, 0.5566, 0.5589, 0.5612, 0.5635, 0.5658, 0.5681, 0.5704, 0.5727, 0.575,
//			0.5774, 0.5797, 0.582, 0.5844, 0.5867, 0.589, 0.5914, 0.5938, 0.5961, 0.5985,		// 30.0 - 30.9 degrees
//			0.6009, 0.6032, 0.6056, 0.608, 0.6104, 0.6128, 0.6152, 0.6176, 0.62, 0.6224,
//			0.6249, 0.6273, 0.6297, 0.6322, 0.6346, 0.6371, 0.6395, 0.642, 0.6445, 0.6469,
//			0.6494, 0.6519, 0.6544, 0.6569, 0.6594, 0.6619, 0.6644, 0.6669, 0.6694, 0.672,
//			0.6745, 0.6771, 0.6796, 0.6822, 0.6847, 0.6873, 0.6899, 0.6924, 0.695, 0.6976,
//			0.7002, 0.7028, 0.7054, 0.708, 0.7107, 0.7133, 0.7159, 0.7186, 0.7212, 0.7239,
//			0.7265, 0.7292, 0.7319, 0.7346, 0.7373, 0.74, 0.7427, 0.7454, 0.7481, 0.7508,
//			0.7536, 0.7563, 0.759, 0.7618, 0.7646, 0.7673, 0.7701, 0.7729, 0.7757, 0.7785,
//			0.7813, 0.7841, 0.7869, 0.7898, 0.7926, 0.7954, 0.7983, 0.8012, 0.804, 0.8069,
//			0.8098, 0.8127, 0.8156, 0.8185, 0.8214, 0.8243, 0.8273, 0.8302, 0.8332, 0.8361,
//			0.8391, 0.8421, 0.8451, 0.8481, 0.8511, 0.8541, 0.8571, 0.8601, 0.8632, 0.8662,		// 40.0 = 40.9 degrees
//			0.8693, 0.8724, 0.8754, 0.8785, 0.8816, 0.8847, 0.8878, 0.891, 0.8941, 0.8972,
//			0.9004, 0.9036, 0.9067, 0.9099, 0.9131, 0.9163, 0.9195, 0.9228, 0.926, 0.9293,
//			0.9325, 0.9358, 0.9391, 0.9424, 0.9457, 0.949, 0.9523, 0.9556, 0.959, 0.9623,
//			0.9657, 0.9691, 0.9725, 0.9759, 0.9793, 0.9827, 0.9861, 0.9896, 0.993, 0.9965,
//			1.0, 1.0035, 1.007, 1.0105, 1.0141, 1.0176, 1.0212, 1.0247, 1.0283, 1.0319,
//			1.0355, 1.0392, 1.0428, 1.0464, 1.0501, 1.0538, 1.0575, 1.0612, 1.0649, 1.0686,
//			1.0724, 1.0761, 1.0799, 1.0837, 1.0875, 1.0913, 1.0951, 1.099, 1.1028, 1.1067,
//			1.1106, 1.1145, 1.1184, 1.1224, 1.1263, 1.1303, 1.1343, 1.1383, 1.1423, 1.1463,
//			1.1504, 1.1544, 1.1585, 1.1626, 1.1667, 1.1708, 1.175, 1.1792, 1.1833, 1.1875,
//			1.1918, 1.196, 1.2002, 1.2045, 1.2088, 1.2131, 1.2174, 1.2218, 1.2261, 1.2305,		// 50.0 - 50.9 degrees
//			1.2349, 1.2393, 1.2437, 1.2482, 1.2527, 1.2572, 1.2617, 1.2662, 1.2708, 1.2753,
//			1.2799, 1.2846, 1.2892, 1.2938, 1.2985, 1.3032, 1.3079, 1.3127, 1.3175, 1.3222,
//			1.327, 1.3319, 1.3367, 1.3416, 1.3465, 1.3514, 1.3564, 1.3613, 1.3663, 1.3713,
//			1.3764, 1.3814, 1.3865, 1.3916, 1.3968, 1.4019, 1.4071, 1.4124, 1.4176, 1.4229,
//			1.4281, 1.4335, 1.4388, 1.4442, 1.4496, 1.455, 1.4605, 1.4659, 1.4715, 1.477,
//			1.4826, 1.4882, 1.4938, 1.4994, 1.5051, 1.5108, 1.5166, 1.5224, 1.5282, 1.534,
//			1.5399, 1.5458, 1.5517, 1.5577, 1.5637, 1.5697, 1.5757, 1.5818, 1.588, 1.5941,
//			1.6003, 1.6066, 1.6128, 1.6191, 1.6255, 1.6319, 1.6383, 1.6447, 1.6512, 1.6577,
//			1.6643, 1.6709, 1.6775, 1.6842, 1.6909, 1.6977, 1.7045, 1.7113, 1.7182, 1.7251,
//			1.7321, 1.7391, 1.7461, 1.7532, 1.7603, 1.7675, 1.7747, 1.782, 1.7893, 1.7966,		// 60.0 - 60.9 degrees
//			1.804, 1.8115, 1.819, 1.8265, 1.8341, 1.8418, 1.8495, 1.8572, 1.865, 1.8728,
//			1.8807, 1.8887, 1.8967, 1.9047, 1.9128, 1.921, 1.9292, 1.9375, 1.9458, 1.9542,
//			1.9626, 1.9711, 1.9797, 1.9883, 1.997, 2.0057, 2.0145, 2.0233, 2.0323, 2.0413,
//			2.0503, 2.0594, 2.0686, 2.0778, 2.0872, 2.0965, 2.106, 2.1155, 2.1251, 2.1348,
//			2.1445, 2.1543, 2.1642, 2.1742, 2.1842, 2.1943, 2.2045, 2.2148, 2.2251, 2.2355,
//			2.246, 2.2566, 2.2673, 2.2781, 2.2889, 2.2998, 2.3109, 2.322, 2.3332, 2.3445,
//			2.3559, 2.3673, 2.3789, 2.3906, 2.4023, 2.4142, 2.4262, 2.4383, 2.4504, 2.4627,
//			2.4751, 2.4876, 2.5002, 2.5129, 2.5257, 2.5386, 2.5517, 2.5649, 2.5782, 2.5916,
//			2.6051, 2.6187, 2.6325, 2.6464, 2.6605, 2.6746, 2.6889, 2.7034, 2.7179, 2.7326,
//			2.7475, 2.7625, 2.7776, 2.7929, 2.8083, 2.8239, 2.8397, 2.8556, 2.8716, 2.8878,		// 70.0 - 70.9 degrees
//			2.9042, 2.9208, 2.9375, 2.9544, 2.9714, 2.9887, 3.0061, 3.0237, 3.0415, 3.0595,
//			3.0777, 3.0961, 3.1146, 3.1334, 3.1524, 3.1716, 3.191, 3.2106, 3.2305, 3.2506,
//			3.2709, 3.2914, 3.3122, 3.3332, 3.3544, 3.3759, 3.3977, 3.4197, 3.442, 3.4646,
//			3.4874, 3.5105, 3.5339, 3.5576, 3.5816, 3.6059, 3.6305, 3.6554, 3.6806, 3.7062,
//			3.7321, 3.7583, 3.7848, 3.8118, 3.8391, 3.8667, 3.8947, 3.9232, 3.952, 3.9812,
//			4.0108, 4.0408, 4.0713, 4.1022, 4.1335, 4.1653, 4.1976, 4.2303, 4.2635, 4.2972,
//			4.3315, 4.3662, 4.4015, 4.4373, 4.4737, 4.5107, 4.5483, 4.5864, 4.6252, 4.6646,
//			4.7046, 4.7453, 4.7867, 4.8288, 4.8716, 4.9152, 4.9594, 5.0045, 5.0504, 5.097,
//			5.1446, 5.1929, 5.2422, 5.2924, 5.3435, 5.3955, 5.4486, 5.5026, 5.5578, 5.614,
//			5.6713, 5.7297, 5.7894, 5.8502, 5.9124, 5.9758, 6.0405, 6.1066, 6.1742, 6.2432,		// 80.0 - 80.9 degrees
//			6.3138, 6.3859, 6.4596, 6.535, 6.6122, 6.6912, 6.772, 6.8548, 6.9395, 7.0264,
//			7.1154, 7.2066, 7.3002, 7.3962, 7.4947, 7.5958, 7.6996, 7.8062, 7.9158, 8.0285,
//			8.1443, 8.2636, 8.3863, 8.5126, 8.6427, 8.7769, 8.9152, 9.0579, 9.2052, 9.3572,
//			9.5144, 9.6768, 9.8448, 10.0187, 10.1988, 10.3854, 10.5789, 10.7797, 10.9882, 11.2048,
//			11.4301, 11.6645, 11.9087, 12.1632, 12.4288, 12.7062, 12.9962, 13.2996, 13.6174, 13.9507,
//			14.3007, 14.6685, 15.0557, 15.4638, 15.8945, 16.3499, 16.8319, 17.3432, 17.8863, 18.4645,
//			19.0811, 19.7403, 20.4465, 21.2049, 22.0217, 22.9038, 23.8593, 24.8978, 26.0307, 27.2715,
//			28.6363, 30.1446, 31.8205, 33.6935, 35.8006, 38.1885, 40.9174, 44.0661, 47.7395, 52.0807,
//			57.29, 63.6567, 71.6151, 81.847, 95.4895, 114.5887, 143.2371, 190.9842, 286.4777, 572.9572 	// 89.0 - 89.9 degrees
//
//	};


/*
 * ControlClass Function-Headers:
 */

	// takes a double representing arctan(theta) and
	// returns signed 16bit theta value from -90 to + 90
	int16_t lookupAngle(int16_t z_acc, int16_t axis_acc);

	// Wrapper
	// Returns theta as the arctan of the ratio between data/z with angles between -90 and +90 degrees
	// where data is x or y accelerometer data values
	int16_t normalizeTheta(uint8_t data0, uint8_t data1, uint8_t z0, uint8_t z1);

	bool updateControlSystem(int16_t x_nominal, int16_t y_nominal, int8_t x_allowable, int8_t y_allowable);

	uint8_t x_needCorrection(int16_t theta);
	uint8_t y_needCorrection(int16_t theta);

	uint8_t x_calcPwm(int16_t x_nominal, int16_t x_theta, int16_t y_nominal, int16_t y_theta);
	uint8_t y_calcPwm(int16_t x_nominal, int16_t x_theta, int16_t y_nominal, int16_t y_theta);


};

extern ControlClass ControlSystem;


#endif /* SRC_CONTROLSYSTEM_H_ */

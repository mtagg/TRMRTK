/*
 * MC3479.cpp
 *
 *  Created on: Oct 9, 2022
 *      Author: mmmta
 */
//TODO: Add try/except or assertion clauses to all methods
#include "../Inc/MC3479.h"


MC3479Class MC3479;

// Set the MC3479's I2C object and initialize the device I
bool MC3479Class::setSerialI2C(I2C_TypeDef * i2c, uint8_t devId)
{
	this->_I2C1 = i2c;
	this->I2C_DEVICE_ID = devId;
	return 1; // Return Success
}

// Set the MC3479's SPI object
bool MC3479Class::setSerialSPI(SPI_HandleTypeDef * spi)
{
	this->_SPI1 = spi;
	return 1; // Return Success
}

// Read from a register using SPI
bool MC3479Class::SPI_readRegister(uint8_t reg, GPIO_TypeDef csn_GPIO, uint16_t csn_PIN, uint8_t* data)
{

	uint8_t spiBytes[2];
	spiBytes[0] = SPIread_REG && reg;
	spiBytes[1] = SPIread_BYTE2;
	HAL_GPIO_WritePin(&csn_GPIO, csn_PIN, GPIO_PIN_RESET);
	HAL_SPI_Transmit(_SPI1, spiBytes, sizeof(spiBytes), 10);
	HAL_SPI_Receive(_SPI1, data, REG_BYTES_LEN, 10);
	HAL_GPIO_WritePin(&csn_GPIO, csn_PIN, GPIO_PIN_SET);
	return 1;
}

// Write to a register using SPI
uint8_t MC3479Class::SPI_writeRegister(uint8_t reg, GPIO_TypeDef csn_GPIO, uint16_t csn_PIN, uint8_t data)
{
	// Write data to reg:
	uint8_t spiBytes[2];
	spiBytes[0] = SPIwrite_REG && reg;
	spiBytes[1] = data;
	HAL_GPIO_WritePin(&csn_GPIO, csn_PIN, GPIO_PIN_RESET);
	HAL_SPI_Transmit(_SPI1, spiBytes, sizeof(spiBytes), 10);
	HAL_GPIO_WritePin(&csn_GPIO, csn_PIN, GPIO_PIN_SET);

	// Read back the register and return the bytes:
	uint8_t regReadBack = 0;
	MC3479.SPI_readRegister(reg, csn_GPIO, csn_PIN, &regReadBack);
	return regReadBack;
}

// Read from a register using SPI
bool burstSPI_readRegister(uint8_t reg, GPIO_TypeDef csn_GPIO, uint16_t csn_PIN, uint8_t* data)
{
	return 1;
}

// Write to a register using SPI
bool burstSPI_writeRegister(uint8_t reg, GPIO_TypeDef csn_GPIO, uint16_t csn_PIN, uint8_t data)
{
	return 1;
}

// Read from a register using I2C
uint8_t MC3479Class::I2C_readRegister(uint8_t reg, uint8_t* data)
{
	return 1;
}

// Write to a register using I2C
uint8_t MC3479Class::I2C_writeRegister(uint8_t reg, uint8_t data)
{return 1;}


// Perform the initial MC3479 hard-coded configuration
void MC3479Class::configAccelerometer(){


	return;

}



